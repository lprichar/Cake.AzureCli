
using Cake.Core;
using Cake.Core.Annotations;
using Cake.Core.IO;

namespace Cake.AzureCli
{
    [CakeAliasCategory("Azure")]
    public static class AzAliases
    {
        private static void AppendArguments(ref string baseCommand, ProcessArgumentBuilder arguments)
        {
            if (arguments != null)
            {
                baseCommand += " " + arguments.Render().TrimEnd();
            }
        }

        private static void AppendIfNonNull(ref string baseCommand, string paramName, string setting)
        {
            if (!string.IsNullOrEmpty(setting))
            {
                baseCommand += $" {paramName}={setting}";
            }
        }

        private static dynamic Execute(string baseCommand, AzSettingsBase settings, ICakeContext context)
        {
            AppendArguments(ref baseCommand, settings.Arguments);
            var commandExecutor = new CommandExecutor(context);
            return commandExecutor.ExecuteCommand(baseCommand);
        }

        /// <summary>
        /// "az configure".
        /// Manage Azure CLI configuration. This command is interactive.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public static dynamic AzConfigure(this ICakeContext context, AzConfigureSettings settings) {
            var baseCommand = "az configure";
            AppendIfNonNull(ref baseCommand, "--defaults", settings.Defaults);
            AppendIfNonNull(ref baseCommand, "--list-defaults", settings.ListDefaults);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az feedback".
        /// Send feedback to the Azure CLI Team!
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public static dynamic AzFeedback(this ICakeContext context, AzFeedbackSettings settings) {
            var baseCommand = "az feedback";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az find".
        /// I'm an AI robot, my advice is based on our Azure documentation as well as the usage patterns of Azure CLI and Azure ARM users. Using me improves Azure products and documentation.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public static dynamic AzFind(this ICakeContext context, AzFindSettings settings) {
            var baseCommand = "az find";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az interactive".
        /// Start interactive mode. Installs the Interactive extension if not installed already.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public static dynamic AzInteractive(this ICakeContext context, AzInteractiveSettings settings) {
            var baseCommand = "az interactive";
            AppendIfNonNull(ref baseCommand, "--style", settings.Style);
            AppendIfNonNull(ref baseCommand, "--update", settings.Update);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az login".
        /// Log in to Azure.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public static dynamic AzLogin(this ICakeContext context, AzLoginSettings settings) {
            var baseCommand = "az login";
            AppendIfNonNull(ref baseCommand, "--allow-no-subscriptions", settings.AllowNoSubscriptions);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--service-principal", settings.ServicePrincipal);
            AppendIfNonNull(ref baseCommand, "--tenant", settings.Tenant);
            AppendIfNonNull(ref baseCommand, "--use-cert-sn-issuer", settings.UseCertSnIssuer);
            AppendIfNonNull(ref baseCommand, "--use-device-code", settings.UseDeviceCode);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--identity", settings.Identity);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az logout".
        /// Log out to remove access to Azure subscriptions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public static dynamic AzLogout(this ICakeContext context, AzLogoutSettings settings) {
            var baseCommand = "az logout";
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az rest".
        /// Invoke a custom request.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public static dynamic AzRest(this ICakeContext context, AzRestSettings settings) {
            var baseCommand = "az rest";
            AppendIfNonNull(ref baseCommand, "--method", settings.Method);
            AppendIfNonNull(ref baseCommand, "--uri", settings.Uri);
            AppendIfNonNull(ref baseCommand, "--body", settings.Body);
            AppendIfNonNull(ref baseCommand, "--headers", settings.Headers);
            AppendIfNonNull(ref baseCommand, "--output-file", settings.OutputFile);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--skip-authorization-header", settings.SkipAuthorizationHeader);
            AppendIfNonNull(ref baseCommand, "--uri-parameters", settings.UriParameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account clear".
        /// Clear all subscriptions from the CLI's local cache.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccount")]
        public static dynamic AzAccountClear(this ICakeContext context, AzAccountClearSettings settings) {
            var baseCommand = "az account clear";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account get-access-token".
        /// Get a token for utilities to access Azure.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccount")]
        public static dynamic AzAccountGetAccessToken(this ICakeContext context, AzAccountGetAccessTokenSettings settings) {
            var baseCommand = "az account get-access-token";
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account list".
        /// Get a list of subscriptions for the logged in account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccount")]
        public static dynamic AzAccountList(this ICakeContext context, AzAccountListSettings settings) {
            var baseCommand = "az account list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--refresh", settings.Refresh);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account list-locations".
        /// List supported regions for the current subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccount")]
        public static dynamic AzAccountListLocations(this ICakeContext context, AzAccountListLocationsSettings settings) {
            var baseCommand = "az account list-locations";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account set".
        /// Set a subscription to be the current active subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccount")]
        public static dynamic AzAccountSet(this ICakeContext context, AzAccountSetSettings settings) {
            var baseCommand = "az account set";
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account show".
        /// Get the details of a subscription.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccount")]
        public static dynamic AzAccountShow(this ICakeContext context, AzAccountShowSettings settings) {
            var baseCommand = "az account show";
            AppendIfNonNull(ref baseCommand, "--sdk-auth", settings.SdkAuth);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account lock create".
        /// Create a subscription lock.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountLock")]
        public static dynamic AzAccountLockCreate(this ICakeContext context, AzAccountLockCreateSettings settings) {
            var baseCommand = "az account lock create";
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account lock delete".
        /// Delete a subscription lock.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountLock")]
        public static dynamic AzAccountLockDelete(this ICakeContext context, AzAccountLockDeleteSettings settings) {
            var baseCommand = "az account lock delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account lock list".
        /// List lock information in the subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountLock")]
        public static dynamic AzAccountLockList(this ICakeContext context, AzAccountLockListSettings settings) {
            var baseCommand = "az account lock list";
            AppendIfNonNull(ref baseCommand, "--filter-string", settings.FilterString);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account lock show".
        /// Show the details of a subscription lock.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountLock")]
        public static dynamic AzAccountLockShow(this ICakeContext context, AzAccountLockShowSettings settings) {
            var baseCommand = "az account lock show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account lock update".
        /// Update a subscription lock.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountLock")]
        public static dynamic AzAccountLockUpdate(this ICakeContext context, AzAccountLockUpdateSettings settings) {
            var baseCommand = "az account lock update";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account management-group create".
        /// Create a new management group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroup")]
        public static dynamic AzAccountManagementGroupCreate(this ICakeContext context, AzAccountManagementGroupCreateSettings settings) {
            var baseCommand = "az account management-group create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account management-group delete".
        /// Delete an existing management group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroup")]
        public static dynamic AzAccountManagementGroupDelete(this ICakeContext context, AzAccountManagementGroupDeleteSettings settings) {
            var baseCommand = "az account management-group delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account management-group list".
        /// List all management groups.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroup")]
        public static dynamic AzAccountManagementGroupList(this ICakeContext context, AzAccountManagementGroupListSettings settings) {
            var baseCommand = "az account management-group list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account management-group show".
        /// Get a specific management group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroup")]
        public static dynamic AzAccountManagementGroupShow(this ICakeContext context, AzAccountManagementGroupShowSettings settings) {
            var baseCommand = "az account management-group show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--recurse", settings.Recurse);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account management-group update".
        /// Update an existing management group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroup")]
        public static dynamic AzAccountManagementGroupUpdate(this ICakeContext context, AzAccountManagementGroupUpdateSettings settings) {
            var baseCommand = "az account management-group update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account management-group subscription add".
        /// Add a subscription to a management group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroupSubscription")]
        public static dynamic AzAccountManagementGroupSubscriptionAdd(this ICakeContext context, AzAccountManagementGroupSubscriptionAddSettings settings) {
            var baseCommand = "az account management-group subscription add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az account management-group subscription remove".
        /// Remove an existing subscription from a management group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroupSubscription")]
        public static dynamic AzAccountManagementGroupSubscriptionRemove(this ICakeContext context, AzAccountManagementGroupSubscriptionRemoveSettings settings) {
            var baseCommand = "az account management-group subscription remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr build".
        /// Queues a quick build, providing streaming logs for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public static dynamic AzAcrBuild(this ICakeContext context, AzAcrBuildSettings settings) {
            var baseCommand = "az acr build";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--build-arg", settings.BuildArg);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--no-format", settings.NoFormat);
            AppendIfNonNull(ref baseCommand, "--no-logs", settings.NoLogs);
            AppendIfNonNull(ref baseCommand, "--no-push", settings.NoPush);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--platform", settings.Platform);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--secret-build-arg", settings.SecretBuildArg);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr check-health".
        /// Gets health information on the environment and optionally a target registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public static dynamic AzAcrCheckHealth(this ICakeContext context, AzAcrCheckHealthSettings settings) {
            var baseCommand = "az acr check-health";
            AppendIfNonNull(ref baseCommand, "--ignore-errors", settings.IgnoreErrors);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr check-name".
        /// Checks if an Azure Container Registry name is valid and available for use.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public static dynamic AzAcrCheckName(this ICakeContext context, AzAcrCheckNameSettings settings) {
            var baseCommand = "az acr check-name";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr create".
        /// Creates an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public static dynamic AzAcrCreate(this ICakeContext context, AzAcrCreateSettings settings) {
            var baseCommand = "az acr create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--admin-enabled", settings.AdminEnabled);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--workspace", settings.Workspace);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr delete".
        /// Deletes an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public static dynamic AzAcrDelete(this ICakeContext context, AzAcrDeleteSettings settings) {
            var baseCommand = "az acr delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr import".
        /// Imports an image to an Azure Container Registry from another Container Registry. Import removes the need to docker pull, docker tag, docker push.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public static dynamic AzAcrImport(this ICakeContext context, AzAcrImportSettings settings) {
            var baseCommand = "az acr import";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr list".
        /// Lists all the container registries under the current subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public static dynamic AzAcrList(this ICakeContext context, AzAcrListSettings settings) {
            var baseCommand = "az acr list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr login".
        /// Log in to an Azure Container Registry through the Docker CLI.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public static dynamic AzAcrLogin(this ICakeContext context, AzAcrLoginSettings settings) {
            var baseCommand = "az acr login";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr run".
        /// Queues a quick run providing streamed logs for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public static dynamic AzAcrRun(this ICakeContext context, AzAcrRunSettings settings) {
            var baseCommand = "az acr run";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--cmd", settings.Cmd);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--no-format", settings.NoFormat);
            AppendIfNonNull(ref baseCommand, "--no-logs", settings.NoLogs);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--platform", settings.Platform);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--set-secret", settings.SetSecret);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--values", settings.Values);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr show".
        /// Get the details of an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public static dynamic AzAcrShow(this ICakeContext context, AzAcrShowSettings settings) {
            var baseCommand = "az acr show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr show-usage".
        /// Get the storage usage for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public static dynamic AzAcrShowUsage(this ICakeContext context, AzAcrShowUsageSettings settings) {
            var baseCommand = "az acr show-usage";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr update".
        /// Update an Azure Container Registry.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public static dynamic AzAcrUpdate(this ICakeContext context, AzAcrUpdateSettings settings) {
            var baseCommand = "az acr update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--admin-enabled", settings.AdminEnabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr config content-trust show".
        /// Show the configured content-trust policy for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrConfigContentTrust")]
        public static dynamic AzAcrConfigContentTrustShow(this ICakeContext context, AzAcrConfigContentTrustShowSettings settings) {
            var baseCommand = "az acr config content-trust show";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr config content-trust update".
        /// Update content-trust policy for an Azure Container Registry.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrConfigContentTrust")]
        public static dynamic AzAcrConfigContentTrustUpdate(this ICakeContext context, AzAcrConfigContentTrustUpdateSettings settings) {
            var baseCommand = "az acr config content-trust update";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr config retention show".
        /// Show the configured retention policy for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrConfigRetention")]
        public static dynamic AzAcrConfigRetentionShow(this ICakeContext context, AzAcrConfigRetentionShowSettings settings) {
            var baseCommand = "az acr config retention show";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr config retention update".
        /// Update retention policy for an Azure Container Registry.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrConfigRetention")]
        public static dynamic AzAcrConfigRetentionUpdate(this ICakeContext context, AzAcrConfigRetentionUpdateSettings settings) {
            var baseCommand = "az acr config retention update";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--days", settings.Days);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr credential renew".
        /// Regenerate login credentials for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrCredential")]
        public static dynamic AzAcrCredentialRenew(this ICakeContext context, AzAcrCredentialRenewSettings settings) {
            var baseCommand = "az acr credential renew";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password-name", settings.PasswordName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr credential show".
        /// Get the login credentials for an Azure Container Registry.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrCredential")]
        public static dynamic AzAcrCredentialShow(this ICakeContext context, AzAcrCredentialShowSettings settings) {
            var baseCommand = "az acr credential show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr helm delete".
        /// Delete a helm chart version in an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrHelm")]
        public static dynamic AzAcrHelmDelete(this ICakeContext context, AzAcrHelmDeleteSettings settings) {
            var baseCommand = "az acr helm delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--prov", settings.Prov);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr helm list".
        /// List all helm charts in an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrHelm")]
        public static dynamic AzAcrHelmList(this ICakeContext context, AzAcrHelmListSettings settings) {
            var baseCommand = "az acr helm list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr helm push".
        /// Push a helm chart package to an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrHelm")]
        public static dynamic AzAcrHelmPush(this ICakeContext context, AzAcrHelmPushSettings settings) {
            var baseCommand = "az acr helm push";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr helm show".
        /// Describe a helm chart in an Azure Container Registry.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrHelm")]
        public static dynamic AzAcrHelmShow(this ICakeContext context, AzAcrHelmShowSettings settings) {
            var baseCommand = "az acr helm show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr helm repo add".
        /// Add a helm chart repository from an Azure Container Registry through the Helm CLI.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrHelmRepo")]
        public static dynamic AzAcrHelmRepoAdd(this ICakeContext context, AzAcrHelmRepoAddSettings settings) {
            var baseCommand = "az acr helm repo add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr network-rule add".
        /// Add a network rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrNetworkRule")]
        public static dynamic AzAcrNetworkRuleAdd(this ICakeContext context, AzAcrNetworkRuleAddSettings settings) {
            var baseCommand = "az acr network-rule add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr network-rule list".
        /// List network rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrNetworkRule")]
        public static dynamic AzAcrNetworkRuleList(this ICakeContext context, AzAcrNetworkRuleListSettings settings) {
            var baseCommand = "az acr network-rule list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr network-rule remove".
        /// Remove a network rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrNetworkRule")]
        public static dynamic AzAcrNetworkRuleRemove(this ICakeContext context, AzAcrNetworkRuleRemoveSettings settings) {
            var baseCommand = "az acr network-rule remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr pack build".
        /// Queues a quick build task that builds an app and pushes it into an Azure Container Registry.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrPack")]
        public static dynamic AzAcrPackBuild(this ICakeContext context, AzAcrPackBuildSettings settings) {
            var baseCommand = "az acr pack build";
            AppendIfNonNull(ref baseCommand, "--builder", settings.Builder);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--no-format", settings.NoFormat);
            AppendIfNonNull(ref baseCommand, "--no-logs", settings.NoLogs);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--pack-image-tag", settings.PackImageTag);
            AppendIfNonNull(ref baseCommand, "--platform", settings.Platform);
            AppendIfNonNull(ref baseCommand, "--pull", settings.Pull);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr replication create".
        /// Create a replicated region for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrReplication")]
        public static dynamic AzAcrReplicationCreate(this ICakeContext context, AzAcrReplicationCreateSettings settings) {
            var baseCommand = "az acr replication create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr replication delete".
        /// Delete a replicated region from an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrReplication")]
        public static dynamic AzAcrReplicationDelete(this ICakeContext context, AzAcrReplicationDeleteSettings settings) {
            var baseCommand = "az acr replication delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr replication list".
        /// List all of the regions for a geo-replicated Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrReplication")]
        public static dynamic AzAcrReplicationList(this ICakeContext context, AzAcrReplicationListSettings settings) {
            var baseCommand = "az acr replication list";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr replication show".
        /// Get the details of a replicated region.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrReplication")]
        public static dynamic AzAcrReplicationShow(this ICakeContext context, AzAcrReplicationShowSettings settings) {
            var baseCommand = "az acr replication show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr replication update".
        /// Updates a replication.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrReplication")]
        public static dynamic AzAcrReplicationUpdate(this ICakeContext context, AzAcrReplicationUpdateSettings settings) {
            var baseCommand = "az acr replication update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr repository delete".
        /// Delete a repository or image in an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public static dynamic AzAcrRepositoryDelete(this ICakeContext context, AzAcrRepositoryDeleteSettings settings) {
            var baseCommand = "az acr repository delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr repository list".
        /// List repositories in an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public static dynamic AzAcrRepositoryList(this ICakeContext context, AzAcrRepositoryListSettings settings) {
            var baseCommand = "az acr repository list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr repository show".
        /// Get the attributes of a repository or image in an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public static dynamic AzAcrRepositoryShow(this ICakeContext context, AzAcrRepositoryShowSettings settings) {
            var baseCommand = "az acr repository show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr repository show-manifests".
        /// Show manifests of a repository in an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public static dynamic AzAcrRepositoryShowManifests(this ICakeContext context, AzAcrRepositoryShowManifestsSettings settings) {
            var baseCommand = "az acr repository show-manifests";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--detail", settings.Detail);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr repository show-tags".
        /// Show tags for a repository in an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public static dynamic AzAcrRepositoryShowTags(this ICakeContext context, AzAcrRepositoryShowTagsSettings settings) {
            var baseCommand = "az acr repository show-tags";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--detail", settings.Detail);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr repository untag".
        /// Untag an image in an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public static dynamic AzAcrRepositoryUntag(this ICakeContext context, AzAcrRepositoryUntagSettings settings) {
            var baseCommand = "az acr repository untag";
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr repository update".
        /// Update the attributes of a repository or image in an Azure Container Registry.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public static dynamic AzAcrRepositoryUpdate(this ICakeContext context, AzAcrRepositoryUpdateSettings settings) {
            var baseCommand = "az acr repository update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--delete-enabled", settings.DeleteEnabled);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--list-enabled", settings.ListEnabled);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--read-enabled", settings.ReadEnabled);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--write-enabled", settings.WriteEnabled);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr scope-map create".
        /// Create a scope map for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrScopeMap")]
        public static dynamic AzAcrScopeMapCreate(this ICakeContext context, AzAcrScopeMapCreateSettings settings) {
            var baseCommand = "az acr scope-map create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr scope-map delete".
        /// Delete a scope map for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrScopeMap")]
        public static dynamic AzAcrScopeMapDelete(this ICakeContext context, AzAcrScopeMapDeleteSettings settings) {
            var baseCommand = "az acr scope-map delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr scope-map list".
        /// List all scope maps for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrScopeMap")]
        public static dynamic AzAcrScopeMapList(this ICakeContext context, AzAcrScopeMapListSettings settings) {
            var baseCommand = "az acr scope-map list";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr scope-map show".
        /// Show details and attributes of a scope map for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrScopeMap")]
        public static dynamic AzAcrScopeMapShow(this ICakeContext context, AzAcrScopeMapShowSettings settings) {
            var baseCommand = "az acr scope-map show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr scope-map update".
        /// Update a scope map for an Azure Container Registry.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrScopeMap")]
        public static dynamic AzAcrScopeMapUpdate(this ICakeContext context, AzAcrScopeMapUpdateSettings settings) {
            var baseCommand = "az acr scope-map update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task cancel-run".
        /// Cancel a specified run of an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public static dynamic AzAcrTaskCancelRun(this ICakeContext context, AzAcrTaskCancelRunSettings settings) {
            var baseCommand = "az acr task cancel-run";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--run-id", settings.RunId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task create".
        /// Creates a series of steps for building, testing and OS & Framework patching containers. Tasks support triggers from git commits and base image updates.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public static dynamic AzAcrTaskCreate(this ICakeContext context, AzAcrTaskCreateSettings settings) {
            var baseCommand = "az acr task create";
            AppendIfNonNull(ref baseCommand, "--context", settings.Context);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--arg", settings.Arg);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--cmd", settings.Cmd);
            AppendIfNonNull(ref baseCommand, "--cpu", settings.Cpu);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--no-cache", settings.NoCache);
            AppendIfNonNull(ref baseCommand, "--no-push", settings.NoPush);
            AppendIfNonNull(ref baseCommand, "--platform", settings.Platform);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--secret-arg", settings.SecretArg);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--set-secret", settings.SetSecret);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--values", settings.Values);
            AppendIfNonNull(ref baseCommand, "--base-image-trigger-enabled", settings.BaseImageTriggerEnabled);
            AppendIfNonNull(ref baseCommand, "--base-image-trigger-name", settings.BaseImageTriggerName);
            AppendIfNonNull(ref baseCommand, "--base-image-trigger-type", settings.BaseImageTriggerType);
            AppendIfNonNull(ref baseCommand, "--commit-trigger-enabled", settings.CommitTriggerEnabled);
            AppendIfNonNull(ref baseCommand, "--git-access-token", settings.GitAccessToken);
            AppendIfNonNull(ref baseCommand, "--pull-request-trigger-enabled", settings.PullRequestTriggerEnabled);
            AppendIfNonNull(ref baseCommand, "--schedule", settings.Schedule);
            AppendIfNonNull(ref baseCommand, "--source-trigger-name", settings.SourceTriggerName);
            AppendIfNonNull(ref baseCommand, "--update-trigger-endpoint", settings.UpdateTriggerEndpoint);
            AppendIfNonNull(ref baseCommand, "--update-trigger-payload-type", settings.UpdateTriggerPayloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task delete".
        /// Delete a task from an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public static dynamic AzAcrTaskDelete(this ICakeContext context, AzAcrTaskDeleteSettings settings) {
            var baseCommand = "az acr task delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task list".
        /// List the tasks for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public static dynamic AzAcrTaskList(this ICakeContext context, AzAcrTaskListSettings settings) {
            var baseCommand = "az acr task list";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task list-runs".
        /// List all of the executed runs for an Azure Container Registry, with the ability to filter by a specific Task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public static dynamic AzAcrTaskListRuns(this ICakeContext context, AzAcrTaskListRunsSettings settings) {
            var baseCommand = "az acr task list-runs";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--run-status", settings.RunStatus);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task logs".
        /// Show logs for a particular run. If no run-id is supplied, show logs for the last created run.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public static dynamic AzAcrTaskLogs(this ICakeContext context, AzAcrTaskLogsSettings settings) {
            var baseCommand = "az acr task logs";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--run-id", settings.RunId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task run".
        /// Manually trigger a task that might otherwise be waiting for git commits or base image update triggers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public static dynamic AzAcrTaskRun(this ICakeContext context, AzAcrTaskRunSettings settings) {
            var baseCommand = "az acr task run";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--arg", settings.Arg);
            AppendIfNonNull(ref baseCommand, "--context", settings.Context);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--no-logs", settings.NoLogs);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--secret-arg", settings.SecretArg);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--set-secret", settings.SetSecret);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--update-trigger-token", settings.UpdateTriggerToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task show".
        /// Get the properties of a named task for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public static dynamic AzAcrTaskShow(this ICakeContext context, AzAcrTaskShowSettings settings) {
            var baseCommand = "az acr task show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secure-properties", settings.WithSecureProperties);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task show-run".
        /// Get the properties of a specified run of an Azure Container Registry Task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public static dynamic AzAcrTaskShowRun(this ICakeContext context, AzAcrTaskShowRunSettings settings) {
            var baseCommand = "az acr task show-run";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--run-id", settings.RunId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task update".
        /// Update a task for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public static dynamic AzAcrTaskUpdate(this ICakeContext context, AzAcrTaskUpdateSettings settings) {
            var baseCommand = "az acr task update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--arg", settings.Arg);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--context", settings.Context);
            AppendIfNonNull(ref baseCommand, "--cpu", settings.Cpu);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--no-cache", settings.NoCache);
            AppendIfNonNull(ref baseCommand, "--no-push", settings.NoPush);
            AppendIfNonNull(ref baseCommand, "--platform", settings.Platform);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--secret-arg", settings.SecretArg);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--set-secret", settings.SetSecret);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--values", settings.Values);
            AppendIfNonNull(ref baseCommand, "--base-image-trigger-enabled", settings.BaseImageTriggerEnabled);
            AppendIfNonNull(ref baseCommand, "--base-image-trigger-type", settings.BaseImageTriggerType);
            AppendIfNonNull(ref baseCommand, "--commit-trigger-enabled", settings.CommitTriggerEnabled);
            AppendIfNonNull(ref baseCommand, "--git-access-token", settings.GitAccessToken);
            AppendIfNonNull(ref baseCommand, "--pull-request-trigger-enabled", settings.PullRequestTriggerEnabled);
            AppendIfNonNull(ref baseCommand, "--update-trigger-endpoint", settings.UpdateTriggerEndpoint);
            AppendIfNonNull(ref baseCommand, "--update-trigger-payload-type", settings.UpdateTriggerPayloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task update-run".
        /// Patch the run properties of an Azure Container Registry Task.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public static dynamic AzAcrTaskUpdateRun(this ICakeContext context, AzAcrTaskUpdateRunSettings settings) {
            var baseCommand = "az acr task update-run";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--run-id", settings.RunId);
            AppendIfNonNull(ref baseCommand, "--no-archive", settings.NoArchive);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task credential add".
        /// Add a custom registry login credential to the task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskCredential")]
        public static dynamic AzAcrTaskCredentialAdd(this ICakeContext context, AzAcrTaskCredentialAddSettings settings) {
            var baseCommand = "az acr task credential add";
            AppendIfNonNull(ref baseCommand, "--login-server", settings.LoginServer);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--use-identity", settings.UseIdentity);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task credential list".
        /// List all the custom registry credentials for task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskCredential")]
        public static dynamic AzAcrTaskCredentialList(this ICakeContext context, AzAcrTaskCredentialListSettings settings) {
            var baseCommand = "az acr task credential list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task credential remove".
        /// Remove credential for a task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskCredential")]
        public static dynamic AzAcrTaskCredentialRemove(this ICakeContext context, AzAcrTaskCredentialRemoveSettings settings) {
            var baseCommand = "az acr task credential remove";
            AppendIfNonNull(ref baseCommand, "--login-server", settings.LoginServer);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task credential update".
        /// Update the registry login credential for a task.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskCredential")]
        public static dynamic AzAcrTaskCredentialUpdate(this ICakeContext context, AzAcrTaskCredentialUpdateSettings settings) {
            var baseCommand = "az acr task credential update";
            AppendIfNonNull(ref baseCommand, "--login-server", settings.LoginServer);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--use-identity", settings.UseIdentity);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task identity assign".
        /// Update the managed identity for a task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskIdentity")]
        public static dynamic AzAcrTaskIdentityAssign(this ICakeContext context, AzAcrTaskIdentityAssignSettings settings) {
            var baseCommand = "az acr task identity assign";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--identities", settings.Identities);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task identity remove".
        /// Remove managed identities for a task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskIdentity")]
        public static dynamic AzAcrTaskIdentityRemove(this ICakeContext context, AzAcrTaskIdentityRemoveSettings settings) {
            var baseCommand = "az acr task identity remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--identities", settings.Identities);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task identity show".
        /// Display the managed identities for task.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskIdentity")]
        public static dynamic AzAcrTaskIdentityShow(this ICakeContext context, AzAcrTaskIdentityShowSettings settings) {
            var baseCommand = "az acr task identity show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task timer add".
        /// Add a timer trigger to a task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskTimer")]
        public static dynamic AzAcrTaskTimerAdd(this ICakeContext context, AzAcrTaskTimerAddSettings settings) {
            var baseCommand = "az acr task timer add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--schedule", settings.Schedule);
            AppendIfNonNull(ref baseCommand, "--timer-name", settings.TimerName);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task timer list".
        /// List all timer triggers for a task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskTimer")]
        public static dynamic AzAcrTaskTimerList(this ICakeContext context, AzAcrTaskTimerListSettings settings) {
            var baseCommand = "az acr task timer list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task timer remove".
        /// Remove a timer trigger from a task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskTimer")]
        public static dynamic AzAcrTaskTimerRemove(this ICakeContext context, AzAcrTaskTimerRemoveSettings settings) {
            var baseCommand = "az acr task timer remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--timer-name", settings.TimerName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr task timer update".
        /// Update the timer trigger for a task.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskTimer")]
        public static dynamic AzAcrTaskTimerUpdate(this ICakeContext context, AzAcrTaskTimerUpdateSettings settings) {
            var baseCommand = "az acr task timer update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--timer-name", settings.TimerName);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--schedule", settings.Schedule);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr token create".
        /// Create a token associated with a scope map for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrToken")]
        public static dynamic AzAcrTokenCreate(this ICakeContext context, AzAcrTokenCreateSettings settings) {
            var baseCommand = "az acr token create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--no-passwords", settings.NoPasswords);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope-map", settings.ScopeMap);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr token delete".
        /// Delete a token for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrToken")]
        public static dynamic AzAcrTokenDelete(this ICakeContext context, AzAcrTokenDeleteSettings settings) {
            var baseCommand = "az acr token delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr token list".
        /// List all tokens for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrToken")]
        public static dynamic AzAcrTokenList(this ICakeContext context, AzAcrTokenListSettings settings) {
            var baseCommand = "az acr token list";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr token show".
        /// Show details and attributes of a token for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrToken")]
        public static dynamic AzAcrTokenShow(this ICakeContext context, AzAcrTokenShowSettings settings) {
            var baseCommand = "az acr token show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr token update".
        /// Update a token (replace associated scope map) for an Azure Container Registry.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrToken")]
        public static dynamic AzAcrTokenUpdate(this ICakeContext context, AzAcrTokenUpdateSettings settings) {
            var baseCommand = "az acr token update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope-map", settings.ScopeMap);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr token credential delete".
        /// Delete a token credential.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTokenCredential")]
        public static dynamic AzAcrTokenCredentialDelete(this ICakeContext context, AzAcrTokenCredentialDeleteSettings settings) {
            var baseCommand = "az acr token credential delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--password1", settings.Password1);
            AppendIfNonNull(ref baseCommand, "--password2", settings.Password2);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr token credential generate".
        /// Generate or replace one or both passwords of a token for an Azure Container Registry. For using token and password to access a container registry, see https://aka.ms/acr/repo-permissions.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTokenCredential")]
        public static dynamic AzAcrTokenCredentialGenerate(this ICakeContext context, AzAcrTokenCredentialGenerateSettings settings) {
            var baseCommand = "az acr token credential generate";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--days", settings.Days);
            AppendIfNonNull(ref baseCommand, "--password1", settings.Password1);
            AppendIfNonNull(ref baseCommand, "--password2", settings.Password2);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr webhook create".
        /// Create a webhook for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public static dynamic AzAcrWebhookCreate(this ICakeContext context, AzAcrWebhookCreateSettings settings) {
            var baseCommand = "az acr webhook create";
            AppendIfNonNull(ref baseCommand, "--actions", settings.Actions);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--uri", settings.Uri);
            AppendIfNonNull(ref baseCommand, "--headers", settings.Headers);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr webhook delete".
        /// Delete a webhook from an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public static dynamic AzAcrWebhookDelete(this ICakeContext context, AzAcrWebhookDeleteSettings settings) {
            var baseCommand = "az acr webhook delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr webhook get-config".
        /// Get the service URI and custom headers for the webhook.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public static dynamic AzAcrWebhookGetConfig(this ICakeContext context, AzAcrWebhookGetConfigSettings settings) {
            var baseCommand = "az acr webhook get-config";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr webhook list".
        /// List all of the webhooks for an Azure Container Registry.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public static dynamic AzAcrWebhookList(this ICakeContext context, AzAcrWebhookListSettings settings) {
            var baseCommand = "az acr webhook list";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr webhook list-events".
        /// List recent events for a webhook.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public static dynamic AzAcrWebhookListEvents(this ICakeContext context, AzAcrWebhookListEventsSettings settings) {
            var baseCommand = "az acr webhook list-events";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr webhook ping".
        /// Trigger a ping event for a webhook.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public static dynamic AzAcrWebhookPing(this ICakeContext context, AzAcrWebhookPingSettings settings) {
            var baseCommand = "az acr webhook ping";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr webhook show".
        /// Get the details of a webhook.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public static dynamic AzAcrWebhookShow(this ICakeContext context, AzAcrWebhookShowSettings settings) {
            var baseCommand = "az acr webhook show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az acr webhook update".
        /// Update a webhook.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public static dynamic AzAcrWebhookUpdate(this ICakeContext context, AzAcrWebhookUpdateSettings settings) {
            var baseCommand = "az acr webhook update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--actions", settings.Actions);
            AppendIfNonNull(ref baseCommand, "--headers", settings.Headers);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--uri", settings.Uri);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app create".
        /// Create a web application, web API or native application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdApp")]
        public static dynamic AzAdAppCreate(this ICakeContext context, AzAdAppCreateSettings settings) {
            var baseCommand = "az ad app create";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--app-roles", settings.AppRoles);
            AppendIfNonNull(ref baseCommand, "--available-to-other-tenants", settings.AvailableToOtherTenants);
            AppendIfNonNull(ref baseCommand, "--credential-description", settings.CredentialDescription);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--homepage", settings.Homepage);
            AppendIfNonNull(ref baseCommand, "--identifier-uris", settings.IdentifierUris);
            AppendIfNonNull(ref baseCommand, "--key-type", settings.KeyType);
            AppendIfNonNull(ref baseCommand, "--key-usage", settings.KeyUsage);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--native-app", settings.NativeApp);
            AppendIfNonNull(ref baseCommand, "--oauth2-allow-implicit-flow", settings.Oauth2AllowImplicitFlow);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--reply-urls", settings.ReplyUrls);
            AppendIfNonNull(ref baseCommand, "--required-resource-accesses", settings.RequiredResourceAccesses);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app delete".
        /// Delete an application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdApp")]
        public static dynamic AzAdAppDelete(this ICakeContext context, AzAdAppDeleteSettings settings) {
            var baseCommand = "az ad app delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app list".
        /// List applications.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdApp")]
        public static dynamic AzAdAppList(this ICakeContext context, AzAdAppListSettings settings) {
            var baseCommand = "az ad app list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--app-id", settings.AppId);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--identifier-uri", settings.IdentifierUri);
            AppendIfNonNull(ref baseCommand, "--show-mine", settings.ShowMine);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app show".
        /// Get the details of an application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdApp")]
        public static dynamic AzAdAppShow(this ICakeContext context, AzAdAppShowSettings settings) {
            var baseCommand = "az ad app show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app update".
        /// Update an application.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdApp")]
        public static dynamic AzAdAppUpdate(this ICakeContext context, AzAdAppUpdateSettings settings) {
            var baseCommand = "az ad app update";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--app-roles", settings.AppRoles);
            AppendIfNonNull(ref baseCommand, "--available-to-other-tenants", settings.AvailableToOtherTenants);
            AppendIfNonNull(ref baseCommand, "--credential-description", settings.CredentialDescription);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--homepage", settings.Homepage);
            AppendIfNonNull(ref baseCommand, "--identifier-uris", settings.IdentifierUris);
            AppendIfNonNull(ref baseCommand, "--key-type", settings.KeyType);
            AppendIfNonNull(ref baseCommand, "--key-usage", settings.KeyUsage);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--oauth2-allow-implicit-flow", settings.Oauth2AllowImplicitFlow);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--reply-urls", settings.ReplyUrls);
            AppendIfNonNull(ref baseCommand, "--required-resource-accesses", settings.RequiredResourceAccesses);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app credential delete".
        /// Delete an application's password or certificate credentials.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppCredential")]
        public static dynamic AzAdAppCredentialDelete(this ICakeContext context, AzAdAppCredentialDeleteSettings settings) {
            var baseCommand = "az ad app credential delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--key-id", settings.KeyId);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app credential list".
        /// List an application's password or certificate credentials.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppCredential")]
        public static dynamic AzAdAppCredentialList(this ICakeContext context, AzAdAppCredentialListSettings settings) {
            var baseCommand = "az ad app credential list";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app credential reset".
        /// Append or overwrite an application's password or certificate credentials.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppCredential")]
        public static dynamic AzAdAppCredentialReset(this ICakeContext context, AzAdAppCredentialResetSettings settings) {
            var baseCommand = "az ad app credential reset";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--append", settings.Append);
            AppendIfNonNull(ref baseCommand, "--credential-description", settings.CredentialDescription);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--create-cert", settings.CreateCert);
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--years", settings.Years);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app owner add".
        /// Add an application owner.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppOwner")]
        public static dynamic AzAdAppOwnerAdd(this ICakeContext context, AzAdAppOwnerAddSettings settings) {
            var baseCommand = "az ad app owner add";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--owner-object-id", settings.OwnerObjectId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app owner list".
        /// List application owners.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppOwner")]
        public static dynamic AzAdAppOwnerList(this ICakeContext context, AzAdAppOwnerListSettings settings) {
            var baseCommand = "az ad app owner list";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app owner remove".
        /// Remove an application owner.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppOwner")]
        public static dynamic AzAdAppOwnerRemove(this ICakeContext context, AzAdAppOwnerRemoveSettings settings) {
            var baseCommand = "az ad app owner remove";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--owner-object-id", settings.OwnerObjectId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app permission add".
        /// Add an API permission.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppPermission")]
        public static dynamic AzAdAppPermissionAdd(this ICakeContext context, AzAdAppPermissionAddSettings settings) {
            var baseCommand = "az ad app permission add";
            AppendIfNonNull(ref baseCommand, "--api", settings.Api);
            AppendIfNonNull(ref baseCommand, "--api-permissions", settings.ApiPermissions);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app permission admin-consent".
        /// Grant Application & Delegated permissions through admin-consent.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppPermission")]
        public static dynamic AzAdAppPermissionAdminConsent(this ICakeContext context, AzAdAppPermissionAdminConsentSettings settings) {
            var baseCommand = "az ad app permission admin-consent";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app permission delete".
        /// Remove an API permission.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppPermission")]
        public static dynamic AzAdAppPermissionDelete(this ICakeContext context, AzAdAppPermissionDeleteSettings settings) {
            var baseCommand = "az ad app permission delete";
            AppendIfNonNull(ref baseCommand, "--api", settings.Api);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app permission grant".
        /// Grant the app an API Delegated permissions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppPermission")]
        public static dynamic AzAdAppPermissionGrant(this ICakeContext context, AzAdAppPermissionGrantSettings settings) {
            var baseCommand = "az ad app permission grant";
            AppendIfNonNull(ref baseCommand, "--api", settings.Api);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--consent-type", settings.ConsentType);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--principal-id", settings.PrincipalId);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app permission list".
        /// List API permissions the application has requested.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppPermission")]
        public static dynamic AzAdAppPermissionList(this ICakeContext context, AzAdAppPermissionListSettings settings) {
            var baseCommand = "az ad app permission list";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad app permission list-grants".
        /// List Oauth2 permission grants.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppPermission")]
        public static dynamic AzAdAppPermissionListGrants(this ICakeContext context, AzAdAppPermissionListGrantsSettings settings) {
            var baseCommand = "az ad app permission list-grants";
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--show-resource-name", settings.ShowResourceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad group create".
        /// Create a group in the directory.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroup")]
        public static dynamic AzAdGroupCreate(this ICakeContext context, AzAdGroupCreateSettings settings) {
            var baseCommand = "az ad group create";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--mail-nickname", settings.MailNickname);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad group delete".
        /// Delete a group from the directory.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroup")]
        public static dynamic AzAdGroupDelete(this ICakeContext context, AzAdGroupDeleteSettings settings) {
            var baseCommand = "az ad group delete";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad group get-member-groups".
        /// Gets a collection of object IDs of groups of which the specified group is a member.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroup")]
        public static dynamic AzAdGroupGetMemberGroups(this ICakeContext context, AzAdGroupGetMemberGroupsSettings settings) {
            var baseCommand = "az ad group get-member-groups";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--additional-properties", settings.AdditionalProperties);
            AppendIfNonNull(ref baseCommand, "--security-enabled-only", settings.SecurityEnabledOnly);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad group list".
        /// List groups in the directory.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroup")]
        public static dynamic AzAdGroupList(this ICakeContext context, AzAdGroupListSettings settings) {
            var baseCommand = "az ad group list";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad group show".
        /// Gets group information from the directory.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroup")]
        public static dynamic AzAdGroupShow(this ICakeContext context, AzAdGroupShowSettings settings) {
            var baseCommand = "az ad group show";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad group member add".
        /// Add a member to a group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupMember")]
        public static dynamic AzAdGroupMemberAdd(this ICakeContext context, AzAdGroupMemberAddSettings settings) {
            var baseCommand = "az ad group member add";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--member-id", settings.MemberId);
            AppendIfNonNull(ref baseCommand, "--additional-properties", settings.AdditionalProperties);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad group member check".
        /// Check if a member is in a group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupMember")]
        public static dynamic AzAdGroupMemberCheck(this ICakeContext context, AzAdGroupMemberCheckSettings settings) {
            var baseCommand = "az ad group member check";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--member-id", settings.MemberId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad group member list".
        /// Gets the members of a group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupMember")]
        public static dynamic AzAdGroupMemberList(this ICakeContext context, AzAdGroupMemberListSettings settings) {
            var baseCommand = "az ad group member list";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad group member remove".
        /// Remove a member from a group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupMember")]
        public static dynamic AzAdGroupMemberRemove(this ICakeContext context, AzAdGroupMemberRemoveSettings settings) {
            var baseCommand = "az ad group member remove";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--member-id", settings.MemberId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad group owner add".
        /// Add a group owner.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupOwner")]
        public static dynamic AzAdGroupOwnerAdd(this ICakeContext context, AzAdGroupOwnerAddSettings settings) {
            var baseCommand = "az ad group owner add";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--owner-object-id", settings.OwnerObjectId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad group owner list".
        /// List group owners.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupOwner")]
        public static dynamic AzAdGroupOwnerList(this ICakeContext context, AzAdGroupOwnerListSettings settings) {
            var baseCommand = "az ad group owner list";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad group owner remove".
        /// Remove a group owner.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupOwner")]
        public static dynamic AzAdGroupOwnerRemove(this ICakeContext context, AzAdGroupOwnerRemoveSettings settings) {
            var baseCommand = "az ad group owner remove";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--owner-object-id", settings.OwnerObjectId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad signed-in-user list-owned-objects".
        /// Get the list of directory objects that are owned by the user.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSignedInUser")]
        public static dynamic AzAdSignedInUserListOwnedObjects(this ICakeContext context, AzAdSignedInUserListOwnedObjectsSettings settings) {
            var baseCommand = "az ad signed-in-user list-owned-objects";
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad signed-in-user show".
        /// Gets the details for the currently logged-in user.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSignedInUser")]
        public static dynamic AzAdSignedInUserShow(this ICakeContext context, AzAdSignedInUserShowSettings settings) {
            var baseCommand = "az ad signed-in-user show";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad sp create".
        /// Create a service principal.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSp")]
        public static dynamic AzAdSpCreate(this ICakeContext context, AzAdSpCreateSettings settings) {
            var baseCommand = "az ad sp create";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad sp create-for-rbac".
        /// Create a service principal and configure its access to Azure resources.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSp")]
        public static dynamic AzAdSpCreateForRbac(this ICakeContext context, AzAdSpCreateForRbacSettings settings) {
            var baseCommand = "az ad sp create-for-rbac";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scopes", settings.Scopes);
            AppendIfNonNull(ref baseCommand, "--sdk-auth", settings.SdkAuth);
            AppendIfNonNull(ref baseCommand, "--skip-assignment", settings.SkipAssignment);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--create-cert", settings.CreateCert);
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--years", settings.Years);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad sp delete".
        /// Delete a service principal and its role assignments.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSp")]
        public static dynamic AzAdSpDelete(this ICakeContext context, AzAdSpDeleteSettings settings) {
            var baseCommand = "az ad sp delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad sp list".
        /// List service principals.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSp")]
        public static dynamic AzAdSpList(this ICakeContext context, AzAdSpListSettings settings) {
            var baseCommand = "az ad sp list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--show-mine", settings.ShowMine);
            AppendIfNonNull(ref baseCommand, "--spn", settings.Spn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad sp show".
        /// Get the details of a service principal.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSp")]
        public static dynamic AzAdSpShow(this ICakeContext context, AzAdSpShowSettings settings) {
            var baseCommand = "az ad sp show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad sp update".
        /// Update a service principal.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSp")]
        public static dynamic AzAdSpUpdate(this ICakeContext context, AzAdSpUpdateSettings settings) {
            var baseCommand = "az ad sp update";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad sp credential delete".
        /// Delete a service principal's credential.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSpCredential")]
        public static dynamic AzAdSpCredentialDelete(this ICakeContext context, AzAdSpCredentialDeleteSettings settings) {
            var baseCommand = "az ad sp credential delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--key-id", settings.KeyId);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad sp credential list".
        /// List a service principal's credentials.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSpCredential")]
        public static dynamic AzAdSpCredentialList(this ICakeContext context, AzAdSpCredentialListSettings settings) {
            var baseCommand = "az ad sp credential list";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad sp credential reset".
        /// Reset a service principal credential.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSpCredential")]
        public static dynamic AzAdSpCredentialReset(this ICakeContext context, AzAdSpCredentialResetSettings settings) {
            var baseCommand = "az ad sp credential reset";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--append", settings.Append);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--create-cert", settings.CreateCert);
            AppendIfNonNull(ref baseCommand, "--credential-description", settings.CredentialDescription);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--years", settings.Years);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad sp owner list".
        /// List service principal owners.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSpOwner")]
        public static dynamic AzAdSpOwnerList(this ICakeContext context, AzAdSpOwnerListSettings settings) {
            var baseCommand = "az ad sp owner list";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad user create".
        /// Create an Azure Active Directory user.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdUser")]
        public static dynamic AzAdUserCreate(this ICakeContext context, AzAdUserCreateSettings settings) {
            var baseCommand = "az ad user create";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--user-principal-name", settings.UserPrincipalName);
            AppendIfNonNull(ref baseCommand, "--force-change-password-next-login", settings.ForceChangePasswordNextLogin);
            AppendIfNonNull(ref baseCommand, "--immutable-id", settings.ImmutableId);
            AppendIfNonNull(ref baseCommand, "--mail-nickname", settings.MailNickname);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad user delete".
        /// Delete a user.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdUser")]
        public static dynamic AzAdUserDelete(this ICakeContext context, AzAdUserDeleteSettings settings) {
            var baseCommand = "az ad user delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad user get-member-groups".
        /// Get groups of which the user is a member.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdUser")]
        public static dynamic AzAdUserGetMemberGroups(this ICakeContext context, AzAdUserGetMemberGroupsSettings settings) {
            var baseCommand = "az ad user get-member-groups";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--security-enabled-only", settings.SecurityEnabledOnly);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad user list".
        /// List Azure Active Directory users.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdUser")]
        public static dynamic AzAdUserList(this ICakeContext context, AzAdUserListSettings settings) {
            var baseCommand = "az ad user list";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--upn", settings.Upn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad user show".
        /// Gets user information from the directory.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdUser")]
        public static dynamic AzAdUserShow(this ICakeContext context, AzAdUserShowSettings settings) {
            var baseCommand = "az ad user show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ad user update".
        /// Update Azure Active Directory users.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdUser")]
        public static dynamic AzAdUserUpdate(this ICakeContext context, AzAdUserUpdateSettings settings) {
            var baseCommand = "az ad user update";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--account-enabled", settings.AccountEnabled);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--force-change-password-next-login", settings.ForceChangePasswordNextLogin);
            AppendIfNonNull(ref baseCommand, "--mail-nickname", settings.MailNickname);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az advisor configuration list".
        /// List Azure Advisor configuration for the entire subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdvisorConfiguration")]
        public static dynamic AzAdvisorConfigurationList(this ICakeContext context, AzAdvisorConfigurationListSettings settings) {
            var baseCommand = "az advisor configuration list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az advisor configuration show".
        /// Show Azure Advisor configuration for the given subscription or resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdvisorConfiguration")]
        public static dynamic AzAdvisorConfigurationShow(this ICakeContext context, AzAdvisorConfigurationShowSettings settings) {
            var baseCommand = "az advisor configuration show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az advisor configuration update".
        /// Update Azure Advisor configuration.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdvisorConfiguration")]
        public static dynamic AzAdvisorConfigurationUpdate(this ICakeContext context, AzAdvisorConfigurationUpdateSettings settings) {
            var baseCommand = "az advisor configuration update";
            AppendIfNonNull(ref baseCommand, "--exclude", settings.Exclude);
            AppendIfNonNull(ref baseCommand, "--include", settings.Include);
            AppendIfNonNull(ref baseCommand, "--low-cpu-threshold", settings.LowCpuThreshold);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az advisor recommendation disable".
        /// Disable Azure Advisor recommendations.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdvisorRecommendation")]
        public static dynamic AzAdvisorRecommendationDisable(this ICakeContext context, AzAdvisorRecommendationDisableSettings settings) {
            var baseCommand = "az advisor recommendation disable";
            AppendIfNonNull(ref baseCommand, "--days", settings.Days);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az advisor recommendation enable".
        /// Enable Azure Advisor recommendations.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdvisorRecommendation")]
        public static dynamic AzAdvisorRecommendationEnable(this ICakeContext context, AzAdvisorRecommendationEnableSettings settings) {
            var baseCommand = "az advisor recommendation enable";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az advisor recommendation list".
        /// List Azure Advisor recommendations.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdvisorRecommendation")]
        public static dynamic AzAdvisorRecommendationList(this ICakeContext context, AzAdvisorRecommendationListSettings settings) {
            var baseCommand = "az advisor recommendation list";
            AppendIfNonNull(ref baseCommand, "--category", settings.Category);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--refresh", settings.Refresh);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks browse".
        /// Show the dashboard for a Kubernetes cluster in a web browser.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksBrowse(this ICakeContext context, AzAksBrowseSettings settings) {
            var baseCommand = "az aks browse";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--disable-browser", settings.DisableBrowser);
            AppendIfNonNull(ref baseCommand, "--listen-address", settings.ListenAddress);
            AppendIfNonNull(ref baseCommand, "--listen-port", settings.ListenPort);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks create".
        /// Create a new managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksCreate(this ICakeContext context, AzAksCreateSettings settings) {
            var baseCommand = "az aks create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--aad-client-app-id", settings.AadClientAppId);
            AppendIfNonNull(ref baseCommand, "--aad-server-app-id", settings.AadServerAppId);
            AppendIfNonNull(ref baseCommand, "--aad-server-app-secret", settings.AadServerAppSecret);
            AppendIfNonNull(ref baseCommand, "--aad-tenant-id", settings.AadTenantId);
            AppendIfNonNull(ref baseCommand, "--admin-username", settings.AdminUsername);
            AppendIfNonNull(ref baseCommand, "--api-server-authorized-ip-ranges", settings.ApiServerAuthorizedIpRanges);
            AppendIfNonNull(ref baseCommand, "--attach-acr", settings.AttachAcr);
            AppendIfNonNull(ref baseCommand, "--client-secret", settings.ClientSecret);
            AppendIfNonNull(ref baseCommand, "--disable-rbac", settings.DisableRbac);
            AppendIfNonNull(ref baseCommand, "--dns-name-prefix", settings.DnsNamePrefix);
            AppendIfNonNull(ref baseCommand, "--dns-service-ip", settings.DnsServiceIp);
            AppendIfNonNull(ref baseCommand, "--docker-bridge-address", settings.DockerBridgeAddress);
            AppendIfNonNull(ref baseCommand, "--enable-addons", settings.EnableAddons);
            AppendIfNonNull(ref baseCommand, "--enable-cluster-autoscaler", settings.EnableClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--generate-ssh-keys", settings.GenerateSshKeys);
            AppendIfNonNull(ref baseCommand, "--kubernetes-version", settings.KubernetesVersion);
            AppendIfNonNull(ref baseCommand, "--load-balancer-managed-outbound-ip-count", settings.LoadBalancerManagedOutboundIpCount);
            AppendIfNonNull(ref baseCommand, "--load-balancer-outbound-ip-prefixes", settings.LoadBalancerOutboundIpPrefixes);
            AppendIfNonNull(ref baseCommand, "--load-balancer-outbound-ips", settings.LoadBalancerOutboundIps);
            AppendIfNonNull(ref baseCommand, "--load-balancer-sku", settings.LoadBalancerSku);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--max-pods", settings.MaxPods);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--network-plugin", settings.NetworkPlugin);
            AppendIfNonNull(ref baseCommand, "--network-policy", settings.NetworkPolicy);
            AppendIfNonNull(ref baseCommand, "--no-ssh-key", settings.NoSshKey);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--node-count", settings.NodeCount);
            AppendIfNonNull(ref baseCommand, "--node-osdisk-size", settings.NodeOsdiskSize);
            AppendIfNonNull(ref baseCommand, "--node-vm-size", settings.NodeVmSize);
            AppendIfNonNull(ref baseCommand, "--nodepool-name", settings.NodepoolName);
            AppendIfNonNull(ref baseCommand, "--pod-cidr", settings.PodCidr);
            AppendIfNonNull(ref baseCommand, "--service-cidr", settings.ServiceCidr);
            AppendIfNonNull(ref baseCommand, "--service-principal", settings.ServicePrincipal);
            AppendIfNonNull(ref baseCommand, "--skip-subnet-role-assignment", settings.SkipSubnetRoleAssignment);
            AppendIfNonNull(ref baseCommand, "--ssh-key-value", settings.SshKeyValue);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vm-set-type", settings.VmSetType);
            AppendIfNonNull(ref baseCommand, "--vnet-subnet-id", settings.VnetSubnetId);
            AppendIfNonNull(ref baseCommand, "--workspace-resource-id", settings.WorkspaceResourceId);
            AppendIfNonNull(ref baseCommand, "--zones", settings.Zones);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks delete".
        /// Delete a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksDelete(this ICakeContext context, AzAksDeleteSettings settings) {
            var baseCommand = "az aks delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks disable-addons".
        /// Disable Kubernetes addons.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksDisableAddons(this ICakeContext context, AzAksDisableAddonsSettings settings) {
            var baseCommand = "az aks disable-addons";
            AppendIfNonNull(ref baseCommand, "--addons", settings.Addons);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks enable-addons".
        /// Enable Kubernetes addons.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksEnableAddons(this ICakeContext context, AzAksEnableAddonsSettings settings) {
            var baseCommand = "az aks enable-addons";
            AppendIfNonNull(ref baseCommand, "--addons", settings.Addons);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--subnet-name", settings.SubnetName);
            AppendIfNonNull(ref baseCommand, "--workspace-resource-id", settings.WorkspaceResourceId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks get-credentials".
        /// Get access credentials for a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksGetCredentials(this ICakeContext context, AzAksGetCredentialsSettings settings) {
            var baseCommand = "az aks get-credentials";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--admin", settings.Admin);
            AppendIfNonNull(ref baseCommand, "--context", settings.Context);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--overwrite-existing", settings.OverwriteExisting);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks get-upgrades".
        /// Get the upgrade versions available for a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksGetUpgrades(this ICakeContext context, AzAksGetUpgradesSettings settings) {
            var baseCommand = "az aks get-upgrades";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks get-versions".
        /// Get the versions available for creating a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksGetVersions(this ICakeContext context, AzAksGetVersionsSettings settings) {
            var baseCommand = "az aks get-versions";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks install-cli".
        /// Download and install kubectl, the Kubernetes command-line tool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksInstallCli(this ICakeContext context, AzAksInstallCliSettings settings) {
            var baseCommand = "az aks install-cli";
            AppendIfNonNull(ref baseCommand, "--client-version", settings.ClientVersion);
            AppendIfNonNull(ref baseCommand, "--install-location", settings.InstallLocation);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks install-connector".
        /// Install the ACI Connector on a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksInstallConnector(this ICakeContext context, AzAksInstallConnectorSettings settings) {
            var baseCommand = "az aks install-connector";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--aci-resource-group", settings.AciResourceGroup);
            AppendIfNonNull(ref baseCommand, "--chart-url", settings.ChartUrl);
            AppendIfNonNull(ref baseCommand, "--client-secret", settings.ClientSecret);
            AppendIfNonNull(ref baseCommand, "--connector-name", settings.ConnectorName);
            AppendIfNonNull(ref baseCommand, "--image-tag", settings.ImageTag);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--service-principal", settings.ServicePrincipal);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks list".
        /// List managed Kubernetes clusters.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksList(this ICakeContext context, AzAksListSettings settings) {
            var baseCommand = "az aks list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks remove-connector".
        /// Remove the ACI Connector from a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksRemoveConnector(this ICakeContext context, AzAksRemoveConnectorSettings settings) {
            var baseCommand = "az aks remove-connector";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--connector-name", settings.ConnectorName);
            AppendIfNonNull(ref baseCommand, "--graceful", settings.Graceful);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks remove-dev-spaces".
        /// Remove Azure Dev Spaces from a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksRemoveDevSpaces(this ICakeContext context, AzAksRemoveDevSpacesSettings settings) {
            var baseCommand = "az aks remove-dev-spaces";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks rotate-certs".
        /// Rotate certificates and keys on a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksRotateCerts(this ICakeContext context, AzAksRotateCertsSettings settings) {
            var baseCommand = "az aks rotate-certs";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks scale".
        /// Scale the node pool in a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksScale(this ICakeContext context, AzAksScaleSettings settings) {
            var baseCommand = "az aks scale";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--node-count", settings.NodeCount);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--nodepool-name", settings.NodepoolName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks show".
        /// Show the details for a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksShow(this ICakeContext context, AzAksShowSettings settings) {
            var baseCommand = "az aks show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks update".
        /// Update a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksUpdate(this ICakeContext context, AzAksUpdateSettings settings) {
            var baseCommand = "az aks update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--api-server-authorized-ip-ranges", settings.ApiServerAuthorizedIpRanges);
            AppendIfNonNull(ref baseCommand, "--attach-acr", settings.AttachAcr);
            AppendIfNonNull(ref baseCommand, "--detach-acr", settings.DetachAcr);
            AppendIfNonNull(ref baseCommand, "--disable-cluster-autoscaler", settings.DisableClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--enable-cluster-autoscaler", settings.EnableClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--load-balancer-managed-outbound-ip-count", settings.LoadBalancerManagedOutboundIpCount);
            AppendIfNonNull(ref baseCommand, "--load-balancer-outbound-ip-prefixes", settings.LoadBalancerOutboundIpPrefixes);
            AppendIfNonNull(ref baseCommand, "--load-balancer-outbound-ips", settings.LoadBalancerOutboundIps);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--update-cluster-autoscaler", settings.UpdateClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks update-credentials".
        /// Update credentials for a managed Kubernetes cluster, like service principal.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksUpdateCredentials(this ICakeContext context, AzAksUpdateCredentialsSettings settings) {
            var baseCommand = "az aks update-credentials";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--aad-client-app-id", settings.AadClientAppId);
            AppendIfNonNull(ref baseCommand, "--aad-server-app-id", settings.AadServerAppId);
            AppendIfNonNull(ref baseCommand, "--aad-server-app-secret", settings.AadServerAppSecret);
            AppendIfNonNull(ref baseCommand, "--aad-tenant-id", settings.AadTenantId);
            AppendIfNonNull(ref baseCommand, "--reset-aad", settings.ResetAad);
            AppendIfNonNull(ref baseCommand, "--client-secret", settings.ClientSecret);
            AppendIfNonNull(ref baseCommand, "--reset-service-principal", settings.ResetServicePrincipal);
            AppendIfNonNull(ref baseCommand, "--service-principal", settings.ServicePrincipal);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks upgrade".
        /// Upgrade a managed Kubernetes cluster to a newer version.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksUpgrade(this ICakeContext context, AzAksUpgradeSettings settings) {
            var baseCommand = "az aks upgrade";
            AppendIfNonNull(ref baseCommand, "--kubernetes-version", settings.KubernetesVersion);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--control-plane-only", settings.ControlPlaneOnly);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks upgrade-connector".
        /// Upgrade the ACI Connector on a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksUpgradeConnector(this ICakeContext context, AzAksUpgradeConnectorSettings settings) {
            var baseCommand = "az aks upgrade-connector";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--aci-resource-group", settings.AciResourceGroup);
            AppendIfNonNull(ref baseCommand, "--chart-url", settings.ChartUrl);
            AppendIfNonNull(ref baseCommand, "--client-secret", settings.ClientSecret);
            AppendIfNonNull(ref baseCommand, "--connector-name", settings.ConnectorName);
            AppendIfNonNull(ref baseCommand, "--image-tag", settings.ImageTag);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--service-principal", settings.ServicePrincipal);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks use-dev-spaces".
        /// Use Azure Dev Spaces with a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksUseDevSpaces(this ICakeContext context, AzAksUseDevSpacesSettings settings) {
            var baseCommand = "az aks use-dev-spaces";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--space", settings.Space);
            AppendIfNonNull(ref baseCommand, "--update", settings.Update);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks wait".
        /// Wait for a managed Kubernetes cluster to reach a desired state.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public static dynamic AzAksWait(this ICakeContext context, AzAksWaitSettings settings) {
            var baseCommand = "az aks wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks nodepool add".
        /// Add a node pool to the managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public static dynamic AzAksNodepoolAdd(this ICakeContext context, AzAksNodepoolAddSettings settings) {
            var baseCommand = "az aks nodepool add";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--enable-cluster-autoscaler", settings.EnableClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--kubernetes-version", settings.KubernetesVersion);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--max-pods", settings.MaxPods);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--node-count", settings.NodeCount);
            AppendIfNonNull(ref baseCommand, "--node-osdisk-size", settings.NodeOsdiskSize);
            AppendIfNonNull(ref baseCommand, "--node-taints", settings.NodeTaints);
            AppendIfNonNull(ref baseCommand, "--node-vm-size", settings.NodeVmSize);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--vnet-subnet-id", settings.VnetSubnetId);
            AppendIfNonNull(ref baseCommand, "--zones", settings.Zones);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks nodepool delete".
        /// Delete the agent pool in the managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public static dynamic AzAksNodepoolDelete(this ICakeContext context, AzAksNodepoolDeleteSettings settings) {
            var baseCommand = "az aks nodepool delete";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks nodepool list".
        /// List node pools in the managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public static dynamic AzAksNodepoolList(this ICakeContext context, AzAksNodepoolListSettings settings) {
            var baseCommand = "az aks nodepool list";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks nodepool scale".
        /// Scale the node pool in a managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public static dynamic AzAksNodepoolScale(this ICakeContext context, AzAksNodepoolScaleSettings settings) {
            var baseCommand = "az aks nodepool scale";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--node-count", settings.NodeCount);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks nodepool show".
        /// Show the details for a node pool in the managed Kubernetes cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public static dynamic AzAksNodepoolShow(this ICakeContext context, AzAksNodepoolShowSettings settings) {
            var baseCommand = "az aks nodepool show";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks nodepool update".
        /// Update a node pool to enable/disable cluster-autoscaler or change min-count or max- count.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public static dynamic AzAksNodepoolUpdate(this ICakeContext context, AzAksNodepoolUpdateSettings settings) {
            var baseCommand = "az aks nodepool update";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--disable-cluster-autoscaler", settings.DisableClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--enable-cluster-autoscaler", settings.EnableClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--update-cluster-autoscaler", settings.UpdateClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az aks nodepool upgrade".
        /// Upgrade the node pool in a managed Kubernetes cluster.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public static dynamic AzAksNodepoolUpgrade(this ICakeContext context, AzAksNodepoolUpgradeSettings settings) {
            var baseCommand = "az aks nodepool upgrade";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--kubernetes-version", settings.KubernetesVersion);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account check-name".
        /// Checks whether the Media Service resource name is available.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccount")]
        public static dynamic AzAmsAccountCheckName(this ICakeContext context, AzAmsAccountCheckNameSettings settings) {
            var baseCommand = "az ams account check-name";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account create".
        /// Create an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccount")]
        public static dynamic AzAmsAccountCreate(this ICakeContext context, AzAmsAccountCreateSettings settings) {
            var baseCommand = "az ams account create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account delete".
        /// Delete an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccount")]
        public static dynamic AzAmsAccountDelete(this ICakeContext context, AzAmsAccountDeleteSettings settings) {
            var baseCommand = "az ams account delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account list".
        /// List Azure Media Services accounts for the entire subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccount")]
        public static dynamic AzAmsAccountList(this ICakeContext context, AzAmsAccountListSettings settings) {
            var baseCommand = "az ams account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account show".
        /// Show the details of an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccount")]
        public static dynamic AzAmsAccountShow(this ICakeContext context, AzAmsAccountShowSettings settings) {
            var baseCommand = "az ams account show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account update".
        /// Update the details of an Azure Media Services account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccount")]
        public static dynamic AzAmsAccountUpdate(this ICakeContext context, AzAmsAccountUpdateSettings settings) {
            var baseCommand = "az ams account update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account mru set".
        /// Set the type and number of media reserved units for an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountMru")]
        public static dynamic AzAmsAccountMruSet(this ICakeContext context, AzAmsAccountMruSetSettings settings) {
            var baseCommand = "az ams account mru set";
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account mru show".
        /// Show the details of media reserved units for an Azure Media Services account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountMru")]
        public static dynamic AzAmsAccountMruShow(this ICakeContext context, AzAmsAccountMruShowSettings settings) {
            var baseCommand = "az ams account mru show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account sp create".
        /// Create a service principal and configure its access to an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountSp")]
        public static dynamic AzAmsAccountSpCreate(this ICakeContext context, AzAmsAccountSpCreateSettings settings) {
            var baseCommand = "az ams account sp create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--xml", settings.Xml);
            AppendIfNonNull(ref baseCommand, "--years", settings.Years);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account sp reset-credentials".
        /// Generate a new client secret for a service principal configured for an Azure Media Services account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountSp")]
        public static dynamic AzAmsAccountSpResetCredentials(this ICakeContext context, AzAmsAccountSpResetCredentialsSettings settings) {
            var baseCommand = "az ams account sp reset-credentials";
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--xml", settings.Xml);
            AppendIfNonNull(ref baseCommand, "--years", settings.Years);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account storage add".
        /// Attach a secondary storage to an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountStorage")]
        public static dynamic AzAmsAccountStorageAdd(this ICakeContext context, AzAmsAccountStorageAddSettings settings) {
            var baseCommand = "az ams account storage add";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account storage remove".
        /// Detach a secondary storage from an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountStorage")]
        public static dynamic AzAmsAccountStorageRemove(this ICakeContext context, AzAmsAccountStorageRemoveSettings settings) {
            var baseCommand = "az ams account storage remove";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account storage sync-storage-keys".
        /// Synchronize storage account keys for a storage account associated with an Azure Media Services account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountStorage")]
        public static dynamic AzAmsAccountStorageSyncStorageKeys(this ICakeContext context, AzAmsAccountStorageSyncStorageKeysSettings settings) {
            var baseCommand = "az ams account storage sync-storage-keys";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account-filter create".
        /// Create an account filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountFilter")]
        public static dynamic AzAmsAccountFilterCreate(this ICakeContext context, AzAmsAccountFilterCreateSettings settings) {
            var baseCommand = "az ams account-filter create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--first-quality", settings.FirstQuality);
            AppendIfNonNull(ref baseCommand, "--tracks", settings.Tracks);
            AppendIfNonNull(ref baseCommand, "--end-timestamp", settings.EndTimestamp);
            AppendIfNonNull(ref baseCommand, "--force-end-timestamp", settings.ForceEndTimestamp);
            AppendIfNonNull(ref baseCommand, "--live-backoff-duration", settings.LiveBackoffDuration);
            AppendIfNonNull(ref baseCommand, "--presentation-window-duration", settings.PresentationWindowDuration);
            AppendIfNonNull(ref baseCommand, "--start-timestamp", settings.StartTimestamp);
            AppendIfNonNull(ref baseCommand, "--timescale", settings.Timescale);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account-filter delete".
        /// Delete an account filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountFilter")]
        public static dynamic AzAmsAccountFilterDelete(this ICakeContext context, AzAmsAccountFilterDeleteSettings settings) {
            var baseCommand = "az ams account-filter delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account-filter list".
        /// List all the account filters of an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountFilter")]
        public static dynamic AzAmsAccountFilterList(this ICakeContext context, AzAmsAccountFilterListSettings settings) {
            var baseCommand = "az ams account-filter list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account-filter show".
        /// Show the details of an account filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountFilter")]
        public static dynamic AzAmsAccountFilterShow(this ICakeContext context, AzAmsAccountFilterShowSettings settings) {
            var baseCommand = "az ams account-filter show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams account-filter update".
        /// Update the details of an account filter.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountFilter")]
        public static dynamic AzAmsAccountFilterUpdate(this ICakeContext context, AzAmsAccountFilterUpdateSettings settings) {
            var baseCommand = "az ams account-filter update";
            AppendIfNonNull(ref baseCommand, "--first-quality", settings.FirstQuality);
            AppendIfNonNull(ref baseCommand, "--tracks", settings.Tracks);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--end-timestamp", settings.EndTimestamp);
            AppendIfNonNull(ref baseCommand, "--force-end-timestamp", settings.ForceEndTimestamp);
            AppendIfNonNull(ref baseCommand, "--live-backoff-duration", settings.LiveBackoffDuration);
            AppendIfNonNull(ref baseCommand, "--presentation-window-duration", settings.PresentationWindowDuration);
            AppendIfNonNull(ref baseCommand, "--start-timestamp", settings.StartTimestamp);
            AppendIfNonNull(ref baseCommand, "--timescale", settings.Timescale);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset create".
        /// Create an asset.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public static dynamic AzAmsAssetCreate(this ICakeContext context, AzAmsAssetCreateSettings settings) {
            var baseCommand = "az ams asset create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--alternate-id", settings.AlternateId);
            AppendIfNonNull(ref baseCommand, "--container", settings.Container);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset delete".
        /// Delete an asset.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public static dynamic AzAmsAssetDelete(this ICakeContext context, AzAmsAssetDeleteSettings settings) {
            var baseCommand = "az ams asset delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset get-encryption-key".
        /// Get the asset storage encryption keys used to decrypt content created by version 2 of the Media Services API.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public static dynamic AzAmsAssetGetEncryptionKey(this ICakeContext context, AzAmsAssetGetEncryptionKeySettings settings) {
            var baseCommand = "az ams asset get-encryption-key";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset get-sas-urls".
        /// Lists storage container URLs with shared access signatures (SAS) for uploading and downloading Asset content. The signatures are derived from the storage account keys.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public static dynamic AzAmsAssetGetSasUrls(this ICakeContext context, AzAmsAssetGetSasUrlsSettings settings) {
            var baseCommand = "az ams asset get-sas-urls";
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset list".
        /// List all the assets of an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public static dynamic AzAmsAssetList(this ICakeContext context, AzAmsAssetListSettings settings) {
            var baseCommand = "az ams asset list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset list-streaming-locators".
        /// List streaming locators which are associated with this asset.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public static dynamic AzAmsAssetListStreamingLocators(this ICakeContext context, AzAmsAssetListStreamingLocatorsSettings settings) {
            var baseCommand = "az ams asset list-streaming-locators";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset show".
        /// Show the details of an asset.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public static dynamic AzAmsAssetShow(this ICakeContext context, AzAmsAssetShowSettings settings) {
            var baseCommand = "az ams asset show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset update".
        /// Update the details of an asset.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public static dynamic AzAmsAssetUpdate(this ICakeContext context, AzAmsAssetUpdateSettings settings) {
            var baseCommand = "az ams asset update";
            AppendIfNonNull(ref baseCommand, "--alternate-id", settings.AlternateId);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset-filter create".
        /// Create an asset filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAssetFilter")]
        public static dynamic AzAmsAssetFilterCreate(this ICakeContext context, AzAmsAssetFilterCreateSettings settings) {
            var baseCommand = "az ams asset-filter create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--first-quality", settings.FirstQuality);
            AppendIfNonNull(ref baseCommand, "--tracks", settings.Tracks);
            AppendIfNonNull(ref baseCommand, "--end-timestamp", settings.EndTimestamp);
            AppendIfNonNull(ref baseCommand, "--force-end-timestamp", settings.ForceEndTimestamp);
            AppendIfNonNull(ref baseCommand, "--live-backoff-duration", settings.LiveBackoffDuration);
            AppendIfNonNull(ref baseCommand, "--presentation-window-duration", settings.PresentationWindowDuration);
            AppendIfNonNull(ref baseCommand, "--start-timestamp", settings.StartTimestamp);
            AppendIfNonNull(ref baseCommand, "--timescale", settings.Timescale);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset-filter delete".
        /// Delete an asset filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAssetFilter")]
        public static dynamic AzAmsAssetFilterDelete(this ICakeContext context, AzAmsAssetFilterDeleteSettings settings) {
            var baseCommand = "az ams asset-filter delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset-filter list".
        /// List all the asset filters of an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAssetFilter")]
        public static dynamic AzAmsAssetFilterList(this ICakeContext context, AzAmsAssetFilterListSettings settings) {
            var baseCommand = "az ams asset-filter list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset-filter show".
        /// Show the details of an asset filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAssetFilter")]
        public static dynamic AzAmsAssetFilterShow(this ICakeContext context, AzAmsAssetFilterShowSettings settings) {
            var baseCommand = "az ams asset-filter show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams asset-filter update".
        /// Update the details of an asset filter.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAssetFilter")]
        public static dynamic AzAmsAssetFilterUpdate(this ICakeContext context, AzAmsAssetFilterUpdateSettings settings) {
            var baseCommand = "az ams asset-filter update";
            AppendIfNonNull(ref baseCommand, "--first-quality", settings.FirstQuality);
            AppendIfNonNull(ref baseCommand, "--tracks", settings.Tracks);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--end-timestamp", settings.EndTimestamp);
            AppendIfNonNull(ref baseCommand, "--force-end-timestamp", settings.ForceEndTimestamp);
            AppendIfNonNull(ref baseCommand, "--live-backoff-duration", settings.LiveBackoffDuration);
            AppendIfNonNull(ref baseCommand, "--presentation-window-duration", settings.PresentationWindowDuration);
            AppendIfNonNull(ref baseCommand, "--start-timestamp", settings.StartTimestamp);
            AppendIfNonNull(ref baseCommand, "--timescale", settings.Timescale);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams content-key-policy create".
        /// Create a new content key policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicy")]
        public static dynamic AzAmsContentKeyPolicyCreate(this ICakeContext context, AzAmsContentKeyPolicyCreateSettings settings) {
            var baseCommand = "az ams content-key-policy create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-option-name", settings.PolicyOptionName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--clear-key-configuration", settings.ClearKeyConfiguration);
            AppendIfNonNull(ref baseCommand, "--ask", settings.Ask);
            AppendIfNonNull(ref baseCommand, "--fair-play-pfx", settings.FairPlayPfx);
            AppendIfNonNull(ref baseCommand, "--fair-play-pfx-password", settings.FairPlayPfxPassword);
            AppendIfNonNull(ref baseCommand, "--rental-and-lease-key-type", settings.RentalAndLeaseKeyType);
            AppendIfNonNull(ref baseCommand, "--rental-duration", settings.RentalDuration);
            AppendIfNonNull(ref baseCommand, "--open-restriction", settings.OpenRestriction);
            AppendIfNonNull(ref baseCommand, "--play-ready-template", settings.PlayReadyTemplate);
            AppendIfNonNull(ref baseCommand, "--alt-rsa-token-keys", settings.AltRsaTokenKeys);
            AppendIfNonNull(ref baseCommand, "--alt-symmetric-token-keys", settings.AltSymmetricTokenKeys);
            AppendIfNonNull(ref baseCommand, "--alt-x509-token-keys", settings.AltX509TokenKeys);
            AppendIfNonNull(ref baseCommand, "--audience", settings.Audience);
            AppendIfNonNull(ref baseCommand, "--issuer", settings.Issuer);
            AppendIfNonNull(ref baseCommand, "--open-id-connect-discovery-document", settings.OpenIdConnectDiscoveryDocument);
            AppendIfNonNull(ref baseCommand, "--token-claims", settings.TokenClaims);
            AppendIfNonNull(ref baseCommand, "--token-key", settings.TokenKey);
            AppendIfNonNull(ref baseCommand, "--token-key-type", settings.TokenKeyType);
            AppendIfNonNull(ref baseCommand, "--token-type", settings.TokenType);
            AppendIfNonNull(ref baseCommand, "--widevine-template", settings.WidevineTemplate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams content-key-policy delete".
        /// Delete a content key policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicy")]
        public static dynamic AzAmsContentKeyPolicyDelete(this ICakeContext context, AzAmsContentKeyPolicyDeleteSettings settings) {
            var baseCommand = "az ams content-key-policy delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams content-key-policy list".
        /// List all the content key policies within an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicy")]
        public static dynamic AzAmsContentKeyPolicyList(this ICakeContext context, AzAmsContentKeyPolicyListSettings settings) {
            var baseCommand = "az ams content-key-policy list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams content-key-policy show".
        /// Show an existing content key policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicy")]
        public static dynamic AzAmsContentKeyPolicyShow(this ICakeContext context, AzAmsContentKeyPolicyShowSettings settings) {
            var baseCommand = "az ams content-key-policy show";
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams content-key-policy update".
        /// Update an existing content key policy.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicy")]
        public static dynamic AzAmsContentKeyPolicyUpdate(this ICakeContext context, AzAmsContentKeyPolicyUpdateSettings settings) {
            var baseCommand = "az ams content-key-policy update";
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams content-key-policy option add".
        /// Add a new option to an existing content key policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicyOption")]
        public static dynamic AzAmsContentKeyPolicyOptionAdd(this ICakeContext context, AzAmsContentKeyPolicyOptionAddSettings settings) {
            var baseCommand = "az ams content-key-policy option add";
            AppendIfNonNull(ref baseCommand, "--policy-option-name", settings.PolicyOptionName);
            AppendIfNonNull(ref baseCommand, "--clear-key-configuration", settings.ClearKeyConfiguration);
            AppendIfNonNull(ref baseCommand, "--ask", settings.Ask);
            AppendIfNonNull(ref baseCommand, "--fair-play-pfx", settings.FairPlayPfx);
            AppendIfNonNull(ref baseCommand, "--fair-play-pfx-password", settings.FairPlayPfxPassword);
            AppendIfNonNull(ref baseCommand, "--rental-and-lease-key-type", settings.RentalAndLeaseKeyType);
            AppendIfNonNull(ref baseCommand, "--rental-duration", settings.RentalDuration);
            AppendIfNonNull(ref baseCommand, "--open-restriction", settings.OpenRestriction);
            AppendIfNonNull(ref baseCommand, "--play-ready-template", settings.PlayReadyTemplate);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--alt-rsa-token-keys", settings.AltRsaTokenKeys);
            AppendIfNonNull(ref baseCommand, "--alt-symmetric-token-keys", settings.AltSymmetricTokenKeys);
            AppendIfNonNull(ref baseCommand, "--alt-x509-token-keys", settings.AltX509TokenKeys);
            AppendIfNonNull(ref baseCommand, "--audience", settings.Audience);
            AppendIfNonNull(ref baseCommand, "--issuer", settings.Issuer);
            AppendIfNonNull(ref baseCommand, "--open-id-connect-discovery-document", settings.OpenIdConnectDiscoveryDocument);
            AppendIfNonNull(ref baseCommand, "--token-claims", settings.TokenClaims);
            AppendIfNonNull(ref baseCommand, "--token-key", settings.TokenKey);
            AppendIfNonNull(ref baseCommand, "--token-key-type", settings.TokenKeyType);
            AppendIfNonNull(ref baseCommand, "--token-type", settings.TokenType);
            AppendIfNonNull(ref baseCommand, "--widevine-template", settings.WidevineTemplate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams content-key-policy option remove".
        /// Remove an option from an existing content key policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicyOption")]
        public static dynamic AzAmsContentKeyPolicyOptionRemove(this ICakeContext context, AzAmsContentKeyPolicyOptionRemoveSettings settings) {
            var baseCommand = "az ams content-key-policy option remove";
            AppendIfNonNull(ref baseCommand, "--policy-option-id", settings.PolicyOptionId);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams content-key-policy option update".
        /// Update an option from an existing content key policy.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicyOption")]
        public static dynamic AzAmsContentKeyPolicyOptionUpdate(this ICakeContext context, AzAmsContentKeyPolicyOptionUpdateSettings settings) {
            var baseCommand = "az ams content-key-policy option update";
            AppendIfNonNull(ref baseCommand, "--policy-option-id", settings.PolicyOptionId);
            AppendIfNonNull(ref baseCommand, "--policy-option-name", settings.PolicyOptionName);
            AppendIfNonNull(ref baseCommand, "--ask", settings.Ask);
            AppendIfNonNull(ref baseCommand, "--fair-play-pfx", settings.FairPlayPfx);
            AppendIfNonNull(ref baseCommand, "--fair-play-pfx-password", settings.FairPlayPfxPassword);
            AppendIfNonNull(ref baseCommand, "--rental-and-lease-key-type", settings.RentalAndLeaseKeyType);
            AppendIfNonNull(ref baseCommand, "--rental-duration", settings.RentalDuration);
            AppendIfNonNull(ref baseCommand, "--play-ready-template", settings.PlayReadyTemplate);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--add-alt-token-key", settings.AddAltTokenKey);
            AppendIfNonNull(ref baseCommand, "--add-alt-token-key-type", settings.AddAltTokenKeyType);
            AppendIfNonNull(ref baseCommand, "--audience", settings.Audience);
            AppendIfNonNull(ref baseCommand, "--issuer", settings.Issuer);
            AppendIfNonNull(ref baseCommand, "--open-id-connect-discovery-document", settings.OpenIdConnectDiscoveryDocument);
            AppendIfNonNull(ref baseCommand, "--token-claims", settings.TokenClaims);
            AppendIfNonNull(ref baseCommand, "--token-key", settings.TokenKey);
            AppendIfNonNull(ref baseCommand, "--token-key-type", settings.TokenKeyType);
            AppendIfNonNull(ref baseCommand, "--token-type", settings.TokenType);
            AppendIfNonNull(ref baseCommand, "--widevine-template", settings.WidevineTemplate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams job cancel".
        /// Cancel a job.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsJob")]
        public static dynamic AzAmsJobCancel(this ICakeContext context, AzAmsJobCancelSettings settings) {
            var baseCommand = "az ams job cancel";
            AppendIfNonNull(ref baseCommand, "--delete", settings.Delete);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--transform-name", settings.TransformName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams job create".
        /// Create and start a job.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsJob")]
        public static dynamic AzAmsJobCreate(this ICakeContext context, AzAmsJobCreateSettings settings) {
            var baseCommand = "az ams job create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--output-assets", settings.OutputAssets);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--transform-name", settings.TransformName);
            AppendIfNonNull(ref baseCommand, "--correlation-data", settings.CorrelationData);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--files", settings.Files);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--input-asset-name", settings.InputAssetName);
            AppendIfNonNull(ref baseCommand, "--base-uri", settings.BaseUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams job delete".
        /// Delete a job.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsJob")]
        public static dynamic AzAmsJobDelete(this ICakeContext context, AzAmsJobDeleteSettings settings) {
            var baseCommand = "az ams job delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--transform-name", settings.TransformName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams job list".
        /// List all the jobs of a transform within an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsJob")]
        public static dynamic AzAmsJobList(this ICakeContext context, AzAmsJobListSettings settings) {
            var baseCommand = "az ams job list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--transform-name", settings.TransformName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams job show".
        /// Show the details of a job.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsJob")]
        public static dynamic AzAmsJobShow(this ICakeContext context, AzAmsJobShowSettings settings) {
            var baseCommand = "az ams job show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--transform-name", settings.TransformName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams job update".
        /// Update an existing job.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsJob")]
        public static dynamic AzAmsJobUpdate(this ICakeContext context, AzAmsJobUpdateSettings settings) {
            var baseCommand = "az ams job update";
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--transform-name", settings.TransformName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-event create".
        /// Create a live event.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public static dynamic AzAmsLiveEventCreate(this ICakeContext context, AzAmsLiveEventCreateSettings settings) {
            var baseCommand = "az ams live-event create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--auto-start", settings.AutoStart);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--stream-options", settings.StreamOptions);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vanity-url", settings.VanityUrl);
            AppendIfNonNull(ref baseCommand, "--client-access-policy", settings.ClientAccessPolicy);
            AppendIfNonNull(ref baseCommand, "--cross-domain-policy", settings.CrossDomainPolicy);
            AppendIfNonNull(ref baseCommand, "--encoding-type", settings.EncodingType);
            AppendIfNonNull(ref baseCommand, "--preset-name", settings.PresetName);
            AppendIfNonNull(ref baseCommand, "--ips", settings.Ips);
            AppendIfNonNull(ref baseCommand, "--streaming-protocol", settings.StreamingProtocol);
            AppendIfNonNull(ref baseCommand, "--access-token", settings.AccessToken);
            AppendIfNonNull(ref baseCommand, "--key-frame-interval-duration", settings.KeyFrameIntervalDuration);
            AppendIfNonNull(ref baseCommand, "--alternative-media-id", settings.AlternativeMediaId);
            AppendIfNonNull(ref baseCommand, "--preview-ips", settings.PreviewIps);
            AppendIfNonNull(ref baseCommand, "--preview-locator", settings.PreviewLocator);
            AppendIfNonNull(ref baseCommand, "--streaming-policy-name", settings.StreamingPolicyName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-event delete".
        /// Delete a live event.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public static dynamic AzAmsLiveEventDelete(this ICakeContext context, AzAmsLiveEventDeleteSettings settings) {
            var baseCommand = "az ams live-event delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-event list".
        /// List all the live events of an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public static dynamic AzAmsLiveEventList(this ICakeContext context, AzAmsLiveEventListSettings settings) {
            var baseCommand = "az ams live-event list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-event reset".
        /// Reset a live event.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public static dynamic AzAmsLiveEventReset(this ICakeContext context, AzAmsLiveEventResetSettings settings) {
            var baseCommand = "az ams live-event reset";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-event show".
        /// Show the details of a live event.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public static dynamic AzAmsLiveEventShow(this ICakeContext context, AzAmsLiveEventShowSettings settings) {
            var baseCommand = "az ams live-event show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-event start".
        /// Start a live event.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public static dynamic AzAmsLiveEventStart(this ICakeContext context, AzAmsLiveEventStartSettings settings) {
            var baseCommand = "az ams live-event start";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-event stop".
        /// Stop a live event.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public static dynamic AzAmsLiveEventStop(this ICakeContext context, AzAmsLiveEventStopSettings settings) {
            var baseCommand = "az ams live-event stop";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--remove-outputs-on-stop", settings.RemoveOutputsOnStop);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-event update".
        /// Update the details of a live event.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public static dynamic AzAmsLiveEventUpdate(this ICakeContext context, AzAmsLiveEventUpdateSettings settings) {
            var baseCommand = "az ams live-event update";
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--client-access-policy", settings.ClientAccessPolicy);
            AppendIfNonNull(ref baseCommand, "--cross-domain-policy", settings.CrossDomainPolicy);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ips", settings.Ips);
            AppendIfNonNull(ref baseCommand, "--key-frame-interval-duration", settings.KeyFrameIntervalDuration);
            AppendIfNonNull(ref baseCommand, "--preview-ips", settings.PreviewIps);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-event wait".
        /// Place the CLI in a waiting state until a condition of the live event is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public static dynamic AzAmsLiveEventWait(this ICakeContext context, AzAmsLiveEventWaitSettings settings) {
            var baseCommand = "az ams live-event wait";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-output create".
        /// Create a live output.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveOutput")]
        public static dynamic AzAmsLiveOutputCreate(this ICakeContext context, AzAmsLiveOutputCreateSettings settings) {
            var baseCommand = "az ams live-output create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--archive-window-length", settings.ArchiveWindowLength);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--live-event-name", settings.LiveEventName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--fragments-per-ts-segment", settings.FragmentsPerTsSegment);
            AppendIfNonNull(ref baseCommand, "--manifest-name", settings.ManifestName);
            AppendIfNonNull(ref baseCommand, "--output-snap-time", settings.OutputSnapTime);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-output delete".
        /// Delete a live output.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveOutput")]
        public static dynamic AzAmsLiveOutputDelete(this ICakeContext context, AzAmsLiveOutputDeleteSettings settings) {
            var baseCommand = "az ams live-output delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--live-event-name", settings.LiveEventName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-output list".
        /// List all the live outputs in a live event.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveOutput")]
        public static dynamic AzAmsLiveOutputList(this ICakeContext context, AzAmsLiveOutputListSettings settings) {
            var baseCommand = "az ams live-output list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--live-event-name", settings.LiveEventName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams live-output show".
        /// Show the details of a live output.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveOutput")]
        public static dynamic AzAmsLiveOutputShow(this ICakeContext context, AzAmsLiveOutputShowSettings settings) {
            var baseCommand = "az ams live-output show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--live-event-name", settings.LiveEventName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-endpoint create".
        /// Create a streaming endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public static dynamic AzAmsStreamingEndpointCreate(this ICakeContext context, AzAmsStreamingEndpointCreateSettings settings) {
            var baseCommand = "az ams streaming-endpoint create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scale-units", settings.ScaleUnits);
            AppendIfNonNull(ref baseCommand, "--auto-start", settings.AutoStart);
            AppendIfNonNull(ref baseCommand, "--availability-set-name", settings.AvailabilitySetName);
            AppendIfNonNull(ref baseCommand, "--custom-host-names", settings.CustomHostNames);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--max-cache-age", settings.MaxCacheAge);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--ips", settings.Ips);
            AppendIfNonNull(ref baseCommand, "--cdn-profile", settings.CdnProfile);
            AppendIfNonNull(ref baseCommand, "--cdn-provider", settings.CdnProvider);
            AppendIfNonNull(ref baseCommand, "--client-access-policy", settings.ClientAccessPolicy);
            AppendIfNonNull(ref baseCommand, "--cross-domain-policy", settings.CrossDomainPolicy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-endpoint delete".
        /// Delete a streaming endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public static dynamic AzAmsStreamingEndpointDelete(this ICakeContext context, AzAmsStreamingEndpointDeleteSettings settings) {
            var baseCommand = "az ams streaming-endpoint delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-endpoint list".
        /// List all the streaming endpoints within an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public static dynamic AzAmsStreamingEndpointList(this ICakeContext context, AzAmsStreamingEndpointListSettings settings) {
            var baseCommand = "az ams streaming-endpoint list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-endpoint scale".
        /// Set the scale of a streaming endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public static dynamic AzAmsStreamingEndpointScale(this ICakeContext context, AzAmsStreamingEndpointScaleSettings settings) {
            var baseCommand = "az ams streaming-endpoint scale";
            AppendIfNonNull(ref baseCommand, "--scale-units", settings.ScaleUnits);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-endpoint show".
        /// Show the details of a streaming endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public static dynamic AzAmsStreamingEndpointShow(this ICakeContext context, AzAmsStreamingEndpointShowSettings settings) {
            var baseCommand = "az ams streaming-endpoint show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-endpoint start".
        /// Start a streaming endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public static dynamic AzAmsStreamingEndpointStart(this ICakeContext context, AzAmsStreamingEndpointStartSettings settings) {
            var baseCommand = "az ams streaming-endpoint start";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-endpoint stop".
        /// Stop a streaming endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public static dynamic AzAmsStreamingEndpointStop(this ICakeContext context, AzAmsStreamingEndpointStopSettings settings) {
            var baseCommand = "az ams streaming-endpoint stop";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-endpoint update".
        /// Update the details of a streaming endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public static dynamic AzAmsStreamingEndpointUpdate(this ICakeContext context, AzAmsStreamingEndpointUpdateSettings settings) {
            var baseCommand = "az ams streaming-endpoint update";
            AppendIfNonNull(ref baseCommand, "--custom-host-names", settings.CustomHostNames);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--max-cache-age", settings.MaxCacheAge);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--ips", settings.Ips);
            AppendIfNonNull(ref baseCommand, "--cdn-profile", settings.CdnProfile);
            AppendIfNonNull(ref baseCommand, "--cdn-provider", settings.CdnProvider);
            AppendIfNonNull(ref baseCommand, "--disable-cdn", settings.DisableCdn);
            AppendIfNonNull(ref baseCommand, "--client-access-policy", settings.ClientAccessPolicy);
            AppendIfNonNull(ref baseCommand, "--cross-domain-policy", settings.CrossDomainPolicy);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-endpoint wait".
        /// Place the CLI in a waiting state until a condition of the streaming endpoint is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public static dynamic AzAmsStreamingEndpointWait(this ICakeContext context, AzAmsStreamingEndpointWaitSettings settings) {
            var baseCommand = "az ams streaming-endpoint wait";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-endpoint akamai add".
        /// Add an AkamaiAccessControl to an existing streaming endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpointAkamai")]
        public static dynamic AzAmsStreamingEndpointAkamaiAdd(this ICakeContext context, AzAmsStreamingEndpointAkamaiAddSettings settings) {
            var baseCommand = "az ams streaming-endpoint akamai add";
            AppendIfNonNull(ref baseCommand, "--base64-key", settings.Base64Key);
            AppendIfNonNull(ref baseCommand, "--expiration", settings.Expiration);
            AppendIfNonNull(ref baseCommand, "--identifier", settings.Identifier);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-endpoint akamai remove".
        /// Remove an AkamaiAccessControl from an existing streaming endpoint.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpointAkamai")]
        public static dynamic AzAmsStreamingEndpointAkamaiRemove(this ICakeContext context, AzAmsStreamingEndpointAkamaiRemoveSettings settings) {
            var baseCommand = "az ams streaming-endpoint akamai remove";
            AppendIfNonNull(ref baseCommand, "--identifier", settings.Identifier);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-locator create".
        /// Create a streaming locator.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingLocator")]
        public static dynamic AzAmsStreamingLocatorCreate(this ICakeContext context, AzAmsStreamingLocatorCreateSettings settings) {
            var baseCommand = "az ams streaming-locator create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--streaming-policy-name", settings.StreamingPolicyName);
            AppendIfNonNull(ref baseCommand, "--alternative-media-id", settings.AlternativeMediaId);
            AppendIfNonNull(ref baseCommand, "--content-key-policy-name", settings.ContentKeyPolicyName);
            AppendIfNonNull(ref baseCommand, "--content-keys", settings.ContentKeys);
            AppendIfNonNull(ref baseCommand, "--end-time", settings.EndTime);
            AppendIfNonNull(ref baseCommand, "--filters", settings.Filters);
            AppendIfNonNull(ref baseCommand, "--start-time", settings.StartTime);
            AppendIfNonNull(ref baseCommand, "--streaming-locator-id", settings.StreamingLocatorId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-locator delete".
        /// Delete a Streaming Locator.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingLocator")]
        public static dynamic AzAmsStreamingLocatorDelete(this ICakeContext context, AzAmsStreamingLocatorDeleteSettings settings) {
            var baseCommand = "az ams streaming-locator delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-locator get-paths".
        /// List paths supported by a streaming locator.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingLocator")]
        public static dynamic AzAmsStreamingLocatorGetPaths(this ICakeContext context, AzAmsStreamingLocatorGetPathsSettings settings) {
            var baseCommand = "az ams streaming-locator get-paths";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-locator list".
        /// List all the streaming locators within an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingLocator")]
        public static dynamic AzAmsStreamingLocatorList(this ICakeContext context, AzAmsStreamingLocatorListSettings settings) {
            var baseCommand = "az ams streaming-locator list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-locator list-content-keys".
        /// List content keys used by a streaming locator.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingLocator")]
        public static dynamic AzAmsStreamingLocatorListContentKeys(this ICakeContext context, AzAmsStreamingLocatorListContentKeysSettings settings) {
            var baseCommand = "az ams streaming-locator list-content-keys";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-locator show".
        /// Show the details of a streaming locator.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingLocator")]
        public static dynamic AzAmsStreamingLocatorShow(this ICakeContext context, AzAmsStreamingLocatorShowSettings settings) {
            var baseCommand = "az ams streaming-locator show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-policy create".
        /// Create a streaming policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingPolicy")]
        public static dynamic AzAmsStreamingPolicyCreate(this ICakeContext context, AzAmsStreamingPolicyCreateSettings settings) {
            var baseCommand = "az ams streaming-policy create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--default-content-key-policy-name", settings.DefaultContentKeyPolicyName);
            AppendIfNonNull(ref baseCommand, "--no-encryption-protocols", settings.NoEncryptionProtocols);
            AppendIfNonNull(ref baseCommand, "--cbcs-clear-tracks", settings.CbcsClearTracks);
            AppendIfNonNull(ref baseCommand, "--cbcs-default-key-label", settings.CbcsDefaultKeyLabel);
            AppendIfNonNull(ref baseCommand, "--cbcs-default-key-policy-name", settings.CbcsDefaultKeyPolicyName);
            AppendIfNonNull(ref baseCommand, "--cbcs-fair-play-allow-persistent-license", settings.CbcsFairPlayAllowPersistentLicense);
            AppendIfNonNull(ref baseCommand, "--cbcs-fair-play-template", settings.CbcsFairPlayTemplate);
            AppendIfNonNull(ref baseCommand, "--cbcs-key-to-track-mappings", settings.CbcsKeyToTrackMappings);
            AppendIfNonNull(ref baseCommand, "--cbcs-protocols", settings.CbcsProtocols);
            AppendIfNonNull(ref baseCommand, "--cenc-clear-tracks", settings.CencClearTracks);
            AppendIfNonNull(ref baseCommand, "--cenc-default-key-label", settings.CencDefaultKeyLabel);
            AppendIfNonNull(ref baseCommand, "--cenc-default-key-policy-name", settings.CencDefaultKeyPolicyName);
            AppendIfNonNull(ref baseCommand, "--cenc-disable-play-ready", settings.CencDisablePlayReady);
            AppendIfNonNull(ref baseCommand, "--cenc-disable-widevine", settings.CencDisableWidevine);
            AppendIfNonNull(ref baseCommand, "--cenc-key-to-track-mappings", settings.CencKeyToTrackMappings);
            AppendIfNonNull(ref baseCommand, "--cenc-play-ready-attributes", settings.CencPlayReadyAttributes);
            AppendIfNonNull(ref baseCommand, "--cenc-play-ready-template", settings.CencPlayReadyTemplate);
            AppendIfNonNull(ref baseCommand, "--cenc-protocols", settings.CencProtocols);
            AppendIfNonNull(ref baseCommand, "--cenc-widevine-template", settings.CencWidevineTemplate);
            AppendIfNonNull(ref baseCommand, "--envelope-clear-tracks", settings.EnvelopeClearTracks);
            AppendIfNonNull(ref baseCommand, "--envelope-default-key-label", settings.EnvelopeDefaultKeyLabel);
            AppendIfNonNull(ref baseCommand, "--envelope-default-key-policy-name", settings.EnvelopeDefaultKeyPolicyName);
            AppendIfNonNull(ref baseCommand, "--envelope-key-to-track-mappings", settings.EnvelopeKeyToTrackMappings);
            AppendIfNonNull(ref baseCommand, "--envelope-protocols", settings.EnvelopeProtocols);
            AppendIfNonNull(ref baseCommand, "--envelope-template", settings.EnvelopeTemplate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-policy delete".
        /// Delete a Streaming Policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingPolicy")]
        public static dynamic AzAmsStreamingPolicyDelete(this ICakeContext context, AzAmsStreamingPolicyDeleteSettings settings) {
            var baseCommand = "az ams streaming-policy delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-policy list".
        /// List all the streaming policies within an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingPolicy")]
        public static dynamic AzAmsStreamingPolicyList(this ICakeContext context, AzAmsStreamingPolicyListSettings settings) {
            var baseCommand = "az ams streaming-policy list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams streaming-policy show".
        /// Show the details of a streaming policy.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingPolicy")]
        public static dynamic AzAmsStreamingPolicyShow(this ICakeContext context, AzAmsStreamingPolicyShowSettings settings) {
            var baseCommand = "az ams streaming-policy show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams transform create".
        /// Create a transform.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransform")]
        public static dynamic AzAmsTransformCreate(this ICakeContext context, AzAmsTransformCreateSettings settings) {
            var baseCommand = "az ams transform create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--preset", settings.Preset);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--on-error", settings.OnError);
            AppendIfNonNull(ref baseCommand, "--relative-priority", settings.RelativePriority);
            AppendIfNonNull(ref baseCommand, "--audio-language", settings.AudioLanguage);
            AppendIfNonNull(ref baseCommand, "--insights-to-extract", settings.InsightsToExtract);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams transform delete".
        /// Delete a transform.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransform")]
        public static dynamic AzAmsTransformDelete(this ICakeContext context, AzAmsTransformDeleteSettings settings) {
            var baseCommand = "az ams transform delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams transform list".
        /// List all the transforms of an Azure Media Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransform")]
        public static dynamic AzAmsTransformList(this ICakeContext context, AzAmsTransformListSettings settings) {
            var baseCommand = "az ams transform list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams transform show".
        /// Show the details of a transform.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransform")]
        public static dynamic AzAmsTransformShow(this ICakeContext context, AzAmsTransformShowSettings settings) {
            var baseCommand = "az ams transform show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams transform update".
        /// Update the details of a transform.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransform")]
        public static dynamic AzAmsTransformUpdate(this ICakeContext context, AzAmsTransformUpdateSettings settings) {
            var baseCommand = "az ams transform update";
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams transform output add".
        /// Add an output to an existing transform.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransformOutput")]
        public static dynamic AzAmsTransformOutputAdd(this ICakeContext context, AzAmsTransformOutputAddSettings settings) {
            var baseCommand = "az ams transform output add";
            AppendIfNonNull(ref baseCommand, "--preset", settings.Preset);
            AppendIfNonNull(ref baseCommand, "--on-error", settings.OnError);
            AppendIfNonNull(ref baseCommand, "--relative-priority", settings.RelativePriority);
            AppendIfNonNull(ref baseCommand, "--audio-language", settings.AudioLanguage);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--insights-to-extract", settings.InsightsToExtract);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ams transform output remove".
        /// Remove an output from an existing transform.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransformOutput")]
        public static dynamic AzAmsTransformOutputRemove(this ICakeContext context, AzAmsTransformOutputRemoveSettings settings) {
            var baseCommand = "az ams transform output remove";
            AppendIfNonNull(ref baseCommand, "--output-index", settings.OutputIndex);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig create".
        /// Create an App Configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfig")]
        public static dynamic AzAppconfigCreate(this ICakeContext context, AzAppconfigCreateSettings settings) {
            var baseCommand = "az appconfig create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig delete".
        /// Delete an App Configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfig")]
        public static dynamic AzAppconfigDelete(this ICakeContext context, AzAppconfigDeleteSettings settings) {
            var baseCommand = "az appconfig delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig list".
        /// Lists all App Configurations under the current subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfig")]
        public static dynamic AzAppconfigList(this ICakeContext context, AzAppconfigListSettings settings) {
            var baseCommand = "az appconfig list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig show".
        /// Show properties of an App Configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfig")]
        public static dynamic AzAppconfigShow(this ICakeContext context, AzAppconfigShowSettings settings) {
            var baseCommand = "az appconfig show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig update".
        /// Update an App Configuration.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfig")]
        public static dynamic AzAppconfigUpdate(this ICakeContext context, AzAppconfigUpdateSettings settings) {
            var baseCommand = "az appconfig update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig credential list".
        /// List access keys of an App Configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigCredential")]
        public static dynamic AzAppconfigCredentialList(this ICakeContext context, AzAppconfigCredentialListSettings settings) {
            var baseCommand = "az appconfig credential list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig credential regenerate".
        /// Regenerate an access key for an App Configuration.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigCredential")]
        public static dynamic AzAppconfigCredentialRegenerate(this ICakeContext context, AzAppconfigCredentialRegenerateSettings settings) {
            var baseCommand = "az appconfig credential regenerate";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig feature delete".
        /// Delete feature flag.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public static dynamic AzAppconfigFeatureDelete(this ICakeContext context, AzAppconfigFeatureDeleteSettings settings) {
            var baseCommand = "az appconfig feature delete";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig feature disable".
        /// Disable a feature flag to turn it OFF for use.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public static dynamic AzAppconfigFeatureDisable(this ICakeContext context, AzAppconfigFeatureDisableSettings settings) {
            var baseCommand = "az appconfig feature disable";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig feature enable".
        /// Enable a feature flag to turn it ON for use.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public static dynamic AzAppconfigFeatureEnable(this ICakeContext context, AzAppconfigFeatureEnableSettings settings) {
            var baseCommand = "az appconfig feature enable";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig feature list".
        /// List feature flags.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public static dynamic AzAppconfigFeatureList(this ICakeContext context, AzAppconfigFeatureListSettings settings) {
            var baseCommand = "az appconfig feature list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--fields", settings.Fields);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig feature lock".
        /// Lock a feature flag to prohibit write operations.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public static dynamic AzAppconfigFeatureLock(this ICakeContext context, AzAppconfigFeatureLockSettings settings) {
            var baseCommand = "az appconfig feature lock";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig feature set".
        /// Set a feature flag.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public static dynamic AzAppconfigFeatureSet(this ICakeContext context, AzAppconfigFeatureSetSettings settings) {
            var baseCommand = "az appconfig feature set";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig feature show".
        /// Show all attributes of a feature flag.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public static dynamic AzAppconfigFeatureShow(this ICakeContext context, AzAppconfigFeatureShowSettings settings) {
            var baseCommand = "az appconfig feature show";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--fields", settings.Fields);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig feature unlock".
        /// Unlock a feature to gain write operations.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public static dynamic AzAppconfigFeatureUnlock(this ICakeContext context, AzAppconfigFeatureUnlockSettings settings) {
            var baseCommand = "az appconfig feature unlock";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig feature filter add".
        /// Add a filter to a feature flag.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeatureFilter")]
        public static dynamic AzAppconfigFeatureFilterAdd(this ICakeContext context, AzAppconfigFeatureFilterAddSettings settings) {
            var baseCommand = "az appconfig feature filter add";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--filter-parameters", settings.FilterParameters);
            AppendIfNonNull(ref baseCommand, "--index", settings.Index);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig feature filter delete".
        /// Delete a filter from a feature flag.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeatureFilter")]
        public static dynamic AzAppconfigFeatureFilterDelete(this ICakeContext context, AzAppconfigFeatureFilterDeleteSettings settings) {
            var baseCommand = "az appconfig feature filter delete";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--index", settings.Index);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig feature filter list".
        /// List all filters for a feature flag.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeatureFilter")]
        public static dynamic AzAppconfigFeatureFilterList(this ICakeContext context, AzAppconfigFeatureFilterListSettings settings) {
            var baseCommand = "az appconfig feature filter list";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig feature filter show".
        /// Show filters of a feature flag.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeatureFilter")]
        public static dynamic AzAppconfigFeatureFilterShow(this ICakeContext context, AzAppconfigFeatureFilterShowSettings settings) {
            var baseCommand = "az appconfig feature filter show";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--index", settings.Index);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig kv delete".
        /// Delete key-values.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public static dynamic AzAppconfigKvDelete(this ICakeContext context, AzAppconfigKvDeleteSettings settings) {
            var baseCommand = "az appconfig kv delete";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig kv export".
        /// Export configurations to another place from your App Configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public static dynamic AzAppconfigKvExport(this ICakeContext context, AzAppconfigKvExportSettings settings) {
            var baseCommand = "az appconfig kv export";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--dest-connection-string", settings.DestConnectionString);
            AppendIfNonNull(ref baseCommand, "--dest-label", settings.DestLabel);
            AppendIfNonNull(ref baseCommand, "--dest-name", settings.DestName);
            AppendIfNonNull(ref baseCommand, "--appservice-account", settings.AppserviceAccount);
            AppendIfNonNull(ref baseCommand, "--format", settings.Format);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--separator", settings.Separator);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig kv import".
        /// Import configurations into your App Configuration from another place.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public static dynamic AzAppconfigKvImport(this ICakeContext context, AzAppconfigKvImportSettings settings) {
            var baseCommand = "az appconfig kv import";
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--src-connection-string", settings.SrcConnectionString);
            AppendIfNonNull(ref baseCommand, "--src-key", settings.SrcKey);
            AppendIfNonNull(ref baseCommand, "--src-label", settings.SrcLabel);
            AppendIfNonNull(ref baseCommand, "--src-name", settings.SrcName);
            AppendIfNonNull(ref baseCommand, "--appservice-account", settings.AppserviceAccount);
            AppendIfNonNull(ref baseCommand, "--depth", settings.Depth);
            AppendIfNonNull(ref baseCommand, "--format", settings.Format);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--separator", settings.Separator);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig kv list".
        /// List key-values.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public static dynamic AzAppconfigKvList(this ICakeContext context, AzAppconfigKvListSettings settings) {
            var baseCommand = "az appconfig kv list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--datetime", settings.Datetime);
            AppendIfNonNull(ref baseCommand, "--fields", settings.Fields);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig kv lock".
        /// Lock a key-value to prohibit write operations.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public static dynamic AzAppconfigKvLock(this ICakeContext context, AzAppconfigKvLockSettings settings) {
            var baseCommand = "az appconfig kv lock";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig kv restore".
        /// Restore key-values.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public static dynamic AzAppconfigKvRestore(this ICakeContext context, AzAppconfigKvRestoreSettings settings) {
            var baseCommand = "az appconfig kv restore";
            AppendIfNonNull(ref baseCommand, "--datetime", settings.Datetime);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig kv set".
        /// Set a key-value.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public static dynamic AzAppconfigKvSet(this ICakeContext context, AzAppconfigKvSetSettings settings) {
            var baseCommand = "az appconfig kv set";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig kv show".
        /// Show all attributes of a key-value.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public static dynamic AzAppconfigKvShow(this ICakeContext context, AzAppconfigKvShowSettings settings) {
            var baseCommand = "az appconfig kv show";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--datetime", settings.Datetime);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig kv unlock".
        /// Unlock a key-value to gain write operations.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public static dynamic AzAppconfigKvUnlock(this ICakeContext context, AzAppconfigKvUnlockSettings settings) {
            var baseCommand = "az appconfig kv unlock";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appconfig revision list".
        /// Lists revision history of key-values.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigRevision")]
        public static dynamic AzAppconfigRevisionList(this ICakeContext context, AzAppconfigRevisionListSettings settings) {
            var baseCommand = "az appconfig revision list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--datetime", settings.Datetime);
            AppendIfNonNull(ref baseCommand, "--fields", settings.Fields);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice list-locations".
        /// List regions where a plan sku is available.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppservice")]
        public static dynamic AzAppserviceListLocations(this ICakeContext context, AzAppserviceListLocationsSettings settings) {
            var baseCommand = "az appservice list-locations";
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--linux-workers-enabled", settings.LinuxWorkersEnabled);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice ase create".
        /// Create app service environment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public static dynamic AzAppserviceAseCreate(this ICakeContext context, AzAppserviceAseCreateSettings settings) {
            var baseCommand = "az appservice ase create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--force-network-security-group", settings.ForceNetworkSecurityGroup);
            AppendIfNonNull(ref baseCommand, "--force-route-table", settings.ForceRouteTable);
            AppendIfNonNull(ref baseCommand, "--front-end-scale-factor", settings.FrontEndScaleFactor);
            AppendIfNonNull(ref baseCommand, "--front-end-sku", settings.FrontEndSku);
            AppendIfNonNull(ref baseCommand, "--ignore-network-security-group", settings.IgnoreNetworkSecurityGroup);
            AppendIfNonNull(ref baseCommand, "--ignore-route-table", settings.IgnoreRouteTable);
            AppendIfNonNull(ref baseCommand, "--ignore-subnet-size-validation", settings.IgnoreSubnetSizeValidation);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--virtual-ip-type", settings.VirtualIpType);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice ase delete".
        /// Delete app service environment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public static dynamic AzAppserviceAseDelete(this ICakeContext context, AzAppserviceAseDeleteSettings settings) {
            var baseCommand = "az appservice ase delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice ase list".
        /// List app service environments.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public static dynamic AzAppserviceAseList(this ICakeContext context, AzAppserviceAseListSettings settings) {
            var baseCommand = "az appservice ase list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice ase list-addresses".
        /// List VIPs associated with an app service environment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public static dynamic AzAppserviceAseListAddresses(this ICakeContext context, AzAppserviceAseListAddressesSettings settings) {
            var baseCommand = "az appservice ase list-addresses";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice ase list-plans".
        /// List app service plans associated with an app service environment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public static dynamic AzAppserviceAseListPlans(this ICakeContext context, AzAppserviceAseListPlansSettings settings) {
            var baseCommand = "az appservice ase list-plans";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice ase show".
        /// Show details of an app service environment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public static dynamic AzAppserviceAseShow(this ICakeContext context, AzAppserviceAseShowSettings settings) {
            var baseCommand = "az appservice ase show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice ase update".
        /// Update app service environment.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public static dynamic AzAppserviceAseUpdate(this ICakeContext context, AzAppserviceAseUpdateSettings settings) {
            var baseCommand = "az appservice ase update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--front-end-scale-factor", settings.FrontEndScaleFactor);
            AppendIfNonNull(ref baseCommand, "--front-end-sku", settings.FrontEndSku);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice hybrid-connection set-key".
        /// Set the key that all apps in an appservice plan use to connect to the hybrid- connections in that appservice plan.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceHybridConnection")]
        public static dynamic AzAppserviceHybridConnectionSetKey(this ICakeContext context, AzAppserviceHybridConnectionSetKeySettings settings) {
            var baseCommand = "az appservice hybrid-connection set-key";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection", settings.HybridConnection);
            AppendIfNonNull(ref baseCommand, "--key-type", settings.KeyType);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice plan create".
        /// Create an app service plan.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppservicePlan")]
        public static dynamic AzAppservicePlanCreate(this ICakeContext context, AzAppservicePlanCreateSettings settings) {
            var baseCommand = "az appservice plan create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--app-service-environment", settings.AppServiceEnvironment);
            AppendIfNonNull(ref baseCommand, "--hyper-v", settings.HyperV);
            AppendIfNonNull(ref baseCommand, "--is-linux", settings.IsLinux);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--number-of-workers", settings.NumberOfWorkers);
            AppendIfNonNull(ref baseCommand, "--per-site-scaling", settings.PerSiteScaling);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice plan delete".
        /// Delete an app service plan.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppservicePlan")]
        public static dynamic AzAppservicePlanDelete(this ICakeContext context, AzAppservicePlanDeleteSettings settings) {
            var baseCommand = "az appservice plan delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice plan list".
        /// List app service plans.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppservicePlan")]
        public static dynamic AzAppservicePlanList(this ICakeContext context, AzAppservicePlanListSettings settings) {
            var baseCommand = "az appservice plan list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice plan show".
        /// Get the app service plans for a resource group or a set of resource groups.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppservicePlan")]
        public static dynamic AzAppservicePlanShow(this ICakeContext context, AzAppservicePlanShowSettings settings) {
            var baseCommand = "az appservice plan show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice plan update".
        /// Update an app service plan. See https://docs.microsoft.com/azure/app-service/app- service-plan-manage#move-an-app-to-another-app-service-plan to learn more.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppservicePlan")]
        public static dynamic AzAppservicePlanUpdate(this ICakeContext context, AzAppservicePlanUpdateSettings settings) {
            var baseCommand = "az appservice plan update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--number-of-workers", settings.NumberOfWorkers);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az appservice vnet-integration list".
        /// List the virtual network integrations used in an appservice plan.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceVnetIntegration")]
        public static dynamic AzAppserviceVnetIntegrationList(this ICakeContext context, AzAppserviceVnetIntegrationListSettings settings) {
            var baseCommand = "az appservice vnet-integration list";
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup container list".
        /// List containers registered to a Recovery services vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupContainer")]
        public static dynamic AzBackupContainerList(this ICakeContext context, AzBackupContainerListSettings settings) {
            var baseCommand = "az backup container list";
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup container show".
        /// Show details of a container registered to a Recovery services vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupContainer")]
        public static dynamic AzBackupContainerShow(this ICakeContext context, AzBackupContainerShowSettings settings) {
            var baseCommand = "az backup container show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup container unregister".
        /// Unregister a Backup Container to make the underlying 'resource' be protected by another vault.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupContainer")]
        public static dynamic AzBackupContainerUnregister(this ICakeContext context, AzBackupContainerUnregisterSettings settings) {
            var baseCommand = "az backup container unregister";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup item list".
        /// List all backed up items within a container.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupItem")]
        public static dynamic AzBackupItemList(this ICakeContext context, AzBackupItemListSettings settings) {
            var baseCommand = "az backup item list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup item set-policy".
        /// Update the policy associated with this item. Use this to change policies of the backup item.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupItem")]
        public static dynamic AzBackupItemSetPolicy(this ICakeContext context, AzBackupItemSetPolicySettings settings) {
            var baseCommand = "az backup item set-policy";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup item show".
        /// Show details of a particular backed up item.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupItem")]
        public static dynamic AzBackupItemShow(this ICakeContext context, AzBackupItemShowSettings settings) {
            var baseCommand = "az backup item show";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup job list".
        /// List all backup jobs of a Recovery Services vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupJob")]
        public static dynamic AzBackupJobList(this ICakeContext context, AzBackupJobListSettings settings) {
            var baseCommand = "az backup job list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--operation", settings.Operation);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup job show".
        /// Show details of a particular job.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupJob")]
        public static dynamic AzBackupJobShow(this ICakeContext context, AzBackupJobShowSettings settings) {
            var baseCommand = "az backup job show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup job stop".
        /// Suspend or terminate a currently running job.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupJob")]
        public static dynamic AzBackupJobStop(this ICakeContext context, AzBackupJobStopSettings settings) {
            var baseCommand = "az backup job stop";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup job wait".
        /// Wait until either the job completes or the specified timeout value is reached.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupJob")]
        public static dynamic AzBackupJobWait(this ICakeContext context, AzBackupJobWaitSettings settings) {
            var baseCommand = "az backup job wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup policy create".
        /// Create a new policy for the given BackupManagementType and workloadType.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public static dynamic AzBackupPolicyCreate(this ICakeContext context, AzBackupPolicyCreateSettings settings) {
            var baseCommand = "az backup policy create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup policy delete".
        /// Delete a backup policy which doesn't have any associated backup items.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public static dynamic AzBackupPolicyDelete(this ICakeContext context, AzBackupPolicyDeleteSettings settings) {
            var baseCommand = "az backup policy delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup policy get-default-for-vm".
        /// Get the default policy with default values to backup a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public static dynamic AzBackupPolicyGetDefaultForVm(this ICakeContext context, AzBackupPolicyGetDefaultForVmSettings settings) {
            var baseCommand = "az backup policy get-default-for-vm";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup policy list".
        /// List all policies for a Recovery services vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public static dynamic AzBackupPolicyList(this ICakeContext context, AzBackupPolicyListSettings settings) {
            var baseCommand = "az backup policy list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup policy list-associated-items".
        /// List all items protected by a backup policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public static dynamic AzBackupPolicyListAssociatedItems(this ICakeContext context, AzBackupPolicyListAssociatedItemsSettings settings) {
            var baseCommand = "az backup policy list-associated-items";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup policy set".
        /// Update the existing policy with the provided details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public static dynamic AzBackupPolicySet(this ICakeContext context, AzBackupPolicySetSettings settings) {
            var baseCommand = "az backup policy set";
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup policy show".
        /// Show details of a particular policy.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public static dynamic AzBackupPolicyShow(this ICakeContext context, AzBackupPolicyShowSettings settings) {
            var baseCommand = "az backup policy show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup protection backup-now".
        /// Perform an on-demand backup of a backed up item.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupProtection")]
        public static dynamic AzBackupProtectionBackupNow(this ICakeContext context, AzBackupProtectionBackupNowSettings settings) {
            var baseCommand = "az backup protection backup-now";
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--retain-until", settings.RetainUntil);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup protection check-vm".
        /// Find out whether the virtual machine is protected or not. If protected, it returns the recovery services vault ID, otherwise it returns empty.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupProtection")]
        public static dynamic AzBackupProtectionCheckVm(this ICakeContext context, AzBackupProtectionCheckVmSettings settings) {
            var baseCommand = "az backup protection check-vm";
            AppendIfNonNull(ref baseCommand, "--vm-id", settings.VmId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup protection disable".
        /// Stop protecting a backed up item. Can retain the backed up data forever or choose to delete it.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupProtection")]
        public static dynamic AzBackupProtectionDisable(this ICakeContext context, AzBackupProtectionDisableSettings settings) {
            var baseCommand = "az backup protection disable";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--delete-backup-data", settings.DeleteBackupData);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup protection enable-for-azurefileshare".
        /// Start protecting a previously unprotected Azure File share within an Azure Storage account as per the specified policy to a Recovery services vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupProtection")]
        public static dynamic AzBackupProtectionEnableForAzurefileshare(this ICakeContext context, AzBackupProtectionEnableForAzurefileshareSettings settings) {
            var baseCommand = "az backup protection enable-for-azurefileshare";
            AppendIfNonNull(ref baseCommand, "--azure-file-share", settings.AzureFileShare);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup protection enable-for-vm".
        /// Start protecting a previously unprotected Azure VM as per the specified policy to a Recovery services vault.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupProtection")]
        public static dynamic AzBackupProtectionEnableForVm(this ICakeContext context, AzBackupProtectionEnableForVmSettings settings) {
            var baseCommand = "az backup protection enable-for-vm";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--vm", settings.Vm);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup recoverypoint list".
        /// List all recovery points of a backed up item.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRecoverypoint")]
        public static dynamic AzBackupRecoverypointList(this ICakeContext context, AzBackupRecoverypointListSettings settings) {
            var baseCommand = "az backup recoverypoint list";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup recoverypoint show".
        /// Shows details of a particular recovery point.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRecoverypoint")]
        public static dynamic AzBackupRecoverypointShow(this ICakeContext context, AzBackupRecoverypointShowSettings settings) {
            var baseCommand = "az backup recoverypoint show";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup restore restore-azurefiles".
        /// Restore backed up Azure Workloads in a Recovery services vault to another registered container or to the same container.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRestore")]
        public static dynamic AzBackupRestoreRestoreAzurefiles(this ICakeContext context, AzBackupRestoreRestoreAzurefilesSettings settings) {
            var baseCommand = "az backup restore restore-azurefiles";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--resolve-conflict", settings.ResolveConflict);
            AppendIfNonNull(ref baseCommand, "--restore-mode", settings.RestoreMode);
            AppendIfNonNull(ref baseCommand, "--rp-name", settings.RpName);
            AppendIfNonNull(ref baseCommand, "--source-file-path", settings.SourceFilePath);
            AppendIfNonNull(ref baseCommand, "--source-file-type", settings.SourceFileType);
            AppendIfNonNull(ref baseCommand, "--target-file-share", settings.TargetFileShare);
            AppendIfNonNull(ref baseCommand, "--target-folder", settings.TargetFolder);
            AppendIfNonNull(ref baseCommand, "--target-storage-account", settings.TargetStorageAccount);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup restore restore-azurefileshare".
        /// Restore backed up Azure Workloads in a Recovery services vault to another registered container or to the same container.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRestore")]
        public static dynamic AzBackupRestoreRestoreAzurefileshare(this ICakeContext context, AzBackupRestoreRestoreAzurefileshareSettings settings) {
            var baseCommand = "az backup restore restore-azurefileshare";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--resolve-conflict", settings.ResolveConflict);
            AppendIfNonNull(ref baseCommand, "--restore-mode", settings.RestoreMode);
            AppendIfNonNull(ref baseCommand, "--rp-name", settings.RpName);
            AppendIfNonNull(ref baseCommand, "--target-file-share", settings.TargetFileShare);
            AppendIfNonNull(ref baseCommand, "--target-folder", settings.TargetFolder);
            AppendIfNonNull(ref baseCommand, "--target-storage-account", settings.TargetStorageAccount);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup restore restore-disks".
        /// Restore disks of the backed VM from the specified recovery point.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRestore")]
        public static dynamic AzBackupRestoreRestoreDisks(this ICakeContext context, AzBackupRestoreRestoreDisksSettings settings) {
            var baseCommand = "az backup restore restore-disks";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--rp-name", settings.RpName);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--restore-to-staging-storage-account", settings.RestoreToStagingStorageAccount);
            AppendIfNonNull(ref baseCommand, "--target-resource-group", settings.TargetResourceGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup restore files mount-rp".
        /// Download a script which mounts files of a recovery point.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRestoreFiles")]
        public static dynamic AzBackupRestoreFilesMountRp(this ICakeContext context, AzBackupRestoreFilesMountRpSettings settings) {
            var baseCommand = "az backup restore files mount-rp";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--rp-name", settings.RpName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup restore files unmount-rp".
        /// Close access to the recovery point.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRestoreFiles")]
        public static dynamic AzBackupRestoreFilesUnmountRp(this ICakeContext context, AzBackupRestoreFilesUnmountRpSettings settings) {
            var baseCommand = "az backup restore files unmount-rp";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--rp-name", settings.RpName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup vault create".
        /// Create a new Recovery Services vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupVault")]
        public static dynamic AzBackupVaultCreate(this ICakeContext context, AzBackupVaultCreateSettings settings) {
            var baseCommand = "az backup vault create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup vault delete".
        /// Delete an existing Recovery services vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupVault")]
        public static dynamic AzBackupVaultDelete(this ICakeContext context, AzBackupVaultDeleteSettings settings) {
            var baseCommand = "az backup vault delete";
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup vault list".
        /// List Recovery service vaults within a subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupVault")]
        public static dynamic AzBackupVaultList(this ICakeContext context, AzBackupVaultListSettings settings) {
            var baseCommand = "az backup vault list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup vault show".
        /// Show details of a particular Recovery service vault.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupVault")]
        public static dynamic AzBackupVaultShow(this ICakeContext context, AzBackupVaultShowSettings settings) {
            var baseCommand = "az backup vault show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup vault backup-properties set".
        /// Sets backup related properties of the Recovery Services vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupVaultBackupProperties")]
        public static dynamic AzBackupVaultBackupPropertiesSet(this ICakeContext context, AzBackupVaultBackupPropertiesSetSettings settings) {
            var baseCommand = "az backup vault backup-properties set";
            AppendIfNonNull(ref baseCommand, "--backup-storage-redundancy", settings.BackupStorageRedundancy);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az backup vault backup-properties show".
        /// Gets backup related properties of the Recovery Services vault.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupVaultBackupProperties")]
        public static dynamic AzBackupVaultBackupPropertiesShow(this ICakeContext context, AzBackupVaultBackupPropertiesShowSettings settings) {
            var baseCommand = "az backup vault backup-properties show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch account create".
        /// Create a Batch account with the specified parameters.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccount")]
        public static dynamic AzBatchAccountCreate(this ICakeContext context, AzBatchAccountCreateSettings settings) {
            var baseCommand = "az batch account create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch account delete".
        /// Deletes the specified Batch account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccount")]
        public static dynamic AzBatchAccountDelete(this ICakeContext context, AzBatchAccountDeleteSettings settings) {
            var baseCommand = "az batch account delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch account list".
        /// List the Batch accounts associated with a subscription or resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccount")]
        public static dynamic AzBatchAccountList(this ICakeContext context, AzBatchAccountListSettings settings) {
            var baseCommand = "az batch account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch account login".
        /// Log in to a Batch account through Azure Active Directory or Shared Key authentication.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccount")]
        public static dynamic AzBatchAccountLogin(this ICakeContext context, AzBatchAccountLoginSettings settings) {
            var baseCommand = "az batch account login";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--shared-key-auth", settings.SharedKeyAuth);
            AppendIfNonNull(ref baseCommand, "--show", settings.Show);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch account set".
        /// Update properties for a Batch account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccount")]
        public static dynamic AzBatchAccountSet(this ICakeContext context, AzBatchAccountSetSettings settings) {
            var baseCommand = "az batch account set";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch account show".
        /// Get a specified Batch account or the currently set account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccount")]
        public static dynamic AzBatchAccountShow(this ICakeContext context, AzBatchAccountShowSettings settings) {
            var baseCommand = "az batch account show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch account autostorage-keys sync".
        /// Synchronizes access keys for the auto-storage account configured for the specified Batch account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccountAutostorageKeys")]
        public static dynamic AzBatchAccountAutostorageKeysSync(this ICakeContext context, AzBatchAccountAutostorageKeysSyncSettings settings) {
            var baseCommand = "az batch account autostorage-keys sync";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch account keys list".
        /// Gets the account keys for the specified Batch account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccountKeys")]
        public static dynamic AzBatchAccountKeysList(this ICakeContext context, AzBatchAccountKeysListSettings settings) {
            var baseCommand = "az batch account keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch account keys renew".
        /// Regenerates the specified account key for the Batch account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccountKeys")]
        public static dynamic AzBatchAccountKeysRenew(this ICakeContext context, AzBatchAccountKeysRenewSettings settings) {
            var baseCommand = "az batch account keys renew";
            AppendIfNonNull(ref baseCommand, "--key-name", settings.KeyName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch application create".
        /// Adds an application to the specified Batch account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplication")]
        public static dynamic AzBatchApplicationCreate(this ICakeContext context, AzBatchApplicationCreateSettings settings) {
            var baseCommand = "az batch application create";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch application delete".
        /// Deletes an application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplication")]
        public static dynamic AzBatchApplicationDelete(this ICakeContext context, AzBatchApplicationDeleteSettings settings) {
            var baseCommand = "az batch application delete";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch application list".
        /// Lists all of the applications in the specified account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplication")]
        public static dynamic AzBatchApplicationList(this ICakeContext context, AzBatchApplicationListSettings settings) {
            var baseCommand = "az batch application list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch application set".
        /// Update properties for a Batch application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplication")]
        public static dynamic AzBatchApplicationSet(this ICakeContext context, AzBatchApplicationSetSettings settings) {
            var baseCommand = "az batch application set";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allow-updates", settings.AllowUpdates);
            AppendIfNonNull(ref baseCommand, "--default-version", settings.DefaultVersion);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch application show".
        /// Gets information about the specified application.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplication")]
        public static dynamic AzBatchApplicationShow(this ICakeContext context, AzBatchApplicationShowSettings settings) {
            var baseCommand = "az batch application show";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch application package activate".
        /// Activates a Batch application package.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationPackage")]
        public static dynamic AzBatchApplicationPackageActivate(this ICakeContext context, AzBatchApplicationPackageActivateSettings settings) {
            var baseCommand = "az batch application package activate";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--format", settings.Format);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--version-name", settings.VersionName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch application package create".
        /// Create a Batch application package record and activate it.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationPackage")]
        public static dynamic AzBatchApplicationPackageCreate(this ICakeContext context, AzBatchApplicationPackageCreateSettings settings) {
            var baseCommand = "az batch application package create";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--package-file", settings.PackageFile);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--version-name", settings.VersionName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch application package delete".
        /// Deletes an application package record and its associated binary file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationPackage")]
        public static dynamic AzBatchApplicationPackageDelete(this ICakeContext context, AzBatchApplicationPackageDeleteSettings settings) {
            var baseCommand = "az batch application package delete";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--version-name", settings.VersionName);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch application package list".
        /// Lists all of the application packages in the specified application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationPackage")]
        public static dynamic AzBatchApplicationPackageList(this ICakeContext context, AzBatchApplicationPackageListSettings settings) {
            var baseCommand = "az batch application package list";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch application package show".
        /// Gets information about the specified application package.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationPackage")]
        public static dynamic AzBatchApplicationPackageShow(this ICakeContext context, AzBatchApplicationPackageShowSettings settings) {
            var baseCommand = "az batch application package show";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--version-name", settings.VersionName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch application summary list".
        /// Lists all of the applications available in the specified account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationSummary")]
        public static dynamic AzBatchApplicationSummaryList(this ICakeContext context, AzBatchApplicationSummaryListSettings settings) {
            var baseCommand = "az batch application summary list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch application summary show".
        /// Gets information about the specified application.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationSummary")]
        public static dynamic AzBatchApplicationSummaryShow(this ICakeContext context, AzBatchApplicationSummaryShowSettings settings) {
            var baseCommand = "az batch application summary show";
            AppendIfNonNull(ref baseCommand, "--application-id", settings.ApplicationId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch certificate create".
        /// Add a certificate to a Batch account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchCertificate")]
        public static dynamic AzBatchCertificateCreate(this ICakeContext context, AzBatchCertificateCreateSettings settings) {
            var baseCommand = "az batch certificate create";
            AppendIfNonNull(ref baseCommand, "--certificate-file", settings.CertificateFile);
            AppendIfNonNull(ref baseCommand, "--thumbprint", settings.Thumbprint);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch certificate delete".
        /// Delete a certificate from a Batch account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchCertificate")]
        public static dynamic AzBatchCertificateDelete(this ICakeContext context, AzBatchCertificateDeleteSettings settings) {
            var baseCommand = "az batch certificate delete";
            AppendIfNonNull(ref baseCommand, "--thumbprint", settings.Thumbprint);
            AppendIfNonNull(ref baseCommand, "--abort", settings.Abort);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch certificate list".
        /// Lists all of the Certificates that have been added to the specified Account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchCertificate")]
        public static dynamic AzBatchCertificateList(this ICakeContext context, AzBatchCertificateListSettings settings) {
            var baseCommand = "az batch certificate list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch certificate show".
        /// Gets information about the specified Certificate.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchCertificate")]
        public static dynamic AzBatchCertificateShow(this ICakeContext context, AzBatchCertificateShowSettings settings) {
            var baseCommand = "az batch certificate show";
            AppendIfNonNull(ref baseCommand, "--thumbprint", settings.Thumbprint);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job create".
        /// Add a job to a Batch account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public static dynamic AzBatchJobCreate(this ICakeContext context, AzBatchJobCreateSettings settings) {
            var baseCommand = "az batch job create";
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--uses-task-dependencies", settings.UsesTaskDependencies);
            AppendIfNonNull(ref baseCommand, "--job-max-task-retry-count", settings.JobMaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--job-max-wall-clock-time", settings.JobMaxWallClockTime);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-command-line", settings.JobManagerTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-environment-settings", settings.JobManagerTaskEnvironmentSettings);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-id", settings.JobManagerTaskId);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-resource-files", settings.JobManagerTaskResourceFiles);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job delete".
        /// Deletes a Job.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public static dynamic AzBatchJobDelete(this ICakeContext context, AzBatchJobDeleteSettings settings) {
            var baseCommand = "az batch job delete";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job disable".
        /// Disables the specified Job, preventing new Tasks from running.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public static dynamic AzBatchJobDisable(this ICakeContext context, AzBatchJobDisableSettings settings) {
            var baseCommand = "az batch job disable";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--disable-tasks", settings.DisableTasks);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job enable".
        /// Enables the specified Job, allowing new Tasks to run.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public static dynamic AzBatchJobEnable(this ICakeContext context, AzBatchJobEnableSettings settings) {
            var baseCommand = "az batch job enable";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job list".
        /// List all of the jobs or job schedule in a Batch account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public static dynamic AzBatchJobList(this ICakeContext context, AzBatchJobListSettings settings) {
            var baseCommand = "az batch job list";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job reset".
        /// Update the properties of a Batch job. Unspecified properties which can be updated are reset to their defaults.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public static dynamic AzBatchJobReset(this ICakeContext context, AzBatchJobResetSettings settings) {
            var baseCommand = "az batch job reset";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--on-all-tasks-complete", settings.OnAllTasksComplete);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--job-max-task-retry-count", settings.JobMaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--job-max-wall-clock-time", settings.JobMaxWallClockTime);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job set".
        /// Update the properties of a Batch job. Updating a property in a subgroup will reset the unspecified properties of that group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public static dynamic AzBatchJobSet(this ICakeContext context, AzBatchJobSetSettings settings) {
            var baseCommand = "az batch job set";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--on-all-tasks-complete", settings.OnAllTasksComplete);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--job-max-task-retry-count", settings.JobMaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--job-max-wall-clock-time", settings.JobMaxWallClockTime);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job show".
        /// Gets information about the specified Job.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public static dynamic AzBatchJobShow(this ICakeContext context, AzBatchJobShowSettings settings) {
            var baseCommand = "az batch job show";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job stop".
        /// Terminates the specified Job, marking it as completed.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public static dynamic AzBatchJobStop(this ICakeContext context, AzBatchJobStopSettings settings) {
            var baseCommand = "az batch job stop";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--terminate-reason", settings.TerminateReason);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job all-statistics show".
        /// Get lifetime summary statistics for all of the jobs in a Batch account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobAllStatistics")]
        public static dynamic AzBatchJobAllStatisticsShow(this ICakeContext context, AzBatchJobAllStatisticsShowSettings settings) {
            var baseCommand = "az batch job all-statistics show";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job prep-release-status list".
        /// Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobPrepReleaseStatus")]
        public static dynamic AzBatchJobPrepReleaseStatusList(this ICakeContext context, AzBatchJobPrepReleaseStatusListSettings settings) {
            var baseCommand = "az batch job prep-release-status list";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job task-counts show".
        /// Gets the Task counts for the specified Job.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobTaskCounts")]
        public static dynamic AzBatchJobTaskCountsShow(this ICakeContext context, AzBatchJobTaskCountsShowSettings settings) {
            var baseCommand = "az batch job task-counts show";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job-schedule create".
        /// Add a Batch job schedule to an account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public static dynamic AzBatchJobScheduleCreate(this ICakeContext context, AzBatchJobScheduleCreateSettings settings) {
            var baseCommand = "az batch job-schedule create";
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--on-all-tasks-complete", settings.OnAllTasksComplete);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--uses-task-dependencies", settings.UsesTaskDependencies);
            AppendIfNonNull(ref baseCommand, "--job-max-task-retry-count", settings.JobMaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--job-max-wall-clock-time", settings.JobMaxWallClockTime);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-command-line", settings.JobManagerTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-id", settings.JobManagerTaskId);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-resource-files", settings.JobManagerTaskResourceFiles);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--do-not-run-after", settings.DoNotRunAfter);
            AppendIfNonNull(ref baseCommand, "--do-not-run-until", settings.DoNotRunUntil);
            AppendIfNonNull(ref baseCommand, "--recurrence-interval", settings.RecurrenceInterval);
            AppendIfNonNull(ref baseCommand, "--start-window", settings.StartWindow);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job-schedule delete".
        /// Deletes a Job Schedule from the specified Account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public static dynamic AzBatchJobScheduleDelete(this ICakeContext context, AzBatchJobScheduleDeleteSettings settings) {
            var baseCommand = "az batch job-schedule delete";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job-schedule disable".
        /// Disables a Job Schedule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public static dynamic AzBatchJobScheduleDisable(this ICakeContext context, AzBatchJobScheduleDisableSettings settings) {
            var baseCommand = "az batch job-schedule disable";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job-schedule enable".
        /// Enables a Job Schedule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public static dynamic AzBatchJobScheduleEnable(this ICakeContext context, AzBatchJobScheduleEnableSettings settings) {
            var baseCommand = "az batch job-schedule enable";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job-schedule list".
        /// Lists all of the Job Schedules in the specified Account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public static dynamic AzBatchJobScheduleList(this ICakeContext context, AzBatchJobScheduleListSettings settings) {
            var baseCommand = "az batch job-schedule list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job-schedule reset".
        /// Reset the properties of a job schedule.  An updated job specification only applies to new jobs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public static dynamic AzBatchJobScheduleReset(this ICakeContext context, AzBatchJobScheduleResetSettings settings) {
            var baseCommand = "az batch job-schedule reset";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--job-metadata", settings.JobMetadata);
            AppendIfNonNull(ref baseCommand, "--on-all-tasks-complete", settings.OnAllTasksComplete);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--uses-task-dependencies", settings.UsesTaskDependencies);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-application-package-references", settings.JobManagerTaskApplicationPackageReferences);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-command-line", settings.JobManagerTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-environment-settings", settings.JobManagerTaskEnvironmentSettings);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-id", settings.JobManagerTaskId);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-resource-files", settings.JobManagerTaskResourceFiles);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--do-not-run-after", settings.DoNotRunAfter);
            AppendIfNonNull(ref baseCommand, "--do-not-run-until", settings.DoNotRunUntil);
            AppendIfNonNull(ref baseCommand, "--recurrence-interval", settings.RecurrenceInterval);
            AppendIfNonNull(ref baseCommand, "--start-window", settings.StartWindow);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job-schedule set".
        /// Update the properties of a job schedule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public static dynamic AzBatchJobScheduleSet(this ICakeContext context, AzBatchJobScheduleSetSettings settings) {
            var baseCommand = "az batch job-schedule set";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--job-metadata", settings.JobMetadata);
            AppendIfNonNull(ref baseCommand, "--on-all-tasks-complete", settings.OnAllTasksComplete);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--uses-task-dependencies", settings.UsesTaskDependencies);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-application-package-references", settings.JobManagerTaskApplicationPackageReferences);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-command-line", settings.JobManagerTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-environment-settings", settings.JobManagerTaskEnvironmentSettings);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-id", settings.JobManagerTaskId);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-resource-files", settings.JobManagerTaskResourceFiles);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--do-not-run-after", settings.DoNotRunAfter);
            AppendIfNonNull(ref baseCommand, "--do-not-run-until", settings.DoNotRunUntil);
            AppendIfNonNull(ref baseCommand, "--recurrence-interval", settings.RecurrenceInterval);
            AppendIfNonNull(ref baseCommand, "--start-window", settings.StartWindow);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job-schedule show".
        /// Gets information about the specified Job Schedule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public static dynamic AzBatchJobScheduleShow(this ICakeContext context, AzBatchJobScheduleShowSettings settings) {
            var baseCommand = "az batch job-schedule show";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch job-schedule stop".
        /// Terminates a Job Schedule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public static dynamic AzBatchJobScheduleStop(this ICakeContext context, AzBatchJobScheduleStopSettings settings) {
            var baseCommand = "az batch job-schedule stop";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch location quotas show".
        /// Gets the Batch service quotas for the specified subscription at the given location.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchLocationQuotas")]
        public static dynamic AzBatchLocationQuotasShow(this ICakeContext context, AzBatchLocationQuotasShowSettings settings) {
            var baseCommand = "az batch location quotas show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node delete".
        /// Removes Compute Nodes from the specified Pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNode")]
        public static dynamic AzBatchNodeDelete(this ICakeContext context, AzBatchNodeDeleteSettings settings) {
            var baseCommand = "az batch node delete";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--node-deallocation-option", settings.NodeDeallocationOption);
            AppendIfNonNull(ref baseCommand, "--node-list", settings.NodeList);
            AppendIfNonNull(ref baseCommand, "--resize-timeout", settings.ResizeTimeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node list".
        /// Lists the Compute Nodes in the specified Pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNode")]
        public static dynamic AzBatchNodeList(this ICakeContext context, AzBatchNodeListSettings settings) {
            var baseCommand = "az batch node list";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node reboot".
        /// Restarts the specified Compute Node.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNode")]
        public static dynamic AzBatchNodeReboot(this ICakeContext context, AzBatchNodeRebootSettings settings) {
            var baseCommand = "az batch node reboot";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--node-reboot-option", settings.NodeRebootOption);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node reimage".
        /// Reinstalls the operating system on the specified Compute Node.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNode")]
        public static dynamic AzBatchNodeReimage(this ICakeContext context, AzBatchNodeReimageSettings settings) {
            var baseCommand = "az batch node reimage";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--node-reimage-option", settings.NodeReimageOption);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node show".
        /// Gets information about the specified Compute Node.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNode")]
        public static dynamic AzBatchNodeShow(this ICakeContext context, AzBatchNodeShowSettings settings) {
            var baseCommand = "az batch node show";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node file delete".
        /// Deletes the specified file from the Compute Node.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeFile")]
        public static dynamic AzBatchNodeFileDelete(this ICakeContext context, AzBatchNodeFileDeleteSettings settings) {
            var baseCommand = "az batch node file delete";
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--recursive", settings.Recursive);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node file download".
        /// Download the content of the a node file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeFile")]
        public static dynamic AzBatchNodeFileDownload(this ICakeContext context, AzBatchNodeFileDownloadSettings settings) {
            var baseCommand = "az batch node file download";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--end-range", settings.EndRange);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--start-range", settings.StartRange);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node file list".
        /// Lists all of the files in Task directories on the specified Compute Node.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeFile")]
        public static dynamic AzBatchNodeFileList(this ICakeContext context, AzBatchNodeFileListSettings settings) {
            var baseCommand = "az batch node file list";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--recursive", settings.Recursive);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node file show".
        /// Gets the properties of the specified Compute Node file.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeFile")]
        public static dynamic AzBatchNodeFileShow(this ICakeContext context, AzBatchNodeFileShowSettings settings) {
            var baseCommand = "az batch node file show";
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node remote-desktop download".
        /// Gets the Remote Desktop Protocol file for the specified Compute Node.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeRemoteDesktop")]
        public static dynamic AzBatchNodeRemoteDesktopDownload(this ICakeContext context, AzBatchNodeRemoteDesktopDownloadSettings settings) {
            var baseCommand = "az batch node remote-desktop download";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node remote-login-settings show".
        /// Gets the settings required for remote login to a Compute Node.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeRemoteLoginSettings")]
        public static dynamic AzBatchNodeRemoteLoginSettingsShow(this ICakeContext context, AzBatchNodeRemoteLoginSettingsShowSettings settings) {
            var baseCommand = "az batch node remote-login-settings show";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node scheduling disable".
        /// Disables Task scheduling on the specified Compute Node.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeScheduling")]
        public static dynamic AzBatchNodeSchedulingDisable(this ICakeContext context, AzBatchNodeSchedulingDisableSettings settings) {
            var baseCommand = "az batch node scheduling disable";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--node-disable-scheduling-option", settings.NodeDisableSchedulingOption);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node scheduling enable".
        /// Enables Task scheduling on the specified Compute Node.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeScheduling")]
        public static dynamic AzBatchNodeSchedulingEnable(this ICakeContext context, AzBatchNodeSchedulingEnableSettings settings) {
            var baseCommand = "az batch node scheduling enable";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node service-logs upload".
        /// Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeServiceLogs")]
        public static dynamic AzBatchNodeServiceLogsUpload(this ICakeContext context, AzBatchNodeServiceLogsUploadSettings settings) {
            var baseCommand = "az batch node service-logs upload";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-url", settings.ContainerUrl);
            AppendIfNonNull(ref baseCommand, "--end-time", settings.EndTime);
            AppendIfNonNull(ref baseCommand, "--start-time", settings.StartTime);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node user create".
        /// Add a user account to a Batch compute node.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeUser")]
        public static dynamic AzBatchNodeUserCreate(this ICakeContext context, AzBatchNodeUserCreateSettings settings) {
            var baseCommand = "az batch node user create";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expiry-time", settings.ExpiryTime);
            AppendIfNonNull(ref baseCommand, "--is-admin", settings.IsAdmin);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--ssh-public-key", settings.SshPublicKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node user delete".
        /// Deletes a user Account from the specified Compute Node.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeUser")]
        public static dynamic AzBatchNodeUserDelete(this ICakeContext context, AzBatchNodeUserDeleteSettings settings) {
            var baseCommand = "az batch node user delete";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch node user reset".
        /// Update the properties of a user account on a Batch compute node. Unspecified properties which can be updated are reset to their defaults.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeUser")]
        public static dynamic AzBatchNodeUserReset(this ICakeContext context, AzBatchNodeUserResetSettings settings) {
            var baseCommand = "az batch node user reset";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expiry-time", settings.ExpiryTime);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--ssh-public-key", settings.SshPublicKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool create".
        /// Create a Batch pool in an account. When creating a pool, choose arguments from either Cloud Services Configuration or Virtual Machine Configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public static dynamic AzBatchPoolCreate(this ICakeContext context, AzBatchPoolCreateSettings settings) {
            var baseCommand = "az batch pool create";
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--application-licenses", settings.ApplicationLicenses);
            AppendIfNonNull(ref baseCommand, "--application-package-references", settings.ApplicationPackageReferences);
            AppendIfNonNull(ref baseCommand, "--auto-scale-formula", settings.AutoScaleFormula);
            AppendIfNonNull(ref baseCommand, "--certificate-references", settings.CertificateReferences);
            AppendIfNonNull(ref baseCommand, "--enable-inter-node-communication", settings.EnableInterNodeCommunication);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--max-tasks-per-node", settings.MaxTasksPerNode);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--resize-timeout", settings.ResizeTimeout);
            AppendIfNonNull(ref baseCommand, "--target-dedicated-nodes", settings.TargetDedicatedNodes);
            AppendIfNonNull(ref baseCommand, "--target-low-priority-nodes", settings.TargetLowPriorityNodes);
            AppendIfNonNull(ref baseCommand, "--vm-size", settings.VmSize);
            AppendIfNonNull(ref baseCommand, "--os-family", settings.OsFamily);
            AppendIfNonNull(ref baseCommand, "--os-version", settings.OsVersion);
            AppendIfNonNull(ref baseCommand, "--start-task-command-line", settings.StartTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--start-task-resource-files", settings.StartTaskResourceFiles);
            AppendIfNonNull(ref baseCommand, "--start-task-wait-for-success", settings.StartTaskWaitForSuccess);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--node-agent-sku-id", settings.NodeAgentSkuId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool delete".
        /// Deletes a Pool from the specified Account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public static dynamic AzBatchPoolDelete(this ICakeContext context, AzBatchPoolDeleteSettings settings) {
            var baseCommand = "az batch pool delete";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool list".
        /// Lists all of the Pools in the specified Account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public static dynamic AzBatchPoolList(this ICakeContext context, AzBatchPoolListSettings settings) {
            var baseCommand = "az batch pool list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool reset".
        /// Update the properties of a Batch pool. Unspecified properties which can be updated are reset to their defaults.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public static dynamic AzBatchPoolReset(this ICakeContext context, AzBatchPoolResetSettings settings) {
            var baseCommand = "az batch pool reset";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--application-package-references", settings.ApplicationPackageReferences);
            AppendIfNonNull(ref baseCommand, "--certificate-references", settings.CertificateReferences);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--start-task-command-line", settings.StartTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--start-task-environment-settings", settings.StartTaskEnvironmentSettings);
            AppendIfNonNull(ref baseCommand, "--start-task-max-task-retry-count", settings.StartTaskMaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--start-task-wait-for-success", settings.StartTaskWaitForSuccess);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool resize".
        /// Resize or stop resizing a Batch pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public static dynamic AzBatchPoolResize(this ICakeContext context, AzBatchPoolResizeSettings settings) {
            var baseCommand = "az batch pool resize";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--abort", settings.Abort);
            AppendIfNonNull(ref baseCommand, "--node-deallocation-option", settings.NodeDeallocationOption);
            AppendIfNonNull(ref baseCommand, "--resize-timeout", settings.ResizeTimeout);
            AppendIfNonNull(ref baseCommand, "--target-dedicated-nodes", settings.TargetDedicatedNodes);
            AppendIfNonNull(ref baseCommand, "--target-low-priority-nodes", settings.TargetLowPriorityNodes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool set".
        /// Update the properties of a Batch pool. Updating a property in a subgroup will reset the unspecified properties of that group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public static dynamic AzBatchPoolSet(this ICakeContext context, AzBatchPoolSetSettings settings) {
            var baseCommand = "az batch pool set";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--application-package-references", settings.ApplicationPackageReferences);
            AppendIfNonNull(ref baseCommand, "--certificate-references", settings.CertificateReferences);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--start-task-command-line", settings.StartTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--start-task-environment-settings", settings.StartTaskEnvironmentSettings);
            AppendIfNonNull(ref baseCommand, "--start-task-max-task-retry-count", settings.StartTaskMaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--start-task-resource-files", settings.StartTaskResourceFiles);
            AppendIfNonNull(ref baseCommand, "--start-task-wait-for-success", settings.StartTaskWaitForSuccess);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool show".
        /// Gets information about the specified Pool.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public static dynamic AzBatchPoolShow(this ICakeContext context, AzBatchPoolShowSettings settings) {
            var baseCommand = "az batch pool show";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool all-statistics show".
        /// Get lifetime summary statistics for all of the pools in a Batch account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolAllStatistics")]
        public static dynamic AzBatchPoolAllStatisticsShow(this ICakeContext context, AzBatchPoolAllStatisticsShowSettings settings) {
            var baseCommand = "az batch pool all-statistics show";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool autoscale disable".
        /// Disables automatic scaling for a Pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolAutoscale")]
        public static dynamic AzBatchPoolAutoscaleDisable(this ICakeContext context, AzBatchPoolAutoscaleDisableSettings settings) {
            var baseCommand = "az batch pool autoscale disable";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool autoscale enable".
        /// Enables automatic scaling for a Pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolAutoscale")]
        public static dynamic AzBatchPoolAutoscaleEnable(this ICakeContext context, AzBatchPoolAutoscaleEnableSettings settings) {
            var baseCommand = "az batch pool autoscale enable";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--auto-scale-evaluation-interval", settings.AutoScaleEvaluationInterval);
            AppendIfNonNull(ref baseCommand, "--auto-scale-formula", settings.AutoScaleFormula);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool autoscale evaluate".
        /// Gets the result of evaluating an automatic scaling formula on the Pool.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolAutoscale")]
        public static dynamic AzBatchPoolAutoscaleEvaluate(this ICakeContext context, AzBatchPoolAutoscaleEvaluateSettings settings) {
            var baseCommand = "az batch pool autoscale evaluate";
            AppendIfNonNull(ref baseCommand, "--auto-scale-formula", settings.AutoScaleFormula);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool node-counts list".
        /// Gets the number of Compute Nodes in each state, grouped by Pool.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolNodeCounts")]
        public static dynamic AzBatchPoolNodeCountsList(this ICakeContext context, AzBatchPoolNodeCountsListSettings settings) {
            var baseCommand = "az batch pool node-counts list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool supported-images list".
        /// Lists all Virtual Machine Images supported by the Azure Batch service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolSupportedImages")]
        public static dynamic AzBatchPoolSupportedImagesList(this ICakeContext context, AzBatchPoolSupportedImagesListSettings settings) {
            var baseCommand = "az batch pool supported-images list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch pool usage-metrics list".
        /// Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolUsageMetrics")]
        public static dynamic AzBatchPoolUsageMetricsList(this ICakeContext context, AzBatchPoolUsageMetricsListSettings settings) {
            var baseCommand = "az batch pool usage-metrics list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--end-time", settings.EndTime);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--start-time", settings.StartTime);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch task create".
        /// Create Batch tasks.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public static dynamic AzBatchTaskCreate(this ICakeContext context, AzBatchTaskCreateSettings settings) {
            var baseCommand = "az batch task create";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--affinity-id", settings.AffinityId);
            AppendIfNonNull(ref baseCommand, "--application-package-references", settings.ApplicationPackageReferences);
            AppendIfNonNull(ref baseCommand, "--command-line", settings.CommandLine);
            AppendIfNonNull(ref baseCommand, "--environment-settings", settings.EnvironmentSettings);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--max-task-retry-count", settings.MaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--max-wall-clock-time", settings.MaxWallClockTime);
            AppendIfNonNull(ref baseCommand, "--resource-files", settings.ResourceFiles);
            AppendIfNonNull(ref baseCommand, "--retention-time", settings.RetentionTime);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch task delete".
        /// Deletes a Task from the specified Job.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public static dynamic AzBatchTaskDelete(this ICakeContext context, AzBatchTaskDeleteSettings settings) {
            var baseCommand = "az batch task delete";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch task list".
        /// Lists all of the Tasks that are associated with the specified Job.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public static dynamic AzBatchTaskList(this ICakeContext context, AzBatchTaskListSettings settings) {
            var baseCommand = "az batch task list";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch task reactivate".
        /// Reactivates a Task, allowing it to run again even if its retry count has been exhausted.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public static dynamic AzBatchTaskReactivate(this ICakeContext context, AzBatchTaskReactivateSettings settings) {
            var baseCommand = "az batch task reactivate";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch task reset".
        /// Reset the properties of a Batch task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public static dynamic AzBatchTaskReset(this ICakeContext context, AzBatchTaskResetSettings settings) {
            var baseCommand = "az batch task reset";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--max-task-retry-count", settings.MaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--max-wall-clock-time", settings.MaxWallClockTime);
            AppendIfNonNull(ref baseCommand, "--retention-time", settings.RetentionTime);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch task show".
        /// Gets information about the specified Task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public static dynamic AzBatchTaskShow(this ICakeContext context, AzBatchTaskShowSettings settings) {
            var baseCommand = "az batch task show";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch task stop".
        /// Terminates the specified Task.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public static dynamic AzBatchTaskStop(this ICakeContext context, AzBatchTaskStopSettings settings) {
            var baseCommand = "az batch task stop";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch task file delete".
        /// Deletes the specified Task file from the Compute Node where the Task ran.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTaskFile")]
        public static dynamic AzBatchTaskFileDelete(this ICakeContext context, AzBatchTaskFileDeleteSettings settings) {
            var baseCommand = "az batch task file delete";
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--recursive", settings.Recursive);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch task file download".
        /// Download the content of a Batch task file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTaskFile")]
        public static dynamic AzBatchTaskFileDownload(this ICakeContext context, AzBatchTaskFileDownloadSettings settings) {
            var baseCommand = "az batch task file download";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--end-range", settings.EndRange);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--start-range", settings.StartRange);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch task file list".
        /// Lists the files in a Task's directory on its Compute Node.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTaskFile")]
        public static dynamic AzBatchTaskFileList(this ICakeContext context, AzBatchTaskFileListSettings settings) {
            var baseCommand = "az batch task file list";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--recursive", settings.Recursive);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch task file show".
        /// Gets the properties of the specified Task file.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTaskFile")]
        public static dynamic AzBatchTaskFileShow(this ICakeContext context, AzBatchTaskFileShowSettings settings) {
            var baseCommand = "az batch task file show";
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az batch task subtask list".
        /// Lists all of the subtasks that are associated with the specified multi-instance Task.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTaskSubtask")]
        public static dynamic AzBatchTaskSubtaskList(this ICakeContext context, AzBatchTaskSubtaskListSettings settings) {
            var baseCommand = "az batch task subtask list";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az billing enrollment-account list".
        /// Lists the enrollment accounts the caller has access to.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBillingEnrollmentAccount")]
        public static dynamic AzBillingEnrollmentAccountList(this ICakeContext context, AzBillingEnrollmentAccountListSettings settings) {
            var baseCommand = "az billing enrollment-account list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az billing enrollment-account show".
        /// Gets a enrollment account by name.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBillingEnrollmentAccount")]
        public static dynamic AzBillingEnrollmentAccountShow(this ICakeContext context, AzBillingEnrollmentAccountShowSettings settings) {
            var baseCommand = "az billing enrollment-account show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az billing invoice list".
        /// List all available invoices of the subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBillingInvoice")]
        public static dynamic AzBillingInvoiceList(this ICakeContext context, AzBillingInvoiceListSettings settings) {
            var baseCommand = "az billing invoice list";
            AppendIfNonNull(ref baseCommand, "--generate-download-url", settings.GenerateDownloadUrl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az billing invoice show".
        /// Retrieve invoice of specific name of the subscription.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBillingInvoice")]
        public static dynamic AzBillingInvoiceShow(this ICakeContext context, AzBillingInvoiceShowSettings settings) {
            var baseCommand = "az billing invoice show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az billing period list".
        /// Lists the available billing periods for a subscription in reverse chronological order.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBillingPeriod")]
        public static dynamic AzBillingPeriodList(this ICakeContext context, AzBillingPeriodListSettings settings) {
            var baseCommand = "az billing period list";
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--skiptoken", settings.Skiptoken);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az billing period show".
        /// Gets a named billing period.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBillingPeriod")]
        public static dynamic AzBillingPeriodShow(this ICakeContext context, AzBillingPeriodShowSettings settings) {
            var baseCommand = "az billing period show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot create".
        /// Create a new v4 SDK bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public static dynamic AzBotCreate(this ICakeContext context, AzBotCreateSettings settings) {
            var baseCommand = "az bot create";
            AppendIfNonNull(ref baseCommand, "--appid", settings.Appid);
            AppendIfNonNull(ref baseCommand, "--kind", settings.Kind);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--echo", settings.Echo);
            AppendIfNonNull(ref baseCommand, "--lang", settings.Lang);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot delete".
        /// Delete an existing bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public static dynamic AzBotDelete(this ICakeContext context, AzBotDeleteSettings settings) {
            var baseCommand = "az bot delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot download".
        /// Download an existing bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public static dynamic AzBotDownload(this ICakeContext context, AzBotDownloadSettings settings) {
            var baseCommand = "az bot download";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--save-path", settings.SavePath);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot prepare-deploy".
        /// Add scripts/config files for publishing with `az webapp deployment`.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public static dynamic AzBotPrepareDeploy(this ICakeContext context, AzBotPrepareDeploySettings settings) {
            var baseCommand = "az bot prepare-deploy";
            AppendIfNonNull(ref baseCommand, "--lang", settings.Lang);
            AppendIfNonNull(ref baseCommand, "--code-dir", settings.CodeDir);
            AppendIfNonNull(ref baseCommand, "--proj-file-path", settings.ProjFilePath);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot prepare-publish".
        /// (Maintenance mode) Add scripts to your local source code directory to be able to publish back using `az bot publish` for v3 SDK bots.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public static dynamic AzBotPreparePublish(this ICakeContext context, AzBotPreparePublishSettings settings) {
            var baseCommand = "az bot prepare-publish";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--proj-file-path", settings.ProjFilePath);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sln-name", settings.SlnName);
            AppendIfNonNull(ref baseCommand, "--code-dir", settings.CodeDir);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot publish".
        /// Publish to a bot's associated app service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public static dynamic AzBotPublish(this ICakeContext context, AzBotPublishSettings settings) {
            var baseCommand = "az bot publish";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--code-dir", settings.CodeDir);
            AppendIfNonNull(ref baseCommand, "--keep-node-modules", settings.KeepNodeModules);
            AppendIfNonNull(ref baseCommand, "--proj-file-path", settings.ProjFilePath);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot show".
        /// Get an existing bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public static dynamic AzBotShow(this ICakeContext context, AzBotShowSettings settings) {
            var baseCommand = "az bot show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--msbot", settings.Msbot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot update".
        /// Update an existing bot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public static dynamic AzBotUpdate(this ICakeContext context, AzBotUpdateSettings settings) {
            var baseCommand = "az bot update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--ai-api-key", settings.AiApiKey);
            AppendIfNonNull(ref baseCommand, "--ai-app-id", settings.AiAppId);
            AppendIfNonNull(ref baseCommand, "--ai-key", settings.AiKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot authsetting create".
        /// Create an OAuth connection setting on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotAuthsetting")]
        public static dynamic AzBotAuthsettingCreate(this ICakeContext context, AzBotAuthsettingCreateSettings settings) {
            var baseCommand = "az bot authsetting create";
            AppendIfNonNull(ref baseCommand, "--client-id", settings.ClientId);
            AppendIfNonNull(ref baseCommand, "--client-secret", settings.ClientSecret);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--provider-scope-string", settings.ProviderScopeString);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service", settings.Service);
            AppendIfNonNull(ref baseCommand, "--setting-name", settings.SettingName);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot authsetting delete".
        /// Delete an OAuth connection setting on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotAuthsetting")]
        public static dynamic AzBotAuthsettingDelete(this ICakeContext context, AzBotAuthsettingDeleteSettings settings) {
            var baseCommand = "az bot authsetting delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--setting-name", settings.SettingName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot authsetting list".
        /// Show all OAuth connection settings on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotAuthsetting")]
        public static dynamic AzBotAuthsettingList(this ICakeContext context, AzBotAuthsettingListSettings settings) {
            var baseCommand = "az bot authsetting list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot authsetting list-providers".
        /// List details for all service providers available for creating OAuth connection settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotAuthsetting")]
        public static dynamic AzBotAuthsettingListProviders(this ICakeContext context, AzBotAuthsettingListProvidersSettings settings) {
            var baseCommand = "az bot authsetting list-providers";
            AppendIfNonNull(ref baseCommand, "--provider-name", settings.ProviderName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot authsetting show".
        /// Show details of an OAuth connection setting on a bot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotAuthsetting")]
        public static dynamic AzBotAuthsettingShow(this ICakeContext context, AzBotAuthsettingShowSettings settings) {
            var baseCommand = "az bot authsetting show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--setting-name", settings.SettingName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot directline create".
        /// Create the DirectLine Channel on a bot with only v3 protocol enabled.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotDirectline")]
        public static dynamic AzBotDirectlineCreate(this ICakeContext context, AzBotDirectlineCreateSettings settings) {
            var baseCommand = "az bot directline create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--disablev1", settings.Disablev1);
            AppendIfNonNull(ref baseCommand, "--disablev3", settings.Disablev3);
            AppendIfNonNull(ref baseCommand, "--site-name", settings.SiteName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot directline delete".
        /// Delete the Directline Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotDirectline")]
        public static dynamic AzBotDirectlineDelete(this ICakeContext context, AzBotDirectlineDeleteSettings settings) {
            var baseCommand = "az bot directline delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot directline show".
        /// Get details of the Directline Channel on a bot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotDirectline")]
        public static dynamic AzBotDirectlineShow(this ICakeContext context, AzBotDirectlineShowSettings settings) {
            var baseCommand = "az bot directline show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot email create".
        /// Create the Email Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotEmail")]
        public static dynamic AzBotEmailCreate(this ICakeContext context, AzBotEmailCreateSettings settings) {
            var baseCommand = "az bot email create";
            AppendIfNonNull(ref baseCommand, "--email-address", settings.EmailAddress);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot email delete".
        /// Delete the email Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotEmail")]
        public static dynamic AzBotEmailDelete(this ICakeContext context, AzBotEmailDeleteSettings settings) {
            var baseCommand = "az bot email delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot email show".
        /// Get details of the email Channel on a bot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotEmail")]
        public static dynamic AzBotEmailShow(this ICakeContext context, AzBotEmailShowSettings settings) {
            var baseCommand = "az bot email show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot facebook create".
        /// Create the Facebook Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotFacebook")]
        public static dynamic AzBotFacebookCreate(this ICakeContext context, AzBotFacebookCreateSettings settings) {
            var baseCommand = "az bot facebook create";
            AppendIfNonNull(ref baseCommand, "--appid", settings.Appid);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--page-id", settings.PageId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--secret", settings.Secret);
            AppendIfNonNull(ref baseCommand, "--token", settings.Token);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot facebook delete".
        /// Delete the Facebook Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotFacebook")]
        public static dynamic AzBotFacebookDelete(this ICakeContext context, AzBotFacebookDeleteSettings settings) {
            var baseCommand = "az bot facebook delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot facebook show".
        /// Get details of the Facebook Channel on a bot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotFacebook")]
        public static dynamic AzBotFacebookShow(this ICakeContext context, AzBotFacebookShowSettings settings) {
            var baseCommand = "az bot facebook show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot kik create".
        /// Create the Kik Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotKik")]
        public static dynamic AzBotKikCreate(this ICakeContext context, AzBotKikCreateSettings settings) {
            var baseCommand = "az bot kik create";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--is-validated", settings.IsValidated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot kik delete".
        /// Delete the Kik Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotKik")]
        public static dynamic AzBotKikDelete(this ICakeContext context, AzBotKikDeleteSettings settings) {
            var baseCommand = "az bot kik delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot kik show".
        /// Get details of the Kik Channel on a bot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotKik")]
        public static dynamic AzBotKikShow(this ICakeContext context, AzBotKikShowSettings settings) {
            var baseCommand = "az bot kik show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot msteams create".
        /// Create the Microsoft Teams Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotMsteams")]
        public static dynamic AzBotMsteamsCreate(this ICakeContext context, AzBotMsteamsCreateSettings settings) {
            var baseCommand = "az bot msteams create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--calling-web-hook", settings.CallingWebHook);
            AppendIfNonNull(ref baseCommand, "--enable-calling", settings.EnableCalling);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot msteams delete".
        /// Delete the Microsoft Teams Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotMsteams")]
        public static dynamic AzBotMsteamsDelete(this ICakeContext context, AzBotMsteamsDeleteSettings settings) {
            var baseCommand = "az bot msteams delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot msteams show".
        /// Get details of the Microsoft Teams Channel on a bot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotMsteams")]
        public static dynamic AzBotMsteamsShow(this ICakeContext context, AzBotMsteamsShowSettings settings) {
            var baseCommand = "az bot msteams show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot skype create".
        /// Create the Skype Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSkype")]
        public static dynamic AzBotSkypeCreate(this ICakeContext context, AzBotSkypeCreateSettings settings) {
            var baseCommand = "az bot skype create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--calling-web-hook", settings.CallingWebHook);
            AppendIfNonNull(ref baseCommand, "--enable-calling", settings.EnableCalling);
            AppendIfNonNull(ref baseCommand, "--enable-groups", settings.EnableGroups);
            AppendIfNonNull(ref baseCommand, "--enable-media-cards", settings.EnableMediaCards);
            AppendIfNonNull(ref baseCommand, "--enable-messaging", settings.EnableMessaging);
            AppendIfNonNull(ref baseCommand, "--enable-screen-sharing", settings.EnableScreenSharing);
            AppendIfNonNull(ref baseCommand, "--enable-video", settings.EnableVideo);
            AppendIfNonNull(ref baseCommand, "--groups-mode", settings.GroupsMode);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot skype delete".
        /// Delete the Skype Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSkype")]
        public static dynamic AzBotSkypeDelete(this ICakeContext context, AzBotSkypeDeleteSettings settings) {
            var baseCommand = "az bot skype delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot skype show".
        /// Get details of the Skype Channel on a bot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSkype")]
        public static dynamic AzBotSkypeShow(this ICakeContext context, AzBotSkypeShowSettings settings) {
            var baseCommand = "az bot skype show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot slack create".
        /// Create the Slack Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSlack")]
        public static dynamic AzBotSlackCreate(this ICakeContext context, AzBotSlackCreateSettings settings) {
            var baseCommand = "az bot slack create";
            AppendIfNonNull(ref baseCommand, "--client-id", settings.ClientId);
            AppendIfNonNull(ref baseCommand, "--client-secret", settings.ClientSecret);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--verification-token", settings.VerificationToken);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--landing-page-url", settings.LandingPageUrl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot slack delete".
        /// Delete the Slack Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSlack")]
        public static dynamic AzBotSlackDelete(this ICakeContext context, AzBotSlackDeleteSettings settings) {
            var baseCommand = "az bot slack delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot slack show".
        /// Get details of the Slack Channel on a bot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSlack")]
        public static dynamic AzBotSlackShow(this ICakeContext context, AzBotSlackShowSettings settings) {
            var baseCommand = "az bot slack show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot sms create".
        /// Create the SMS Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSms")]
        public static dynamic AzBotSmsCreate(this ICakeContext context, AzBotSmsCreateSettings settings) {
            var baseCommand = "az bot sms create";
            AppendIfNonNull(ref baseCommand, "--account-sid", settings.AccountSid);
            AppendIfNonNull(ref baseCommand, "--auth-token", settings.AuthToken);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--phone", settings.Phone);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--is-validated", settings.IsValidated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot sms delete".
        /// Delete the SMS Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSms")]
        public static dynamic AzBotSmsDelete(this ICakeContext context, AzBotSmsDeleteSettings settings) {
            var baseCommand = "az bot sms delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot sms show".
        /// Get details of the SMS Channel on a bot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSms")]
        public static dynamic AzBotSmsShow(this ICakeContext context, AzBotSmsShowSettings settings) {
            var baseCommand = "az bot sms show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot telegram create".
        /// Create the Telegram Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotTelegram")]
        public static dynamic AzBotTelegramCreate(this ICakeContext context, AzBotTelegramCreateSettings settings) {
            var baseCommand = "az bot telegram create";
            AppendIfNonNull(ref baseCommand, "--access-token", settings.AccessToken);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--is-validated", settings.IsValidated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot telegram delete".
        /// Delete the Telegram Channel on a bot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotTelegram")]
        public static dynamic AzBotTelegramDelete(this ICakeContext context, AzBotTelegramDeleteSettings settings) {
            var baseCommand = "az bot telegram delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot telegram show".
        /// Get details of the Telegram Channel on a bot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotTelegram")]
        public static dynamic AzBotTelegramShow(this ICakeContext context, AzBotTelegramShowSettings settings) {
            var baseCommand = "az bot telegram show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az bot webchat show".
        /// Get details of the Webchat Channel on a bot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotWebchat")]
        public static dynamic AzBotWebchatShow(this ICakeContext context, AzBotWebchatShowSettings settings) {
            var baseCommand = "az bot webchat show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cache delete".
        /// Delete an object from the cache.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCache")]
        public static dynamic AzCacheDelete(this ICakeContext context, AzCacheDeleteSettings settings) {
            var baseCommand = "az cache delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cache list".
        /// List the contents of the object cache.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCache")]
        public static dynamic AzCacheList(this ICakeContext context, AzCacheListSettings settings) {
            var baseCommand = "az cache list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cache purge".
        /// Clear the entire CLI object cache.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCache")]
        public static dynamic AzCachePurge(this ICakeContext context, AzCachePurgeSettings settings) {
            var baseCommand = "az cache purge";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cache show".
        /// Show the contents of a specific object in the cache.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCache")]
        public static dynamic AzCacheShow(this ICakeContext context, AzCacheShowSettings settings) {
            var baseCommand = "az cache show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn name-exists".
        /// Check the availability of a resource name.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdn")]
        public static dynamic AzCdnNameExists(this ICakeContext context, AzCdnNameExistsSettings settings) {
            var baseCommand = "az cdn name-exists";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn usage".
        /// Check the quota and actual usage of the CDN profiles under the given subscription.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdn")]
        public static dynamic AzCdnUsage(this ICakeContext context, AzCdnUsageSettings settings) {
            var baseCommand = "az cdn usage";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn custom-domain create".
        /// Create a new custom domain to provide a hostname for a CDN endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnCustomDomain")]
        public static dynamic AzCdnCustomDomainCreate(this ICakeContext context, AzCdnCustomDomainCreateSettings settings) {
            var baseCommand = "az cdn custom-domain create";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--hostname", settings.Hostname);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn custom-domain delete".
        /// Delete the custom domain of a CDN.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnCustomDomain")]
        public static dynamic AzCdnCustomDomainDelete(this ICakeContext context, AzCdnCustomDomainDeleteSettings settings) {
            var baseCommand = "az cdn custom-domain delete";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn custom-domain disable-https".
        /// Disable https delivery of the custom domain.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnCustomDomain")]
        public static dynamic AzCdnCustomDomainDisableHttps(this ICakeContext context, AzCdnCustomDomainDisableHttpsSettings settings) {
            var baseCommand = "az cdn custom-domain disable-https";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn custom-domain enable-https".
        /// Enable https delivery of the custom domain.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnCustomDomain")]
        public static dynamic AzCdnCustomDomainEnableHttps(this ICakeContext context, AzCdnCustomDomainEnableHttpsSettings settings) {
            var baseCommand = "az cdn custom-domain enable-https";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--custom-domain-https-parameters", settings.CustomDomainHttpsParameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn custom-domain list".
        /// Lists all of the existing custom domains within an endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnCustomDomain")]
        public static dynamic AzCdnCustomDomainList(this ICakeContext context, AzCdnCustomDomainListSettings settings) {
            var baseCommand = "az cdn custom-domain list";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn custom-domain show".
        /// Show details for the custom domain of a CDN.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnCustomDomain")]
        public static dynamic AzCdnCustomDomainShow(this ICakeContext context, AzCdnCustomDomainShowSettings settings) {
            var baseCommand = "az cdn custom-domain show";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn edge-node list".
        /// Edgenodes are the global Point of Presence (POP) locations used to deliver CDN content to end users.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEdgeNode")]
        public static dynamic AzCdnEdgeNodeList(this ICakeContext context, AzCdnEdgeNodeListSettings settings) {
            var baseCommand = "az cdn edge-node list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn endpoint create".
        /// Create a named endpoint to connect to a CDN.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public static dynamic AzCdnEndpointCreate(this ICakeContext context, AzCdnEndpointCreateSettings settings) {
            var baseCommand = "az cdn endpoint create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--origin", settings.Origin);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--content-types-to-compress", settings.ContentTypesToCompress);
            AppendIfNonNull(ref baseCommand, "--enable-compression", settings.EnableCompression);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-http", settings.NoHttp);
            AppendIfNonNull(ref baseCommand, "--no-https", settings.NoHttps);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--origin-host-header", settings.OriginHostHeader);
            AppendIfNonNull(ref baseCommand, "--origin-path", settings.OriginPath);
            AppendIfNonNull(ref baseCommand, "--query-string-caching", settings.QueryStringCaching);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn endpoint delete".
        /// Delete a CDN endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public static dynamic AzCdnEndpointDelete(this ICakeContext context, AzCdnEndpointDeleteSettings settings) {
            var baseCommand = "az cdn endpoint delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn endpoint list".
        /// List available endpoints for a CDN.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public static dynamic AzCdnEndpointList(this ICakeContext context, AzCdnEndpointListSettings settings) {
            var baseCommand = "az cdn endpoint list";
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn endpoint load".
        /// Pre-load content for a CDN endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public static dynamic AzCdnEndpointLoad(this ICakeContext context, AzCdnEndpointLoadSettings settings) {
            var baseCommand = "az cdn endpoint load";
            AppendIfNonNull(ref baseCommand, "--content-paths", settings.ContentPaths);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn endpoint purge".
        /// Purge pre-loaded content for a CDN endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public static dynamic AzCdnEndpointPurge(this ICakeContext context, AzCdnEndpointPurgeSettings settings) {
            var baseCommand = "az cdn endpoint purge";
            AppendIfNonNull(ref baseCommand, "--content-paths", settings.ContentPaths);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn endpoint show".
        /// Gets an existing CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public static dynamic AzCdnEndpointShow(this ICakeContext context, AzCdnEndpointShowSettings settings) {
            var baseCommand = "az cdn endpoint show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn endpoint start".
        /// Start a CDN endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public static dynamic AzCdnEndpointStart(this ICakeContext context, AzCdnEndpointStartSettings settings) {
            var baseCommand = "az cdn endpoint start";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn endpoint stop".
        /// Stop a CDN endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public static dynamic AzCdnEndpointStop(this ICakeContext context, AzCdnEndpointStopSettings settings) {
            var baseCommand = "az cdn endpoint stop";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn endpoint update".
        /// Update a CDN endpoint to manage how content is delivered.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public static dynamic AzCdnEndpointUpdate(this ICakeContext context, AzCdnEndpointUpdateSettings settings) {
            var baseCommand = "az cdn endpoint update";
            AppendIfNonNull(ref baseCommand, "--content-types-to-compress", settings.ContentTypesToCompress);
            AppendIfNonNull(ref baseCommand, "--enable-compression", settings.EnableCompression);
            AppendIfNonNull(ref baseCommand, "--no-http", settings.NoHttp);
            AppendIfNonNull(ref baseCommand, "--no-https", settings.NoHttps);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--origin-host-header", settings.OriginHostHeader);
            AppendIfNonNull(ref baseCommand, "--origin-path", settings.OriginPath);
            AppendIfNonNull(ref baseCommand, "--query-string-caching", settings.QueryStringCaching);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn endpoint validate-custom-domain".
        /// Validates the custom domain mapping to ensure it maps to the correct CDN endpoint in DNS.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public static dynamic AzCdnEndpointValidateCustomDomain(this ICakeContext context, AzCdnEndpointValidateCustomDomainSettings settings) {
            var baseCommand = "az cdn endpoint validate-custom-domain";
            AppendIfNonNull(ref baseCommand, "--host-name", settings.HostName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn origin list".
        /// Lists all of the existing origins within an endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnOrigin")]
        public static dynamic AzCdnOriginList(this ICakeContext context, AzCdnOriginListSettings settings) {
            var baseCommand = "az cdn origin list";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn origin show".
        /// Gets an existing origin within an endpoint.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnOrigin")]
        public static dynamic AzCdnOriginShow(this ICakeContext context, AzCdnOriginShowSettings settings) {
            var baseCommand = "az cdn origin show";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn profile create".
        /// Create a new CDN profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnProfile")]
        public static dynamic AzCdnProfileCreate(this ICakeContext context, AzCdnProfileCreateSettings settings) {
            var baseCommand = "az cdn profile create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn profile delete".
        /// Delete a CDN profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnProfile")]
        public static dynamic AzCdnProfileDelete(this ICakeContext context, AzCdnProfileDeleteSettings settings) {
            var baseCommand = "az cdn profile delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn profile list".
        /// List CDN profiles.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnProfile")]
        public static dynamic AzCdnProfileList(this ICakeContext context, AzCdnProfileListSettings settings) {
            var baseCommand = "az cdn profile list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn profile show".
        /// Gets a CDN profile with the specified profile name under the specified subscription and resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnProfile")]
        public static dynamic AzCdnProfileShow(this ICakeContext context, AzCdnProfileShowSettings settings) {
            var baseCommand = "az cdn profile show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn profile update".
        /// Update a CDN profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnProfile")]
        public static dynamic AzCdnProfileUpdate(this ICakeContext context, AzCdnProfileUpdateSettings settings) {
            var baseCommand = "az cdn profile update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cdn profile usage".
        /// Checks the quota and actual usage of endpoints under the given CDN profile.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnProfile")]
        public static dynamic AzCdnProfileUsage(this ICakeContext context, AzCdnProfileUsageSettings settings) {
            var baseCommand = "az cdn profile usage";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cloud list".
        /// List registered clouds.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public static dynamic AzCloudList(this ICakeContext context, AzCloudListSettings settings) {
            var baseCommand = "az cloud list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cloud list-profiles".
        /// List the supported profiles for a cloud.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public static dynamic AzCloudListProfiles(this ICakeContext context, AzCloudListProfilesSettings settings) {
            var baseCommand = "az cloud list-profiles";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--show-all", settings.ShowAll);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cloud register".
        /// Register a cloud.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public static dynamic AzCloudRegister(this ICakeContext context, AzCloudRegisterSettings settings) {
            var baseCommand = "az cloud register";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--cloud-config", settings.CloudConfig);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory", settings.EndpointActiveDirectory);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory-data-lake-resource-id", settings.EndpointActiveDirectoryDataLakeResourceId);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory-graph-resource-id", settings.EndpointActiveDirectoryGraphResourceId);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory-resource-id", settings.EndpointActiveDirectoryResourceId);
            AppendIfNonNull(ref baseCommand, "--endpoint-gallery", settings.EndpointGallery);
            AppendIfNonNull(ref baseCommand, "--endpoint-management", settings.EndpointManagement);
            AppendIfNonNull(ref baseCommand, "--endpoint-resource-manager", settings.EndpointResourceManager);
            AppendIfNonNull(ref baseCommand, "--endpoint-sql-management", settings.EndpointSqlManagement);
            AppendIfNonNull(ref baseCommand, "--endpoint-vm-image-alias-doc", settings.EndpointVmImageAliasDoc);
            AppendIfNonNull(ref baseCommand, "--profile", settings.Profile);
            AppendIfNonNull(ref baseCommand, "--suffix-acr-login-server-endpoint", settings.SuffixAcrLoginServerEndpoint);
            AppendIfNonNull(ref baseCommand, "--suffix-azure-datalake-analytics-catalog-and-job-endpoint", settings.SuffixAzureDatalakeAnalyticsCatalogAndJobEndpoint);
            AppendIfNonNull(ref baseCommand, "--suffix-azure-datalake-store-file-system-endpoint", settings.SuffixAzureDatalakeStoreFileSystemEndpoint);
            AppendIfNonNull(ref baseCommand, "--suffix-keyvault-dns", settings.SuffixKeyvaultDns);
            AppendIfNonNull(ref baseCommand, "--suffix-sql-server-hostname", settings.SuffixSqlServerHostname);
            AppendIfNonNull(ref baseCommand, "--suffix-storage-endpoint", settings.SuffixStorageEndpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cloud set".
        /// Set the active cloud.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public static dynamic AzCloudSet(this ICakeContext context, AzCloudSetSettings settings) {
            var baseCommand = "az cloud set";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile", settings.Profile);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cloud show".
        /// Get the details of a registered cloud.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public static dynamic AzCloudShow(this ICakeContext context, AzCloudShowSettings settings) {
            var baseCommand = "az cloud show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cloud unregister".
        /// Unregister a cloud.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public static dynamic AzCloudUnregister(this ICakeContext context, AzCloudUnregisterSettings settings) {
            var baseCommand = "az cloud unregister";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cloud update".
        /// Update the configuration of a cloud.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public static dynamic AzCloudUpdate(this ICakeContext context, AzCloudUpdateSettings settings) {
            var baseCommand = "az cloud update";
            AppendIfNonNull(ref baseCommand, "--cloud-config", settings.CloudConfig);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory", settings.EndpointActiveDirectory);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory-data-lake-resource-id", settings.EndpointActiveDirectoryDataLakeResourceId);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory-graph-resource-id", settings.EndpointActiveDirectoryGraphResourceId);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory-resource-id", settings.EndpointActiveDirectoryResourceId);
            AppendIfNonNull(ref baseCommand, "--endpoint-gallery", settings.EndpointGallery);
            AppendIfNonNull(ref baseCommand, "--endpoint-management", settings.EndpointManagement);
            AppendIfNonNull(ref baseCommand, "--endpoint-resource-manager", settings.EndpointResourceManager);
            AppendIfNonNull(ref baseCommand, "--endpoint-sql-management", settings.EndpointSqlManagement);
            AppendIfNonNull(ref baseCommand, "--endpoint-vm-image-alias-doc", settings.EndpointVmImageAliasDoc);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile", settings.Profile);
            AppendIfNonNull(ref baseCommand, "--suffix-acr-login-server-endpoint", settings.SuffixAcrLoginServerEndpoint);
            AppendIfNonNull(ref baseCommand, "--suffix-azure-datalake-analytics-catalog-and-job-endpoint", settings.SuffixAzureDatalakeAnalyticsCatalogAndJobEndpoint);
            AppendIfNonNull(ref baseCommand, "--suffix-azure-datalake-store-file-system-endpoint", settings.SuffixAzureDatalakeStoreFileSystemEndpoint);
            AppendIfNonNull(ref baseCommand, "--suffix-keyvault-dns", settings.SuffixKeyvaultDns);
            AppendIfNonNull(ref baseCommand, "--suffix-sql-server-hostname", settings.SuffixSqlServerHostname);
            AppendIfNonNull(ref baseCommand, "--suffix-storage-endpoint", settings.SuffixStorageEndpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account create".
        /// Manage Azure Cognitive Services accounts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public static dynamic AzCognitiveservicesAccountCreate(this ICakeContext context, AzCognitiveservicesAccountCreateSettings settings) {
            var baseCommand = "az cognitiveservices account create";
            AppendIfNonNull(ref baseCommand, "--kind", settings.Kind);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--api-properties", settings.ApiProperties);
            AppendIfNonNull(ref baseCommand, "--custom-domain", settings.CustomDomain);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account delete".
        /// Manage Azure Cognitive Services accounts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public static dynamic AzCognitiveservicesAccountDelete(this ICakeContext context, AzCognitiveservicesAccountDeleteSettings settings) {
            var baseCommand = "az cognitiveservices account delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account list".
        /// Manage Azure Cognitive Services accounts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public static dynamic AzCognitiveservicesAccountList(this ICakeContext context, AzCognitiveservicesAccountListSettings settings) {
            var baseCommand = "az cognitiveservices account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account list-kinds".
        /// List all valid kinds for Azure Cognitive Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public static dynamic AzCognitiveservicesAccountListKinds(this ICakeContext context, AzCognitiveservicesAccountListKindsSettings settings) {
            var baseCommand = "az cognitiveservices account list-kinds";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account list-skus".
        /// Manage Azure Cognitive Services accounts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public static dynamic AzCognitiveservicesAccountListSkus(this ICakeContext context, AzCognitiveservicesAccountListSkusSettings settings) {
            var baseCommand = "az cognitiveservices account list-skus";
            AppendIfNonNull(ref baseCommand, "--kind", settings.Kind);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account list-usage".
        /// List usages for Azure Cognitive Services account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public static dynamic AzCognitiveservicesAccountListUsage(this ICakeContext context, AzCognitiveservicesAccountListUsageSettings settings) {
            var baseCommand = "az cognitiveservices account list-usage";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account show".
        /// Manage Azure Cognitive Services accounts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public static dynamic AzCognitiveservicesAccountShow(this ICakeContext context, AzCognitiveservicesAccountShowSettings settings) {
            var baseCommand = "az cognitiveservices account show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account update".
        /// Manage Azure Cognitive Services accounts.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public static dynamic AzCognitiveservicesAccountUpdate(this ICakeContext context, AzCognitiveservicesAccountUpdateSettings settings) {
            var baseCommand = "az cognitiveservices account update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--api-properties", settings.ApiProperties);
            AppendIfNonNull(ref baseCommand, "--custom-domain", settings.CustomDomain);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account keys list".
        /// Manage Azure Cognitive Services accounts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccountKeys")]
        public static dynamic AzCognitiveservicesAccountKeysList(this ICakeContext context, AzCognitiveservicesAccountKeysListSettings settings) {
            var baseCommand = "az cognitiveservices account keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account keys regenerate".
        /// Manage Azure Cognitive Services accounts.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccountKeys")]
        public static dynamic AzCognitiveservicesAccountKeysRegenerate(this ICakeContext context, AzCognitiveservicesAccountKeysRegenerateSettings settings) {
            var baseCommand = "az cognitiveservices account keys regenerate";
            AppendIfNonNull(ref baseCommand, "--key-name", settings.KeyName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account network-rule add".
        /// Add a network rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccountNetworkRule")]
        public static dynamic AzCognitiveservicesAccountNetworkRuleAdd(this ICakeContext context, AzCognitiveservicesAccountNetworkRuleAddSettings settings) {
            var baseCommand = "az cognitiveservices account network-rule add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account network-rule list".
        /// List network rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccountNetworkRule")]
        public static dynamic AzCognitiveservicesAccountNetworkRuleList(this ICakeContext context, AzCognitiveservicesAccountNetworkRuleListSettings settings) {
            var baseCommand = "az cognitiveservices account network-rule list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cognitiveservices account network-rule remove".
        /// Remove a network rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccountNetworkRule")]
        public static dynamic AzCognitiveservicesAccountNetworkRuleRemove(this ICakeContext context, AzCognitiveservicesAccountNetworkRuleRemoveSettings settings) {
            var baseCommand = "az cognitiveservices account network-rule remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az consumption budget create".
        /// Create a budget for an Azure subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionBudget")]
        public static dynamic AzConsumptionBudgetCreate(this ICakeContext context, AzConsumptionBudgetCreateSettings settings) {
            var baseCommand = "az consumption budget create";
            AppendIfNonNull(ref baseCommand, "--amount", settings.Amount);
            AppendIfNonNull(ref baseCommand, "--budget-name", settings.BudgetName);
            AppendIfNonNull(ref baseCommand, "--category", settings.Category);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--time-grain", settings.TimeGrain);
            AppendIfNonNull(ref baseCommand, "--meter-filter", settings.MeterFilter);
            AppendIfNonNull(ref baseCommand, "--resource-filter", settings.ResourceFilter);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group-filter", settings.ResourceGroupFilter);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az consumption budget delete".
        /// Delete a budget for an Azure subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionBudget")]
        public static dynamic AzConsumptionBudgetDelete(this ICakeContext context, AzConsumptionBudgetDeleteSettings settings) {
            var baseCommand = "az consumption budget delete";
            AppendIfNonNull(ref baseCommand, "--budget-name", settings.BudgetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az consumption budget list".
        /// List budgets for an Azure subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionBudget")]
        public static dynamic AzConsumptionBudgetList(this ICakeContext context, AzConsumptionBudgetListSettings settings) {
            var baseCommand = "az consumption budget list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az consumption budget show".
        /// Show budget for an Azure subscription.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionBudget")]
        public static dynamic AzConsumptionBudgetShow(this ICakeContext context, AzConsumptionBudgetShowSettings settings) {
            var baseCommand = "az consumption budget show";
            AppendIfNonNull(ref baseCommand, "--budget-name", settings.BudgetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az consumption marketplace list".
        /// List the marketplace for an Azure subscription within a billing period.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionMarketplace")]
        public static dynamic AzConsumptionMarketplaceList(this ICakeContext context, AzConsumptionMarketplaceListSettings settings) {
            var baseCommand = "az consumption marketplace list";
            AppendIfNonNull(ref baseCommand, "--billing-period-name", settings.BillingPeriodName);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az consumption pricesheet show".
        /// Show the price sheet for an Azure subscription within a billing period.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionPricesheet")]
        public static dynamic AzConsumptionPricesheetShow(this ICakeContext context, AzConsumptionPricesheetShowSettings settings) {
            var baseCommand = "az consumption pricesheet show";
            AppendIfNonNull(ref baseCommand, "--billing-period-name", settings.BillingPeriodName);
            AppendIfNonNull(ref baseCommand, "--include-meter-details", settings.IncludeMeterDetails);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az consumption reservation detail list".
        /// List the details of a reservation by order id or reservation id.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionReservationDetail")]
        public static dynamic AzConsumptionReservationDetailList(this ICakeContext context, AzConsumptionReservationDetailListSettings settings) {
            var baseCommand = "az consumption reservation detail list";
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--reservation-id", settings.ReservationId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az consumption reservation summary list".
        /// List reservation summaries for daily or monthly by order Id or reservation id.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionReservationSummary")]
        public static dynamic AzConsumptionReservationSummaryList(this ICakeContext context, AzConsumptionReservationSummaryListSettings settings) {
            var baseCommand = "az consumption reservation summary list";
            AppendIfNonNull(ref baseCommand, "--grain", settings.Grain);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--reservation-id", settings.ReservationId);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az consumption usage list".
        /// List the details of Azure resource consumption, either as an invoice or within a billing period.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionUsage")]
        public static dynamic AzConsumptionUsageList(this ICakeContext context, AzConsumptionUsageListSettings settings) {
            var baseCommand = "az consumption usage list";
            AppendIfNonNull(ref baseCommand, "--billing-period-name", settings.BillingPeriodName);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--include-additional-properties", settings.IncludeAdditionalProperties);
            AppendIfNonNull(ref baseCommand, "--include-meter-details", settings.IncludeMeterDetails);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az container attach".
        /// Attach local standard output and error streams to a container in a container group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public static dynamic AzContainerAttach(this ICakeContext context, AzContainerAttachSettings settings) {
            var baseCommand = "az container attach";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az container create".
        /// Create a container group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public static dynamic AzContainerCreate(this ICakeContext context, AzContainerCreateSettings settings) {
            var baseCommand = "az container create";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--command-line", settings.CommandLine);
            AppendIfNonNull(ref baseCommand, "--cpu", settings.Cpu);
            AppendIfNonNull(ref baseCommand, "--dns-name-label", settings.DnsNameLabel);
            AppendIfNonNull(ref baseCommand, "--environment-variables", settings.EnvironmentVariables);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--memory", settings.Memory);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--ports", settings.Ports);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--restart-policy", settings.RestartPolicy);
            AppendIfNonNull(ref baseCommand, "--secrets", settings.Secrets);
            AppendIfNonNull(ref baseCommand, "--secrets-mount-path", settings.SecretsMountPath);
            AppendIfNonNull(ref baseCommand, "--secure-environment-variables", settings.SecureEnvironmentVariables);
            AppendIfNonNull(ref baseCommand, "--azure-file-volume-account-key", settings.AzureFileVolumeAccountKey);
            AppendIfNonNull(ref baseCommand, "--azure-file-volume-account-name", settings.AzureFileVolumeAccountName);
            AppendIfNonNull(ref baseCommand, "--azure-file-volume-mount-path", settings.AzureFileVolumeMountPath);
            AppendIfNonNull(ref baseCommand, "--azure-file-volume-share-name", settings.AzureFileVolumeShareName);
            AppendIfNonNull(ref baseCommand, "--gitrepo-dir", settings.GitrepoDir);
            AppendIfNonNull(ref baseCommand, "--gitrepo-mount-path", settings.GitrepoMountPath);
            AppendIfNonNull(ref baseCommand, "--gitrepo-revision", settings.GitrepoRevision);
            AppendIfNonNull(ref baseCommand, "--gitrepo-url", settings.GitrepoUrl);
            AppendIfNonNull(ref baseCommand, "--registry-login-server", settings.RegistryLoginServer);
            AppendIfNonNull(ref baseCommand, "--registry-password", settings.RegistryPassword);
            AppendIfNonNull(ref baseCommand, "--registry-username", settings.RegistryUsername);
            AppendIfNonNull(ref baseCommand, "--log-analytics-workspace", settings.LogAnalyticsWorkspace);
            AppendIfNonNull(ref baseCommand, "--log-analytics-workspace-key", settings.LogAnalyticsWorkspaceKey);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--network-profile", settings.NetworkProfile);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--subnet-address-prefix", settings.SubnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--vnet-address-prefix", settings.VnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az container delete".
        /// Delete a container group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public static dynamic AzContainerDelete(this ICakeContext context, AzContainerDeleteSettings settings) {
            var baseCommand = "az container delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az container exec".
        /// Execute a command from within a running container of a container group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public static dynamic AzContainerExec(this ICakeContext context, AzContainerExecSettings settings) {
            var baseCommand = "az container exec";
            AppendIfNonNull(ref baseCommand, "--exec-command", settings.ExecCommand);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--terminal-col-size", settings.TerminalColSize);
            AppendIfNonNull(ref baseCommand, "--terminal-row-size", settings.TerminalRowSize);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az container export".
        /// Export a container group in yaml format.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public static dynamic AzContainerExport(this ICakeContext context, AzContainerExportSettings settings) {
            var baseCommand = "az container export";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az container list".
        /// List container groups.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public static dynamic AzContainerList(this ICakeContext context, AzContainerListSettings settings) {
            var baseCommand = "az container list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az container logs".
        /// Examine the logs for a container in a container group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public static dynamic AzContainerLogs(this ICakeContext context, AzContainerLogsSettings settings) {
            var baseCommand = "az container logs";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--follow", settings.Follow);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az container restart".
        /// Restarts all containers in a container group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public static dynamic AzContainerRestart(this ICakeContext context, AzContainerRestartSettings settings) {
            var baseCommand = "az container restart";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az container show".
        /// Get the details of a container group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public static dynamic AzContainerShow(this ICakeContext context, AzContainerShowSettings settings) {
            var baseCommand = "az container show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az container start".
        /// Starts all containers in a container group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public static dynamic AzContainerStart(this ICakeContext context, AzContainerStartSettings settings) {
            var baseCommand = "az container start";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az container stop".
        /// Stops all containers in a container group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public static dynamic AzContainerStop(this ICakeContext context, AzContainerStopSettings settings) {
            var baseCommand = "az container stop";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb check-name-exists".
        /// Checks if an Azure Cosmos DB account name exists.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public static dynamic AzCosmosdbCheckNameExists(this ICakeContext context, AzCosmosdbCheckNameExistsSettings settings) {
            var baseCommand = "az cosmosdb check-name-exists";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb create".
        /// Creates a new Azure Cosmos DB database account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public static dynamic AzCosmosdbCreate(this ICakeContext context, AzCosmosdbCreateSettings settings) {
            var baseCommand = "az cosmosdb create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--capabilities", settings.Capabilities);
            AppendIfNonNull(ref baseCommand, "--default-consistency-level", settings.DefaultConsistencyLevel);
            AppendIfNonNull(ref baseCommand, "--enable-automatic-failover", settings.EnableAutomaticFailover);
            AppendIfNonNull(ref baseCommand, "--enable-multiple-write-locations", settings.EnableMultipleWriteLocations);
            AppendIfNonNull(ref baseCommand, "--enable-virtual-network", settings.EnableVirtualNetwork);
            AppendIfNonNull(ref baseCommand, "--ip-range-filter", settings.IpRangeFilter);
            AppendIfNonNull(ref baseCommand, "--kind", settings.Kind);
            AppendIfNonNull(ref baseCommand, "--locations", settings.Locations);
            AppendIfNonNull(ref baseCommand, "--max-interval", settings.MaxInterval);
            AppendIfNonNull(ref baseCommand, "--max-staleness-prefix", settings.MaxStalenessPrefix);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--virtual-network-rules", settings.VirtualNetworkRules);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb delete".
        /// Deletes an Azure Cosmos DB database account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public static dynamic AzCosmosdbDelete(this ICakeContext context, AzCosmosdbDeleteSettings settings) {
            var baseCommand = "az cosmosdb delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb failover-priority-change".
        /// Changes the failover priority for the Azure Cosmos DB database account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public static dynamic AzCosmosdbFailoverPriorityChange(this ICakeContext context, AzCosmosdbFailoverPriorityChangeSettings settings) {
            var baseCommand = "az cosmosdb failover-priority-change";
            AppendIfNonNull(ref baseCommand, "--failover-policies", settings.FailoverPolicies);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb list".
        /// List Azure Cosmos DB database accounts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public static dynamic AzCosmosdbList(this ICakeContext context, AzCosmosdbListSettings settings) {
            var baseCommand = "az cosmosdb list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb show".
        /// Get the details of an Azure Cosmos DB database account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public static dynamic AzCosmosdbShow(this ICakeContext context, AzCosmosdbShowSettings settings) {
            var baseCommand = "az cosmosdb show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb update".
        /// Update an Azure Cosmos DB database account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public static dynamic AzCosmosdbUpdate(this ICakeContext context, AzCosmosdbUpdateSettings settings) {
            var baseCommand = "az cosmosdb update";
            AppendIfNonNull(ref baseCommand, "--capabilities", settings.Capabilities);
            AppendIfNonNull(ref baseCommand, "--default-consistency-level", settings.DefaultConsistencyLevel);
            AppendIfNonNull(ref baseCommand, "--enable-automatic-failover", settings.EnableAutomaticFailover);
            AppendIfNonNull(ref baseCommand, "--enable-multiple-write-locations", settings.EnableMultipleWriteLocations);
            AppendIfNonNull(ref baseCommand, "--enable-virtual-network", settings.EnableVirtualNetwork);
            AppendIfNonNull(ref baseCommand, "--ip-range-filter", settings.IpRangeFilter);
            AppendIfNonNull(ref baseCommand, "--locations", settings.Locations);
            AppendIfNonNull(ref baseCommand, "--max-interval", settings.MaxInterval);
            AppendIfNonNull(ref baseCommand, "--max-staleness-prefix", settings.MaxStalenessPrefix);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--virtual-network-rules", settings.VirtualNetworkRules);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra keyspace create".
        /// Create an Cassandra keyspace under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraKeyspace")]
        public static dynamic AzCosmosdbCassandraKeyspaceCreate(this ICakeContext context, AzCosmosdbCassandraKeyspaceCreateSettings settings) {
            var baseCommand = "az cosmosdb cassandra keyspace create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra keyspace delete".
        /// Delete the Cassandra keyspace under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraKeyspace")]
        public static dynamic AzCosmosdbCassandraKeyspaceDelete(this ICakeContext context, AzCosmosdbCassandraKeyspaceDeleteSettings settings) {
            var baseCommand = "az cosmosdb cassandra keyspace delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra keyspace list".
        /// List the Cassandra keyspaces under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraKeyspace")]
        public static dynamic AzCosmosdbCassandraKeyspaceList(this ICakeContext context, AzCosmosdbCassandraKeyspaceListSettings settings) {
            var baseCommand = "az cosmosdb cassandra keyspace list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra keyspace show".
        /// Show the details of a Cassandra keyspace under an Azure Cosmos DB account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraKeyspace")]
        public static dynamic AzCosmosdbCassandraKeyspaceShow(this ICakeContext context, AzCosmosdbCassandraKeyspaceShowSettings settings) {
            var baseCommand = "az cosmosdb cassandra keyspace show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra keyspace throughput show".
        /// Get the throughput of the Cassandra keyspace under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraKeyspaceThroughput")]
        public static dynamic AzCosmosdbCassandraKeyspaceThroughputShow(this ICakeContext context, AzCosmosdbCassandraKeyspaceThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb cassandra keyspace throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra keyspace throughput update".
        /// Update the throughput of the Cassandra keyspace under an Azure Cosmos DB account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraKeyspaceThroughput")]
        public static dynamic AzCosmosdbCassandraKeyspaceThroughputUpdate(this ICakeContext context, AzCosmosdbCassandraKeyspaceThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb cassandra keyspace throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra table create".
        /// Create an Cassandra table under an Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTable")]
        public static dynamic AzCosmosdbCassandraTableCreate(this ICakeContext context, AzCosmosdbCassandraTableCreateSettings settings) {
            var baseCommand = "az cosmosdb cassandra table create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--schema", settings.Schema);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra table delete".
        /// Delete the Cassandra table under an Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTable")]
        public static dynamic AzCosmosdbCassandraTableDelete(this ICakeContext context, AzCosmosdbCassandraTableDeleteSettings settings) {
            var baseCommand = "az cosmosdb cassandra table delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra table list".
        /// List the Cassandra tables under an Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTable")]
        public static dynamic AzCosmosdbCassandraTableList(this ICakeContext context, AzCosmosdbCassandraTableListSettings settings) {
            var baseCommand = "az cosmosdb cassandra table list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra table show".
        /// Show the details of a Cassandra table under an Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTable")]
        public static dynamic AzCosmosdbCassandraTableShow(this ICakeContext context, AzCosmosdbCassandraTableShowSettings settings) {
            var baseCommand = "az cosmosdb cassandra table show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra table update".
        /// Update an Cassandra table under an Azure Cosmos DB Cassandra keyspace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTable")]
        public static dynamic AzCosmosdbCassandraTableUpdate(this ICakeContext context, AzCosmosdbCassandraTableUpdateSettings settings) {
            var baseCommand = "az cosmosdb cassandra table update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--schema", settings.Schema);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra table throughput show".
        /// Get the throughput of the Cassandra table under an Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTableThroughput")]
        public static dynamic AzCosmosdbCassandraTableThroughputShow(this ICakeContext context, AzCosmosdbCassandraTableThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb cassandra table throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb cassandra table throughput update".
        /// Update the throughput of the Cassandra table under an Azure Cosmos DB Cassandra keyspace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTableThroughput")]
        public static dynamic AzCosmosdbCassandraTableThroughputUpdate(this ICakeContext context, AzCosmosdbCassandraTableThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb cassandra table throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb collection create".
        /// Creates an Azure Cosmos DB collection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCollection")]
        public static dynamic AzCosmosdbCollectionCreate(this ICakeContext context, AzCosmosdbCollectionCreateSettings settings) {
            var baseCommand = "az cosmosdb collection create";
            AppendIfNonNull(ref baseCommand, "--collection-name", settings.CollectionName);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--default-ttl", settings.DefaultTtl);
            AppendIfNonNull(ref baseCommand, "--indexing-policy", settings.IndexingPolicy);
            AppendIfNonNull(ref baseCommand, "--partition-key-path", settings.PartitionKeyPath);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb collection delete".
        /// Deletes an Azure Cosmos DB collection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCollection")]
        public static dynamic AzCosmosdbCollectionDelete(this ICakeContext context, AzCosmosdbCollectionDeleteSettings settings) {
            var baseCommand = "az cosmosdb collection delete";
            AppendIfNonNull(ref baseCommand, "--collection-name", settings.CollectionName);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb collection exists".
        /// Returns a boolean indicating whether the collection exists.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCollection")]
        public static dynamic AzCosmosdbCollectionExists(this ICakeContext context, AzCosmosdbCollectionExistsSettings settings) {
            var baseCommand = "az cosmosdb collection exists";
            AppendIfNonNull(ref baseCommand, "--collection-name", settings.CollectionName);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb collection list".
        /// Lists all Azure Cosmos DB collections.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCollection")]
        public static dynamic AzCosmosdbCollectionList(this ICakeContext context, AzCosmosdbCollectionListSettings settings) {
            var baseCommand = "az cosmosdb collection list";
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb collection show".
        /// Shows an Azure Cosmos DB collection and its offer.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCollection")]
        public static dynamic AzCosmosdbCollectionShow(this ICakeContext context, AzCosmosdbCollectionShowSettings settings) {
            var baseCommand = "az cosmosdb collection show";
            AppendIfNonNull(ref baseCommand, "--collection-name", settings.CollectionName);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb collection update".
        /// Updates an Azure Cosmos DB collection.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCollection")]
        public static dynamic AzCosmosdbCollectionUpdate(this ICakeContext context, AzCosmosdbCollectionUpdateSettings settings) {
            var baseCommand = "az cosmosdb collection update";
            AppendIfNonNull(ref baseCommand, "--collection-name", settings.CollectionName);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--default-ttl", settings.DefaultTtl);
            AppendIfNonNull(ref baseCommand, "--indexing-policy", settings.IndexingPolicy);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb database create".
        /// Creates an Azure Cosmos DB database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbDatabase")]
        public static dynamic AzCosmosdbDatabaseCreate(this ICakeContext context, AzCosmosdbDatabaseCreateSettings settings) {
            var baseCommand = "az cosmosdb database create";
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb database delete".
        /// Deletes an Azure Cosmos DB database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbDatabase")]
        public static dynamic AzCosmosdbDatabaseDelete(this ICakeContext context, AzCosmosdbDatabaseDeleteSettings settings) {
            var baseCommand = "az cosmosdb database delete";
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb database exists".
        /// Returns a boolean indicating whether the database exists.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbDatabase")]
        public static dynamic AzCosmosdbDatabaseExists(this ICakeContext context, AzCosmosdbDatabaseExistsSettings settings) {
            var baseCommand = "az cosmosdb database exists";
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb database list".
        /// Lists all Azure Cosmos DB databases.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbDatabase")]
        public static dynamic AzCosmosdbDatabaseList(this ICakeContext context, AzCosmosdbDatabaseListSettings settings) {
            var baseCommand = "az cosmosdb database list";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb database show".
        /// Shows an Azure Cosmos DB database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbDatabase")]
        public static dynamic AzCosmosdbDatabaseShow(this ICakeContext context, AzCosmosdbDatabaseShowSettings settings) {
            var baseCommand = "az cosmosdb database show";
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin database create".
        /// Create an Gremlin database under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinDatabase")]
        public static dynamic AzCosmosdbGremlinDatabaseCreate(this ICakeContext context, AzCosmosdbGremlinDatabaseCreateSettings settings) {
            var baseCommand = "az cosmosdb gremlin database create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin database delete".
        /// Delete the Gremlin database under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinDatabase")]
        public static dynamic AzCosmosdbGremlinDatabaseDelete(this ICakeContext context, AzCosmosdbGremlinDatabaseDeleteSettings settings) {
            var baseCommand = "az cosmosdb gremlin database delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin database list".
        /// List the Gremlin databases under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinDatabase")]
        public static dynamic AzCosmosdbGremlinDatabaseList(this ICakeContext context, AzCosmosdbGremlinDatabaseListSettings settings) {
            var baseCommand = "az cosmosdb gremlin database list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin database show".
        /// Show the details of a Gremlin database under an Azure Cosmos DB account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinDatabase")]
        public static dynamic AzCosmosdbGremlinDatabaseShow(this ICakeContext context, AzCosmosdbGremlinDatabaseShowSettings settings) {
            var baseCommand = "az cosmosdb gremlin database show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin database throughput show".
        /// Get the throughput of the Gremlin database under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinDatabaseThroughput")]
        public static dynamic AzCosmosdbGremlinDatabaseThroughputShow(this ICakeContext context, AzCosmosdbGremlinDatabaseThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb gremlin database throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin database throughput update".
        /// Update the throughput of the Gremlin database under an Azure Cosmos DB account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinDatabaseThroughput")]
        public static dynamic AzCosmosdbGremlinDatabaseThroughputUpdate(this ICakeContext context, AzCosmosdbGremlinDatabaseThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb gremlin database throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph create".
        /// Create an Gremlin graph under an Azure Cosmos DB Gremlin database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraph")]
        public static dynamic AzCosmosdbGremlinGraphCreate(this ICakeContext context, AzCosmosdbGremlinGraphCreateSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--partition-key-path", settings.PartitionKeyPath);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--conflict-resolution-policy", settings.ConflictResolutionPolicy);
            AppendIfNonNull(ref baseCommand, "--idx", settings.Idx);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph delete".
        /// Delete the Gremlin graph under an Azure Cosmos DB Gremlin database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraph")]
        public static dynamic AzCosmosdbGremlinGraphDelete(this ICakeContext context, AzCosmosdbGremlinGraphDeleteSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph list".
        /// List the Gremlin graphs under an Azure Cosmos DB Gremlin database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraph")]
        public static dynamic AzCosmosdbGremlinGraphList(this ICakeContext context, AzCosmosdbGremlinGraphListSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph show".
        /// Show the details of a Gremlin graph under an Azure Cosmos DB Gremlin database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraph")]
        public static dynamic AzCosmosdbGremlinGraphShow(this ICakeContext context, AzCosmosdbGremlinGraphShowSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph update".
        /// Update an Gremlin graph under an Azure Cosmos DB Gremlin database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraph")]
        public static dynamic AzCosmosdbGremlinGraphUpdate(this ICakeContext context, AzCosmosdbGremlinGraphUpdateSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--idx", settings.Idx);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph throughput show".
        /// Get the throughput of the Gremlin graph under an Azure Cosmos DB Gremlin database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraphThroughput")]
        public static dynamic AzCosmosdbGremlinGraphThroughputShow(this ICakeContext context, AzCosmosdbGremlinGraphThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph throughput update".
        /// Update the throughput of the Gremlin graph under an Azure Cosmos DB Gremlin database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraphThroughput")]
        public static dynamic AzCosmosdbGremlinGraphThroughputUpdate(this ICakeContext context, AzCosmosdbGremlinGraphThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb keys list".
        /// List the access keys or connection strings for a Azure Cosmos DB database account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbKeys")]
        public static dynamic AzCosmosdbKeysList(this ICakeContext context, AzCosmosdbKeysListSettings settings) {
            var baseCommand = "az cosmosdb keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb keys regenerate".
        /// Regenerates an access key for the specified Azure Cosmos DB database account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbKeys")]
        public static dynamic AzCosmosdbKeysRegenerate(this ICakeContext context, AzCosmosdbKeysRegenerateSettings settings) {
            var baseCommand = "az cosmosdb keys regenerate";
            AppendIfNonNull(ref baseCommand, "--key-kind", settings.KeyKind);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection create".
        /// Create an MongoDB collection under an Azure Cosmos DB MongoDB database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollection")]
        public static dynamic AzCosmosdbMongodbCollectionCreate(this ICakeContext context, AzCosmosdbMongodbCollectionCreateSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--shard", settings.Shard);
            AppendIfNonNull(ref baseCommand, "--idx", settings.Idx);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection delete".
        /// Delete the MongoDB collection under an Azure Cosmos DB MongoDB database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollection")]
        public static dynamic AzCosmosdbMongodbCollectionDelete(this ICakeContext context, AzCosmosdbMongodbCollectionDeleteSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection list".
        /// List the MongoDB collections under an Azure Cosmos DB MongoDB database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollection")]
        public static dynamic AzCosmosdbMongodbCollectionList(this ICakeContext context, AzCosmosdbMongodbCollectionListSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection show".
        /// Show the details of a MongoDB collection under an Azure Cosmos DB MongoDB database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollection")]
        public static dynamic AzCosmosdbMongodbCollectionShow(this ICakeContext context, AzCosmosdbMongodbCollectionShowSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection update".
        /// Update an MongoDB collection under an Azure Cosmos DB MongoDB database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollection")]
        public static dynamic AzCosmosdbMongodbCollectionUpdate(this ICakeContext context, AzCosmosdbMongodbCollectionUpdateSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--idx", settings.Idx);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection throughput show".
        /// Get the throughput of the MongoDB collection under an Azure Cosmos DB MongoDB database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollectionThroughput")]
        public static dynamic AzCosmosdbMongodbCollectionThroughputShow(this ICakeContext context, AzCosmosdbMongodbCollectionThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection throughput update".
        /// Update the throughput of the MongoDB collection under an Azure Cosmos DB MongoDB database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollectionThroughput")]
        public static dynamic AzCosmosdbMongodbCollectionThroughputUpdate(this ICakeContext context, AzCosmosdbMongodbCollectionThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb database create".
        /// Create an MongoDB database under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbDatabase")]
        public static dynamic AzCosmosdbMongodbDatabaseCreate(this ICakeContext context, AzCosmosdbMongodbDatabaseCreateSettings settings) {
            var baseCommand = "az cosmosdb mongodb database create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb database delete".
        /// Delete the MongoDB database under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbDatabase")]
        public static dynamic AzCosmosdbMongodbDatabaseDelete(this ICakeContext context, AzCosmosdbMongodbDatabaseDeleteSettings settings) {
            var baseCommand = "az cosmosdb mongodb database delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb database list".
        /// List the MongoDB databases under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbDatabase")]
        public static dynamic AzCosmosdbMongodbDatabaseList(this ICakeContext context, AzCosmosdbMongodbDatabaseListSettings settings) {
            var baseCommand = "az cosmosdb mongodb database list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb database show".
        /// Show the details of a MongoDB database under an Azure Cosmos DB account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbDatabase")]
        public static dynamic AzCosmosdbMongodbDatabaseShow(this ICakeContext context, AzCosmosdbMongodbDatabaseShowSettings settings) {
            var baseCommand = "az cosmosdb mongodb database show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb database throughput show".
        /// Get the throughput of the MongoDB database under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbDatabaseThroughput")]
        public static dynamic AzCosmosdbMongodbDatabaseThroughputShow(this ICakeContext context, AzCosmosdbMongodbDatabaseThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb mongodb database throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb mongodb database throughput update".
        /// Update the throughput of the MongoDB database under an Azure Cosmos DB account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbDatabaseThroughput")]
        public static dynamic AzCosmosdbMongodbDatabaseThroughputUpdate(this ICakeContext context, AzCosmosdbMongodbDatabaseThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb mongodb database throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb network-rule add".
        /// Adds a virtual network rule to an existing Cosmos DB database account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbNetworkRule")]
        public static dynamic AzCosmosdbNetworkRuleAdd(this ICakeContext context, AzCosmosdbNetworkRuleAddSettings settings) {
            var baseCommand = "az cosmosdb network-rule add";
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-vnet-service-endpoint", settings.IgnoreMissingVnetServiceEndpoint);
            AppendIfNonNull(ref baseCommand, "--virtual-network", settings.VirtualNetwork);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb network-rule list".
        /// Lists the virtual network accounts associated with a Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbNetworkRule")]
        public static dynamic AzCosmosdbNetworkRuleList(this ICakeContext context, AzCosmosdbNetworkRuleListSettings settings) {
            var baseCommand = "az cosmosdb network-rule list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb network-rule remove".
        /// Adds a virtual network rule to an existing Cosmos DB database account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbNetworkRule")]
        public static dynamic AzCosmosdbNetworkRuleRemove(this ICakeContext context, AzCosmosdbNetworkRuleRemoveSettings settings) {
            var baseCommand = "az cosmosdb network-rule remove";
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--virtual-network", settings.VirtualNetwork);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql container create".
        /// Create an SQL container under an Azure Cosmos DB SQL database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainer")]
        public static dynamic AzCosmosdbSqlContainerCreate(this ICakeContext context, AzCosmosdbSqlContainerCreateSettings settings) {
            var baseCommand = "az cosmosdb sql container create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--partition-key-path", settings.PartitionKeyPath);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--conflict-resolution-policy", settings.ConflictResolutionPolicy);
            AppendIfNonNull(ref baseCommand, "--idx", settings.Idx);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--unique-key-policy", settings.UniqueKeyPolicy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql container delete".
        /// Delete the SQL container under an Azure Cosmos DB SQL database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainer")]
        public static dynamic AzCosmosdbSqlContainerDelete(this ICakeContext context, AzCosmosdbSqlContainerDeleteSettings settings) {
            var baseCommand = "az cosmosdb sql container delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql container list".
        /// List the SQL containers under an Azure Cosmos DB SQL database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainer")]
        public static dynamic AzCosmosdbSqlContainerList(this ICakeContext context, AzCosmosdbSqlContainerListSettings settings) {
            var baseCommand = "az cosmosdb sql container list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql container show".
        /// Show the details of a SQL container under an Azure Cosmos DB SQL database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainer")]
        public static dynamic AzCosmosdbSqlContainerShow(this ICakeContext context, AzCosmosdbSqlContainerShowSettings settings) {
            var baseCommand = "az cosmosdb sql container show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql container update".
        /// Update an SQL container under an Azure Cosmos DB SQL database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainer")]
        public static dynamic AzCosmosdbSqlContainerUpdate(this ICakeContext context, AzCosmosdbSqlContainerUpdateSettings settings) {
            var baseCommand = "az cosmosdb sql container update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--idx", settings.Idx);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql container throughput show".
        /// Get the throughput of the SQL container under an Azure Cosmos DB SQL database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainerThroughput")]
        public static dynamic AzCosmosdbSqlContainerThroughputShow(this ICakeContext context, AzCosmosdbSqlContainerThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb sql container throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql container throughput update".
        /// Update the throughput of the SQL container under an Azure Cosmos DB SQL database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainerThroughput")]
        public static dynamic AzCosmosdbSqlContainerThroughputUpdate(this ICakeContext context, AzCosmosdbSqlContainerThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb sql container throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql database create".
        /// Create an SQL database under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlDatabase")]
        public static dynamic AzCosmosdbSqlDatabaseCreate(this ICakeContext context, AzCosmosdbSqlDatabaseCreateSettings settings) {
            var baseCommand = "az cosmosdb sql database create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql database delete".
        /// Delete the SQL database under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlDatabase")]
        public static dynamic AzCosmosdbSqlDatabaseDelete(this ICakeContext context, AzCosmosdbSqlDatabaseDeleteSettings settings) {
            var baseCommand = "az cosmosdb sql database delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql database list".
        /// List the SQL databases under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlDatabase")]
        public static dynamic AzCosmosdbSqlDatabaseList(this ICakeContext context, AzCosmosdbSqlDatabaseListSettings settings) {
            var baseCommand = "az cosmosdb sql database list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql database show".
        /// Show the details of a SQL database under an Azure Cosmos DB account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlDatabase")]
        public static dynamic AzCosmosdbSqlDatabaseShow(this ICakeContext context, AzCosmosdbSqlDatabaseShowSettings settings) {
            var baseCommand = "az cosmosdb sql database show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql database throughput show".
        /// Get the throughput of the SQL database under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlDatabaseThroughput")]
        public static dynamic AzCosmosdbSqlDatabaseThroughputShow(this ICakeContext context, AzCosmosdbSqlDatabaseThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb sql database throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb sql database throughput update".
        /// Update the throughput of the SQL database under an Azure Cosmos DB account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlDatabaseThroughput")]
        public static dynamic AzCosmosdbSqlDatabaseThroughputUpdate(this ICakeContext context, AzCosmosdbSqlDatabaseThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb sql database throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb table create".
        /// Create an Table under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbTable")]
        public static dynamic AzCosmosdbTableCreate(this ICakeContext context, AzCosmosdbTableCreateSettings settings) {
            var baseCommand = "az cosmosdb table create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb table delete".
        /// Delete the Table under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbTable")]
        public static dynamic AzCosmosdbTableDelete(this ICakeContext context, AzCosmosdbTableDeleteSettings settings) {
            var baseCommand = "az cosmosdb table delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb table list".
        /// List the Tables under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbTable")]
        public static dynamic AzCosmosdbTableList(this ICakeContext context, AzCosmosdbTableListSettings settings) {
            var baseCommand = "az cosmosdb table list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb table show".
        /// Show the details of a Table under an Azure Cosmos DB account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbTable")]
        public static dynamic AzCosmosdbTableShow(this ICakeContext context, AzCosmosdbTableShowSettings settings) {
            var baseCommand = "az cosmosdb table show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb table throughput show".
        /// Get the throughput of the Table under an Azure Cosmos DB account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbTableThroughput")]
        public static dynamic AzCosmosdbTableThroughputShow(this ICakeContext context, AzCosmosdbTableThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb table throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az cosmosdb table throughput update".
        /// Update the throughput of the Table under an Azure Cosmos DB account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbTableThroughput")]
        public static dynamic AzCosmosdbTableThroughputUpdate(this ICakeContext context, AzCosmosdbTableThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb table throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deployment create".
        /// Start a deployment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public static dynamic AzDeploymentCreate(this ICakeContext context, AzDeploymentCreateSettings settings) {
            var baseCommand = "az deployment create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--handle-extended-json-format", settings.HandleExtendedJsonFormat);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--template-file", settings.TemplateFile);
            AppendIfNonNull(ref baseCommand, "--template-uri", settings.TemplateUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deployment delete".
        /// Delete a deployment at subscription scope.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public static dynamic AzDeploymentDelete(this ICakeContext context, AzDeploymentDeleteSettings settings) {
            var baseCommand = "az deployment delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deployment export".
        /// Export the template used for a deployment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public static dynamic AzDeploymentExport(this ICakeContext context, AzDeploymentExportSettings settings) {
            var baseCommand = "az deployment export";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deployment list".
        /// List deployments at subscription scope.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public static dynamic AzDeploymentList(this ICakeContext context, AzDeploymentListSettings settings) {
            var baseCommand = "az deployment list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deployment show".
        /// Show a deployment at subscription scope.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public static dynamic AzDeploymentShow(this ICakeContext context, AzDeploymentShowSettings settings) {
            var baseCommand = "az deployment show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deployment validate".
        /// Validate whether a template is syntactically correct.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public static dynamic AzDeploymentValidate(this ICakeContext context, AzDeploymentValidateSettings settings) {
            var baseCommand = "az deployment validate";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--handle-extended-json-format", settings.HandleExtendedJsonFormat);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--template-file", settings.TemplateFile);
            AppendIfNonNull(ref baseCommand, "--template-uri", settings.TemplateUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deployment wait".
        /// Place the CLI in a waiting state until a deployment condition is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public static dynamic AzDeploymentWait(this ICakeContext context, AzDeploymentWaitSettings settings) {
            var baseCommand = "az deployment wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deployment operation list".
        /// List a deployment's operations.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentOperation")]
        public static dynamic AzDeploymentOperationList(this ICakeContext context, AzDeploymentOperationListSettings settings) {
            var baseCommand = "az deployment operation list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deployment operation show".
        /// Get a deployment's operation.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentOperation")]
        public static dynamic AzDeploymentOperationShow(this ICakeContext context, AzDeploymentOperationShowSettings settings) {
            var baseCommand = "az deployment operation show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--operation-ids", settings.OperationIds);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager artifact-source create".
        /// Creates an artifact source.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerArtifactSource")]
        public static dynamic AzDeploymentmanagerArtifactSourceCreate(this ICakeContext context, AzDeploymentmanagerArtifactSourceCreateSettings settings) {
            var baseCommand = "az deploymentmanager artifact-source create";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sas-uri", settings.SasUri);
            AppendIfNonNull(ref baseCommand, "--artifact-root", settings.ArtifactRoot);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager artifact-source delete".
        /// Deletes an artifact source.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerArtifactSource")]
        public static dynamic AzDeploymentmanagerArtifactSourceDelete(this ICakeContext context, AzDeploymentmanagerArtifactSourceDeleteSettings settings) {
            var baseCommand = "az deploymentmanager artifact-source delete";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager artifact-source show".
        /// Get the details of an artifact source.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerArtifactSource")]
        public static dynamic AzDeploymentmanagerArtifactSourceShow(this ICakeContext context, AzDeploymentmanagerArtifactSourceShowSettings settings) {
            var baseCommand = "az deploymentmanager artifact-source show";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager artifact-source update".
        /// Updates an artifact source.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerArtifactSource")]
        public static dynamic AzDeploymentmanagerArtifactSourceUpdate(this ICakeContext context, AzDeploymentmanagerArtifactSourceUpdateSettings settings) {
            var baseCommand = "az deploymentmanager artifact-source update";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--artifact-root", settings.ArtifactRoot);
            AppendIfNonNull(ref baseCommand, "--sas-uri", settings.SasUri);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager rollout delete".
        /// Deletes a rollout resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerRollout")]
        public static dynamic AzDeploymentmanagerRolloutDelete(this ICakeContext context, AzDeploymentmanagerRolloutDeleteSettings settings) {
            var baseCommand = "az deploymentmanager rollout delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager rollout restart".
        /// Restarts the rollout.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerRollout")]
        public static dynamic AzDeploymentmanagerRolloutRestart(this ICakeContext context, AzDeploymentmanagerRolloutRestartSettings settings) {
            var baseCommand = "az deploymentmanager rollout restart";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--skip-succeeded", settings.SkipSucceeded);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager rollout show".
        /// Gets the rollout.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerRollout")]
        public static dynamic AzDeploymentmanagerRolloutShow(this ICakeContext context, AzDeploymentmanagerRolloutShowSettings settings) {
            var baseCommand = "az deploymentmanager rollout show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--retry-attempt", settings.RetryAttempt);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager rollout stop".
        /// Stop the rollout.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerRollout")]
        public static dynamic AzDeploymentmanagerRolloutStop(this ICakeContext context, AzDeploymentmanagerRolloutStopSettings settings) {
            var baseCommand = "az deploymentmanager rollout stop";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager service create".
        /// Creates a service under the specified service topology.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerService")]
        public static dynamic AzDeploymentmanagerServiceCreate(this ICakeContext context, AzDeploymentmanagerServiceCreateSettings settings) {
            var baseCommand = "az deploymentmanager service create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--target-location", settings.TargetLocation);
            AppendIfNonNull(ref baseCommand, "--target-subscription-id", settings.TargetSubscriptionId);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager service delete".
        /// Deletes the service topology.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerService")]
        public static dynamic AzDeploymentmanagerServiceDelete(this ICakeContext context, AzDeploymentmanagerServiceDeleteSettings settings) {
            var baseCommand = "az deploymentmanager service delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager service show".
        /// Get the details of a service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerService")]
        public static dynamic AzDeploymentmanagerServiceShow(this ICakeContext context, AzDeploymentmanagerServiceShowSettings settings) {
            var baseCommand = "az deploymentmanager service show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager service update".
        /// Updates the service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerService")]
        public static dynamic AzDeploymentmanagerServiceUpdate(this ICakeContext context, AzDeploymentmanagerServiceUpdateSettings settings) {
            var baseCommand = "az deploymentmanager service update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--target-location", settings.TargetLocation);
            AppendIfNonNull(ref baseCommand, "--target-subscription-id", settings.TargetSubscriptionId);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager service-topology create".
        /// Creates a service topology.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceTopology")]
        public static dynamic AzDeploymentmanagerServiceTopologyCreate(this ICakeContext context, AzDeploymentmanagerServiceTopologyCreateSettings settings) {
            var baseCommand = "az deploymentmanager service-topology create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--artifact-source", settings.ArtifactSource);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager service-topology delete".
        /// Deletes the service topology.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceTopology")]
        public static dynamic AzDeploymentmanagerServiceTopologyDelete(this ICakeContext context, AzDeploymentmanagerServiceTopologyDeleteSettings settings) {
            var baseCommand = "az deploymentmanager service-topology delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager service-topology show".
        /// Get the details of a service topology.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceTopology")]
        public static dynamic AzDeploymentmanagerServiceTopologyShow(this ICakeContext context, AzDeploymentmanagerServiceTopologyShowSettings settings) {
            var baseCommand = "az deploymentmanager service-topology show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager service-topology update".
        /// Updates the service topology.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceTopology")]
        public static dynamic AzDeploymentmanagerServiceTopologyUpdate(this ICakeContext context, AzDeploymentmanagerServiceTopologyUpdateSettings settings) {
            var baseCommand = "az deploymentmanager service-topology update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--artifact-source", settings.ArtifactSource);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager service-unit create".
        /// Creates a service unit under the specified service and service topology.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceUnit")]
        public static dynamic AzDeploymentmanagerServiceUnitCreate(this ICakeContext context, AzDeploymentmanagerServiceUnitCreateSettings settings) {
            var baseCommand = "az deploymentmanager service-unit create";
            AppendIfNonNull(ref baseCommand, "--parameters-path", settings.ParametersPath);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--template-path", settings.TemplatePath);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--deployment-mode", settings.DeploymentMode);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--target-resource-group", settings.TargetResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager service-unit delete".
        /// Deletes the service unit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceUnit")]
        public static dynamic AzDeploymentmanagerServiceUnitDelete(this ICakeContext context, AzDeploymentmanagerServiceUnitDeleteSettings settings) {
            var baseCommand = "az deploymentmanager service-unit delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager service-unit show".
        /// Get the details of a service unit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceUnit")]
        public static dynamic AzDeploymentmanagerServiceUnitShow(this ICakeContext context, AzDeploymentmanagerServiceUnitShowSettings settings) {
            var baseCommand = "az deploymentmanager service-unit show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager service-unit update".
        /// Updates the service unit.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceUnit")]
        public static dynamic AzDeploymentmanagerServiceUnitUpdate(this ICakeContext context, AzDeploymentmanagerServiceUnitUpdateSettings settings) {
            var baseCommand = "az deploymentmanager service-unit update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--deployment-mode", settings.DeploymentMode);
            AppendIfNonNull(ref baseCommand, "--parameters-path", settings.ParametersPath);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--target-resource-group", settings.TargetResourceGroup);
            AppendIfNonNull(ref baseCommand, "--template-path", settings.TemplatePath);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager step create".
        /// Creates the step.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerStep")]
        public static dynamic AzDeploymentmanagerStepCreate(this ICakeContext context, AzDeploymentmanagerStepCreateSettings settings) {
            var baseCommand = "az deploymentmanager step create";
            AppendIfNonNull(ref baseCommand, "--duration", settings.Duration);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager step delete".
        /// Deletes the step.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerStep")]
        public static dynamic AzDeploymentmanagerStepDelete(this ICakeContext context, AzDeploymentmanagerStepDeleteSettings settings) {
            var baseCommand = "az deploymentmanager step delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager step show".
        /// Get the details of the step.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerStep")]
        public static dynamic AzDeploymentmanagerStepShow(this ICakeContext context, AzDeploymentmanagerStepShowSettings settings) {
            var baseCommand = "az deploymentmanager step show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az deploymentmanager step update".
        /// Updates the step.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerStep")]
        public static dynamic AzDeploymentmanagerStepUpdate(this ICakeContext context, AzDeploymentmanagerStepUpdateSettings settings) {
            var baseCommand = "az deploymentmanager step update";
            AppendIfNonNull(ref baseCommand, "--duration", settings.Duration);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az disk create".
        /// Create a managed disk.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public static dynamic AzDiskCreate(this ICakeContext context, AzDiskCreateSettings settings) {
            var baseCommand = "az disk create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--disk-iops-read-write", settings.DiskIopsReadWrite);
            AppendIfNonNull(ref baseCommand, "--disk-mbps-read-write", settings.DiskMbpsReadWrite);
            AppendIfNonNull(ref baseCommand, "--for-upload", settings.ForUpload);
            AppendIfNonNull(ref baseCommand, "--hyper-v-generation", settings.HyperVGeneration);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--size-gb", settings.SizeGb);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--source-storage-account-id", settings.SourceStorageAccountId);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--upload-size-bytes", settings.UploadSizeBytes);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az disk delete".
        /// Delete a managed disk.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public static dynamic AzDiskDelete(this ICakeContext context, AzDiskDeleteSettings settings) {
            var baseCommand = "az disk delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az disk grant-access".
        /// Grant a resource access to a managed disk.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public static dynamic AzDiskGrantAccess(this ICakeContext context, AzDiskGrantAccessSettings settings) {
            var baseCommand = "az disk grant-access";
            AppendIfNonNull(ref baseCommand, "--duration-in-seconds", settings.DurationInSeconds);
            AppendIfNonNull(ref baseCommand, "--access-level", settings.AccessLevel);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az disk list".
        /// List managed disks.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public static dynamic AzDiskList(this ICakeContext context, AzDiskListSettings settings) {
            var baseCommand = "az disk list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az disk revoke-access".
        /// Revoke a resource's read access to a managed disk.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public static dynamic AzDiskRevokeAccess(this ICakeContext context, AzDiskRevokeAccessSettings settings) {
            var baseCommand = "az disk revoke-access";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az disk show".
        /// Gets information about a disk.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public static dynamic AzDiskShow(this ICakeContext context, AzDiskShowSettings settings) {
            var baseCommand = "az disk show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az disk update".
        /// Update a managed disk.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public static dynamic AzDiskUpdate(this ICakeContext context, AzDiskUpdateSettings settings) {
            var baseCommand = "az disk update";
            AppendIfNonNull(ref baseCommand, "--disk-iops-read-write", settings.DiskIopsReadWrite);
            AppendIfNonNull(ref baseCommand, "--disk-mbps-read-write", settings.DiskMbpsReadWrite);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--size-gb", settings.SizeGb);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az disk wait".
        /// Place the CLI in a waiting state until a condition of a managed disk is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public static dynamic AzDiskWait(this ICakeContext context, AzDiskWaitSettings settings) {
            var baseCommand = "az disk wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account create".
        /// Create a Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccount")]
        public static dynamic AzDlaAccountCreate(this ICakeContext context, AzDlaAccountCreateSettings settings) {
            var baseCommand = "az dla account create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--default-data-lake-store", settings.DefaultDataLakeStore);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--max-degree-of-parallelism", settings.MaxDegreeOfParallelism);
            AppendIfNonNull(ref baseCommand, "--max-job-count", settings.MaxJobCount);
            AppendIfNonNull(ref baseCommand, "--query-store-retention", settings.QueryStoreRetention);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account delete".
        /// Delete a Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccount")]
        public static dynamic AzDlaAccountDelete(this ICakeContext context, AzDlaAccountDeleteSettings settings) {
            var baseCommand = "az dla account delete";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account list".
        /// List available Data Lake Analytics accounts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccount")]
        public static dynamic AzDlaAccountList(this ICakeContext context, AzDlaAccountListSettings settings) {
            var baseCommand = "az dla account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account show".
        /// Get the details of a Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccount")]
        public static dynamic AzDlaAccountShow(this ICakeContext context, AzDlaAccountShowSettings settings) {
            var baseCommand = "az dla account show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account update".
        /// Update a Data Lake Analytics account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccount")]
        public static dynamic AzDlaAccountUpdate(this ICakeContext context, AzDlaAccountUpdateSettings settings) {
            var baseCommand = "az dla account update";
            AppendIfNonNull(ref baseCommand, "--allow-azure-ips", settings.AllowAzureIps);
            AppendIfNonNull(ref baseCommand, "--firewall-state", settings.FirewallState);
            AppendIfNonNull(ref baseCommand, "--max-degree-of-parallelism", settings.MaxDegreeOfParallelism);
            AppendIfNonNull(ref baseCommand, "--max-job-count", settings.MaxJobCount);
            AppendIfNonNull(ref baseCommand, "--query-store-retention", settings.QueryStoreRetention);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account blob-storage add".
        /// Links an Azure Storage account to the specified Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountBlobStorage")]
        public static dynamic AzDlaAccountBlobStorageAdd(this ICakeContext context, AzDlaAccountBlobStorageAddSettings settings) {
            var baseCommand = "az dla account blob-storage add";
            AppendIfNonNull(ref baseCommand, "--access-key", settings.AccessKey);
            AppendIfNonNull(ref baseCommand, "--storage-account-name", settings.StorageAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account blob-storage delete".
        /// Updates the specified Data Lake Analytics account to remove an Azure Storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountBlobStorage")]
        public static dynamic AzDlaAccountBlobStorageDelete(this ICakeContext context, AzDlaAccountBlobStorageDeleteSettings settings) {
            var baseCommand = "az dla account blob-storage delete";
            AppendIfNonNull(ref baseCommand, "--storage-account-name", settings.StorageAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account blob-storage list".
        /// Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountBlobStorage")]
        public static dynamic AzDlaAccountBlobStorageList(this ICakeContext context, AzDlaAccountBlobStorageListSettings settings) {
            var baseCommand = "az dla account blob-storage list";
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account blob-storage show".
        /// Gets the specified Azure Storage account linked to the given Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountBlobStorage")]
        public static dynamic AzDlaAccountBlobStorageShow(this ICakeContext context, AzDlaAccountBlobStorageShowSettings settings) {
            var baseCommand = "az dla account blob-storage show";
            AppendIfNonNull(ref baseCommand, "--storage-account-name", settings.StorageAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account blob-storage update".
        /// Updates an Azure Storage account linked to the specified Data Lake Analytics account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountBlobStorage")]
        public static dynamic AzDlaAccountBlobStorageUpdate(this ICakeContext context, AzDlaAccountBlobStorageUpdateSettings settings) {
            var baseCommand = "az dla account blob-storage update";
            AppendIfNonNull(ref baseCommand, "--access-key", settings.AccessKey);
            AppendIfNonNull(ref baseCommand, "--storage-account-name", settings.StorageAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account compute-policy create".
        /// Create a compute policy in the Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountComputePolicy")]
        public static dynamic AzDlaAccountComputePolicyCreate(this ICakeContext context, AzDlaAccountComputePolicyCreateSettings settings) {
            var baseCommand = "az dla account compute-policy create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--compute-policy-name", settings.ComputePolicyName);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--object-type", settings.ObjectType);
            AppendIfNonNull(ref baseCommand, "--max-dop-per-job", settings.MaxDopPerJob);
            AppendIfNonNull(ref baseCommand, "--min-priority-per-job", settings.MinPriorityPerJob);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account compute-policy delete".
        /// Delete a compute policy in a Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountComputePolicy")]
        public static dynamic AzDlaAccountComputePolicyDelete(this ICakeContext context, AzDlaAccountComputePolicyDeleteSettings settings) {
            var baseCommand = "az dla account compute-policy delete";
            AppendIfNonNull(ref baseCommand, "--compute-policy-name", settings.ComputePolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account compute-policy list".
        /// List compute policies in the a Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountComputePolicy")]
        public static dynamic AzDlaAccountComputePolicyList(this ICakeContext context, AzDlaAccountComputePolicyListSettings settings) {
            var baseCommand = "az dla account compute-policy list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account compute-policy show".
        /// Retrieve a compute policy in a Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountComputePolicy")]
        public static dynamic AzDlaAccountComputePolicyShow(this ICakeContext context, AzDlaAccountComputePolicyShowSettings settings) {
            var baseCommand = "az dla account compute-policy show";
            AppendIfNonNull(ref baseCommand, "--compute-policy-name", settings.ComputePolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account compute-policy update".
        /// Update a compute policy in the Data Lake Analytics account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountComputePolicy")]
        public static dynamic AzDlaAccountComputePolicyUpdate(this ICakeContext context, AzDlaAccountComputePolicyUpdateSettings settings) {
            var baseCommand = "az dla account compute-policy update";
            AppendIfNonNull(ref baseCommand, "--compute-policy-name", settings.ComputePolicyName);
            AppendIfNonNull(ref baseCommand, "--max-dop-per-job", settings.MaxDopPerJob);
            AppendIfNonNull(ref baseCommand, "--min-priority-per-job", settings.MinPriorityPerJob);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account data-lake-store add".
        /// Updates the specified Data Lake Analytics account to include the additional Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountDataLakeStore")]
        public static dynamic AzDlaAccountDataLakeStoreAdd(this ICakeContext context, AzDlaAccountDataLakeStoreAddSettings settings) {
            var baseCommand = "az dla account data-lake-store add";
            AppendIfNonNull(ref baseCommand, "--data-lake-store-account-name", settings.DataLakeStoreAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account data-lake-store delete".
        /// Updates the Data Lake Analytics account specified to remove the specified Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountDataLakeStore")]
        public static dynamic AzDlaAccountDataLakeStoreDelete(this ICakeContext context, AzDlaAccountDataLakeStoreDeleteSettings settings) {
            var baseCommand = "az dla account data-lake-store delete";
            AppendIfNonNull(ref baseCommand, "--data-lake-store-account-name", settings.DataLakeStoreAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account data-lake-store list".
        /// Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountDataLakeStore")]
        public static dynamic AzDlaAccountDataLakeStoreList(this ICakeContext context, AzDlaAccountDataLakeStoreListSettings settings) {
            var baseCommand = "az dla account data-lake-store list";
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account data-lake-store show".
        /// Gets the specified Data Lake Store account details in the specified Data Lake Analytics account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountDataLakeStore")]
        public static dynamic AzDlaAccountDataLakeStoreShow(this ICakeContext context, AzDlaAccountDataLakeStoreShowSettings settings) {
            var baseCommand = "az dla account data-lake-store show";
            AppendIfNonNull(ref baseCommand, "--data-lake-store-account-name", settings.DataLakeStoreAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account firewall create".
        /// Create a firewall rule in a Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountFirewall")]
        public static dynamic AzDlaAccountFirewallCreate(this ICakeContext context, AzDlaAccountFirewallCreateSettings settings) {
            var baseCommand = "az dla account firewall create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account firewall delete".
        /// Delete a firewall rule in a Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountFirewall")]
        public static dynamic AzDlaAccountFirewallDelete(this ICakeContext context, AzDlaAccountFirewallDeleteSettings settings) {
            var baseCommand = "az dla account firewall delete";
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account firewall list".
        /// List firewall rules in a Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountFirewall")]
        public static dynamic AzDlaAccountFirewallList(this ICakeContext context, AzDlaAccountFirewallListSettings settings) {
            var baseCommand = "az dla account firewall list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account firewall show".
        /// Retrieve a firewall rule in a Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountFirewall")]
        public static dynamic AzDlaAccountFirewallShow(this ICakeContext context, AzDlaAccountFirewallShowSettings settings) {
            var baseCommand = "az dla account firewall show";
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla account firewall update".
        /// Update a firewall rule in a Data Lake Analytics account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountFirewall")]
        public static dynamic AzDlaAccountFirewallUpdate(this ICakeContext context, AzDlaAccountFirewallUpdateSettings settings) {
            var baseCommand = "az dla account firewall update";
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog assembly list".
        /// Retrieves the list of assemblies from the Data Lake Analytics catalog.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogAssembly")]
        public static dynamic AzDlaCatalogAssemblyList(this ICakeContext context, AzDlaCatalogAssemblyListSettings settings) {
            var baseCommand = "az dla catalog assembly list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog assembly show".
        /// Retrieves the specified assembly from the Data Lake Analytics catalog.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogAssembly")]
        public static dynamic AzDlaCatalogAssemblyShow(this ICakeContext context, AzDlaCatalogAssemblyShowSettings settings) {
            var baseCommand = "az dla catalog assembly show";
            AppendIfNonNull(ref baseCommand, "--assembly-name", settings.AssemblyName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog credential create".
        /// Create a new catalog credential for use with an external data source.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogCredential")]
        public static dynamic AzDlaCatalogCredentialCreate(this ICakeContext context, AzDlaCatalogCredentialCreateSettings settings) {
            var baseCommand = "az dla catalog credential create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--credential-name", settings.CredentialName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--uri", settings.Uri);
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog credential delete".
        /// Delete a catalog credential.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogCredential")]
        public static dynamic AzDlaCatalogCredentialDelete(this ICakeContext context, AzDlaCatalogCredentialDeleteSettings settings) {
            var baseCommand = "az dla catalog credential delete";
            AppendIfNonNull(ref baseCommand, "--credential-name", settings.CredentialName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--cascade", settings.Cascade);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog credential list".
        /// List catalog credentials.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogCredential")]
        public static dynamic AzDlaCatalogCredentialList(this ICakeContext context, AzDlaCatalogCredentialListSettings settings) {
            var baseCommand = "az dla catalog credential list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog credential show".
        /// Retrieve a catalog credential.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogCredential")]
        public static dynamic AzDlaCatalogCredentialShow(this ICakeContext context, AzDlaCatalogCredentialShowSettings settings) {
            var baseCommand = "az dla catalog credential show";
            AppendIfNonNull(ref baseCommand, "--credential-name", settings.CredentialName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog credential update".
        /// Update a catalog credential for use with an external data source.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogCredential")]
        public static dynamic AzDlaCatalogCredentialUpdate(this ICakeContext context, AzDlaCatalogCredentialUpdateSettings settings) {
            var baseCommand = "az dla catalog credential update";
            AppendIfNonNull(ref baseCommand, "--credential-name", settings.CredentialName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--uri", settings.Uri);
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--new-password", settings.NewPassword);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog database list".
        /// Retrieves the list of databases from the Data Lake Analytics catalog.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogDatabase")]
        public static dynamic AzDlaCatalogDatabaseList(this ICakeContext context, AzDlaCatalogDatabaseListSettings settings) {
            var baseCommand = "az dla catalog database list";
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog database show".
        /// Retrieves the specified database from the Data Lake Analytics catalog.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogDatabase")]
        public static dynamic AzDlaCatalogDatabaseShow(this ICakeContext context, AzDlaCatalogDatabaseShowSettings settings) {
            var baseCommand = "az dla catalog database show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog external-data-source list".
        /// Retrieves the list of external data sources from the Data Lake Analytics catalog.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogExternalDataSource")]
        public static dynamic AzDlaCatalogExternalDataSourceList(this ICakeContext context, AzDlaCatalogExternalDataSourceListSettings settings) {
            var baseCommand = "az dla catalog external-data-source list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog external-data-source show".
        /// Retrieves the specified external data source from the Data Lake Analytics catalog.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogExternalDataSource")]
        public static dynamic AzDlaCatalogExternalDataSourceShow(this ICakeContext context, AzDlaCatalogExternalDataSourceShowSettings settings) {
            var baseCommand = "az dla catalog external-data-source show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--external-data-source-name", settings.ExternalDataSourceName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog package list".
        /// Retrieves the list of packages from the Data Lake Analytics catalog.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogPackage")]
        public static dynamic AzDlaCatalogPackageList(this ICakeContext context, AzDlaCatalogPackageListSettings settings) {
            var baseCommand = "az dla catalog package list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog package show".
        /// Retrieves the specified package from the Data Lake Analytics catalog.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogPackage")]
        public static dynamic AzDlaCatalogPackageShow(this ICakeContext context, AzDlaCatalogPackageShowSettings settings) {
            var baseCommand = "az dla catalog package show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--package-name", settings.PackageName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog procedure list".
        /// Retrieves the list of procedures from the Data Lake Analytics catalog.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogProcedure")]
        public static dynamic AzDlaCatalogProcedureList(this ICakeContext context, AzDlaCatalogProcedureListSettings settings) {
            var baseCommand = "az dla catalog procedure list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog procedure show".
        /// Retrieves the specified procedure from the Data Lake Analytics catalog.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogProcedure")]
        public static dynamic AzDlaCatalogProcedureShow(this ICakeContext context, AzDlaCatalogProcedureShowSettings settings) {
            var baseCommand = "az dla catalog procedure show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--procedure-name", settings.ProcedureName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog schema list".
        /// Retrieves the list of schemas from the Data Lake Analytics catalog.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogSchema")]
        public static dynamic AzDlaCatalogSchemaList(this ICakeContext context, AzDlaCatalogSchemaListSettings settings) {
            var baseCommand = "az dla catalog schema list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog schema show".
        /// Retrieves the specified schema from the Data Lake Analytics catalog.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogSchema")]
        public static dynamic AzDlaCatalogSchemaShow(this ICakeContext context, AzDlaCatalogSchemaShowSettings settings) {
            var baseCommand = "az dla catalog schema show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog table list".
        /// List tables in a database or schema.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTable")]
        public static dynamic AzDlaCatalogTableList(this ICakeContext context, AzDlaCatalogTableListSettings settings) {
            var baseCommand = "az dla catalog table list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog table show".
        /// Retrieves the specified table from the Data Lake Analytics catalog.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTable")]
        public static dynamic AzDlaCatalogTableShow(this ICakeContext context, AzDlaCatalogTableShowSettings settings) {
            var baseCommand = "az dla catalog table show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog table-partition list".
        /// Retrieves the list of table partitions from the Data Lake Analytics catalog.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTablePartition")]
        public static dynamic AzDlaCatalogTablePartitionList(this ICakeContext context, AzDlaCatalogTablePartitionListSettings settings) {
            var baseCommand = "az dla catalog table-partition list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog table-partition show".
        /// Retrieves the specified table partition from the Data Lake Analytics catalog.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTablePartition")]
        public static dynamic AzDlaCatalogTablePartitionShow(this ICakeContext context, AzDlaCatalogTablePartitionShowSettings settings) {
            var baseCommand = "az dla catalog table-partition show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--partition-name", settings.PartitionName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog table-stats list".
        /// List table statistics in a database, table, or schema.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTableStats")]
        public static dynamic AzDlaCatalogTableStatsList(this ICakeContext context, AzDlaCatalogTableStatsListSettings settings) {
            var baseCommand = "az dla catalog table-stats list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog table-stats show".
        /// Retrieves the specified table statistics from the Data Lake Analytics catalog.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTableStats")]
        public static dynamic AzDlaCatalogTableStatsShow(this ICakeContext context, AzDlaCatalogTableStatsShowSettings settings) {
            var baseCommand = "az dla catalog table-stats show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--statistics-name", settings.StatisticsName);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog table-type list".
        /// Retrieves the list of table types from the Data Lake Analytics catalog.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTableType")]
        public static dynamic AzDlaCatalogTableTypeList(this ICakeContext context, AzDlaCatalogTableTypeListSettings settings) {
            var baseCommand = "az dla catalog table-type list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog table-type show".
        /// Retrieves the specified table type from the Data Lake Analytics catalog.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTableType")]
        public static dynamic AzDlaCatalogTableTypeShow(this ICakeContext context, AzDlaCatalogTableTypeShowSettings settings) {
            var baseCommand = "az dla catalog table-type show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--table-type-name", settings.TableTypeName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog tvf list".
        /// List table valued functions in a database or schema.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTvf")]
        public static dynamic AzDlaCatalogTvfList(this ICakeContext context, AzDlaCatalogTvfListSettings settings) {
            var baseCommand = "az dla catalog tvf list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog tvf show".
        /// Retrieves the specified table valued function from the Data Lake Analytics catalog.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTvf")]
        public static dynamic AzDlaCatalogTvfShow(this ICakeContext context, AzDlaCatalogTvfShowSettings settings) {
            var baseCommand = "az dla catalog tvf show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--table-valued-function-name", settings.TableValuedFunctionName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog view list".
        /// List views in a database or schema.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogView")]
        public static dynamic AzDlaCatalogViewList(this ICakeContext context, AzDlaCatalogViewListSettings settings) {
            var baseCommand = "az dla catalog view list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla catalog view show".
        /// Retrieves the specified view from the Data Lake Analytics catalog.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogView")]
        public static dynamic AzDlaCatalogViewShow(this ICakeContext context, AzDlaCatalogViewShowSettings settings) {
            var baseCommand = "az dla catalog view show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--view-name", settings.ViewName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla job cancel".
        /// Cancel a Data Lake Analytics job.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJob")]
        public static dynamic AzDlaJobCancel(this ICakeContext context, AzDlaJobCancelSettings settings) {
            var baseCommand = "az dla job cancel";
            AppendIfNonNull(ref baseCommand, "--job-identity", settings.JobIdentity);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla job list".
        /// List Data Lake Analytics jobs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJob")]
        public static dynamic AzDlaJobList(this ICakeContext context, AzDlaJobListSettings settings) {
            var baseCommand = "az dla job list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pipeline-id", settings.PipelineId);
            AppendIfNonNull(ref baseCommand, "--recurrence-id", settings.RecurrenceId);
            AppendIfNonNull(ref baseCommand, "--result", settings.Result);
            AppendIfNonNull(ref baseCommand, "--state", settings.State);
            AppendIfNonNull(ref baseCommand, "--submitted-after", settings.SubmittedAfter);
            AppendIfNonNull(ref baseCommand, "--submitted-before", settings.SubmittedBefore);
            AppendIfNonNull(ref baseCommand, "--submitter", settings.Submitter);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla job show".
        /// Get information for a Data Lake Analytics job.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJob")]
        public static dynamic AzDlaJobShow(this ICakeContext context, AzDlaJobShowSettings settings) {
            var baseCommand = "az dla job show";
            AppendIfNonNull(ref baseCommand, "--job-identity", settings.JobIdentity);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla job submit".
        /// Submit a job to a Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJob")]
        public static dynamic AzDlaJobSubmit(this ICakeContext context, AzDlaJobSubmitSettings settings) {
            var baseCommand = "az dla job submit";
            AppendIfNonNull(ref baseCommand, "--job-name", settings.JobName);
            AppendIfNonNull(ref baseCommand, "--script", settings.Script);
            AppendIfNonNull(ref baseCommand, "--compile-mode", settings.CompileMode);
            AppendIfNonNull(ref baseCommand, "--compile-only", settings.CompileOnly);
            AppendIfNonNull(ref baseCommand, "--degree-of-parallelism", settings.DegreeOfParallelism);
            AppendIfNonNull(ref baseCommand, "--pipeline-id", settings.PipelineId);
            AppendIfNonNull(ref baseCommand, "--pipeline-name", settings.PipelineName);
            AppendIfNonNull(ref baseCommand, "--pipeline-uri", settings.PipelineUri);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--recurrence-id", settings.RecurrenceId);
            AppendIfNonNull(ref baseCommand, "--recurrence-name", settings.RecurrenceName);
            AppendIfNonNull(ref baseCommand, "--run-id", settings.RunId);
            AppendIfNonNull(ref baseCommand, "--runtime-version", settings.RuntimeVersion);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla job wait".
        /// Wait for a Data Lake Analytics job to finish.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJob")]
        public static dynamic AzDlaJobWait(this ICakeContext context, AzDlaJobWaitSettings settings) {
            var baseCommand = "az dla job wait";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--max-wait-time-sec", settings.MaxWaitTimeSec);
            AppendIfNonNull(ref baseCommand, "--wait-interval-sec", settings.WaitIntervalSec);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla job pipeline list".
        /// List job pipelines in a Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJobPipeline")]
        public static dynamic AzDlaJobPipelineList(this ICakeContext context, AzDlaJobPipelineListSettings settings) {
            var baseCommand = "az dla job pipeline list";
            AppendIfNonNull(ref baseCommand, "--end-date-time", settings.EndDateTime);
            AppendIfNonNull(ref baseCommand, "--start-date-time", settings.StartDateTime);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla job pipeline show".
        /// Retrieve a job pipeline in a Data Lake Analytics account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJobPipeline")]
        public static dynamic AzDlaJobPipelineShow(this ICakeContext context, AzDlaJobPipelineShowSettings settings) {
            var baseCommand = "az dla job pipeline show";
            AppendIfNonNull(ref baseCommand, "--pipeline-identity", settings.PipelineIdentity);
            AppendIfNonNull(ref baseCommand, "--end-date-time", settings.EndDateTime);
            AppendIfNonNull(ref baseCommand, "--start-date-time", settings.StartDateTime);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla job recurrence list".
        /// List job recurrences in a Data Lake Analytics account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJobRecurrence")]
        public static dynamic AzDlaJobRecurrenceList(this ICakeContext context, AzDlaJobRecurrenceListSettings settings) {
            var baseCommand = "az dla job recurrence list";
            AppendIfNonNull(ref baseCommand, "--end-date-time", settings.EndDateTime);
            AppendIfNonNull(ref baseCommand, "--start-date-time", settings.StartDateTime);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dla job recurrence show".
        /// Retrieve a job recurrence in a Data Lake Analytics account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJobRecurrence")]
        public static dynamic AzDlaJobRecurrenceShow(this ICakeContext context, AzDlaJobRecurrenceShowSettings settings) {
            var baseCommand = "az dla job recurrence show";
            AppendIfNonNull(ref baseCommand, "--recurrence-identity", settings.RecurrenceIdentity);
            AppendIfNonNull(ref baseCommand, "--end-date-time", settings.EndDateTime);
            AppendIfNonNull(ref baseCommand, "--start-date-time", settings.StartDateTime);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account create".
        /// Creates a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccount")]
        public static dynamic AzDlsAccountCreate(this ICakeContext context, AzDlsAccountCreateSettings settings) {
            var baseCommand = "az dls account create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--default-group", settings.DefaultGroup);
            AppendIfNonNull(ref baseCommand, "--disable-encryption", settings.DisableEncryption);
            AppendIfNonNull(ref baseCommand, "--encryption-type", settings.EncryptionType);
            AppendIfNonNull(ref baseCommand, "--key-name", settings.KeyName);
            AppendIfNonNull(ref baseCommand, "--key-vault-id", settings.KeyVaultId);
            AppendIfNonNull(ref baseCommand, "--key-version", settings.KeyVersion);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account delete".
        /// Delete a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccount")]
        public static dynamic AzDlsAccountDelete(this ICakeContext context, AzDlsAccountDeleteSettings settings) {
            var baseCommand = "az dls account delete";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account enable-key-vault".
        /// Enable the use of Azure Key Vault for encryption of a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccount")]
        public static dynamic AzDlsAccountEnableKeyVault(this ICakeContext context, AzDlsAccountEnableKeyVaultSettings settings) {
            var baseCommand = "az dls account enable-key-vault";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account list".
        /// Lists available Data Lake Store accounts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccount")]
        public static dynamic AzDlsAccountList(this ICakeContext context, AzDlsAccountListSettings settings) {
            var baseCommand = "az dls account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account show".
        /// Get the details of a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccount")]
        public static dynamic AzDlsAccountShow(this ICakeContext context, AzDlsAccountShowSettings settings) {
            var baseCommand = "az dls account show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account update".
        /// Updates a Data Lake Store account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccount")]
        public static dynamic AzDlsAccountUpdate(this ICakeContext context, AzDlsAccountUpdateSettings settings) {
            var baseCommand = "az dls account update";
            AppendIfNonNull(ref baseCommand, "--allow-azure-ips", settings.AllowAzureIps);
            AppendIfNonNull(ref baseCommand, "--default-group", settings.DefaultGroup);
            AppendIfNonNull(ref baseCommand, "--firewall-state", settings.FirewallState);
            AppendIfNonNull(ref baseCommand, "--key-version", settings.KeyVersion);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--trusted-id-provider-state", settings.TrustedIdProviderState);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account firewall create".
        /// Creates a firewall rule in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountFirewall")]
        public static dynamic AzDlsAccountFirewallCreate(this ICakeContext context, AzDlsAccountFirewallCreateSettings settings) {
            var baseCommand = "az dls account firewall create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account firewall delete".
        /// Deletes a firewall rule in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountFirewall")]
        public static dynamic AzDlsAccountFirewallDelete(this ICakeContext context, AzDlsAccountFirewallDeleteSettings settings) {
            var baseCommand = "az dls account firewall delete";
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account firewall list".
        /// Lists firewall rules in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountFirewall")]
        public static dynamic AzDlsAccountFirewallList(this ICakeContext context, AzDlsAccountFirewallListSettings settings) {
            var baseCommand = "az dls account firewall list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account firewall show".
        /// Get the details of a firewall rule in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountFirewall")]
        public static dynamic AzDlsAccountFirewallShow(this ICakeContext context, AzDlsAccountFirewallShowSettings settings) {
            var baseCommand = "az dls account firewall show";
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account firewall update".
        /// Updates a firewall rule in a Data Lake Store account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountFirewall")]
        public static dynamic AzDlsAccountFirewallUpdate(this ICakeContext context, AzDlsAccountFirewallUpdateSettings settings) {
            var baseCommand = "az dls account firewall update";
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account network-rule create".
        /// Creates a virtual network rule in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountNetworkRule")]
        public static dynamic AzDlsAccountNetworkRuleCreate(this ICakeContext context, AzDlsAccountNetworkRuleCreateSettings settings) {
            var baseCommand = "az dls account network-rule create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account network-rule delete".
        /// Deletes a virtual network rule in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountNetworkRule")]
        public static dynamic AzDlsAccountNetworkRuleDelete(this ICakeContext context, AzDlsAccountNetworkRuleDeleteSettings settings) {
            var baseCommand = "az dls account network-rule delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account network-rule list".
        /// Lists virtual network rules in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountNetworkRule")]
        public static dynamic AzDlsAccountNetworkRuleList(this ICakeContext context, AzDlsAccountNetworkRuleListSettings settings) {
            var baseCommand = "az dls account network-rule list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account network-rule show".
        /// Get the details of a virtual network rule in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountNetworkRule")]
        public static dynamic AzDlsAccountNetworkRuleShow(this ICakeContext context, AzDlsAccountNetworkRuleShowSettings settings) {
            var baseCommand = "az dls account network-rule show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account network-rule update".
        /// Updates a virtual network rule in a Data Lake Store account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountNetworkRule")]
        public static dynamic AzDlsAccountNetworkRuleUpdate(this ICakeContext context, AzDlsAccountNetworkRuleUpdateSettings settings) {
            var baseCommand = "az dls account network-rule update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account trusted-provider create".
        /// Creates or updates the specified trusted identity provider.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountTrustedProvider")]
        public static dynamic AzDlsAccountTrustedProviderCreate(this ICakeContext context, AzDlsAccountTrustedProviderCreateSettings settings) {
            var baseCommand = "az dls account trusted-provider create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--id-provider", settings.IdProvider);
            AppendIfNonNull(ref baseCommand, "--trusted-id-provider-name", settings.TrustedIdProviderName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account trusted-provider delete".
        /// Deletes the specified trusted identity provider from the specified Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountTrustedProvider")]
        public static dynamic AzDlsAccountTrustedProviderDelete(this ICakeContext context, AzDlsAccountTrustedProviderDeleteSettings settings) {
            var baseCommand = "az dls account trusted-provider delete";
            AppendIfNonNull(ref baseCommand, "--trusted-id-provider-name", settings.TrustedIdProviderName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account trusted-provider list".
        /// Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountTrustedProvider")]
        public static dynamic AzDlsAccountTrustedProviderList(this ICakeContext context, AzDlsAccountTrustedProviderListSettings settings) {
            var baseCommand = "az dls account trusted-provider list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account trusted-provider show".
        /// Gets the specified Data Lake Store trusted identity provider.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountTrustedProvider")]
        public static dynamic AzDlsAccountTrustedProviderShow(this ICakeContext context, AzDlsAccountTrustedProviderShowSettings settings) {
            var baseCommand = "az dls account trusted-provider show";
            AppendIfNonNull(ref baseCommand, "--trusted-id-provider-name", settings.TrustedIdProviderName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls account trusted-provider update".
        /// Updates the specified trusted identity provider.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountTrustedProvider")]
        public static dynamic AzDlsAccountTrustedProviderUpdate(this ICakeContext context, AzDlsAccountTrustedProviderUpdateSettings settings) {
            var baseCommand = "az dls account trusted-provider update";
            AppendIfNonNull(ref baseCommand, "--trusted-id-provider-name", settings.TrustedIdProviderName);
            AppendIfNonNull(ref baseCommand, "--id-provider", settings.IdProvider);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs append".
        /// Append content to a file in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsAppend(this ICakeContext context, AzDlsFsAppendSettings settings) {
            var baseCommand = "az dls fs append";
            AppendIfNonNull(ref baseCommand, "--content", settings.Content);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs create".
        /// Creates a file or folder in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsCreate(this ICakeContext context, AzDlsFsCreateSettings settings) {
            var baseCommand = "az dls fs create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--content", settings.Content);
            AppendIfNonNull(ref baseCommand, "--folder", settings.Folder);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs delete".
        /// Delete a file or folder in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsDelete(this ICakeContext context, AzDlsFsDeleteSettings settings) {
            var baseCommand = "az dls fs delete";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--recurse", settings.Recurse);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs download".
        /// Download a file or folder from a Data Lake Store account to the local machine.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsDownload(this ICakeContext context, AzDlsFsDownloadSettings settings) {
            var baseCommand = "az dls fs download";
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--source-path", settings.SourcePath);
            AppendIfNonNull(ref baseCommand, "--block-size", settings.BlockSize);
            AppendIfNonNull(ref baseCommand, "--buffer-size", settings.BufferSize);
            AppendIfNonNull(ref baseCommand, "--chunk-size", settings.ChunkSize);
            AppendIfNonNull(ref baseCommand, "--overwrite", settings.Overwrite);
            AppendIfNonNull(ref baseCommand, "--thread-count", settings.ThreadCount);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs join".
        /// Join files in a Data Lake Store account into one file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsJoin(this ICakeContext context, AzDlsFsJoinSettings settings) {
            var baseCommand = "az dls fs join";
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--source-paths", settings.SourcePaths);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs list".
        /// List the files and folders in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsList(this ICakeContext context, AzDlsFsListSettings settings) {
            var baseCommand = "az dls fs list";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs move".
        /// Move a file or folder in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsMove(this ICakeContext context, AzDlsFsMoveSettings settings) {
            var baseCommand = "az dls fs move";
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--source-path", settings.SourcePath);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs preview".
        /// Preview the content of a file in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsPreview(this ICakeContext context, AzDlsFsPreviewSettings settings) {
            var baseCommand = "az dls fs preview";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--length", settings.Length);
            AppendIfNonNull(ref baseCommand, "--offset", settings.Offset);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs remove-expiry".
        /// Remove the expiration time for a file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsRemoveExpiry(this ICakeContext context, AzDlsFsRemoveExpirySettings settings) {
            var baseCommand = "az dls fs remove-expiry";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs set-expiry".
        /// Set the expiration time for a file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsSetExpiry(this ICakeContext context, AzDlsFsSetExpirySettings settings) {
            var baseCommand = "az dls fs set-expiry";
            AppendIfNonNull(ref baseCommand, "--expiration-time", settings.ExpirationTime);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs show".
        /// Get file or folder information in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsShow(this ICakeContext context, AzDlsFsShowSettings settings) {
            var baseCommand = "az dls fs show";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs test".
        /// Test for the existence of a file or folder in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsTest(this ICakeContext context, AzDlsFsTestSettings settings) {
            var baseCommand = "az dls fs test";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs upload".
        /// Upload a file or folder to a Data Lake Store account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public static dynamic AzDlsFsUpload(this ICakeContext context, AzDlsFsUploadSettings settings) {
            var baseCommand = "az dls fs upload";
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--source-path", settings.SourcePath);
            AppendIfNonNull(ref baseCommand, "--block-size", settings.BlockSize);
            AppendIfNonNull(ref baseCommand, "--buffer-size", settings.BufferSize);
            AppendIfNonNull(ref baseCommand, "--chunk-size", settings.ChunkSize);
            AppendIfNonNull(ref baseCommand, "--overwrite", settings.Overwrite);
            AppendIfNonNull(ref baseCommand, "--thread-count", settings.ThreadCount);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs access remove-all".
        /// Remove the access control list for a file or folder.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public static dynamic AzDlsFsAccessRemoveAll(this ICakeContext context, AzDlsFsAccessRemoveAllSettings settings) {
            var baseCommand = "az dls fs access remove-all";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--default-acl", settings.DefaultAcl);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs access remove-entry".
        /// Remove entries for the access control list of a file or folder.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public static dynamic AzDlsFsAccessRemoveEntry(this ICakeContext context, AzDlsFsAccessRemoveEntrySettings settings) {
            var baseCommand = "az dls fs access remove-entry";
            AppendIfNonNull(ref baseCommand, "--acl-spec", settings.AclSpec);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs access set".
        /// Replace the existing access control list for a file or folder.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public static dynamic AzDlsFsAccessSet(this ICakeContext context, AzDlsFsAccessSetSettings settings) {
            var baseCommand = "az dls fs access set";
            AppendIfNonNull(ref baseCommand, "--acl-spec", settings.AclSpec);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs access set-entry".
        /// Update the access control list for a file or folder.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public static dynamic AzDlsFsAccessSetEntry(this ICakeContext context, AzDlsFsAccessSetEntrySettings settings) {
            var baseCommand = "az dls fs access set-entry";
            AppendIfNonNull(ref baseCommand, "--acl-spec", settings.AclSpec);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs access set-owner".
        /// Set the owner information for a file or folder in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public static dynamic AzDlsFsAccessSetOwner(this ICakeContext context, AzDlsFsAccessSetOwnerSettings settings) {
            var baseCommand = "az dls fs access set-owner";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--owner", settings.Owner);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs access set-permission".
        /// Set the permissions for a file or folder in a Data Lake Store account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public static dynamic AzDlsFsAccessSetPermission(this ICakeContext context, AzDlsFsAccessSetPermissionSettings settings) {
            var baseCommand = "az dls fs access set-permission";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--permission", settings.Permission);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dls fs access show".
        /// Display the access control list (ACL).  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public static dynamic AzDlsFsAccessShow(this ICakeContext context, AzDlsFsAccessShowSettings settings) {
            var baseCommand = "az dls fs access show";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms check-name".
        /// Check if a given DMS instance name is available in a given region as well as the name's validity.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public static dynamic AzDmsCheckName(this ICakeContext context, AzDmsCheckNameSettings settings) {
            var baseCommand = "az dms check-name";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms check-status".
        /// Perform a health check and return the status of the service and virtual machine size.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public static dynamic AzDmsCheckStatus(this ICakeContext context, AzDmsCheckStatusSettings settings) {
            var baseCommand = "az dms check-status";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms create".
        /// Create an instance of the Data Migration Service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public static dynamic AzDmsCreate(this ICakeContext context, AzDmsCreateSettings settings) {
            var baseCommand = "az dms create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms delete".
        /// Delete an instance of the Data Migration Service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public static dynamic AzDmsDelete(this ICakeContext context, AzDmsDeleteSettings settings) {
            var baseCommand = "az dms delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--delete-running-tasks", settings.DeleteRunningTasks);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms list".
        /// List the DMS instances within your currently configured subscription (to set this use "az account set"). If provided, only show the instances within a given resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public static dynamic AzDmsList(this ICakeContext context, AzDmsListSettings settings) {
            var baseCommand = "az dms list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms list-skus".
        /// List the SKUs that are supported by the Data Migration Service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public static dynamic AzDmsListSkus(this ICakeContext context, AzDmsListSkusSettings settings) {
            var baseCommand = "az dms list-skus";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms show".
        /// Show the details for an instance of the Data Migration Service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public static dynamic AzDmsShow(this ICakeContext context, AzDmsShowSettings settings) {
            var baseCommand = "az dms show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms start".
        /// Start an instance of the Data Migration Service. It can then be used to run data migrations.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public static dynamic AzDmsStart(this ICakeContext context, AzDmsStartSettings settings) {
            var baseCommand = "az dms start";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms stop".
        /// Stop an instance of the Data Migration Service. While stopped, it can't be used to run data migrations and the owner won't be billed.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public static dynamic AzDmsStop(this ICakeContext context, AzDmsStopSettings settings) {
            var baseCommand = "az dms stop";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms wait".
        /// Place the CLI in a waiting state until a condition of the DMS instance is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public static dynamic AzDmsWait(this ICakeContext context, AzDmsWaitSettings settings) {
            var baseCommand = "az dms wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms project check-name".
        /// Check if a given Project name is available within a given instance of DMS as well as the name's validity.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProject")]
        public static dynamic AzDmsProjectCheckName(this ICakeContext context, AzDmsProjectCheckNameSettings settings) {
            var baseCommand = "az dms project check-name";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms project create".
        /// Create a migration Project which can contain multiple Tasks.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProject")]
        public static dynamic AzDmsProjectCreate(this ICakeContext context, AzDmsProjectCreateSettings settings) {
            var baseCommand = "az dms project create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--source-platform", settings.SourcePlatform);
            AppendIfNonNull(ref baseCommand, "--target-platform", settings.TargetPlatform);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms project delete".
        /// Delete a Project.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProject")]
        public static dynamic AzDmsProjectDelete(this ICakeContext context, AzDmsProjectDeleteSettings settings) {
            var baseCommand = "az dms project delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--delete-running-tasks", settings.DeleteRunningTasks);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms project list".
        /// List the Projects within an instance of DMS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProject")]
        public static dynamic AzDmsProjectList(this ICakeContext context, AzDmsProjectListSettings settings) {
            var baseCommand = "az dms project list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms project show".
        /// Show the details of a migration Project.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProject")]
        public static dynamic AzDmsProjectShow(this ICakeContext context, AzDmsProjectShowSettings settings) {
            var baseCommand = "az dms project show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms project task cancel".
        /// Cancel a Task if it's currently queued or running.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProjectTask")]
        public static dynamic AzDmsProjectTaskCancel(this ICakeContext context, AzDmsProjectTaskCancelSettings settings) {
            var baseCommand = "az dms project task cancel";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms project task check-name".
        /// Check if a given Task name is available within a given instance of DMS as well as the name's validity.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProjectTask")]
        public static dynamic AzDmsProjectTaskCheckName(this ICakeContext context, AzDmsProjectTaskCheckNameSettings settings) {
            var baseCommand = "az dms project task check-name";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms project task create".
        /// Create and start a migration Task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProjectTask")]
        public static dynamic AzDmsProjectTaskCreate(this ICakeContext context, AzDmsProjectTaskCreateSettings settings) {
            var baseCommand = "az dms project task create";
            AppendIfNonNull(ref baseCommand, "--database-options-json", settings.DatabaseOptionsJson);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--source-connection-json", settings.SourceConnectionJson);
            AppendIfNonNull(ref baseCommand, "--target-connection-json", settings.TargetConnectionJson);
            AppendIfNonNull(ref baseCommand, "--enable-data-integrity-validation", settings.EnableDataIntegrityValidation);
            AppendIfNonNull(ref baseCommand, "--enable-query-analysis-validation", settings.EnableQueryAnalysisValidation);
            AppendIfNonNull(ref baseCommand, "--enable-schema-validation", settings.EnableSchemaValidation);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms project task delete".
        /// Delete a migration Task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProjectTask")]
        public static dynamic AzDmsProjectTaskDelete(this ICakeContext context, AzDmsProjectTaskDeleteSettings settings) {
            var baseCommand = "az dms project task delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--delete-running-tasks", settings.DeleteRunningTasks);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms project task list".
        /// List the Tasks within a Project. Some tasks may have a status of Unknown, which indicates that an error occurred while querying the status of that task.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProjectTask")]
        public static dynamic AzDmsProjectTaskList(this ICakeContext context, AzDmsProjectTaskListSettings settings) {
            var baseCommand = "az dms project task list";
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--task-type", settings.TaskType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az dms project task show".
        /// Show the details of a migration Task. Use the "--expand" to get more details.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProjectTask")]
        public static dynamic AzDmsProjectTaskShow(this ICakeContext context, AzDmsProjectTaskShowSettings settings) {
            var baseCommand = "az dms project task show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid domain create".
        /// Create a domain.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomain")]
        public static dynamic AzEventgridDomainCreate(this ICakeContext context, AzEventgridDomainCreateSettings settings) {
            var baseCommand = "az eventgrid domain create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid domain delete".
        /// Delete a domain.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomain")]
        public static dynamic AzEventgridDomainDelete(this ICakeContext context, AzEventgridDomainDeleteSettings settings) {
            var baseCommand = "az eventgrid domain delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid domain list".
        /// List available domains.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomain")]
        public static dynamic AzEventgridDomainList(this ICakeContext context, AzEventgridDomainListSettings settings) {
            var baseCommand = "az eventgrid domain list";
            AppendIfNonNull(ref baseCommand, "--odata-query", settings.OdataQuery);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid domain show".
        /// Get the details of a domain.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomain")]
        public static dynamic AzEventgridDomainShow(this ICakeContext context, AzEventgridDomainShowSettings settings) {
            var baseCommand = "az eventgrid domain show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid domain update".
        /// Update a domain.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomain")]
        public static dynamic AzEventgridDomainUpdate(this ICakeContext context, AzEventgridDomainUpdateSettings settings) {
            var baseCommand = "az eventgrid domain update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid domain key list".
        /// List shared access keys of a domain.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomainKey")]
        public static dynamic AzEventgridDomainKeyList(this ICakeContext context, AzEventgridDomainKeyListSettings settings) {
            var baseCommand = "az eventgrid domain key list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid domain key regenerate".
        /// Regenerate a shared access key of a domain.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomainKey")]
        public static dynamic AzEventgridDomainKeyRegenerate(this ICakeContext context, AzEventgridDomainKeyRegenerateSettings settings) {
            var baseCommand = "az eventgrid domain key regenerate";
            AppendIfNonNull(ref baseCommand, "--key-name", settings.KeyName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid domain topic create".
        /// Create a domain topic under a domain.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomainTopic")]
        public static dynamic AzEventgridDomainTopicCreate(this ICakeContext context, AzEventgridDomainTopicCreateSettings settings) {
            var baseCommand = "az eventgrid domain topic create";
            AppendIfNonNull(ref baseCommand, "--domain-name", settings.DomainName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid domain topic delete".
        /// Delete a domain topic under a domain.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomainTopic")]
        public static dynamic AzEventgridDomainTopicDelete(this ICakeContext context, AzEventgridDomainTopicDeleteSettings settings) {
            var baseCommand = "az eventgrid domain topic delete";
            AppendIfNonNull(ref baseCommand, "--domain-name", settings.DomainName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid domain topic list".
        /// List available topics in a domain.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomainTopic")]
        public static dynamic AzEventgridDomainTopicList(this ICakeContext context, AzEventgridDomainTopicListSettings settings) {
            var baseCommand = "az eventgrid domain topic list";
            AppendIfNonNull(ref baseCommand, "--domain-name", settings.DomainName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--odata-query", settings.OdataQuery);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid domain topic show".
        /// Get the details of a domain topic.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomainTopic")]
        public static dynamic AzEventgridDomainTopicShow(this ICakeContext context, AzEventgridDomainTopicShowSettings settings) {
            var baseCommand = "az eventgrid domain topic show";
            AppendIfNonNull(ref baseCommand, "--domain-name", settings.DomainName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid event-subscription create".
        /// Create a new event subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridEventSubscription")]
        public static dynamic AzEventgridEventSubscriptionCreate(this ICakeContext context, AzEventgridEventSubscriptionCreateSettings settings) {
            var baseCommand = "az eventgrid event-subscription create";
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--advanced-filter", settings.AdvancedFilter);
            AppendIfNonNull(ref baseCommand, "--deadletter-endpoint", settings.DeadletterEndpoint);
            AppendIfNonNull(ref baseCommand, "--endpoint-type", settings.EndpointType);
            AppendIfNonNull(ref baseCommand, "--event-ttl", settings.EventTtl);
            AppendIfNonNull(ref baseCommand, "--expiration-date", settings.ExpirationDate);
            AppendIfNonNull(ref baseCommand, "--included-event-types", settings.IncludedEventTypes);
            AppendIfNonNull(ref baseCommand, "--labels", settings.Labels);
            AppendIfNonNull(ref baseCommand, "--max-delivery-attempts", settings.MaxDeliveryAttempts);
            AppendIfNonNull(ref baseCommand, "--source-resource-id", settings.SourceResourceId);
            AppendIfNonNull(ref baseCommand, "--subject-begins-with", settings.SubjectBeginsWith);
            AppendIfNonNull(ref baseCommand, "--subject-case-sensitive", settings.SubjectCaseSensitive);
            AppendIfNonNull(ref baseCommand, "--subject-ends-with", settings.SubjectEndsWith);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid event-subscription delete".
        /// Delete an event subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridEventSubscription")]
        public static dynamic AzEventgridEventSubscriptionDelete(this ICakeContext context, AzEventgridEventSubscriptionDeleteSettings settings) {
            var baseCommand = "az eventgrid event-subscription delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source-resource-id", settings.SourceResourceId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid event-subscription list".
        /// List event subscriptions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridEventSubscription")]
        public static dynamic AzEventgridEventSubscriptionList(this ICakeContext context, AzEventgridEventSubscriptionListSettings settings) {
            var baseCommand = "az eventgrid event-subscription list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--odata-query", settings.OdataQuery);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-resource-id", settings.SourceResourceId);
            AppendIfNonNull(ref baseCommand, "--topic-type-name", settings.TopicTypeName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid event-subscription show".
        /// Get the details of an event subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridEventSubscription")]
        public static dynamic AzEventgridEventSubscriptionShow(this ICakeContext context, AzEventgridEventSubscriptionShowSettings settings) {
            var baseCommand = "az eventgrid event-subscription show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--include-full-endpoint-url", settings.IncludeFullEndpointUrl);
            AppendIfNonNull(ref baseCommand, "--source-resource-id", settings.SourceResourceId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid event-subscription update".
        /// Update an event subscription.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridEventSubscription")]
        public static dynamic AzEventgridEventSubscriptionUpdate(this ICakeContext context, AzEventgridEventSubscriptionUpdateSettings settings) {
            var baseCommand = "az eventgrid event-subscription update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--deadletter-endpoint", settings.DeadletterEndpoint);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--endpoint-type", settings.EndpointType);
            AppendIfNonNull(ref baseCommand, "--included-event-types", settings.IncludedEventTypes);
            AppendIfNonNull(ref baseCommand, "--labels", settings.Labels);
            AppendIfNonNull(ref baseCommand, "--source-resource-id", settings.SourceResourceId);
            AppendIfNonNull(ref baseCommand, "--subject-begins-with", settings.SubjectBeginsWith);
            AppendIfNonNull(ref baseCommand, "--subject-ends-with", settings.SubjectEndsWith);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid topic create".
        /// Create a topic.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopic")]
        public static dynamic AzEventgridTopicCreate(this ICakeContext context, AzEventgridTopicCreateSettings settings) {
            var baseCommand = "az eventgrid topic create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid topic delete".
        /// Delete a topic.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopic")]
        public static dynamic AzEventgridTopicDelete(this ICakeContext context, AzEventgridTopicDeleteSettings settings) {
            var baseCommand = "az eventgrid topic delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid topic list".
        /// List available topics.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopic")]
        public static dynamic AzEventgridTopicList(this ICakeContext context, AzEventgridTopicListSettings settings) {
            var baseCommand = "az eventgrid topic list";
            AppendIfNonNull(ref baseCommand, "--odata-query", settings.OdataQuery);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid topic show".
        /// Get the details of a topic.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopic")]
        public static dynamic AzEventgridTopicShow(this ICakeContext context, AzEventgridTopicShowSettings settings) {
            var baseCommand = "az eventgrid topic show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid topic update".
        /// Update a topic.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopic")]
        public static dynamic AzEventgridTopicUpdate(this ICakeContext context, AzEventgridTopicUpdateSettings settings) {
            var baseCommand = "az eventgrid topic update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid topic key list".
        /// List shared access keys of a topic.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopicKey")]
        public static dynamic AzEventgridTopicKeyList(this ICakeContext context, AzEventgridTopicKeyListSettings settings) {
            var baseCommand = "az eventgrid topic key list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid topic key regenerate".
        /// Regenerate a shared access key of a topic.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopicKey")]
        public static dynamic AzEventgridTopicKeyRegenerate(this ICakeContext context, AzEventgridTopicKeyRegenerateSettings settings) {
            var baseCommand = "az eventgrid topic key regenerate";
            AppendIfNonNull(ref baseCommand, "--key-name", settings.KeyName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid topic-type list".
        /// List registered topic types.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopicType")]
        public static dynamic AzEventgridTopicTypeList(this ICakeContext context, AzEventgridTopicTypeListSettings settings) {
            var baseCommand = "az eventgrid topic-type list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid topic-type list-event-types".
        /// List the event types supported by a topic type.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopicType")]
        public static dynamic AzEventgridTopicTypeListEventTypes(this ICakeContext context, AzEventgridTopicTypeListEventTypesSettings settings) {
            var baseCommand = "az eventgrid topic-type list-event-types";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventgrid topic-type show".
        /// Get the details for a topic type.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopicType")]
        public static dynamic AzEventgridTopicTypeShow(this ICakeContext context, AzEventgridTopicTypeShowSettings settings) {
            var baseCommand = "az eventgrid topic-type show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub create".
        /// Creates the EventHubs Eventhub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhub")]
        public static dynamic AzEventhubsEventhubCreate(this ICakeContext context, AzEventhubsEventhubCreateSettings settings) {
            var baseCommand = "az eventhubs eventhub create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--enable-capture", settings.EnableCapture);
            AppendIfNonNull(ref baseCommand, "--message-retention", settings.MessageRetention);
            AppendIfNonNull(ref baseCommand, "--partition-count", settings.PartitionCount);
            AppendIfNonNull(ref baseCommand, "--skip-empty-archives", settings.SkipEmptyArchives);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--capture-interval", settings.CaptureInterval);
            AppendIfNonNull(ref baseCommand, "--capture-size-limit", settings.CaptureSizeLimit);
            AppendIfNonNull(ref baseCommand, "--archive-name-format", settings.ArchiveNameFormat);
            AppendIfNonNull(ref baseCommand, "--blob-container", settings.BlobContainer);
            AppendIfNonNull(ref baseCommand, "--destination-name", settings.DestinationName);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub delete".
        /// Deletes the Eventhub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhub")]
        public static dynamic AzEventhubsEventhubDelete(this ICakeContext context, AzEventhubsEventhubDeleteSettings settings) {
            var baseCommand = "az eventhubs eventhub delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub list".
        /// List the EventHub by Namepsace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhub")]
        public static dynamic AzEventhubsEventhubList(this ICakeContext context, AzEventhubsEventhubListSettings settings) {
            var baseCommand = "az eventhubs eventhub list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub show".
        /// Shows the Eventhub Details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhub")]
        public static dynamic AzEventhubsEventhubShow(this ICakeContext context, AzEventhubsEventhubShowSettings settings) {
            var baseCommand = "az eventhubs eventhub show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub update".
        /// Updates the EventHubs Eventhub.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhub")]
        public static dynamic AzEventhubsEventhubUpdate(this ICakeContext context, AzEventhubsEventhubUpdateSettings settings) {
            var baseCommand = "az eventhubs eventhub update";
            AppendIfNonNull(ref baseCommand, "--enable-capture", settings.EnableCapture);
            AppendIfNonNull(ref baseCommand, "--message-retention", settings.MessageRetention);
            AppendIfNonNull(ref baseCommand, "--partition-count", settings.PartitionCount);
            AppendIfNonNull(ref baseCommand, "--skip-empty-archives", settings.SkipEmptyArchives);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--capture-interval", settings.CaptureInterval);
            AppendIfNonNull(ref baseCommand, "--capture-size-limit", settings.CaptureSizeLimit);
            AppendIfNonNull(ref baseCommand, "--archive-name-format", settings.ArchiveNameFormat);
            AppendIfNonNull(ref baseCommand, "--blob-container", settings.BlobContainer);
            AppendIfNonNull(ref baseCommand, "--destination-name", settings.DestinationName);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule create".
        /// Creates Authorizationrule for the given Eventhub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRule")]
        public static dynamic AzEventhubsEventhubAuthorizationRuleCreate(this ICakeContext context, AzEventhubsEventhubAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule delete".
        /// Deletes the Authorizationrule of Eventhub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRule")]
        public static dynamic AzEventhubsEventhubAuthorizationRuleDelete(this ICakeContext context, AzEventhubsEventhubAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule list".
        /// Shows the list of Authorization-rules by Eventhub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRule")]
        public static dynamic AzEventhubsEventhubAuthorizationRuleList(this ICakeContext context, AzEventhubsEventhubAuthorizationRuleListSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule show".
        /// Shows the details of Authorizationrule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRule")]
        public static dynamic AzEventhubsEventhubAuthorizationRuleShow(this ICakeContext context, AzEventhubsEventhubAuthorizationRuleShowSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule update".
        /// Updates Authorizationrule for the given Eventhub.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRule")]
        public static dynamic AzEventhubsEventhubAuthorizationRuleUpdate(this ICakeContext context, AzEventhubsEventhubAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule keys list".
        /// Shows the connection strings of Authorizationrule for the Eventhub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRuleKeys")]
        public static dynamic AzEventhubsEventhubAuthorizationRuleKeysList(this ICakeContext context, AzEventhubsEventhubAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule keys renew".
        /// Regenerate the connection strings of Authorizationrule for the namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRuleKeys")]
        public static dynamic AzEventhubsEventhubAuthorizationRuleKeysRenew(this ICakeContext context, AzEventhubsEventhubAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub consumer-group create".
        /// Creates the EventHub ConsumerGroup.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubConsumerGroup")]
        public static dynamic AzEventhubsEventhubConsumerGroupCreate(this ICakeContext context, AzEventhubsEventhubConsumerGroupCreateSettings settings) {
            var baseCommand = "az eventhubs eventhub consumer-group create";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--user-metadata", settings.UserMetadata);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub consumer-group delete".
        /// Deletes the ConsumerGroup.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubConsumerGroup")]
        public static dynamic AzEventhubsEventhubConsumerGroupDelete(this ICakeContext context, AzEventhubsEventhubConsumerGroupDeleteSettings settings) {
            var baseCommand = "az eventhubs eventhub consumer-group delete";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub consumer-group list".
        /// List the ConsumerGroup by Eventhub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubConsumerGroup")]
        public static dynamic AzEventhubsEventhubConsumerGroupList(this ICakeContext context, AzEventhubsEventhubConsumerGroupListSettings settings) {
            var baseCommand = "az eventhubs eventhub consumer-group list";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub consumer-group show".
        /// Shows the ConsumerGroup Details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubConsumerGroup")]
        public static dynamic AzEventhubsEventhubConsumerGroupShow(this ICakeContext context, AzEventhubsEventhubConsumerGroupShowSettings settings) {
            var baseCommand = "az eventhubs eventhub consumer-group show";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs eventhub consumer-group update".
        /// Updates the EventHub ConsumerGroup.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubConsumerGroup")]
        public static dynamic AzEventhubsEventhubConsumerGroupUpdate(this ICakeContext context, AzEventhubsEventhubConsumerGroupUpdateSettings settings) {
            var baseCommand = "az eventhubs eventhub consumer-group update";
            AppendIfNonNull(ref baseCommand, "--user-metadata", settings.UserMetadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias break-pair".
        /// Disables Geo-Disaster Recovery Configuration Alias and stops replicating changes from primary to secondary namespaces.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public static dynamic AzEventhubsGeorecoveryAliasBreakPair(this ICakeContext context, AzEventhubsGeorecoveryAliasBreakPairSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias break-pair";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias delete".
        /// Delete Geo-Disaster Recovery Configuration Alias.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public static dynamic AzEventhubsGeorecoveryAliasDelete(this ICakeContext context, AzEventhubsGeorecoveryAliasDeleteSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias delete";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias exists".
        /// Check the availability of Geo-Disaster Recovery Configuration Alias Name.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public static dynamic AzEventhubsGeorecoveryAliasExists(this ICakeContext context, AzEventhubsGeorecoveryAliasExistsSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias exists";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias fail-over".
        /// Invokes Geo-Disaster Recovery Configuration Alias to point to the secondary namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public static dynamic AzEventhubsGeorecoveryAliasFailOver(this ICakeContext context, AzEventhubsGeorecoveryAliasFailOverSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias fail-over";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias list".
        /// Gets all Alias(Disaster Recovery configurations).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public static dynamic AzEventhubsGeorecoveryAliasList(this ICakeContext context, AzEventhubsGeorecoveryAliasListSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias set".
        /// Sets a Geo-Disaster Recovery Configuration Alias for the give Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public static dynamic AzEventhubsGeorecoveryAliasSet(this ICakeContext context, AzEventhubsGeorecoveryAliasSetSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias set";
            AppendIfNonNull(ref baseCommand, "--partner-namespace", settings.PartnerNamespace);
            AppendIfNonNull(ref baseCommand, "--alternate-name", settings.AlternateName);
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias show".
        /// Shows properties of Geo-Disaster Recovery Configuration Alias for Primay or Secondary Namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public static dynamic AzEventhubsGeorecoveryAliasShow(this ICakeContext context, AzEventhubsGeorecoveryAliasShowSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias show";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias authorization-rule list".
        /// List of Authorizationrule by EventHubs Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAliasAuthorizationRule")]
        public static dynamic AzEventhubsGeorecoveryAliasAuthorizationRuleList(this ICakeContext context, AzEventhubsGeorecoveryAliasAuthorizationRuleListSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias authorization-rule show".
        /// Show properties of EventHubs Geo-Disaster Recovery Configuration Alias and Namespace Authorizationrule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAliasAuthorizationRule")]
        public static dynamic AzEventhubsGeorecoveryAliasAuthorizationRuleShow(this ICakeContext context, AzEventhubsGeorecoveryAliasAuthorizationRuleShowSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias authorization-rule keys list".
        /// Shows the keys and connection strings of Authorizationrule for the EventHubs Namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAliasAuthorizationRuleKeys")]
        public static dynamic AzEventhubsGeorecoveryAliasAuthorizationRuleKeysList(this ICakeContext context, AzEventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace create".
        /// Creates the EventHubs Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespace")]
        public static dynamic AzEventhubsNamespaceCreate(this ICakeContext context, AzEventhubsNamespaceCreateSettings settings) {
            var baseCommand = "az eventhubs namespace create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--enable-auto-inflate", settings.EnableAutoInflate);
            AppendIfNonNull(ref baseCommand, "--enable-kafka", settings.EnableKafka);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--maximum-throughput-units", settings.MaximumThroughputUnits);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace delete".
        /// Deletes the Namespaces.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespace")]
        public static dynamic AzEventhubsNamespaceDelete(this ICakeContext context, AzEventhubsNamespaceDeleteSettings settings) {
            var baseCommand = "az eventhubs namespace delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace exists".
        /// Check for the availability of the given name for the Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespace")]
        public static dynamic AzEventhubsNamespaceExists(this ICakeContext context, AzEventhubsNamespaceExistsSettings settings) {
            var baseCommand = "az eventhubs namespace exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace list".
        /// Lists the EventHubs Namespaces.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespace")]
        public static dynamic AzEventhubsNamespaceList(this ICakeContext context, AzEventhubsNamespaceListSettings settings) {
            var baseCommand = "az eventhubs namespace list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace show".
        /// Shows the Event Hubs Namespace Details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespace")]
        public static dynamic AzEventhubsNamespaceShow(this ICakeContext context, AzEventhubsNamespaceShowSettings settings) {
            var baseCommand = "az eventhubs namespace show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace update".
        /// Updates the EventHubs Namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespace")]
        public static dynamic AzEventhubsNamespaceUpdate(this ICakeContext context, AzEventhubsNamespaceUpdateSettings settings) {
            var baseCommand = "az eventhubs namespace update";
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--enable-auto-inflate", settings.EnableAutoInflate);
            AppendIfNonNull(ref baseCommand, "--enable-kafka", settings.EnableKafka);
            AppendIfNonNull(ref baseCommand, "--maximum-throughput-units", settings.MaximumThroughputUnits);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule create".
        /// Creates Authorizationrule for the given Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRule")]
        public static dynamic AzEventhubsNamespaceAuthorizationRuleCreate(this ICakeContext context, AzEventhubsNamespaceAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule delete".
        /// Deletes the Authorizationrule of the namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRule")]
        public static dynamic AzEventhubsNamespaceAuthorizationRuleDelete(this ICakeContext context, AzEventhubsNamespaceAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule list".
        /// Shows the list of Authorizationrule by Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRule")]
        public static dynamic AzEventhubsNamespaceAuthorizationRuleList(this ICakeContext context, AzEventhubsNamespaceAuthorizationRuleListSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule show".
        /// Shows the details of Authorizationrule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRule")]
        public static dynamic AzEventhubsNamespaceAuthorizationRuleShow(this ICakeContext context, AzEventhubsNamespaceAuthorizationRuleShowSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule update".
        /// Updates Authorizationrule for the given Namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRule")]
        public static dynamic AzEventhubsNamespaceAuthorizationRuleUpdate(this ICakeContext context, AzEventhubsNamespaceAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule keys list".
        /// Shows the connection strings for namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRuleKeys")]
        public static dynamic AzEventhubsNamespaceAuthorizationRuleKeysList(this ICakeContext context, AzEventhubsNamespaceAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule keys renew".
        /// Regenerate the connection strings of Authorizationrule for the namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRuleKeys")]
        public static dynamic AzEventhubsNamespaceAuthorizationRuleKeysRenew(this ICakeContext context, AzEventhubsNamespaceAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace network-rule add".
        /// Add a network rule for a namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceNetworkRule")]
        public static dynamic AzEventhubsNamespaceNetworkRuleAdd(this ICakeContext context, AzEventhubsNamespaceNetworkRuleAddSettings settings) {
            var baseCommand = "az eventhubs namespace network-rule add";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace network-rule list".
        /// Show properties of Network rule of the given Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceNetworkRule")]
        public static dynamic AzEventhubsNamespaceNetworkRuleList(this ICakeContext context, AzEventhubsNamespaceNetworkRuleListSettings settings) {
            var baseCommand = "az eventhubs namespace network-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az eventhubs namespace network-rule remove".
        /// Remove network rule for a namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceNetworkRule")]
        public static dynamic AzEventhubsNamespaceNetworkRuleRemove(this ICakeContext context, AzEventhubsNamespaceNetworkRuleRemoveSettings settings) {
            var baseCommand = "az eventhubs namespace network-rule remove";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az extension add".
        /// Add an extension.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzExtension")]
        public static dynamic AzExtensionAdd(this ICakeContext context, AzExtensionAddSettings settings) {
            var baseCommand = "az extension add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--pip-extra-index-urls", settings.PipExtraIndexUrls);
            AppendIfNonNull(ref baseCommand, "--pip-proxy", settings.PipProxy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az extension list".
        /// List the installed extensions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzExtension")]
        public static dynamic AzExtensionList(this ICakeContext context, AzExtensionListSettings settings) {
            var baseCommand = "az extension list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az extension list-available".
        /// List publicly available extensions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzExtension")]
        public static dynamic AzExtensionListAvailable(this ICakeContext context, AzExtensionListAvailableSettings settings) {
            var baseCommand = "az extension list-available";
            AppendIfNonNull(ref baseCommand, "--show-details", settings.ShowDetails);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az extension remove".
        /// Remove an extension.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzExtension")]
        public static dynamic AzExtensionRemove(this ICakeContext context, AzExtensionRemoveSettings settings) {
            var baseCommand = "az extension remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az extension show".
        /// Show an extension.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzExtension")]
        public static dynamic AzExtensionShow(this ICakeContext context, AzExtensionShowSettings settings) {
            var baseCommand = "az extension show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az extension update".
        /// Update an extension.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzExtension")]
        public static dynamic AzExtensionUpdate(this ICakeContext context, AzExtensionUpdateSettings settings) {
            var baseCommand = "az extension update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pip-extra-index-urls", settings.PipExtraIndexUrls);
            AppendIfNonNull(ref baseCommand, "--pip-proxy", settings.PipProxy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az feature list".
        /// List preview features.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFeature")]
        public static dynamic AzFeatureList(this ICakeContext context, AzFeatureListSettings settings) {
            var baseCommand = "az feature list";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az feature register".
        /// Register a preview feature.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFeature")]
        public static dynamic AzFeatureRegister(this ICakeContext context, AzFeatureRegisterSettings settings) {
            var baseCommand = "az feature register";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az feature show".
        /// Gets the preview feature with the specified name.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFeature")]
        public static dynamic AzFeatureShow(this ICakeContext context, AzFeatureShowSettings settings) {
            var baseCommand = "az feature show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp create".
        /// Create a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public static dynamic AzFunctionappCreate(this ICakeContext context, AzFunctionappCreateSettings settings) {
            var baseCommand = "az functionapp create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--app-insights", settings.AppInsights);
            AppendIfNonNull(ref baseCommand, "--app-insights-key", settings.AppInsightsKey);
            AppendIfNonNull(ref baseCommand, "--consumption-plan-location", settings.ConsumptionPlanLocation);
            AppendIfNonNull(ref baseCommand, "--deployment-container-image-name", settings.DeploymentContainerImageName);
            AppendIfNonNull(ref baseCommand, "--deployment-local-git", settings.DeploymentLocalGit);
            AppendIfNonNull(ref baseCommand, "--deployment-source-branch", settings.DeploymentSourceBranch);
            AppendIfNonNull(ref baseCommand, "--deployment-source-url", settings.DeploymentSourceUrl);
            AppendIfNonNull(ref baseCommand, "--disable-app-insights", settings.DisableAppInsights);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-password", settings.DockerRegistryServerPassword);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-user", settings.DockerRegistryServerUser);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--runtime", settings.Runtime);
            AppendIfNonNull(ref baseCommand, "--runtime-version", settings.RuntimeVersion);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp delete".
        /// Delete a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public static dynamic AzFunctionappDelete(this ICakeContext context, AzFunctionappDeleteSettings settings) {
            var baseCommand = "az functionapp delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp list".
        /// List function apps.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public static dynamic AzFunctionappList(this ICakeContext context, AzFunctionappListSettings settings) {
            var baseCommand = "az functionapp list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp list-consumption-locations".
        /// List available locations for running function apps.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public static dynamic AzFunctionappListConsumptionLocations(this ICakeContext context, AzFunctionappListConsumptionLocationsSettings settings) {
            var baseCommand = "az functionapp list-consumption-locations";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp restart".
        /// Restart a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public static dynamic AzFunctionappRestart(this ICakeContext context, AzFunctionappRestartSettings settings) {
            var baseCommand = "az functionapp restart";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp show".
        /// Get the details of a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public static dynamic AzFunctionappShow(this ICakeContext context, AzFunctionappShowSettings settings) {
            var baseCommand = "az functionapp show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp start".
        /// Start a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public static dynamic AzFunctionappStart(this ICakeContext context, AzFunctionappStartSettings settings) {
            var baseCommand = "az functionapp start";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp stop".
        /// Stop a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public static dynamic AzFunctionappStop(this ICakeContext context, AzFunctionappStopSettings settings) {
            var baseCommand = "az functionapp stop";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp update".
        /// Update a function app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public static dynamic AzFunctionappUpdate(this ICakeContext context, AzFunctionappUpdateSettings settings) {
            var baseCommand = "az functionapp update";
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config set".
        /// Set the function app's configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfig")]
        public static dynamic AzFunctionappConfigSet(this ICakeContext context, AzFunctionappConfigSetSettings settings) {
            var baseCommand = "az functionapp config set";
            AppendIfNonNull(ref baseCommand, "--always-on", settings.AlwaysOn);
            AppendIfNonNull(ref baseCommand, "--auto-heal-enabled", settings.AutoHealEnabled);
            AppendIfNonNull(ref baseCommand, "--ftps-state", settings.FtpsState);
            AppendIfNonNull(ref baseCommand, "--generic-configurations", settings.GenericConfigurations);
            AppendIfNonNull(ref baseCommand, "--http20-enabled", settings.Http20Enabled);
            AppendIfNonNull(ref baseCommand, "--java-container", settings.JavaContainer);
            AppendIfNonNull(ref baseCommand, "--java-container-version", settings.JavaContainerVersion);
            AppendIfNonNull(ref baseCommand, "--java-version", settings.JavaVersion);
            AppendIfNonNull(ref baseCommand, "--linux-fx-version", settings.LinuxFxVersion);
            AppendIfNonNull(ref baseCommand, "--min-tls-version", settings.MinTlsVersion);
            AppendIfNonNull(ref baseCommand, "--net-framework-version", settings.NetFrameworkVersion);
            AppendIfNonNull(ref baseCommand, "--number-of-workers", settings.NumberOfWorkers);
            AppendIfNonNull(ref baseCommand, "--php-version", settings.PhpVersion);
            AppendIfNonNull(ref baseCommand, "--prewarmed-instance-count", settings.PrewarmedInstanceCount);
            AppendIfNonNull(ref baseCommand, "--python-version", settings.PythonVersion);
            AppendIfNonNull(ref baseCommand, "--remote-debugging-enabled", settings.RemoteDebuggingEnabled);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--startup-file", settings.StartupFile);
            AppendIfNonNull(ref baseCommand, "--use-32bit-worker-process", settings.Use32BitWorkerProcess);
            AppendIfNonNull(ref baseCommand, "--web-sockets-enabled", settings.WebSocketsEnabled);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config show".
        /// Get the details of a function app's configuration.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfig")]
        public static dynamic AzFunctionappConfigShow(this ICakeContext context, AzFunctionappConfigShowSettings settings) {
            var baseCommand = "az functionapp config show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config access-restriction add".
        /// Adds an Access Restriction to the functionapp, or updates if the Action of the Ip- Address or Subnet already exists.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAccessRestriction")]
        public static dynamic AzFunctionappConfigAccessRestrictionAdd(this ICakeContext context, AzFunctionappConfigAccessRestrictionAddSettings settings) {
            var baseCommand = "az functionapp config access-restriction add";
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--scm-site", settings.ScmSite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config access-restriction remove".
        /// Removes an Access Restriction from the functionapp.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAccessRestriction")]
        public static dynamic AzFunctionappConfigAccessRestrictionRemove(this ICakeContext context, AzFunctionappConfigAccessRestrictionRemoveSettings settings) {
            var baseCommand = "az functionapp config access-restriction remove";
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--scm-site", settings.ScmSite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config access-restriction set".
        /// Sets if SCM site is using the same restrictions as the main site.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAccessRestriction")]
        public static dynamic AzFunctionappConfigAccessRestrictionSet(this ICakeContext context, AzFunctionappConfigAccessRestrictionSetSettings settings) {
            var baseCommand = "az functionapp config access-restriction set";
            AppendIfNonNull(ref baseCommand, "--use-same-restrictions-for-scm-site", settings.UseSameRestrictionsForScmSite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config access-restriction show".
        /// Show Access Restriction settings for functionapp.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAccessRestriction")]
        public static dynamic AzFunctionappConfigAccessRestrictionShow(this ICakeContext context, AzFunctionappConfigAccessRestrictionShowSettings settings) {
            var baseCommand = "az functionapp config access-restriction show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config appsettings delete".
        /// Delete a function app's settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAppsettings")]
        public static dynamic AzFunctionappConfigAppsettingsDelete(this ICakeContext context, AzFunctionappConfigAppsettingsDeleteSettings settings) {
            var baseCommand = "az functionapp config appsettings delete";
            AppendIfNonNull(ref baseCommand, "--setting-names", settings.SettingNames);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config appsettings list".
        /// Show settings for a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAppsettings")]
        public static dynamic AzFunctionappConfigAppsettingsList(this ICakeContext context, AzFunctionappConfigAppsettingsListSettings settings) {
            var baseCommand = "az functionapp config appsettings list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config appsettings set".
        /// Update a function app's settings.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAppsettings")]
        public static dynamic AzFunctionappConfigAppsettingsSet(this ICakeContext context, AzFunctionappConfigAppsettingsSetSettings settings) {
            var baseCommand = "az functionapp config appsettings set";
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--slot-settings", settings.SlotSettings);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config container delete".
        /// Delete a function app container's settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigContainer")]
        public static dynamic AzFunctionappConfigContainerDelete(this ICakeContext context, AzFunctionappConfigContainerDeleteSettings settings) {
            var baseCommand = "az functionapp config container delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config container set".
        /// Set a function app container's settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigContainer")]
        public static dynamic AzFunctionappConfigContainerSet(this ICakeContext context, AzFunctionappConfigContainerSetSettings settings) {
            var baseCommand = "az functionapp config container set";
            AppendIfNonNull(ref baseCommand, "--docker-custom-image-name", settings.DockerCustomImageName);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-password", settings.DockerRegistryServerPassword);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-url", settings.DockerRegistryServerUrl);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-user", settings.DockerRegistryServerUser);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config container show".
        /// Get details of a function app container's settings.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigContainer")]
        public static dynamic AzFunctionappConfigContainerShow(this ICakeContext context, AzFunctionappConfigContainerShowSettings settings) {
            var baseCommand = "az functionapp config container show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config hostname add".
        /// Bind a hostname to a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigHostname")]
        public static dynamic AzFunctionappConfigHostnameAdd(this ICakeContext context, AzFunctionappConfigHostnameAddSettings settings) {
            var baseCommand = "az functionapp config hostname add";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--hostname", settings.Hostname);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config hostname delete".
        /// Unbind a hostname from a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigHostname")]
        public static dynamic AzFunctionappConfigHostnameDelete(this ICakeContext context, AzFunctionappConfigHostnameDeleteSettings settings) {
            var baseCommand = "az functionapp config hostname delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--hostname", settings.Hostname);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config hostname get-external-ip".
        /// Get the external-facing IP address for a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigHostname")]
        public static dynamic AzFunctionappConfigHostnameGetExternalIp(this ICakeContext context, AzFunctionappConfigHostnameGetExternalIpSettings settings) {
            var baseCommand = "az functionapp config hostname get-external-ip";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config hostname list".
        /// List all hostname bindings for a function app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigHostname")]
        public static dynamic AzFunctionappConfigHostnameList(this ICakeContext context, AzFunctionappConfigHostnameListSettings settings) {
            var baseCommand = "az functionapp config hostname list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config ssl bind".
        /// Bind an SSL certificate to a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigSsl")]
        public static dynamic AzFunctionappConfigSslBind(this ICakeContext context, AzFunctionappConfigSslBindSettings settings) {
            var baseCommand = "az functionapp config ssl bind";
            AppendIfNonNull(ref baseCommand, "--certificate-thumbprint", settings.CertificateThumbprint);
            AppendIfNonNull(ref baseCommand, "--ssl-type", settings.SslType);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config ssl delete".
        /// Delete an SSL certificate from a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigSsl")]
        public static dynamic AzFunctionappConfigSslDelete(this ICakeContext context, AzFunctionappConfigSslDeleteSettings settings) {
            var baseCommand = "az functionapp config ssl delete";
            AppendIfNonNull(ref baseCommand, "--certificate-thumbprint", settings.CertificateThumbprint);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config ssl list".
        /// List SSL certificates for a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigSsl")]
        public static dynamic AzFunctionappConfigSslList(this ICakeContext context, AzFunctionappConfigSslListSettings settings) {
            var baseCommand = "az functionapp config ssl list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config ssl unbind".
        /// Unbind an SSL certificate from a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigSsl")]
        public static dynamic AzFunctionappConfigSslUnbind(this ICakeContext context, AzFunctionappConfigSslUnbindSettings settings) {
            var baseCommand = "az functionapp config ssl unbind";
            AppendIfNonNull(ref baseCommand, "--certificate-thumbprint", settings.CertificateThumbprint);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp config ssl upload".
        /// Upload an SSL certificate to a function app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigSsl")]
        public static dynamic AzFunctionappConfigSslUpload(this ICakeContext context, AzFunctionappConfigSslUploadSettings settings) {
            var baseCommand = "az functionapp config ssl upload";
            AppendIfNonNull(ref baseCommand, "--certificate-file", settings.CertificateFile);
            AppendIfNonNull(ref baseCommand, "--certificate-password", settings.CertificatePassword);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp cors add".
        /// Add allowed origins.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappCors")]
        public static dynamic AzFunctionappCorsAdd(this ICakeContext context, AzFunctionappCorsAddSettings settings) {
            var baseCommand = "az functionapp cors add";
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp cors remove".
        /// Remove allowed origins.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappCors")]
        public static dynamic AzFunctionappCorsRemove(this ICakeContext context, AzFunctionappCorsRemoveSettings settings) {
            var baseCommand = "az functionapp cors remove";
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp cors show".
        /// Show allowed origins.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappCors")]
        public static dynamic AzFunctionappCorsShow(this ICakeContext context, AzFunctionappCorsShowSettings settings) {
            var baseCommand = "az functionapp cors show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment list-publishing-credentials".
        /// Get the details for available function app publishing credentials.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeployment")]
        public static dynamic AzFunctionappDeploymentListPublishingCredentials(this ICakeContext context, AzFunctionappDeploymentListPublishingCredentialsSettings settings) {
            var baseCommand = "az functionapp deployment list-publishing-credentials";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment list-publishing-profiles".
        /// Get the details for available function app deployment profiles.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeployment")]
        public static dynamic AzFunctionappDeploymentListPublishingProfiles(this ICakeContext context, AzFunctionappDeploymentListPublishingProfilesSettings settings) {
            var baseCommand = "az functionapp deployment list-publishing-profiles";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment container config".
        /// Configure continuous deployment via containers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentContainer")]
        public static dynamic AzFunctionappDeploymentContainerConfig(this ICakeContext context, AzFunctionappDeploymentContainerConfigSettings settings) {
            var baseCommand = "az functionapp deployment container config";
            AppendIfNonNull(ref baseCommand, "--enable-cd", settings.EnableCd);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment container show-cd-url".
        /// Get the URL which can be used to configure webhooks for continuous deployment.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentContainer")]
        public static dynamic AzFunctionappDeploymentContainerShowCdUrl(this ICakeContext context, AzFunctionappDeploymentContainerShowCdUrlSettings settings) {
            var baseCommand = "az functionapp deployment container show-cd-url";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment slot auto-swap".
        /// Configure deployment slot auto swap.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSlot")]
        public static dynamic AzFunctionappDeploymentSlotAutoSwap(this ICakeContext context, AzFunctionappDeploymentSlotAutoSwapSettings settings) {
            var baseCommand = "az functionapp deployment slot auto-swap";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--auto-swap-slot", settings.AutoSwapSlot);
            AppendIfNonNull(ref baseCommand, "--disable", settings.Disable);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment slot create".
        /// Create a deployment slot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSlot")]
        public static dynamic AzFunctionappDeploymentSlotCreate(this ICakeContext context, AzFunctionappDeploymentSlotCreateSettings settings) {
            var baseCommand = "az functionapp deployment slot create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--configuration-source", settings.ConfigurationSource);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment slot delete".
        /// Delete a deployment slot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSlot")]
        public static dynamic AzFunctionappDeploymentSlotDelete(this ICakeContext context, AzFunctionappDeploymentSlotDeleteSettings settings) {
            var baseCommand = "az functionapp deployment slot delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment slot list".
        /// List all deployment slots.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSlot")]
        public static dynamic AzFunctionappDeploymentSlotList(this ICakeContext context, AzFunctionappDeploymentSlotListSettings settings) {
            var baseCommand = "az functionapp deployment slot list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment slot swap".
        /// Change deployment slots for a function app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSlot")]
        public static dynamic AzFunctionappDeploymentSlotSwap(this ICakeContext context, AzFunctionappDeploymentSlotSwapSettings settings) {
            var baseCommand = "az functionapp deployment slot swap";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--target-slot", settings.TargetSlot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment source config".
        /// Manage deployment from git or Mercurial repositories.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public static dynamic AzFunctionappDeploymentSourceConfig(this ICakeContext context, AzFunctionappDeploymentSourceConfigSettings settings) {
            var baseCommand = "az functionapp deployment source config";
            AppendIfNonNull(ref baseCommand, "--repo-url", settings.RepoUrl);
            AppendIfNonNull(ref baseCommand, "--branch", settings.Branch);
            AppendIfNonNull(ref baseCommand, "--git-token", settings.GitToken);
            AppendIfNonNull(ref baseCommand, "--manual-integration", settings.ManualIntegration);
            AppendIfNonNull(ref baseCommand, "--repository-type", settings.RepositoryType);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--app-working-dir", settings.AppWorkingDir);
            AppendIfNonNull(ref baseCommand, "--cd-account-create", settings.CdAccountCreate);
            AppendIfNonNull(ref baseCommand, "--cd-app-type", settings.CdAppType);
            AppendIfNonNull(ref baseCommand, "--cd-project-url", settings.CdProjectUrl);
            AppendIfNonNull(ref baseCommand, "--nodejs-task-runner", settings.NodejsTaskRunner);
            AppendIfNonNull(ref baseCommand, "--private-repo-password", settings.PrivateRepoPassword);
            AppendIfNonNull(ref baseCommand, "--private-repo-username", settings.PrivateRepoUsername);
            AppendIfNonNull(ref baseCommand, "--python-framework", settings.PythonFramework);
            AppendIfNonNull(ref baseCommand, "--python-version", settings.PythonVersion);
            AppendIfNonNull(ref baseCommand, "--slot-swap", settings.SlotSwap);
            AppendIfNonNull(ref baseCommand, "--test", settings.Test);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment source config-local-git".
        /// Get a URL for a git repository endpoint to clone and push to for function app deployment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public static dynamic AzFunctionappDeploymentSourceConfigLocalGit(this ICakeContext context, AzFunctionappDeploymentSourceConfigLocalGitSettings settings) {
            var baseCommand = "az functionapp deployment source config-local-git";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment source config-zip".
        /// Perform deployment using the kudu zip push deployment for a function app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public static dynamic AzFunctionappDeploymentSourceConfigZip(this ICakeContext context, AzFunctionappDeploymentSourceConfigZipSettings settings) {
            var baseCommand = "az functionapp deployment source config-zip";
            AppendIfNonNull(ref baseCommand, "--src", settings.Src);
            AppendIfNonNull(ref baseCommand, "--build-remote", settings.BuildRemote);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment source delete".
        /// Delete a source control deployment configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public static dynamic AzFunctionappDeploymentSourceDelete(this ICakeContext context, AzFunctionappDeploymentSourceDeleteSettings settings) {
            var baseCommand = "az functionapp deployment source delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment source show".
        /// Get the details of a source control deployment configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public static dynamic AzFunctionappDeploymentSourceShow(this ICakeContext context, AzFunctionappDeploymentSourceShowSettings settings) {
            var baseCommand = "az functionapp deployment source show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment source sync".
        /// Synchronize from the repository. Only needed under manual integration mode.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public static dynamic AzFunctionappDeploymentSourceSync(this ICakeContext context, AzFunctionappDeploymentSourceSyncSettings settings) {
            var baseCommand = "az functionapp deployment source sync";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment source update-token".
        /// Update source control token cached in Azure app service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public static dynamic AzFunctionappDeploymentSourceUpdateToken(this ICakeContext context, AzFunctionappDeploymentSourceUpdateTokenSettings settings) {
            var baseCommand = "az functionapp deployment source update-token";
            AppendIfNonNull(ref baseCommand, "--git-token", settings.GitToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment user set".
        /// Update deployment credentials.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentUser")]
        public static dynamic AzFunctionappDeploymentUserSet(this ICakeContext context, AzFunctionappDeploymentUserSetSettings settings) {
            var baseCommand = "az functionapp deployment user set";
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp deployment user show".
        /// Gets publishing user.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentUser")]
        public static dynamic AzFunctionappDeploymentUserShow(this ICakeContext context, AzFunctionappDeploymentUserShowSettings settings) {
            var baseCommand = "az functionapp deployment user show";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp devops-pipeline create".
        /// Create an Azure DevOps pipeline for a function app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDevopsPipeline")]
        public static dynamic AzFunctionappDevopsPipelineCreate(this ICakeContext context, AzFunctionappDevopsPipelineCreateSettings settings) {
            var baseCommand = "az functionapp devops-pipeline create";
            AppendIfNonNull(ref baseCommand, "--allow-force-push", settings.AllowForcePush);
            AppendIfNonNull(ref baseCommand, "--functionapp-name", settings.FunctionappName);
            AppendIfNonNull(ref baseCommand, "--github-pat", settings.GithubPat);
            AppendIfNonNull(ref baseCommand, "--github-repository", settings.GithubRepository);
            AppendIfNonNull(ref baseCommand, "--organization-name", settings.OrganizationName);
            AppendIfNonNull(ref baseCommand, "--overwrite-yaml", settings.OverwriteYaml);
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--repository-name", settings.RepositoryName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp hybrid-connection add".
        /// Add a hybrid-connection to a functionapp.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappHybridConnection")]
        public static dynamic AzFunctionappHybridConnectionAdd(this ICakeContext context, AzFunctionappHybridConnectionAddSettings settings) {
            var baseCommand = "az functionapp hybrid-connection add";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection", settings.HybridConnection);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp hybrid-connection list".
        /// List the hybrid-connections on a functionapp.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappHybridConnection")]
        public static dynamic AzFunctionappHybridConnectionList(this ICakeContext context, AzFunctionappHybridConnectionListSettings settings) {
            var baseCommand = "az functionapp hybrid-connection list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp hybrid-connection remove".
        /// Remove a hybrid-connection from a functionapp.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappHybridConnection")]
        public static dynamic AzFunctionappHybridConnectionRemove(this ICakeContext context, AzFunctionappHybridConnectionRemoveSettings settings) {
            var baseCommand = "az functionapp hybrid-connection remove";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection", settings.HybridConnection);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp identity assign".
        /// Assign or disable managed service identity to the web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappIdentity")]
        public static dynamic AzFunctionappIdentityAssign(this ICakeContext context, AzFunctionappIdentityAssignSettings settings) {
            var baseCommand = "az functionapp identity assign";
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp identity remove".
        /// Disable web app's managed service identity.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappIdentity")]
        public static dynamic AzFunctionappIdentityRemove(this ICakeContext context, AzFunctionappIdentityRemoveSettings settings) {
            var baseCommand = "az functionapp identity remove";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp identity show".
        /// Display web app's managed service identity.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappIdentity")]
        public static dynamic AzFunctionappIdentityShow(this ICakeContext context, AzFunctionappIdentityShowSettings settings) {
            var baseCommand = "az functionapp identity show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp plan create".
        /// Create an App Service Plan for an Azure Function.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappPlan")]
        public static dynamic AzFunctionappPlanCreate(this ICakeContext context, AzFunctionappPlanCreateSettings settings) {
            var baseCommand = "az functionapp plan create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--is-linux", settings.IsLinux);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--max-burst", settings.MaxBurst);
            AppendIfNonNull(ref baseCommand, "--min-instances", settings.MinInstances);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp plan delete".
        /// Delete an App Service Plan.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappPlan")]
        public static dynamic AzFunctionappPlanDelete(this ICakeContext context, AzFunctionappPlanDeleteSettings settings) {
            var baseCommand = "az functionapp plan delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp plan list".
        /// List App Service Plans.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappPlan")]
        public static dynamic AzFunctionappPlanList(this ICakeContext context, AzFunctionappPlanListSettings settings) {
            var baseCommand = "az functionapp plan list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp plan show".
        /// Get the App Service Plans for a resource group or a set of resource groups.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappPlan")]
        public static dynamic AzFunctionappPlanShow(this ICakeContext context, AzFunctionappPlanShowSettings settings) {
            var baseCommand = "az functionapp plan show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp plan update".
        /// Update an App Service plan for an Azure Function.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappPlan")]
        public static dynamic AzFunctionappPlanUpdate(this ICakeContext context, AzFunctionappPlanUpdateSettings settings) {
            var baseCommand = "az functionapp plan update";
            AppendIfNonNull(ref baseCommand, "--max-burst", settings.MaxBurst);
            AppendIfNonNull(ref baseCommand, "--min-instances", settings.MinInstances);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp vnet-integration add".
        /// Add a regional virtual network integration to a functionapp.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappVnetIntegration")]
        public static dynamic AzFunctionappVnetIntegrationAdd(this ICakeContext context, AzFunctionappVnetIntegrationAddSettings settings) {
            var baseCommand = "az functionapp vnet-integration add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp vnet-integration list".
        /// List the virtual network integrations on a functionapp.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappVnetIntegration")]
        public static dynamic AzFunctionappVnetIntegrationList(this ICakeContext context, AzFunctionappVnetIntegrationListSettings settings) {
            var baseCommand = "az functionapp vnet-integration list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az functionapp vnet-integration remove".
        /// Remove a regional virtual network integration from functionapp.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappVnetIntegration")]
        public static dynamic AzFunctionappVnetIntegrationRemove(this ICakeContext context, AzFunctionappVnetIntegrationRemoveSettings settings) {
            var baseCommand = "az functionapp vnet-integration remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group create".
        /// Create a new resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public static dynamic AzGroupCreate(this ICakeContext context, AzGroupCreateSettings settings) {
            var baseCommand = "az group create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group delete".
        /// Delete a resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public static dynamic AzGroupDelete(this ICakeContext context, AzGroupDeleteSettings settings) {
            var baseCommand = "az group delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group exists".
        /// Check if a resource group exists.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public static dynamic AzGroupExists(this ICakeContext context, AzGroupExistsSettings settings) {
            var baseCommand = "az group exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group export".
        /// Captures a resource group as a template.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public static dynamic AzGroupExport(this ICakeContext context, AzGroupExportSettings settings) {
            var baseCommand = "az group export";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--include-comments", settings.IncludeComments);
            AppendIfNonNull(ref baseCommand, "--include-parameter-default-value", settings.IncludeParameterDefaultValue);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group list".
        /// List resource groups.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public static dynamic AzGroupList(this ICakeContext context, AzGroupListSettings settings) {
            var baseCommand = "az group list";
            AppendIfNonNull(ref baseCommand, "--tag", settings.Tag);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group show".
        /// Gets a resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public static dynamic AzGroupShow(this ICakeContext context, AzGroupShowSettings settings) {
            var baseCommand = "az group show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group update".
        /// Update a resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public static dynamic AzGroupUpdate(this ICakeContext context, AzGroupUpdateSettings settings) {
            var baseCommand = "az group update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group wait".
        /// Place the CLI in a waiting state until a condition of the resource group is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public static dynamic AzGroupWait(this ICakeContext context, AzGroupWaitSettings settings) {
            var baseCommand = "az group wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group deployment create".
        /// Start a deployment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public static dynamic AzGroupDeploymentCreate(this ICakeContext context, AzGroupDeploymentCreateSettings settings) {
            var baseCommand = "az group deployment create";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--handle-extended-json-format", settings.HandleExtendedJsonFormat);
            AppendIfNonNull(ref baseCommand, "--mode", settings.Mode);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--rollback-on-error", settings.RollbackOnError);
            AppendIfNonNull(ref baseCommand, "--template-file", settings.TemplateFile);
            AppendIfNonNull(ref baseCommand, "--template-uri", settings.TemplateUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group deployment delete".
        /// Deletes a deployment from the deployment history.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public static dynamic AzGroupDeploymentDelete(this ICakeContext context, AzGroupDeploymentDeleteSettings settings) {
            var baseCommand = "az group deployment delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group deployment export".
        /// Export the template used for a deployment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public static dynamic AzGroupDeploymentExport(this ICakeContext context, AzGroupDeploymentExportSettings settings) {
            var baseCommand = "az group deployment export";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group deployment list".
        /// Get all the deployments for a resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public static dynamic AzGroupDeploymentList(this ICakeContext context, AzGroupDeploymentListSettings settings) {
            var baseCommand = "az group deployment list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group deployment show".
        /// Gets a deployment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public static dynamic AzGroupDeploymentShow(this ICakeContext context, AzGroupDeploymentShowSettings settings) {
            var baseCommand = "az group deployment show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group deployment validate".
        /// Validate whether a template is syntactically correct.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public static dynamic AzGroupDeploymentValidate(this ICakeContext context, AzGroupDeploymentValidateSettings settings) {
            var baseCommand = "az group deployment validate";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--handle-extended-json-format", settings.HandleExtendedJsonFormat);
            AppendIfNonNull(ref baseCommand, "--mode", settings.Mode);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--rollback-on-error", settings.RollbackOnError);
            AppendIfNonNull(ref baseCommand, "--template-file", settings.TemplateFile);
            AppendIfNonNull(ref baseCommand, "--template-uri", settings.TemplateUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group deployment wait".
        /// Place the CLI in a waiting state until a deployment condition is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public static dynamic AzGroupDeploymentWait(this ICakeContext context, AzGroupDeploymentWaitSettings settings) {
            var baseCommand = "az group deployment wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group deployment operation list".
        /// Gets all deployments operations for a deployment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeploymentOperation")]
        public static dynamic AzGroupDeploymentOperationList(this ICakeContext context, AzGroupDeploymentOperationListSettings settings) {
            var baseCommand = "az group deployment operation list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group deployment operation show".
        /// Get a deployment's operation.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeploymentOperation")]
        public static dynamic AzGroupDeploymentOperationShow(this ICakeContext context, AzGroupDeploymentOperationShowSettings settings) {
            var baseCommand = "az group deployment operation show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--operation-ids", settings.OperationIds);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group lock create".
        /// Create a resource group lock.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupLock")]
        public static dynamic AzGroupLockCreate(this ICakeContext context, AzGroupLockCreateSettings settings) {
            var baseCommand = "az group lock create";
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group lock delete".
        /// Delete a resource group lock.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupLock")]
        public static dynamic AzGroupLockDelete(this ICakeContext context, AzGroupLockDeleteSettings settings) {
            var baseCommand = "az group lock delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group lock list".
        /// List lock information in the resource-group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupLock")]
        public static dynamic AzGroupLockList(this ICakeContext context, AzGroupLockListSettings settings) {
            var baseCommand = "az group lock list";
            AppendIfNonNull(ref baseCommand, "--filter-string", settings.FilterString);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group lock show".
        /// Show the details of a resource group lock.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupLock")]
        public static dynamic AzGroupLockShow(this ICakeContext context, AzGroupLockShowSettings settings) {
            var baseCommand = "az group lock show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az group lock update".
        /// Update a resource group lock.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupLock")]
        public static dynamic AzGroupLockUpdate(this ICakeContext context, AzGroupLockUpdateSettings settings) {
            var baseCommand = "az group lock update";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight create".
        /// Create a new cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public static dynamic AzHdinsightCreate(this ICakeContext context, AzHdinsightCreateSettings settings) {
            var baseCommand = "az hdinsight create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-validation-timeout", settings.NoValidationTimeout);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--cluster-configurations", settings.ClusterConfigurations);
            AppendIfNonNull(ref baseCommand, "--cluster-tier", settings.ClusterTier);
            AppendIfNonNull(ref baseCommand, "--component-version", settings.ComponentVersion);
            AppendIfNonNull(ref baseCommand, "--esp", settings.Esp);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--encryption-algorithm", settings.EncryptionAlgorithm);
            AppendIfNonNull(ref baseCommand, "--encryption-key-name", settings.EncryptionKeyName);
            AppendIfNonNull(ref baseCommand, "--encryption-key-version", settings.EncryptionKeyVersion);
            AppendIfNonNull(ref baseCommand, "--encryption-vault-uri", settings.EncryptionVaultUri);
            AppendIfNonNull(ref baseCommand, "--cluster-admin-account", settings.ClusterAdminAccount);
            AppendIfNonNull(ref baseCommand, "--cluster-admin-password", settings.ClusterAdminPassword);
            AppendIfNonNull(ref baseCommand, "--cluster-users-group-dns", settings.ClusterUsersGroupDns);
            AppendIfNonNull(ref baseCommand, "--domain", settings.Domain);
            AppendIfNonNull(ref baseCommand, "--ldaps-urls", settings.LdapsUrls);
            AppendIfNonNull(ref baseCommand, "--http-password", settings.HttpPassword);
            AppendIfNonNull(ref baseCommand, "--http-user", settings.HttpUser);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--edgenode-size", settings.EdgenodeSize);
            AppendIfNonNull(ref baseCommand, "--headnode-size", settings.HeadnodeSize);
            AppendIfNonNull(ref baseCommand, "--workernode-count", settings.WorkernodeCount);
            AppendIfNonNull(ref baseCommand, "--workernode-data-disk-size", settings.WorkernodeDataDiskSize);
            AppendIfNonNull(ref baseCommand, "--workernode-data-disk-storage-account-type", settings.WorkernodeDataDiskStorageAccountType);
            AppendIfNonNull(ref baseCommand, "--workernode-data-disks-per-node", settings.WorkernodeDataDisksPerNode);
            AppendIfNonNull(ref baseCommand, "--workernode-size", settings.WorkernodeSize);
            AppendIfNonNull(ref baseCommand, "--zookeepernode-size", settings.ZookeepernodeSize);
            AppendIfNonNull(ref baseCommand, "--ssh-password", settings.SshPassword);
            AppendIfNonNull(ref baseCommand, "--ssh-public-key", settings.SshPublicKey);
            AppendIfNonNull(ref baseCommand, "--ssh-user", settings.SshUser);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--storage-account-key", settings.StorageAccountKey);
            AppendIfNonNull(ref baseCommand, "--storage-account-managed-identity", settings.StorageAccountManagedIdentity);
            AppendIfNonNull(ref baseCommand, "--storage-container", settings.StorageContainer);
            AppendIfNonNull(ref baseCommand, "--storage-filesystem", settings.StorageFilesystem);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight delete".
        /// Deletes the specified HDInsight cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public static dynamic AzHdinsightDelete(this ICakeContext context, AzHdinsightDeleteSettings settings) {
            var baseCommand = "az hdinsight delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight list".
        /// List HDInsight clusters in a resource group or subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public static dynamic AzHdinsightList(this ICakeContext context, AzHdinsightListSettings settings) {
            var baseCommand = "az hdinsight list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight list-usage".
        /// Lists the usages for the specified location.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public static dynamic AzHdinsightListUsage(this ICakeContext context, AzHdinsightListUsageSettings settings) {
            var baseCommand = "az hdinsight list-usage";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight resize".
        /// Resizes the specified HDInsight cluster to the specified size.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public static dynamic AzHdinsightResize(this ICakeContext context, AzHdinsightResizeSettings settings) {
            var baseCommand = "az hdinsight resize";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workernode-count", settings.WorkernodeCount);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight rotate-disk-encryption-key".
        /// Rotate the disk encryption key of the specified HDInsight cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public static dynamic AzHdinsightRotateDiskEncryptionKey(this ICakeContext context, AzHdinsightRotateDiskEncryptionKeySettings settings) {
            var baseCommand = "az hdinsight rotate-disk-encryption-key";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--encryption-key-name", settings.EncryptionKeyName);
            AppendIfNonNull(ref baseCommand, "--encryption-key-version", settings.EncryptionKeyVersion);
            AppendIfNonNull(ref baseCommand, "--encryption-vault-uri", settings.EncryptionVaultUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight show".
        /// Gets the specified cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public static dynamic AzHdinsightShow(this ICakeContext context, AzHdinsightShowSettings settings) {
            var baseCommand = "az hdinsight show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight update".
        /// Patch HDInsight cluster with the specified parameters.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public static dynamic AzHdinsightUpdate(this ICakeContext context, AzHdinsightUpdateSettings settings) {
            var baseCommand = "az hdinsight update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight wait".
        /// Place the CLI in a waiting state until an operation is complete.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public static dynamic AzHdinsightWait(this ICakeContext context, AzHdinsightWaitSettings settings) {
            var baseCommand = "az hdinsight wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight application create".
        /// Create an application for a HDInsight cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightApplication")]
        public static dynamic AzHdinsightApplicationCreate(this ICakeContext context, AzHdinsightApplicationCreateSettings settings) {
            var baseCommand = "az hdinsight application create";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--marketplace-id", settings.MarketplaceId);
            AppendIfNonNull(ref baseCommand, "--no-validation-timeout", settings.NoValidationTimeout);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--access-mode", settings.AccessMode);
            AppendIfNonNull(ref baseCommand, "--destination-port", settings.DestinationPort);
            AppendIfNonNull(ref baseCommand, "--disable-gateway-auth", settings.DisableGatewayAuth);
            AppendIfNonNull(ref baseCommand, "--sub-domain-suffix", settings.SubDomainSuffix);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--edgenode-size", settings.EdgenodeSize);
            AppendIfNonNull(ref baseCommand, "--ssh-password", settings.SshPassword);
            AppendIfNonNull(ref baseCommand, "--ssh-public-key", settings.SshPublicKey);
            AppendIfNonNull(ref baseCommand, "--ssh-user", settings.SshUser);
            AppendIfNonNull(ref baseCommand, "--script-action-name", settings.ScriptActionName);
            AppendIfNonNull(ref baseCommand, "--script-uri", settings.ScriptUri);
            AppendIfNonNull(ref baseCommand, "--script-parameters", settings.ScriptParameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight application delete".
        /// Deletes the specified application on the HDInsight cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightApplication")]
        public static dynamic AzHdinsightApplicationDelete(this ICakeContext context, AzHdinsightApplicationDeleteSettings settings) {
            var baseCommand = "az hdinsight application delete";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight application list".
        /// Lists all of the applications for the HDInsight cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightApplication")]
        public static dynamic AzHdinsightApplicationList(this ICakeContext context, AzHdinsightApplicationListSettings settings) {
            var baseCommand = "az hdinsight application list";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight application show".
        /// Gets properties of the specified application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightApplication")]
        public static dynamic AzHdinsightApplicationShow(this ICakeContext context, AzHdinsightApplicationShowSettings settings) {
            var baseCommand = "az hdinsight application show";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight application wait".
        /// Place the CLI in a waiting state until an operation is complete.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightApplication")]
        public static dynamic AzHdinsightApplicationWait(this ICakeContext context, AzHdinsightApplicationWaitSettings settings) {
            var baseCommand = "az hdinsight application wait";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight monitor disable".
        /// Disable the Azure Monitor logs integration on an HDInsight cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightMonitor")]
        public static dynamic AzHdinsightMonitorDisable(this ICakeContext context, AzHdinsightMonitorDisableSettings settings) {
            var baseCommand = "az hdinsight monitor disable";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight monitor enable".
        /// Enable the Azure Monitor logs integration on an HDInsight cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightMonitor")]
        public static dynamic AzHdinsightMonitorEnable(this ICakeContext context, AzHdinsightMonitorEnableSettings settings) {
            var baseCommand = "az hdinsight monitor enable";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace", settings.Workspace);
            AppendIfNonNull(ref baseCommand, "--no-validation-timeout", settings.NoValidationTimeout);
            AppendIfNonNull(ref baseCommand, "--primary-key", settings.PrimaryKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight monitor show".
        /// Get the status of Azure Monitor logs integration on an HDInsight cluster.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightMonitor")]
        public static dynamic AzHdinsightMonitorShow(this ICakeContext context, AzHdinsightMonitorShowSettings settings) {
            var baseCommand = "az hdinsight monitor show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight script-action delete".
        /// Deletes a specified persisted script action of the cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightScriptAction")]
        public static dynamic AzHdinsightScriptActionDelete(this ICakeContext context, AzHdinsightScriptActionDeleteSettings settings) {
            var baseCommand = "az hdinsight script-action delete";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight script-action execute".
        /// Execute script actions on the specified HDInsight cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightScriptAction")]
        public static dynamic AzHdinsightScriptActionExecute(this ICakeContext context, AzHdinsightScriptActionExecuteSettings settings) {
            var baseCommand = "az hdinsight script-action execute";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--roles", settings.Roles);
            AppendIfNonNull(ref baseCommand, "--script-uri", settings.ScriptUri);
            AppendIfNonNull(ref baseCommand, "--persist-on-success", settings.PersistOnSuccess);
            AppendIfNonNull(ref baseCommand, "--script-parameters", settings.ScriptParameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight script-action list".
        /// Lists all the persisted script actions for the specified cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightScriptAction")]
        public static dynamic AzHdinsightScriptActionList(this ICakeContext context, AzHdinsightScriptActionListSettings settings) {
            var baseCommand = "az hdinsight script-action list";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight script-action list-execution-history".
        /// Lists all scripts' execution history for the specified cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightScriptAction")]
        public static dynamic AzHdinsightScriptActionListExecutionHistory(this ICakeContext context, AzHdinsightScriptActionListExecutionHistorySettings settings) {
            var baseCommand = "az hdinsight script-action list-execution-history";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight script-action promote".
        /// Promotes the specified ad-hoc script execution to a persisted script.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightScriptAction")]
        public static dynamic AzHdinsightScriptActionPromote(this ICakeContext context, AzHdinsightScriptActionPromoteSettings settings) {
            var baseCommand = "az hdinsight script-action promote";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--execution-id", settings.ExecutionId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az hdinsight script-action show-execution-details".
        /// Gets the script execution detail for the given script execution ID.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightScriptAction")]
        public static dynamic AzHdinsightScriptActionShowExecutionDetails(this ICakeContext context, AzHdinsightScriptActionShowExecutionDetailsSettings settings) {
            var baseCommand = "az hdinsight script-action show-execution-details";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--execution-id", settings.ExecutionId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az identity create".
        /// Create or update an identity in the specified subscription and resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIdentity")]
        public static dynamic AzIdentityCreate(this ICakeContext context, AzIdentityCreateSettings settings) {
            var baseCommand = "az identity create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az identity delete".
        /// Deletes the identity.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIdentity")]
        public static dynamic AzIdentityDelete(this ICakeContext context, AzIdentityDeleteSettings settings) {
            var baseCommand = "az identity delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az identity list".
        /// List Managed Service Identities.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIdentity")]
        public static dynamic AzIdentityList(this ICakeContext context, AzIdentityListSettings settings) {
            var baseCommand = "az identity list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az identity list-operations".
        /// Lists available operations for the Managed Identity provider.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIdentity")]
        public static dynamic AzIdentityListOperations(this ICakeContext context, AzIdentityListOperationsSettings settings) {
            var baseCommand = "az identity list-operations";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az identity show".
        /// Gets the identity.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIdentity")]
        public static dynamic AzIdentityShow(this ICakeContext context, AzIdentityShowSettings settings) {
            var baseCommand = "az identity show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image create".
        /// Create a custom Virtual Machine Image from managed disks or snapshots.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImage")]
        public static dynamic AzImageCreate(this ICakeContext context, AzImageCreateSettings settings) {
            var baseCommand = "az image create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--data-disk-caching", settings.DataDiskCaching);
            AppendIfNonNull(ref baseCommand, "--data-disk-sources", settings.DataDiskSources);
            AppendIfNonNull(ref baseCommand, "--hyper-v-generation", settings.HyperVGeneration);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--os-disk-caching", settings.OsDiskCaching);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--storage-sku", settings.StorageSku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-resilient", settings.ZoneResilient);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image delete".
        /// Deletes an Image.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImage")]
        public static dynamic AzImageDelete(this ICakeContext context, AzImageDeleteSettings settings) {
            var baseCommand = "az image delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image list".
        /// List custom VM images.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImage")]
        public static dynamic AzImageList(this ICakeContext context, AzImageListSettings settings) {
            var baseCommand = "az image list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image show".
        /// Gets an image.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImage")]
        public static dynamic AzImageShow(this ICakeContext context, AzImageShowSettings settings) {
            var baseCommand = "az image show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image update".
        /// Update custom VM images.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImage")]
        public static dynamic AzImageUpdate(this ICakeContext context, AzImageUpdateSettings settings) {
            var baseCommand = "az image update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template create".
        /// Create an image builder template.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public static dynamic AzImageTemplateCreate(this ICakeContext context, AzImageTemplateCreateSettings settings) {
            var baseCommand = "az image template create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--build-timeout", settings.BuildTimeout);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--scripts", settings.Scripts);
            AppendIfNonNull(ref baseCommand, "--checksum", settings.Checksum);
            AppendIfNonNull(ref baseCommand, "--image-source", settings.ImageSource);
            AppendIfNonNull(ref baseCommand, "--managed-image-destinations", settings.ManagedImageDestinations);
            AppendIfNonNull(ref baseCommand, "--shared-image-destinations", settings.SharedImageDestinations);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template delete".
        /// Delete image builder template.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public static dynamic AzImageTemplateDelete(this ICakeContext context, AzImageTemplateDeleteSettings settings) {
            var baseCommand = "az image template delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template list".
        /// List image builder templates.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public static dynamic AzImageTemplateList(this ICakeContext context, AzImageTemplateListSettings settings) {
            var baseCommand = "az image template list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template run".
        /// Build an image builder template.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public static dynamic AzImageTemplateRun(this ICakeContext context, AzImageTemplateRunSettings settings) {
            var baseCommand = "az image template run";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template show".
        /// Show an image builder template.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public static dynamic AzImageTemplateShow(this ICakeContext context, AzImageTemplateShowSettings settings) {
            var baseCommand = "az image template show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template show-runs".
        /// Show an image builder template's run outputs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public static dynamic AzImageTemplateShowRuns(this ICakeContext context, AzImageTemplateShowRunsSettings settings) {
            var baseCommand = "az image template show-runs";
            AppendIfNonNull(ref baseCommand, "--output-name", settings.OutputName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template update".
        /// Update an image builder template.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public static dynamic AzImageTemplateUpdate(this ICakeContext context, AzImageTemplateUpdateSettings settings) {
            var baseCommand = "az image template update";
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template wait".
        /// Place the CLI in a waiting state until a condition of the template is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public static dynamic AzImageTemplateWait(this ICakeContext context, AzImageTemplateWaitSettings settings) {
            var baseCommand = "az image template wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template customizer add".
        /// Add an image builder customizer to an image builder template.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplateCustomizer")]
        public static dynamic AzImageTemplateCustomizerAdd(this ICakeContext context, AzImageTemplateCustomizerAddSettings settings) {
            var baseCommand = "az image template customizer add";
            AppendIfNonNull(ref baseCommand, "--customizer-name", settings.CustomizerName);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--dest-path", settings.DestPath);
            AppendIfNonNull(ref baseCommand, "--file-source", settings.FileSource);
            AppendIfNonNull(ref baseCommand, "--exit-codes", settings.ExitCodes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--inline-script", settings.InlineScript);
            AppendIfNonNull(ref baseCommand, "--script-url", settings.ScriptUrl);
            AppendIfNonNull(ref baseCommand, "--restart-check-command", settings.RestartCheckCommand);
            AppendIfNonNull(ref baseCommand, "--restart-command", settings.RestartCommand);
            AppendIfNonNull(ref baseCommand, "--restart-timeout", settings.RestartTimeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template customizer clear".
        /// Remove all image builder customizers from an image builder template.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplateCustomizer")]
        public static dynamic AzImageTemplateCustomizerClear(this ICakeContext context, AzImageTemplateCustomizerClearSettings settings) {
            var baseCommand = "az image template customizer clear";
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template customizer remove".
        /// Remove an image builder customizer from an image builder template.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplateCustomizer")]
        public static dynamic AzImageTemplateCustomizerRemove(this ICakeContext context, AzImageTemplateCustomizerRemoveSettings settings) {
            var baseCommand = "az image template customizer remove";
            AppendIfNonNull(ref baseCommand, "--customizer-name", settings.CustomizerName);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template output add".
        /// Add an image builder output distributor to an image builder template.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplateOutput")]
        public static dynamic AzImageTemplateOutputAdd(this ICakeContext context, AzImageTemplateOutputAddSettings settings) {
            var baseCommand = "az image template output add";
            AppendIfNonNull(ref baseCommand, "--artifact-tags", settings.ArtifactTags);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--output-name", settings.OutputName);
            AppendIfNonNull(ref baseCommand, "--managed-image", settings.ManagedImage);
            AppendIfNonNull(ref baseCommand, "--managed-image-location", settings.ManagedImageLocation);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--gallery-replication-regions", settings.GalleryReplicationRegions);
            AppendIfNonNull(ref baseCommand, "--is-vhd", settings.IsVhd);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template output clear".
        /// Remove all image builder output distributors from an image builder template.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplateOutput")]
        public static dynamic AzImageTemplateOutputClear(this ICakeContext context, AzImageTemplateOutputClearSettings settings) {
            var baseCommand = "az image template output clear";
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az image template output remove".
        /// Remove an image builder output distributor from an image builder template.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplateOutput")]
        public static dynamic AzImageTemplateOutputRemove(this ICakeContext context, AzImageTemplateOutputRemoveSettings settings) {
            var baseCommand = "az image template output remove";
            AppendIfNonNull(ref baseCommand, "--output-name", settings.OutputName);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps create".
        /// Create an Azure IoT Hub device provisioning service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDps")]
        public static dynamic AzIotDpsCreate(this ICakeContext context, AzIotDpsCreateSettings settings) {
            var baseCommand = "az iot dps create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--unit", settings.Unit);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps delete".
        /// Delete an Azure IoT Hub device provisioning service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDps")]
        public static dynamic AzIotDpsDelete(this ICakeContext context, AzIotDpsDeleteSettings settings) {
            var baseCommand = "az iot dps delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps list".
        /// List Azure IoT Hub device provisioning services.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDps")]
        public static dynamic AzIotDpsList(this ICakeContext context, AzIotDpsListSettings settings) {
            var baseCommand = "az iot dps list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps show".
        /// Get the details of an Azure IoT Hub device provisioning service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDps")]
        public static dynamic AzIotDpsShow(this ICakeContext context, AzIotDpsShowSettings settings) {
            var baseCommand = "az iot dps show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps update".
        /// Update an Azure IoT Hub device provisioning service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDps")]
        public static dynamic AzIotDpsUpdate(this ICakeContext context, AzIotDpsUpdateSettings settings) {
            var baseCommand = "az iot dps update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps access-policy create".
        /// Create a new shared access policy in an Azure IoT Hub device provisioning service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsAccessPolicy")]
        public static dynamic AzIotDpsAccessPolicyCreate(this ICakeContext context, AzIotDpsAccessPolicyCreateSettings settings) {
            var baseCommand = "az iot dps access-policy create";
            AppendIfNonNull(ref baseCommand, "--access-policy-name", settings.AccessPolicyName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--primary-key", settings.PrimaryKey);
            AppendIfNonNull(ref baseCommand, "--secondary-key", settings.SecondaryKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps access-policy delete".
        /// Delete a shared access policies in an Azure IoT Hub device provisioning service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsAccessPolicy")]
        public static dynamic AzIotDpsAccessPolicyDelete(this ICakeContext context, AzIotDpsAccessPolicyDeleteSettings settings) {
            var baseCommand = "az iot dps access-policy delete";
            AppendIfNonNull(ref baseCommand, "--access-policy-name", settings.AccessPolicyName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps access-policy list".
        /// List all shared access policies in an Azure IoT Hub device provisioning service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsAccessPolicy")]
        public static dynamic AzIotDpsAccessPolicyList(this ICakeContext context, AzIotDpsAccessPolicyListSettings settings) {
            var baseCommand = "az iot dps access-policy list";
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps access-policy show".
        /// Show details of a shared access policies in an Azure IoT Hub device provisioning service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsAccessPolicy")]
        public static dynamic AzIotDpsAccessPolicyShow(this ICakeContext context, AzIotDpsAccessPolicyShowSettings settings) {
            var baseCommand = "az iot dps access-policy show";
            AppendIfNonNull(ref baseCommand, "--access-policy-name", settings.AccessPolicyName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps access-policy update".
        /// Update a shared access policy in an Azure IoT Hub device provisioning service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsAccessPolicy")]
        public static dynamic AzIotDpsAccessPolicyUpdate(this ICakeContext context, AzIotDpsAccessPolicyUpdateSettings settings) {
            var baseCommand = "az iot dps access-policy update";
            AppendIfNonNull(ref baseCommand, "--access-policy-name", settings.AccessPolicyName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--primary-key", settings.PrimaryKey);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--secondary-key", settings.SecondaryKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps certificate create".
        /// Create/upload an Azure IoT Hub Device Provisioning Service certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public static dynamic AzIotDpsCertificateCreate(this ICakeContext context, AzIotDpsCertificateCreateSettings settings) {
            var baseCommand = "az iot dps certificate create";
            AppendIfNonNull(ref baseCommand, "--certificate-name", settings.CertificateName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps certificate delete".
        /// Delete an Azure IoT Hub Device Provisioning Service certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public static dynamic AzIotDpsCertificateDelete(this ICakeContext context, AzIotDpsCertificateDeleteSettings settings) {
            var baseCommand = "az iot dps certificate delete";
            AppendIfNonNull(ref baseCommand, "--certificate-name", settings.CertificateName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps certificate generate-verification-code".
        /// Generate a verification code for an Azure IoT Hub Device Provisioning Service certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public static dynamic AzIotDpsCertificateGenerateVerificationCode(this ICakeContext context, AzIotDpsCertificateGenerateVerificationCodeSettings settings) {
            var baseCommand = "az iot dps certificate generate-verification-code";
            AppendIfNonNull(ref baseCommand, "--certificate-name", settings.CertificateName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps certificate list".
        /// List all certificates contained within an Azure IoT Hub device provisioning service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public static dynamic AzIotDpsCertificateList(this ICakeContext context, AzIotDpsCertificateListSettings settings) {
            var baseCommand = "az iot dps certificate list";
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps certificate show".
        /// Show information about a particular Azure IoT Hub Device Provisioning Service certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public static dynamic AzIotDpsCertificateShow(this ICakeContext context, AzIotDpsCertificateShowSettings settings) {
            var baseCommand = "az iot dps certificate show";
            AppendIfNonNull(ref baseCommand, "--certificate-name", settings.CertificateName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps certificate update".
        /// Update an Azure IoT Hub Device Provisioning Service certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public static dynamic AzIotDpsCertificateUpdate(this ICakeContext context, AzIotDpsCertificateUpdateSettings settings) {
            var baseCommand = "az iot dps certificate update";
            AppendIfNonNull(ref baseCommand, "--certificate-name", settings.CertificateName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps certificate verify".
        /// Verify an Azure IoT Hub Device Provisioning Service certificate.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public static dynamic AzIotDpsCertificateVerify(this ICakeContext context, AzIotDpsCertificateVerifySettings settings) {
            var baseCommand = "az iot dps certificate verify";
            AppendIfNonNull(ref baseCommand, "--certificate-name", settings.CertificateName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps linked-hub create".
        /// Create a linked IoT hub in an Azure IoT Hub device provisioning service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsLinkedHub")]
        public static dynamic AzIotDpsLinkedHubCreate(this ICakeContext context, AzIotDpsLinkedHubCreateSettings settings) {
            var baseCommand = "az iot dps linked-hub create";
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allocation-weight", settings.AllocationWeight);
            AppendIfNonNull(ref baseCommand, "--apply-allocation-policy", settings.ApplyAllocationPolicy);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps linked-hub delete".
        /// Update a linked IoT hub in an Azure IoT Hub device provisioning service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsLinkedHub")]
        public static dynamic AzIotDpsLinkedHubDelete(this ICakeContext context, AzIotDpsLinkedHubDeleteSettings settings) {
            var baseCommand = "az iot dps linked-hub delete";
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--linked-hub", settings.LinkedHub);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps linked-hub list".
        /// List all linked IoT hubs in an Azure IoT Hub device provisioning service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsLinkedHub")]
        public static dynamic AzIotDpsLinkedHubList(this ICakeContext context, AzIotDpsLinkedHubListSettings settings) {
            var baseCommand = "az iot dps linked-hub list";
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps linked-hub show".
        /// Show details of a linked IoT hub in an Azure IoT Hub device provisioning service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsLinkedHub")]
        public static dynamic AzIotDpsLinkedHubShow(this ICakeContext context, AzIotDpsLinkedHubShowSettings settings) {
            var baseCommand = "az iot dps linked-hub show";
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--linked-hub", settings.LinkedHub);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot dps linked-hub update".
        /// Update a linked IoT hub in an Azure IoT Hub device provisioning service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsLinkedHub")]
        public static dynamic AzIotDpsLinkedHubUpdate(this ICakeContext context, AzIotDpsLinkedHubUpdateSettings settings) {
            var baseCommand = "az iot dps linked-hub update";
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--linked-hub", settings.LinkedHub);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allocation-weight", settings.AllocationWeight);
            AppendIfNonNull(ref baseCommand, "--apply-allocation-policy", settings.ApplyAllocationPolicy);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub create".
        /// Create an Azure IoT hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public static dynamic AzIotHubCreate(this ICakeContext context, AzIotHubCreateSettings settings) {
            var baseCommand = "az iot hub create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--c2d-max-delivery-count", settings.C2dMaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--c2d-ttl", settings.C2dTtl);
            AppendIfNonNull(ref baseCommand, "--fc", settings.Fc);
            AppendIfNonNull(ref baseCommand, "--fcs", settings.Fcs);
            AppendIfNonNull(ref baseCommand, "--fd", settings.Fd);
            AppendIfNonNull(ref baseCommand, "--feedback-lock-duration", settings.FeedbackLockDuration);
            AppendIfNonNull(ref baseCommand, "--feedback-ttl", settings.FeedbackTtl);
            AppendIfNonNull(ref baseCommand, "--fileupload-notification-max-delivery-count", settings.FileuploadNotificationMaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--fileupload-notification-ttl", settings.FileuploadNotificationTtl);
            AppendIfNonNull(ref baseCommand, "--fileupload-notifications", settings.FileuploadNotifications);
            AppendIfNonNull(ref baseCommand, "--fileupload-sas-ttl", settings.FileuploadSasTtl);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--partition-count", settings.PartitionCount);
            AppendIfNonNull(ref baseCommand, "--rd", settings.Rd);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--unit", settings.Unit);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub delete".
        /// Delete an IoT hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public static dynamic AzIotHubDelete(this ICakeContext context, AzIotHubDeleteSettings settings) {
            var baseCommand = "az iot hub delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub list".
        /// List IoT hubs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public static dynamic AzIotHubList(this ICakeContext context, AzIotHubListSettings settings) {
            var baseCommand = "az iot hub list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub list-skus".
        /// List available pricing tiers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public static dynamic AzIotHubListSkus(this ICakeContext context, AzIotHubListSkusSettings settings) {
            var baseCommand = "az iot hub list-skus";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub manual-failover".
        /// Initiate a manual failover for the IoT Hub to the geo-paired disaster recovery region.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public static dynamic AzIotHubManualFailover(this ICakeContext context, AzIotHubManualFailoverSettings settings) {
            var baseCommand = "az iot hub manual-failover";
            AppendIfNonNull(ref baseCommand, "--failover-region", settings.FailoverRegion);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub show".
        /// Get the details of an IoT hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public static dynamic AzIotHubShow(this ICakeContext context, AzIotHubShowSettings settings) {
            var baseCommand = "az iot hub show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub show-connection-string".
        /// Show the connection strings for an IoT hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public static dynamic AzIotHubShowConnectionString(this ICakeContext context, AzIotHubShowConnectionStringSettings settings) {
            var baseCommand = "az iot hub show-connection-string";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub show-quota-metrics".
        /// Get the quota metrics for an IoT hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public static dynamic AzIotHubShowQuotaMetrics(this ICakeContext context, AzIotHubShowQuotaMetricsSettings settings) {
            var baseCommand = "az iot hub show-quota-metrics";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub show-stats".
        /// Get the statistics for an IoT hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public static dynamic AzIotHubShowStats(this ICakeContext context, AzIotHubShowStatsSettings settings) {
            var baseCommand = "az iot hub show-stats";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub update".
        /// Update metadata for an IoT hub.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public static dynamic AzIotHubUpdate(this ICakeContext context, AzIotHubUpdateSettings settings) {
            var baseCommand = "az iot hub update";
            AppendIfNonNull(ref baseCommand, "--c2d-max-delivery-count", settings.C2dMaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--c2d-ttl", settings.C2dTtl);
            AppendIfNonNull(ref baseCommand, "--fc", settings.Fc);
            AppendIfNonNull(ref baseCommand, "--fcs", settings.Fcs);
            AppendIfNonNull(ref baseCommand, "--fd", settings.Fd);
            AppendIfNonNull(ref baseCommand, "--feedback-lock-duration", settings.FeedbackLockDuration);
            AppendIfNonNull(ref baseCommand, "--feedback-ttl", settings.FeedbackTtl);
            AppendIfNonNull(ref baseCommand, "--fileupload-notification-max-delivery-count", settings.FileuploadNotificationMaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--fileupload-notification-ttl", settings.FileuploadNotificationTtl);
            AppendIfNonNull(ref baseCommand, "--fileupload-notifications", settings.FileuploadNotifications);
            AppendIfNonNull(ref baseCommand, "--fileupload-sas-ttl", settings.FileuploadSasTtl);
            AppendIfNonNull(ref baseCommand, "--rd", settings.Rd);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--unit", settings.Unit);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub certificate create".
        /// Create/upload an Azure IoT Hub certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public static dynamic AzIotHubCertificateCreate(this ICakeContext context, AzIotHubCertificateCreateSettings settings) {
            var baseCommand = "az iot hub certificate create";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub certificate delete".
        /// Deletes an Azure IoT Hub certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public static dynamic AzIotHubCertificateDelete(this ICakeContext context, AzIotHubCertificateDeleteSettings settings) {
            var baseCommand = "az iot hub certificate delete";
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub certificate generate-verification-code".
        /// Generates a verification code for an Azure IoT Hub certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public static dynamic AzIotHubCertificateGenerateVerificationCode(this ICakeContext context, AzIotHubCertificateGenerateVerificationCodeSettings settings) {
            var baseCommand = "az iot hub certificate generate-verification-code";
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub certificate list".
        /// Lists all certificates contained within an Azure IoT Hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public static dynamic AzIotHubCertificateList(this ICakeContext context, AzIotHubCertificateListSettings settings) {
            var baseCommand = "az iot hub certificate list";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub certificate show".
        /// Shows information about a particular Azure IoT Hub certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public static dynamic AzIotHubCertificateShow(this ICakeContext context, AzIotHubCertificateShowSettings settings) {
            var baseCommand = "az iot hub certificate show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub certificate update".
        /// Update an Azure IoT Hub certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public static dynamic AzIotHubCertificateUpdate(this ICakeContext context, AzIotHubCertificateUpdateSettings settings) {
            var baseCommand = "az iot hub certificate update";
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub certificate verify".
        /// Verifies an Azure IoT Hub certificate.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public static dynamic AzIotHubCertificateVerify(this ICakeContext context, AzIotHubCertificateVerifySettings settings) {
            var baseCommand = "az iot hub certificate verify";
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub consumer-group create".
        /// Create an event hub consumer group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubConsumerGroup")]
        public static dynamic AzIotHubConsumerGroupCreate(this ICakeContext context, AzIotHubConsumerGroupCreateSettings settings) {
            var baseCommand = "az iot hub consumer-group create";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--event-hub-name", settings.EventHubName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub consumer-group delete".
        /// Delete an event hub consumer group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubConsumerGroup")]
        public static dynamic AzIotHubConsumerGroupDelete(this ICakeContext context, AzIotHubConsumerGroupDeleteSettings settings) {
            var baseCommand = "az iot hub consumer-group delete";
            AppendIfNonNull(ref baseCommand, "--event-hub-name", settings.EventHubName);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub consumer-group list".
        /// List event hub consumer groups.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubConsumerGroup")]
        public static dynamic AzIotHubConsumerGroupList(this ICakeContext context, AzIotHubConsumerGroupListSettings settings) {
            var baseCommand = "az iot hub consumer-group list";
            AppendIfNonNull(ref baseCommand, "--event-hub-name", settings.EventHubName);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub consumer-group show".
        /// Get the details for an event hub consumer group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubConsumerGroup")]
        public static dynamic AzIotHubConsumerGroupShow(this ICakeContext context, AzIotHubConsumerGroupShowSettings settings) {
            var baseCommand = "az iot hub consumer-group show";
            AppendIfNonNull(ref baseCommand, "--event-hub-name", settings.EventHubName);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub devicestream show".
        /// Get IoT Hub's device streams endpoints.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubDevicestream")]
        public static dynamic AzIotHubDevicestreamShow(this ICakeContext context, AzIotHubDevicestreamShowSettings settings) {
            var baseCommand = "az iot hub devicestream show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub job cancel".
        /// Cancel a job in an IoT hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubJob")]
        public static dynamic AzIotHubJobCancel(this ICakeContext context, AzIotHubJobCancelSettings settings) {
            var baseCommand = "az iot hub job cancel";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub job list".
        /// List the jobs in an IoT hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubJob")]
        public static dynamic AzIotHubJobList(this ICakeContext context, AzIotHubJobListSettings settings) {
            var baseCommand = "az iot hub job list";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub job show".
        /// Get the details of a job in an IoT hub.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubJob")]
        public static dynamic AzIotHubJobShow(this ICakeContext context, AzIotHubJobShowSettings settings) {
            var baseCommand = "az iot hub job show";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub message-enrichment create".
        /// Create a message enrichment for chosen endpoints in your IoT Hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubMessageEnrichment")]
        public static dynamic AzIotHubMessageEnrichmentCreate(this ICakeContext context, AzIotHubMessageEnrichmentCreateSettings settings) {
            var baseCommand = "az iot hub message-enrichment create";
            AppendIfNonNull(ref baseCommand, "--endpoints", settings.Endpoints);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub message-enrichment delete".
        /// Delete a message enrichment in your IoT hub (by key).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubMessageEnrichment")]
        public static dynamic AzIotHubMessageEnrichmentDelete(this ICakeContext context, AzIotHubMessageEnrichmentDeleteSettings settings) {
            var baseCommand = "az iot hub message-enrichment delete";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub message-enrichment list".
        /// Get information on all message enrichments for your IoT Hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubMessageEnrichment")]
        public static dynamic AzIotHubMessageEnrichmentList(this ICakeContext context, AzIotHubMessageEnrichmentListSettings settings) {
            var baseCommand = "az iot hub message-enrichment list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub message-enrichment update".
        /// Update a message enrichment in your IoT hub (by key).  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubMessageEnrichment")]
        public static dynamic AzIotHubMessageEnrichmentUpdate(this ICakeContext context, AzIotHubMessageEnrichmentUpdateSettings settings) {
            var baseCommand = "az iot hub message-enrichment update";
            AppendIfNonNull(ref baseCommand, "--endpoints", settings.Endpoints);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub policy create".
        /// Create a new shared access policy in an IoT hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubPolicy")]
        public static dynamic AzIotHubPolicyCreate(this ICakeContext context, AzIotHubPolicyCreateSettings settings) {
            var baseCommand = "az iot hub policy create";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub policy delete".
        /// Delete a shared access policy from an IoT hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubPolicy")]
        public static dynamic AzIotHubPolicyDelete(this ICakeContext context, AzIotHubPolicyDeleteSettings settings) {
            var baseCommand = "az iot hub policy delete";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub policy list".
        /// List shared access policies of an IoT hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubPolicy")]
        public static dynamic AzIotHubPolicyList(this ICakeContext context, AzIotHubPolicyListSettings settings) {
            var baseCommand = "az iot hub policy list";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub policy renew-key".
        /// Regenerate keys of a shared access policy of an IoT hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubPolicy")]
        public static dynamic AzIotHubPolicyRenewKey(this ICakeContext context, AzIotHubPolicyRenewKeySettings settings) {
            var baseCommand = "az iot hub policy renew-key";
            AppendIfNonNull(ref baseCommand, "--renew-key", settings.RenewKey);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub policy show".
        /// Get the details of a shared access policy of an IoT hub.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubPolicy")]
        public static dynamic AzIotHubPolicyShow(this ICakeContext context, AzIotHubPolicyShowSettings settings) {
            var baseCommand = "az iot hub policy show";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub route create".
        /// Create a route in IoT Hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoute")]
        public static dynamic AzIotHubRouteCreate(this ICakeContext context, AzIotHubRouteCreateSettings settings) {
            var baseCommand = "az iot hub route create";
            AppendIfNonNull(ref baseCommand, "--en", settings.En);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--condition", settings.Condition);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub route delete".
        /// Delete all or mentioned route for your IoT Hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoute")]
        public static dynamic AzIotHubRouteDelete(this ICakeContext context, AzIotHubRouteDeleteSettings settings) {
            var baseCommand = "az iot hub route delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub route list".
        /// Get all the routes in IoT Hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoute")]
        public static dynamic AzIotHubRouteList(this ICakeContext context, AzIotHubRouteListSettings settings) {
            var baseCommand = "az iot hub route list";
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub route show".
        /// Get information about the route in IoT Hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoute")]
        public static dynamic AzIotHubRouteShow(this ICakeContext context, AzIotHubRouteShowSettings settings) {
            var baseCommand = "az iot hub route show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub route test".
        /// Test all routes or mentioned route in IoT Hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoute")]
        public static dynamic AzIotHubRouteTest(this ICakeContext context, AzIotHubRouteTestSettings settings) {
            var baseCommand = "az iot hub route test";
            AppendIfNonNull(ref baseCommand, "--ap", settings.Ap);
            AppendIfNonNull(ref baseCommand, "--body", settings.Body);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--sp", settings.Sp);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub route update".
        /// Update a route in IoT Hub.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoute")]
        public static dynamic AzIotHubRouteUpdate(this ICakeContext context, AzIotHubRouteUpdateSettings settings) {
            var baseCommand = "az iot hub route update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--condition", settings.Condition);
            AppendIfNonNull(ref baseCommand, "--en", settings.En);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub routing-endpoint create".
        /// Add an endpoint to your IoT Hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoutingEndpoint")]
        public static dynamic AzIotHubRoutingEndpointCreate(this ICakeContext context, AzIotHubRoutingEndpointCreateSettings settings) {
            var baseCommand = "az iot hub routing-endpoint create";
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--endpoint-resource-group", settings.EndpointResourceGroup);
            AppendIfNonNull(ref baseCommand, "--endpoint-subscription-id", settings.EndpointSubscriptionId);
            AppendIfNonNull(ref baseCommand, "--endpoint-type", settings.EndpointType);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--batch-frequency", settings.BatchFrequency);
            AppendIfNonNull(ref baseCommand, "--chunk-size", settings.ChunkSize);
            AppendIfNonNull(ref baseCommand, "--container", settings.Container);
            AppendIfNonNull(ref baseCommand, "--encoding", settings.Encoding);
            AppendIfNonNull(ref baseCommand, "--ff", settings.Ff);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub routing-endpoint delete".
        /// Delete all or mentioned endpoint for your IoT Hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoutingEndpoint")]
        public static dynamic AzIotHubRoutingEndpointDelete(this ICakeContext context, AzIotHubRoutingEndpointDeleteSettings settings) {
            var baseCommand = "az iot hub routing-endpoint delete";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--endpoint-type", settings.EndpointType);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub routing-endpoint list".
        /// Get information on all the endpoints for your IoT Hub.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoutingEndpoint")]
        public static dynamic AzIotHubRoutingEndpointList(this ICakeContext context, AzIotHubRoutingEndpointListSettings settings) {
            var baseCommand = "az iot hub routing-endpoint list";
            AppendIfNonNull(ref baseCommand, "--endpoint-type", settings.EndpointType);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot hub routing-endpoint show".
        /// Get information on mentioned endpoint for your IoT Hub.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoutingEndpoint")]
        public static dynamic AzIotHubRoutingEndpointShow(this ICakeContext context, AzIotHubRoutingEndpointShowSettings settings) {
            var baseCommand = "az iot hub routing-endpoint show";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot pnp key create".
        /// Create a key for the given repository.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpKey")]
        public static dynamic AzIotPnpKeyCreate(this ICakeContext context, AzIotPnpKeyCreateSettings settings) {
            var baseCommand = "az iot pnp key create";
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot pnp key delete".
        /// Delete a key from the given repository.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpKey")]
        public static dynamic AzIotPnpKeyDelete(this ICakeContext context, AzIotPnpKeyDeleteSettings settings) {
            var baseCommand = "az iot pnp key delete";
            AppendIfNonNull(ref baseCommand, "--key-id", settings.KeyId);
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot pnp key list".
        /// List repository's keys.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpKey")]
        public static dynamic AzIotPnpKeyList(this ICakeContext context, AzIotPnpKeyListSettings settings) {
            var baseCommand = "az iot pnp key list";
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot pnp key show".
        /// Get the details of a repository key.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpKey")]
        public static dynamic AzIotPnpKeyShow(this ICakeContext context, AzIotPnpKeyShowSettings settings) {
            var baseCommand = "az iot pnp key show";
            AppendIfNonNull(ref baseCommand, "--key-id", settings.KeyId);
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot pnp key update".
        /// Update the key for the given repository.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpKey")]
        public static dynamic AzIotPnpKeyUpdate(this ICakeContext context, AzIotPnpKeyUpdateSettings settings) {
            var baseCommand = "az iot pnp key update";
            AppendIfNonNull(ref baseCommand, "--key-id", settings.KeyId);
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot pnp repository create".
        /// Create an IoT Plug and Play repository.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpRepository")]
        public static dynamic AzIotPnpRepositoryCreate(this ICakeContext context, AzIotPnpRepositoryCreateSettings settings) {
            var baseCommand = "az iot pnp repository create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot pnp repository delete".
        /// Delete an IoT Plug and Play repository.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpRepository")]
        public static dynamic AzIotPnpRepositoryDelete(this ICakeContext context, AzIotPnpRepositoryDeleteSettings settings) {
            var baseCommand = "az iot pnp repository delete";
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot pnp repository get-provision-status".
        /// Returns the IoT Plug and Play repository provisioning status.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpRepository")]
        public static dynamic AzIotPnpRepositoryGetProvisionStatus(this ICakeContext context, AzIotPnpRepositoryGetProvisionStatusSettings settings) {
            var baseCommand = "az iot pnp repository get-provision-status";
            AppendIfNonNull(ref baseCommand, "--provisioning-State", settings.ProvisioningState);
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot pnp repository list".
        /// List IoT Plug and Play repositories.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpRepository")]
        public static dynamic AzIotPnpRepositoryList(this ICakeContext context, AzIotPnpRepositoryListSettings settings) {
            var baseCommand = "az iot pnp repository list";
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot pnp repository show".
        /// Gets the details for an IoT Plug and Play repository.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpRepository")]
        public static dynamic AzIotPnpRepositoryShow(this ICakeContext context, AzIotPnpRepositoryShowSettings settings) {
            var baseCommand = "az iot pnp repository show";
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iot pnp repository update".
        /// Update an IoT Plug and Play repository.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpRepository")]
        public static dynamic AzIotPnpRepositoryUpdate(this ICakeContext context, AzIotPnpRepositoryUpdateSettings settings) {
            var baseCommand = "az iot pnp repository update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iotcentral app create".
        /// Create an IoT Central application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotcentralApp")]
        public static dynamic AzIotcentralAppCreate(this ICakeContext context, AzIotcentralAppCreateSettings settings) {
            var baseCommand = "az iotcentral app create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subdomain", settings.Subdomain);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--template", settings.Template);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iotcentral app delete".
        /// Delete an IoT Central application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotcentralApp")]
        public static dynamic AzIotcentralAppDelete(this ICakeContext context, AzIotcentralAppDeleteSettings settings) {
            var baseCommand = "az iotcentral app delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iotcentral app list".
        /// List IoT Central applications.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotcentralApp")]
        public static dynamic AzIotcentralAppList(this ICakeContext context, AzIotcentralAppListSettings settings) {
            var baseCommand = "az iotcentral app list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iotcentral app show".
        /// Get the details of an IoT Central application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotcentralApp")]
        public static dynamic AzIotcentralAppShow(this ICakeContext context, AzIotcentralAppShowSettings settings) {
            var baseCommand = "az iotcentral app show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az iotcentral app update".
        /// Update metadata for an IoT Central application.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotcentralApp")]
        public static dynamic AzIotcentralAppUpdate(this ICakeContext context, AzIotcentralAppUpdateSettings settings) {
            var baseCommand = "az iotcentral app update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault create".
        /// Create a key vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public static dynamic AzKeyvaultCreate(this ICakeContext context, AzKeyvaultCreateSettings settings) {
            var baseCommand = "az keyvault create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--enable-purge-protection", settings.EnablePurgeProtection);
            AppendIfNonNull(ref baseCommand, "--enable-soft-delete", settings.EnableSoftDelete);
            AppendIfNonNull(ref baseCommand, "--enabled-for-deployment", settings.EnabledForDeployment);
            AppendIfNonNull(ref baseCommand, "--enabled-for-disk-encryption", settings.EnabledForDiskEncryption);
            AppendIfNonNull(ref baseCommand, "--enabled-for-template-deployment", settings.EnabledForTemplateDeployment);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-self-perms", settings.NoSelfPerms);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--bypass", settings.Bypass);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault delete".
        /// Delete a key vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public static dynamic AzKeyvaultDelete(this ICakeContext context, AzKeyvaultDeleteSettings settings) {
            var baseCommand = "az keyvault delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault delete-policy".
        /// Delete security policy settings for a Key Vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public static dynamic AzKeyvaultDeletePolicy(this ICakeContext context, AzKeyvaultDeletePolicySettings settings) {
            var baseCommand = "az keyvault delete-policy";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--spn", settings.Spn);
            AppendIfNonNull(ref baseCommand, "--upn", settings.Upn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault list".
        /// List key vaults.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public static dynamic AzKeyvaultList(this ICakeContext context, AzKeyvaultListSettings settings) {
            var baseCommand = "az keyvault list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault list-deleted".
        /// Gets information about the deleted vaults in a subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public static dynamic AzKeyvaultListDeleted(this ICakeContext context, AzKeyvaultListDeletedSettings settings) {
            var baseCommand = "az keyvault list-deleted";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault purge".
        /// Permanently deletes the specified vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public static dynamic AzKeyvaultPurge(this ICakeContext context, AzKeyvaultPurgeSettings settings) {
            var baseCommand = "az keyvault purge";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault recover".
        /// Recover a key vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public static dynamic AzKeyvaultRecover(this ICakeContext context, AzKeyvaultRecoverSettings settings) {
            var baseCommand = "az keyvault recover";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault set-policy".
        /// Update security policy settings for a Key Vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public static dynamic AzKeyvaultSetPolicy(this ICakeContext context, AzKeyvaultSetPolicySettings settings) {
            var baseCommand = "az keyvault set-policy";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--spn", settings.Spn);
            AppendIfNonNull(ref baseCommand, "--upn", settings.Upn);
            AppendIfNonNull(ref baseCommand, "--certificate-permissions", settings.CertificatePermissions);
            AppendIfNonNull(ref baseCommand, "--key-permissions", settings.KeyPermissions);
            AppendIfNonNull(ref baseCommand, "--secret-permissions", settings.SecretPermissions);
            AppendIfNonNull(ref baseCommand, "--storage-permissions", settings.StoragePermissions);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault show".
        /// Show details of a key vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public static dynamic AzKeyvaultShow(this ICakeContext context, AzKeyvaultShowSettings settings) {
            var baseCommand = "az keyvault show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault update".
        /// Update the properties of a key vault.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public static dynamic AzKeyvaultUpdate(this ICakeContext context, AzKeyvaultUpdateSettings settings) {
            var baseCommand = "az keyvault update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--enable-purge-protection", settings.EnablePurgeProtection);
            AppendIfNonNull(ref baseCommand, "--enable-soft-delete", settings.EnableSoftDelete);
            AppendIfNonNull(ref baseCommand, "--enabled-for-deployment", settings.EnabledForDeployment);
            AppendIfNonNull(ref baseCommand, "--enabled-for-disk-encryption", settings.EnabledForDiskEncryption);
            AppendIfNonNull(ref baseCommand, "--enabled-for-template-deployment", settings.EnabledForTemplateDeployment);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--bypass", settings.Bypass);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate create".
        /// Create a Key Vault certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificateCreate(this ICakeContext context, AzKeyvaultCertificateCreateSettings settings) {
            var baseCommand = "az keyvault certificate create";
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--validity", settings.Validity);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate delete".
        /// Deletes a certificate from a specified key vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificateDelete(this ICakeContext context, AzKeyvaultCertificateDeleteSettings settings) {
            var baseCommand = "az keyvault certificate delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate download".
        /// Download the public portion of a Key Vault certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificateDownload(this ICakeContext context, AzKeyvaultCertificateDownloadSettings settings) {
            var baseCommand = "az keyvault certificate download";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--encoding", settings.Encoding);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate get-default-policy".
        /// Get the default policy for self-signed certificates.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificateGetDefaultPolicy(this ICakeContext context, AzKeyvaultCertificateGetDefaultPolicySettings settings) {
            var baseCommand = "az keyvault certificate get-default-policy";
            AppendIfNonNull(ref baseCommand, "--scaffold", settings.Scaffold);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate import".
        /// Import a certificate into KeyVault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificateImport(this ICakeContext context, AzKeyvaultCertificateImportSettings settings) {
            var baseCommand = "az keyvault certificate import";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate list".
        /// List certificates in a specified key vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificateList(this ICakeContext context, AzKeyvaultCertificateListSettings settings) {
            var baseCommand = "az keyvault certificate list";
            AppendIfNonNull(ref baseCommand, "--include-pending", settings.IncludePending);
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate list-deleted".
        /// Lists the deleted certificates in the specified vault currently available for recovery.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificateListDeleted(this ICakeContext context, AzKeyvaultCertificateListDeletedSettings settings) {
            var baseCommand = "az keyvault certificate list-deleted";
            AppendIfNonNull(ref baseCommand, "--include-pending", settings.IncludePending);
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate list-versions".
        /// List the versions of a certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificateListVersions(this ICakeContext context, AzKeyvaultCertificateListVersionsSettings settings) {
            var baseCommand = "az keyvault certificate list-versions";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate purge".
        /// Permanently deletes the specified deleted certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificatePurge(this ICakeContext context, AzKeyvaultCertificatePurgeSettings settings) {
            var baseCommand = "az keyvault certificate purge";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate recover".
        /// Recovers the deleted certificate back to its current version under /certificates.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificateRecover(this ICakeContext context, AzKeyvaultCertificateRecoverSettings settings) {
            var baseCommand = "az keyvault certificate recover";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate set-attributes".
        /// Updates the specified attributes associated with the given certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificateSetAttributes(this ICakeContext context, AzKeyvaultCertificateSetAttributesSettings settings) {
            var baseCommand = "az keyvault certificate set-attributes";
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate show".
        /// Gets information about a certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificateShow(this ICakeContext context, AzKeyvaultCertificateShowSettings settings) {
            var baseCommand = "az keyvault certificate show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate show-deleted".
        /// Retrieves information about the specified deleted certificate.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public static dynamic AzKeyvaultCertificateShowDeleted(this ICakeContext context, AzKeyvaultCertificateShowDeletedSettings settings) {
            var baseCommand = "az keyvault certificate show-deleted";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate contact add".
        /// Add a contact to the specified vault to receive notifications of certificate operations.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateContact")]
        public static dynamic AzKeyvaultCertificateContactAdd(this ICakeContext context, AzKeyvaultCertificateContactAddSettings settings) {
            var baseCommand = "az keyvault certificate contact add";
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--phone", settings.Phone);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate contact delete".
        /// Remove a certificate contact from the specified vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateContact")]
        public static dynamic AzKeyvaultCertificateContactDelete(this ICakeContext context, AzKeyvaultCertificateContactDeleteSettings settings) {
            var baseCommand = "az keyvault certificate contact delete";
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate contact list".
        /// Lists the certificate contacts for a specified key vault.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateContact")]
        public static dynamic AzKeyvaultCertificateContactList(this ICakeContext context, AzKeyvaultCertificateContactListSettings settings) {
            var baseCommand = "az keyvault certificate contact list";
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate issuer create".
        /// Create a certificate issuer record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuer")]
        public static dynamic AzKeyvaultCertificateIssuerCreate(this ICakeContext context, AzKeyvaultCertificateIssuerCreateSettings settings) {
            var baseCommand = "az keyvault certificate issuer create";
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--provider-name", settings.ProviderName);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--account-id", settings.AccountId);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--organization-id", settings.OrganizationId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate issuer delete".
        /// Deletes the specified certificate issuer.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuer")]
        public static dynamic AzKeyvaultCertificateIssuerDelete(this ICakeContext context, AzKeyvaultCertificateIssuerDeleteSettings settings) {
            var baseCommand = "az keyvault certificate issuer delete";
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate issuer list".
        /// List certificate issuers for a specified key vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuer")]
        public static dynamic AzKeyvaultCertificateIssuerList(this ICakeContext context, AzKeyvaultCertificateIssuerListSettings settings) {
            var baseCommand = "az keyvault certificate issuer list";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate issuer show".
        /// Lists the specified certificate issuer.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuer")]
        public static dynamic AzKeyvaultCertificateIssuerShow(this ICakeContext context, AzKeyvaultCertificateIssuerShowSettings settings) {
            var baseCommand = "az keyvault certificate issuer show";
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate issuer update".
        /// Update a certificate issuer record.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuer")]
        public static dynamic AzKeyvaultCertificateIssuerUpdate(this ICakeContext context, AzKeyvaultCertificateIssuerUpdateSettings settings) {
            var baseCommand = "az keyvault certificate issuer update";
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--provider-name", settings.ProviderName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--account-id", settings.AccountId);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--organization-id", settings.OrganizationId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate issuer admin add".
        /// Add admin details for a specified certificate issuer.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuerAdmin")]
        public static dynamic AzKeyvaultCertificateIssuerAdminAdd(this ICakeContext context, AzKeyvaultCertificateIssuerAdminAddSettings settings) {
            var baseCommand = "az keyvault certificate issuer admin add";
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--first-name", settings.FirstName);
            AppendIfNonNull(ref baseCommand, "--last-name", settings.LastName);
            AppendIfNonNull(ref baseCommand, "--phone", settings.Phone);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate issuer admin delete".
        /// Remove admin details for the specified certificate issuer.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuerAdmin")]
        public static dynamic AzKeyvaultCertificateIssuerAdminDelete(this ICakeContext context, AzKeyvaultCertificateIssuerAdminDeleteSettings settings) {
            var baseCommand = "az keyvault certificate issuer admin delete";
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate issuer admin list".
        /// List admins for a specified certificate issuer.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuerAdmin")]
        public static dynamic AzKeyvaultCertificateIssuerAdminList(this ICakeContext context, AzKeyvaultCertificateIssuerAdminListSettings settings) {
            var baseCommand = "az keyvault certificate issuer admin list";
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate pending delete".
        /// Deletes the creation operation for a specific certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificatePending")]
        public static dynamic AzKeyvaultCertificatePendingDelete(this ICakeContext context, AzKeyvaultCertificatePendingDeleteSettings settings) {
            var baseCommand = "az keyvault certificate pending delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate pending merge".
        /// Merges a certificate or a certificate chain with a key pair existing on the server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificatePending")]
        public static dynamic AzKeyvaultCertificatePendingMerge(this ICakeContext context, AzKeyvaultCertificatePendingMergeSettings settings) {
            var baseCommand = "az keyvault certificate pending merge";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--not-before", settings.NotBefore);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault certificate pending show".
        /// Gets the creation operation of a certificate.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificatePending")]
        public static dynamic AzKeyvaultCertificatePendingShow(this ICakeContext context, AzKeyvaultCertificatePendingShowSettings settings) {
            var baseCommand = "az keyvault certificate pending show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key backup".
        /// Requests that a backup of the specified key be downloaded to the client.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeyBackup(this ICakeContext context, AzKeyvaultKeyBackupSettings settings) {
            var baseCommand = "az keyvault key backup";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key create".
        /// Creates a new key, stores it, then returns key parameters and attributes to the client.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeyCreate(this ICakeContext context, AzKeyvaultKeyCreateSettings settings) {
            var baseCommand = "az keyvault key create";
            AppendIfNonNull(ref baseCommand, "--curve", settings.Curve);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--kty", settings.Kty);
            AppendIfNonNull(ref baseCommand, "--not-before", settings.NotBefore);
            AppendIfNonNull(ref baseCommand, "--ops", settings.Ops);
            AppendIfNonNull(ref baseCommand, "--protection", settings.Protection);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key delete".
        /// Deletes a key of any type from storage in Azure Key Vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeyDelete(this ICakeContext context, AzKeyvaultKeyDeleteSettings settings) {
            var baseCommand = "az keyvault key delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key import".
        /// Import a private key.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeyImport(this ICakeContext context, AzKeyvaultKeyImportSettings settings) {
            var baseCommand = "az keyvault key import";
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--not-before", settings.NotBefore);
            AppendIfNonNull(ref baseCommand, "--ops", settings.Ops);
            AppendIfNonNull(ref baseCommand, "--protection", settings.Protection);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--byok-file", settings.ByokFile);
            AppendIfNonNull(ref baseCommand, "--pem-file", settings.PemFile);
            AppendIfNonNull(ref baseCommand, "--pem-password", settings.PemPassword);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key list".
        /// List keys in the specified vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeyList(this ICakeContext context, AzKeyvaultKeyListSettings settings) {
            var baseCommand = "az keyvault key list";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key list-deleted".
        /// Lists the deleted keys in the specified vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeyListDeleted(this ICakeContext context, AzKeyvaultKeyListDeletedSettings settings) {
            var baseCommand = "az keyvault key list-deleted";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key list-versions".
        /// Retrieves a list of individual key versions with the same key name.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeyListVersions(this ICakeContext context, AzKeyvaultKeyListVersionsSettings settings) {
            var baseCommand = "az keyvault key list-versions";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key purge".
        /// Permanently deletes the specified key.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeyPurge(this ICakeContext context, AzKeyvaultKeyPurgeSettings settings) {
            var baseCommand = "az keyvault key purge";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key recover".
        /// Recovers the deleted key to its latest version.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeyRecover(this ICakeContext context, AzKeyvaultKeyRecoverSettings settings) {
            var baseCommand = "az keyvault key recover";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key restore".
        /// Restores a backed up key to a vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeyRestore(this ICakeContext context, AzKeyvaultKeyRestoreSettings settings) {
            var baseCommand = "az keyvault key restore";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key set-attributes".
        /// The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeySetAttributes(this ICakeContext context, AzKeyvaultKeySetAttributesSettings settings) {
            var baseCommand = "az keyvault key set-attributes";
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--not-before", settings.NotBefore);
            AppendIfNonNull(ref baseCommand, "--ops", settings.Ops);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key show".
        /// Gets the public part of a stored key.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeyShow(this ICakeContext context, AzKeyvaultKeyShowSettings settings) {
            var baseCommand = "az keyvault key show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault key show-deleted".
        /// Gets the public part of a deleted key.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public static dynamic AzKeyvaultKeyShowDeleted(this ICakeContext context, AzKeyvaultKeyShowDeletedSettings settings) {
            var baseCommand = "az keyvault key show-deleted";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault network-rule add".
        /// Add a network rule to the network ACLs for a Key Vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultNetworkRule")]
        public static dynamic AzKeyvaultNetworkRuleAdd(this ICakeContext context, AzKeyvaultNetworkRuleAddSettings settings) {
            var baseCommand = "az keyvault network-rule add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault network-rule list".
        /// Lists the network rules from the network ACLs for a Key Vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultNetworkRule")]
        public static dynamic AzKeyvaultNetworkRuleList(this ICakeContext context, AzKeyvaultNetworkRuleListSettings settings) {
            var baseCommand = "az keyvault network-rule list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault network-rule remove".
        /// Removes a network rule from the network ACLs for a Key Vault.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultNetworkRule")]
        public static dynamic AzKeyvaultNetworkRuleRemove(this ICakeContext context, AzKeyvaultNetworkRuleRemoveSettings settings) {
            var baseCommand = "az keyvault network-rule remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret backup".
        /// Backs up the specified secret.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretBackup(this ICakeContext context, AzKeyvaultSecretBackupSettings settings) {
            var baseCommand = "az keyvault secret backup";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret delete".
        /// Deletes a secret from a specified key vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretDelete(this ICakeContext context, AzKeyvaultSecretDeleteSettings settings) {
            var baseCommand = "az keyvault secret delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret download".
        /// Download a secret from a KeyVault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretDownload(this ICakeContext context, AzKeyvaultSecretDownloadSettings settings) {
            var baseCommand = "az keyvault secret download";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--encoding", settings.Encoding);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret list".
        /// List secrets in a specified key vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretList(this ICakeContext context, AzKeyvaultSecretListSettings settings) {
            var baseCommand = "az keyvault secret list";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret list-deleted".
        /// Lists deleted secrets for the specified vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretListDeleted(this ICakeContext context, AzKeyvaultSecretListDeletedSettings settings) {
            var baseCommand = "az keyvault secret list-deleted";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret list-versions".
        /// List all versions of the specified secret.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretListVersions(this ICakeContext context, AzKeyvaultSecretListVersionsSettings settings) {
            var baseCommand = "az keyvault secret list-versions";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret purge".
        /// Permanently deletes the specified secret.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretPurge(this ICakeContext context, AzKeyvaultSecretPurgeSettings settings) {
            var baseCommand = "az keyvault secret purge";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret recover".
        /// Recovers the deleted secret to the latest version.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretRecover(this ICakeContext context, AzKeyvaultSecretRecoverSettings settings) {
            var baseCommand = "az keyvault secret recover";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret restore".
        /// Restores a backed up secret to a vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretRestore(this ICakeContext context, AzKeyvaultSecretRestoreSettings settings) {
            var baseCommand = "az keyvault secret restore";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret set".
        /// Create a secret (if one doesn't exist) or update a secret in a KeyVault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretSet(this ICakeContext context, AzKeyvaultSecretSetSettings settings) {
            var baseCommand = "az keyvault secret set";
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--not-before", settings.NotBefore);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--encoding", settings.Encoding);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret set-attributes".
        /// Updates the attributes associated with a specified secret in a given key vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretSetAttributes(this ICakeContext context, AzKeyvaultSecretSetAttributesSettings settings) {
            var baseCommand = "az keyvault secret set-attributes";
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--not-before", settings.NotBefore);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret show".
        /// Get a specified secret from a given key vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretShow(this ICakeContext context, AzKeyvaultSecretShowSettings settings) {
            var baseCommand = "az keyvault secret show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault secret show-deleted".
        /// Gets the specified deleted secret.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public static dynamic AzKeyvaultSecretShowDeleted(this ICakeContext context, AzKeyvaultSecretShowDeletedSettings settings) {
            var baseCommand = "az keyvault secret show-deleted";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage add".
        /// Creates or updates a new storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public static dynamic AzKeyvaultStorageAdd(this ICakeContext context, AzKeyvaultStorageAddSettings settings) {
            var baseCommand = "az keyvault storage add";
            AppendIfNonNull(ref baseCommand, "--active-key-name", settings.ActiveKeyName);
            AppendIfNonNull(ref baseCommand, "--resource-id", settings.ResourceId);
            AppendIfNonNull(ref baseCommand, "--auto-regenerate-key", settings.AutoRegenerateKey);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--regeneration-period", settings.RegenerationPeriod);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage backup".
        /// Backs up the specified storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public static dynamic AzKeyvaultStorageBackup(this ICakeContext context, AzKeyvaultStorageBackupSettings settings) {
            var baseCommand = "az keyvault storage backup";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage list".
        /// List storage accounts managed by the specified key vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public static dynamic AzKeyvaultStorageList(this ICakeContext context, AzKeyvaultStorageListSettings settings) {
            var baseCommand = "az keyvault storage list";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage list-deleted".
        /// Lists deleted storage accounts for the specified vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public static dynamic AzKeyvaultStorageListDeleted(this ICakeContext context, AzKeyvaultStorageListDeletedSettings settings) {
            var baseCommand = "az keyvault storage list-deleted";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage purge".
        /// Permanently deletes the specified storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public static dynamic AzKeyvaultStoragePurge(this ICakeContext context, AzKeyvaultStoragePurgeSettings settings) {
            var baseCommand = "az keyvault storage purge";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage recover".
        /// Recovers the deleted storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public static dynamic AzKeyvaultStorageRecover(this ICakeContext context, AzKeyvaultStorageRecoverSettings settings) {
            var baseCommand = "az keyvault storage recover";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage regenerate-key".
        /// Regenerates the specified key value for the given storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public static dynamic AzKeyvaultStorageRegenerateKey(this ICakeContext context, AzKeyvaultStorageRegenerateKeySettings settings) {
            var baseCommand = "az keyvault storage regenerate-key";
            AppendIfNonNull(ref baseCommand, "--key-name", settings.KeyName);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage remove".
        /// Deletes a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public static dynamic AzKeyvaultStorageRemove(this ICakeContext context, AzKeyvaultStorageRemoveSettings settings) {
            var baseCommand = "az keyvault storage remove";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage restore".
        /// Restores a backed up storage account to a vault.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public static dynamic AzKeyvaultStorageRestore(this ICakeContext context, AzKeyvaultStorageRestoreSettings settings) {
            var baseCommand = "az keyvault storage restore";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage show".
        /// Gets information about a specified storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public static dynamic AzKeyvaultStorageShow(this ICakeContext context, AzKeyvaultStorageShowSettings settings) {
            var baseCommand = "az keyvault storage show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage show-deleted".
        /// Gets the specified deleted storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public static dynamic AzKeyvaultStorageShowDeleted(this ICakeContext context, AzKeyvaultStorageShowDeletedSettings settings) {
            var baseCommand = "az keyvault storage show-deleted";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage update".
        /// Updates the specified attributes associated with the given storage account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public static dynamic AzKeyvaultStorageUpdate(this ICakeContext context, AzKeyvaultStorageUpdateSettings settings) {
            var baseCommand = "az keyvault storage update";
            AppendIfNonNull(ref baseCommand, "--active-key-name", settings.ActiveKeyName);
            AppendIfNonNull(ref baseCommand, "--auto-regenerate-key", settings.AutoRegenerateKey);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--regeneration-period", settings.RegenerationPeriod);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage sas-definition create".
        /// Creates or updates a new SAS definition for the specified storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public static dynamic AzKeyvaultStorageSasDefinitionCreate(this ICakeContext context, AzKeyvaultStorageSasDefinitionCreateSettings settings) {
            var baseCommand = "az keyvault storage sas-definition create";
            AppendIfNonNull(ref baseCommand, "--sas-type", settings.SasType);
            AppendIfNonNull(ref baseCommand, "--template-uri", settings.TemplateUri);
            AppendIfNonNull(ref baseCommand, "--validity-period", settings.ValidityPeriod);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage sas-definition delete".
        /// Deletes a SAS definition from a specified storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public static dynamic AzKeyvaultStorageSasDefinitionDelete(this ICakeContext context, AzKeyvaultStorageSasDefinitionDeleteSettings settings) {
            var baseCommand = "az keyvault storage sas-definition delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage sas-definition list".
        /// List storage SAS definitions for the given storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public static dynamic AzKeyvaultStorageSasDefinitionList(this ICakeContext context, AzKeyvaultStorageSasDefinitionListSettings settings) {
            var baseCommand = "az keyvault storage sas-definition list";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage sas-definition list-deleted".
        /// Lists deleted SAS definitions for the specified vault and storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public static dynamic AzKeyvaultStorageSasDefinitionListDeleted(this ICakeContext context, AzKeyvaultStorageSasDefinitionListDeletedSettings settings) {
            var baseCommand = "az keyvault storage sas-definition list-deleted";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage sas-definition recover".
        /// Recovers the deleted SAS definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public static dynamic AzKeyvaultStorageSasDefinitionRecover(this ICakeContext context, AzKeyvaultStorageSasDefinitionRecoverSettings settings) {
            var baseCommand = "az keyvault storage sas-definition recover";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage sas-definition show".
        /// Gets information about a SAS definition for the specified storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public static dynamic AzKeyvaultStorageSasDefinitionShow(this ICakeContext context, AzKeyvaultStorageSasDefinitionShowSettings settings) {
            var baseCommand = "az keyvault storage sas-definition show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage sas-definition show-deleted".
        /// Gets the specified deleted sas definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public static dynamic AzKeyvaultStorageSasDefinitionShowDeleted(this ICakeContext context, AzKeyvaultStorageSasDefinitionShowDeletedSettings settings) {
            var baseCommand = "az keyvault storage sas-definition show-deleted";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az keyvault storage sas-definition update".
        /// Updates the specified attributes associated with the given SAS definition.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public static dynamic AzKeyvaultStorageSasDefinitionUpdate(this ICakeContext context, AzKeyvaultStorageSasDefinitionUpdateSettings settings) {
            var baseCommand = "az keyvault storage sas-definition update";
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--sas-type", settings.SasType);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--template-uri", settings.TemplateUri);
            AppendIfNonNull(ref baseCommand, "--validity-period", settings.ValidityPeriod);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto cluster create".
        /// Create a Kusto cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public static dynamic AzKustoClusterCreate(this ICakeContext context, AzKustoClusterCreateSettings settings) {
            var baseCommand = "az kusto cluster create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto cluster delete".
        /// Delete a Kusto cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public static dynamic AzKustoClusterDelete(this ICakeContext context, AzKustoClusterDeleteSettings settings) {
            var baseCommand = "az kusto cluster delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto cluster list".
        /// List a Kusto cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public static dynamic AzKustoClusterList(this ICakeContext context, AzKustoClusterListSettings settings) {
            var baseCommand = "az kusto cluster list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto cluster show".
        /// Get a Kusto cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public static dynamic AzKustoClusterShow(this ICakeContext context, AzKustoClusterShowSettings settings) {
            var baseCommand = "az kusto cluster show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto cluster start".
        /// Start a Kusto cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public static dynamic AzKustoClusterStart(this ICakeContext context, AzKustoClusterStartSettings settings) {
            var baseCommand = "az kusto cluster start";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto cluster stop".
        /// Stop a Kusto cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public static dynamic AzKustoClusterStop(this ICakeContext context, AzKustoClusterStopSettings settings) {
            var baseCommand = "az kusto cluster stop";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto cluster update".
        /// Update a Kusto cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public static dynamic AzKustoClusterUpdate(this ICakeContext context, AzKustoClusterUpdateSettings settings) {
            var baseCommand = "az kusto cluster update";
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto cluster wait".
        /// Wait for a managed Kusto cluster to reach a desired state.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public static dynamic AzKustoClusterWait(this ICakeContext context, AzKustoClusterWaitSettings settings) {
            var baseCommand = "az kusto cluster wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto database create".
        /// Create a Kusto database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoDatabase")]
        public static dynamic AzKustoDatabaseCreate(this ICakeContext context, AzKustoDatabaseCreateSettings settings) {
            var baseCommand = "az kusto database create";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--hot-cache-period", settings.HotCachePeriod);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--soft-delete-period", settings.SoftDeletePeriod);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto database delete".
        /// Delete a Kusto database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoDatabase")]
        public static dynamic AzKustoDatabaseDelete(this ICakeContext context, AzKustoDatabaseDeleteSettings settings) {
            var baseCommand = "az kusto database delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto database list".
        /// List a Kusto database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoDatabase")]
        public static dynamic AzKustoDatabaseList(this ICakeContext context, AzKustoDatabaseListSettings settings) {
            var baseCommand = "az kusto database list";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto database show".
        /// Get a Kusto database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoDatabase")]
        public static dynamic AzKustoDatabaseShow(this ICakeContext context, AzKustoDatabaseShowSettings settings) {
            var baseCommand = "az kusto database show";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto database update".
        /// Update a Kusto database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoDatabase")]
        public static dynamic AzKustoDatabaseUpdate(this ICakeContext context, AzKustoDatabaseUpdateSettings settings) {
            var baseCommand = "az kusto database update";
            AppendIfNonNull(ref baseCommand, "--soft-delete-period", settings.SoftDeletePeriod);
            AppendIfNonNull(ref baseCommand, "--hot-cache-period", settings.HotCachePeriod);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az kusto database wait".
        /// Wait for a managed Kusto database to reach a desired state.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoDatabase")]
        public static dynamic AzKustoDatabaseWait(this ICakeContext context, AzKustoDatabaseWaitSettings settings) {
            var baseCommand = "az kusto database wait";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab delete".
        /// Delete lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLab")]
        public static dynamic AzLabDelete(this ICakeContext context, AzLabDeleteSettings settings) {
            var baseCommand = "az lab delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab get".
        /// Get lab.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLab")]
        public static dynamic AzLabGet(this ICakeContext context, AzLabGetSettings settings) {
            var baseCommand = "az lab get";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab arm-template list".
        /// List azure resource manager templates in a given artifact source.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabArmTemplate")]
        public static dynamic AzLabArmTemplateList(this ICakeContext context, AzLabArmTemplateListSettings settings) {
            var baseCommand = "az lab arm-template list";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab arm-template show".
        /// Get the details of an ARM template in a lab.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabArmTemplate")]
        public static dynamic AzLabArmTemplateShow(this ICakeContext context, AzLabArmTemplateShowSettings settings) {
            var baseCommand = "az lab arm-template show";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--export-parameters", settings.ExportParameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab artifact list".
        /// List artifacts in a given artifact source.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabArtifact")]
        public static dynamic AzLabArtifactList(this ICakeContext context, AzLabArtifactListSettings settings) {
            var baseCommand = "az lab artifact list";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab artifact-source list".
        /// List artifact sources in a given lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabArtifactSource")]
        public static dynamic AzLabArtifactSourceList(this ICakeContext context, AzLabArtifactSourceListSettings settings) {
            var baseCommand = "az lab artifact-source list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab artifact-source show".
        /// Get artifact source.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabArtifactSource")]
        public static dynamic AzLabArtifactSourceShow(this ICakeContext context, AzLabArtifactSourceShowSettings settings) {
            var baseCommand = "az lab artifact-source show";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab custom-image create".
        /// Create a custom image in a DevTest Lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabCustomImage")]
        public static dynamic AzLabCustomImageCreate(this ICakeContext context, AzLabCustomImageCreateSettings settings) {
            var baseCommand = "az lab custom-image create";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--os-state", settings.OsState);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-vm-id", settings.SourceVmId);
            AppendIfNonNull(ref baseCommand, "--author", settings.Author);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab custom-image delete".
        /// Delete custom image.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabCustomImage")]
        public static dynamic AzLabCustomImageDelete(this ICakeContext context, AzLabCustomImageDeleteSettings settings) {
            var baseCommand = "az lab custom-image delete";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab custom-image list".
        /// List custom images in a given lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabCustomImage")]
        public static dynamic AzLabCustomImageList(this ICakeContext context, AzLabCustomImageListSettings settings) {
            var baseCommand = "az lab custom-image list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab custom-image show".
        /// Get custom image.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabCustomImage")]
        public static dynamic AzLabCustomImageShow(this ICakeContext context, AzLabCustomImageShowSettings settings) {
            var baseCommand = "az lab custom-image show";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab environment create".
        /// Create an environment in a lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabEnvironment")]
        public static dynamic AzLabEnvironmentCreate(this ICakeContext context, AzLabEnvironmentCreateSettings settings) {
            var baseCommand = "az lab environment create";
            AppendIfNonNull(ref baseCommand, "--arm-template", settings.ArmTemplate);
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab environment delete".
        /// Delete an environment from a lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabEnvironment")]
        public static dynamic AzLabEnvironmentDelete(this ICakeContext context, AzLabEnvironmentDeleteSettings settings) {
            var baseCommand = "az lab environment delete";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab environment list".
        /// List environments in a lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabEnvironment")]
        public static dynamic AzLabEnvironmentList(this ICakeContext context, AzLabEnvironmentListSettings settings) {
            var baseCommand = "az lab environment list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab environment show".
        /// Get the details for an environment of a lab.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabEnvironment")]
        public static dynamic AzLabEnvironmentShow(this ICakeContext context, AzLabEnvironmentShowSettings settings) {
            var baseCommand = "az lab environment show";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab formula delete".
        /// Delete formula.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabFormula")]
        public static dynamic AzLabFormulaDelete(this ICakeContext context, AzLabFormulaDeleteSettings settings) {
            var baseCommand = "az lab formula delete";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab formula export-artifacts".
        /// Export artifacts from a formula.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabFormula")]
        public static dynamic AzLabFormulaExportArtifacts(this ICakeContext context, AzLabFormulaExportArtifactsSettings settings) {
            var baseCommand = "az lab formula export-artifacts";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab formula list".
        /// List formulas in a given lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabFormula")]
        public static dynamic AzLabFormulaList(this ICakeContext context, AzLabFormulaListSettings settings) {
            var baseCommand = "az lab formula list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab formula show".
        /// Show formulae from an Azure DevTest Lab.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabFormula")]
        public static dynamic AzLabFormulaShow(this ICakeContext context, AzLabFormulaShowSettings settings) {
            var baseCommand = "az lab formula show";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab gallery-image list".
        /// List gallery images in a given lab.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabGalleryImage")]
        public static dynamic AzLabGalleryImageList(this ICakeContext context, AzLabGalleryImageListSettings settings) {
            var baseCommand = "az lab gallery-image list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab secret delete".
        /// Delete secret.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabSecret")]
        public static dynamic AzLabSecretDelete(this ICakeContext context, AzLabSecretDeleteSettings settings) {
            var baseCommand = "az lab secret delete";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab secret list".
        /// List secrets in a given user profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabSecret")]
        public static dynamic AzLabSecretList(this ICakeContext context, AzLabSecretListSettings settings) {
            var baseCommand = "az lab secret list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab secret set".
        /// Set a secret for a lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabSecret")]
        public static dynamic AzLabSecretSet(this ICakeContext context, AzLabSecretSetSettings settings) {
            var baseCommand = "az lab secret set";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab secret show".
        /// Get secret.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabSecret")]
        public static dynamic AzLabSecretShow(this ICakeContext context, AzLabSecretShowSettings settings) {
            var baseCommand = "az lab secret show";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab vm apply-artifacts".
        /// Apply artifacts to a virtual machine in Azure DevTest Lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public static dynamic AzLabVmApplyArtifacts(this ICakeContext context, AzLabVmApplyArtifactsSettings settings) {
            var baseCommand = "az lab vm apply-artifacts";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--artifacts", settings.Artifacts);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab vm claim".
        /// Claim a virtual machine from the Lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public static dynamic AzLabVmClaim(this ICakeContext context, AzLabVmClaimSettings settings) {
            var baseCommand = "az lab vm claim";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab vm create".
        /// Create a VM in a lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public static dynamic AzLabVmCreate(this ICakeContext context, AzLabVmCreateSettings settings) {
            var baseCommand = "az lab vm create";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allow-claim", settings.AllowClaim);
            AppendIfNonNull(ref baseCommand, "--artifacts", settings.Artifacts);
            AppendIfNonNull(ref baseCommand, "--disk-type", settings.DiskType);
            AppendIfNonNull(ref baseCommand, "--expiration-date", settings.ExpirationDate);
            AppendIfNonNull(ref baseCommand, "--formula", settings.Formula);
            AppendIfNonNull(ref baseCommand, "--generate-ssh-keys", settings.GenerateSshKeys);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--image-type", settings.ImageType);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-username", settings.AdminUsername);
            AppendIfNonNull(ref baseCommand, "--authentication-type", settings.AuthenticationType);
            AppendIfNonNull(ref baseCommand, "--saved-secret", settings.SavedSecret);
            AppendIfNonNull(ref baseCommand, "--ssh-key", settings.SshKey);
            AppendIfNonNull(ref baseCommand, "--ip-configuration", settings.IpConfiguration);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab vm delete".
        /// Delete virtual machine.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public static dynamic AzLabVmDelete(this ICakeContext context, AzLabVmDeleteSettings settings) {
            var baseCommand = "az lab vm delete";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab vm list".
        /// List the VMs in an Azure DevTest Lab.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public static dynamic AzLabVmList(this ICakeContext context, AzLabVmListSettings settings) {
            var baseCommand = "az lab vm list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--claimable", settings.Claimable);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--order-by", settings.OrderBy);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--environment", settings.Environment);
            AppendIfNonNull(ref baseCommand, "--filters", settings.Filters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab vm show".
        /// Get virtual machine.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public static dynamic AzLabVmShow(this ICakeContext context, AzLabVmShowSettings settings) {
            var baseCommand = "az lab vm show";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab vm start".
        /// Start a virtual machine.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public static dynamic AzLabVmStart(this ICakeContext context, AzLabVmStartSettings settings) {
            var baseCommand = "az lab vm start";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab vm stop".
        /// Stop a virtual machine This operation can take a while to complete.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public static dynamic AzLabVmStop(this ICakeContext context, AzLabVmStopSettings settings) {
            var baseCommand = "az lab vm stop";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab vnet get".
        /// Get virtual network.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVnet")]
        public static dynamic AzLabVnetGet(this ICakeContext context, AzLabVnetGetSettings settings) {
            var baseCommand = "az lab vnet get";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lab vnet list".
        /// List virtual networks in a given lab.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVnet")]
        public static dynamic AzLabVnetList(this ICakeContext context, AzLabVnetListSettings settings) {
            var baseCommand = "az lab vnet list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lock create".
        /// Create a lock.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLock")]
        public static dynamic AzLockCreate(this ICakeContext context, AzLockCreateSettings settings) {
            var baseCommand = "az lock create";
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lock delete".
        /// Delete a lock.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLock")]
        public static dynamic AzLockDelete(this ICakeContext context, AzLockDeleteSettings settings) {
            var baseCommand = "az lock delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lock list".
        /// List lock information.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLock")]
        public static dynamic AzLockList(this ICakeContext context, AzLockListSettings settings) {
            var baseCommand = "az lock list";
            AppendIfNonNull(ref baseCommand, "--filter-string", settings.FilterString);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lock show".
        /// Show the properties of a lock.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLock")]
        public static dynamic AzLockShow(this ICakeContext context, AzLockShowSettings settings) {
            var baseCommand = "az lock show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az lock update".
        /// Update a lock.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLock")]
        public static dynamic AzLockUpdate(this ICakeContext context, AzLockUpdateSettings settings) {
            var baseCommand = "az lock update";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedapp create".
        /// Create a managed application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedapp")]
        public static dynamic AzManagedappCreate(this ICakeContext context, AzManagedappCreateSettings settings) {
            var baseCommand = "az managedapp create";
            AppendIfNonNull(ref baseCommand, "--kind", settings.Kind);
            AppendIfNonNull(ref baseCommand, "--managed-rg-id", settings.ManagedRgId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--managedapp-definition-id", settings.ManagedappDefinitionId);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--plan-name", settings.PlanName);
            AppendIfNonNull(ref baseCommand, "--plan-product", settings.PlanProduct);
            AppendIfNonNull(ref baseCommand, "--plan-publisher", settings.PlanPublisher);
            AppendIfNonNull(ref baseCommand, "--plan-version", settings.PlanVersion);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedapp delete".
        /// Delete a managed application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedapp")]
        public static dynamic AzManagedappDelete(this ICakeContext context, AzManagedappDeleteSettings settings) {
            var baseCommand = "az managedapp delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedapp list".
        /// List managed applications.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedapp")]
        public static dynamic AzManagedappList(this ICakeContext context, AzManagedappListSettings settings) {
            var baseCommand = "az managedapp list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedapp show".
        /// Gets a managed application.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedapp")]
        public static dynamic AzManagedappShow(this ICakeContext context, AzManagedappShowSettings settings) {
            var baseCommand = "az managedapp show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedapp definition create".
        /// Create a managed application definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedappDefinition")]
        public static dynamic AzManagedappDefinitionCreate(this ICakeContext context, AzManagedappDefinitionCreateSettings settings) {
            var baseCommand = "az managedapp definition create";
            AppendIfNonNull(ref baseCommand, "--authorizations", settings.Authorizations);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--lock-level", settings.LockLevel);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--create-ui-definition", settings.CreateUiDefinition);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--main-template", settings.MainTemplate);
            AppendIfNonNull(ref baseCommand, "--package-file-uri", settings.PackageFileUri);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedapp definition delete".
        /// Delete a managed application definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedappDefinition")]
        public static dynamic AzManagedappDefinitionDelete(this ICakeContext context, AzManagedappDefinitionDeleteSettings settings) {
            var baseCommand = "az managedapp definition delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedapp definition list".
        /// List managed application definitions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedappDefinition")]
        public static dynamic AzManagedappDefinitionList(this ICakeContext context, AzManagedappDefinitionListSettings settings) {
            var baseCommand = "az managedapp definition list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedapp definition show".
        /// Gets a managed application definition.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedappDefinition")]
        public static dynamic AzManagedappDefinitionShow(this ICakeContext context, AzManagedappDefinitionShowSettings settings) {
            var baseCommand = "az managedapp definition show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedservices assignment create".
        /// Creates a new registration assignment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesAssignment")]
        public static dynamic AzManagedservicesAssignmentCreate(this ICakeContext context, AzManagedservicesAssignmentCreateSettings settings) {
            var baseCommand = "az managedservices assignment create";
            AppendIfNonNull(ref baseCommand, "--definition", settings.Definition);
            AppendIfNonNull(ref baseCommand, "--assignment-id", settings.AssignmentId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedservices assignment delete".
        /// Deletes the registration assignment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesAssignment")]
        public static dynamic AzManagedservicesAssignmentDelete(this ICakeContext context, AzManagedservicesAssignmentDeleteSettings settings) {
            var baseCommand = "az managedservices assignment delete";
            AppendIfNonNull(ref baseCommand, "--assignment", settings.Assignment);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedservices assignment list".
        /// List all the registration assignments.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesAssignment")]
        public static dynamic AzManagedservicesAssignmentList(this ICakeContext context, AzManagedservicesAssignmentListSettings settings) {
            var baseCommand = "az managedservices assignment list";
            AppendIfNonNull(ref baseCommand, "--include-definition", settings.IncludeDefinition);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedservices assignment show".
        /// Gets a registration assignment.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesAssignment")]
        public static dynamic AzManagedservicesAssignmentShow(this ICakeContext context, AzManagedservicesAssignmentShowSettings settings) {
            var baseCommand = "az managedservices assignment show";
            AppendIfNonNull(ref baseCommand, "--assignment", settings.Assignment);
            AppendIfNonNull(ref baseCommand, "--include-definition", settings.IncludeDefinition);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedservices definition create".
        /// Creates a new registration definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesDefinition")]
        public static dynamic AzManagedservicesDefinitionCreate(this ICakeContext context, AzManagedservicesDefinitionCreateSettings settings) {
            var baseCommand = "az managedservices definition create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--principal-id", settings.PrincipalId);
            AppendIfNonNull(ref baseCommand, "--role-definition-id", settings.RoleDefinitionId);
            AppendIfNonNull(ref baseCommand, "--tenant-id", settings.TenantId);
            AppendIfNonNull(ref baseCommand, "--definition-id", settings.DefinitionId);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--plan-name", settings.PlanName);
            AppendIfNonNull(ref baseCommand, "--plan-product", settings.PlanProduct);
            AppendIfNonNull(ref baseCommand, "--plan-publisher", settings.PlanPublisher);
            AppendIfNonNull(ref baseCommand, "--plan-version", settings.PlanVersion);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedservices definition delete".
        /// Deletes a registration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesDefinition")]
        public static dynamic AzManagedservicesDefinitionDelete(this ICakeContext context, AzManagedservicesDefinitionDeleteSettings settings) {
            var baseCommand = "az managedservices definition delete";
            AppendIfNonNull(ref baseCommand, "--definition", settings.Definition);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedservices definition list".
        /// List all the registration definitions under the default scope or under the subscription provided.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesDefinition")]
        public static dynamic AzManagedservicesDefinitionList(this ICakeContext context, AzManagedservicesDefinitionListSettings settings) {
            var baseCommand = "az managedservices definition list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az managedservices definition show".
        /// Gets a registration definition.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesDefinition")]
        public static dynamic AzManagedservicesDefinitionShow(this ICakeContext context, AzManagedservicesDefinitionShowSettings settings) {
            var baseCommand = "az managedservices definition show";
            AppendIfNonNull(ref baseCommand, "--definition", settings.Definition);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az maps account create".
        /// Create a maps account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccount")]
        public static dynamic AzMapsAccountCreate(this ICakeContext context, AzMapsAccountCreateSettings settings) {
            var baseCommand = "az maps account create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--accept-tos", settings.AcceptTos);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az maps account delete".
        /// Delete a maps account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccount")]
        public static dynamic AzMapsAccountDelete(this ICakeContext context, AzMapsAccountDeleteSettings settings) {
            var baseCommand = "az maps account delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az maps account list".
        /// Show all maps accounts in a subscription or in a resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccount")]
        public static dynamic AzMapsAccountList(this ICakeContext context, AzMapsAccountListSettings settings) {
            var baseCommand = "az maps account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az maps account show".
        /// Show the details of a maps account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccount")]
        public static dynamic AzMapsAccountShow(this ICakeContext context, AzMapsAccountShowSettings settings) {
            var baseCommand = "az maps account show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az maps account update".
        /// Update the properties of a maps account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccount")]
        public static dynamic AzMapsAccountUpdate(this ICakeContext context, AzMapsAccountUpdateSettings settings) {
            var baseCommand = "az maps account update";
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az maps account keys list".
        /// List the keys to use with the Maps APIs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccountKeys")]
        public static dynamic AzMapsAccountKeysList(this ICakeContext context, AzMapsAccountKeysListSettings settings) {
            var baseCommand = "az maps account keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az maps account keys renew".
        /// Renew either the primary or secondary key for use with the Maps APIs.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccountKeys")]
        public static dynamic AzMapsAccountKeysRenew(this ICakeContext context, AzMapsAccountKeysRenewSettings settings) {
            var baseCommand = "az maps account keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb db create".
        /// Create a MariaDB database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbDb")]
        public static dynamic AzMariadbDbCreate(this ICakeContext context, AzMariadbDbCreateSettings settings) {
            var baseCommand = "az mariadb db create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--charset", settings.Charset);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb db delete".
        /// Delete a database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbDb")]
        public static dynamic AzMariadbDbDelete(this ICakeContext context, AzMariadbDbDeleteSettings settings) {
            var baseCommand = "az mariadb db delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb db list".
        /// List the databases for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbDb")]
        public static dynamic AzMariadbDbList(this ICakeContext context, AzMariadbDbListSettings settings) {
            var baseCommand = "az mariadb db list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb db show".
        /// Show the details of a database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbDb")]
        public static dynamic AzMariadbDbShow(this ICakeContext context, AzMariadbDbShowSettings settings) {
            var baseCommand = "az mariadb db show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server create".
        /// Create a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public static dynamic AzMariadbServerCreate(this ICakeContext context, AzMariadbServerCreateSettings settings) {
            var baseCommand = "az mariadb server create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--auto-grow", settings.AutoGrow);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--geo-redundant-backup", settings.GeoRedundantBackup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--ssl-enforcement", settings.SslEnforcement);
            AppendIfNonNull(ref baseCommand, "--storage-size", settings.StorageSize);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server delete".
        /// Delete a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public static dynamic AzMariadbServerDelete(this ICakeContext context, AzMariadbServerDeleteSettings settings) {
            var baseCommand = "az mariadb server delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server georestore".
        /// Geo-restore a server from backup.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public static dynamic AzMariadbServerGeorestore(this ICakeContext context, AzMariadbServerGeorestoreSettings settings) {
            var baseCommand = "az mariadb server georestore";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--geo-redundant-backup", settings.GeoRedundantBackup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server list".
        /// List available servers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public static dynamic AzMariadbServerList(this ICakeContext context, AzMariadbServerListSettings settings) {
            var baseCommand = "az mariadb server list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server restart".
        /// Restart a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public static dynamic AzMariadbServerRestart(this ICakeContext context, AzMariadbServerRestartSettings settings) {
            var baseCommand = "az mariadb server restart";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server restore".
        /// Restore a server from backup.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public static dynamic AzMariadbServerRestore(this ICakeContext context, AzMariadbServerRestoreSettings settings) {
            var baseCommand = "az mariadb server restore";
            AppendIfNonNull(ref baseCommand, "--restore-point-in-time", settings.RestorePointInTime);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server show".
        /// Get the details of a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public static dynamic AzMariadbServerShow(this ICakeContext context, AzMariadbServerShowSettings settings) {
            var baseCommand = "az mariadb server show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server update".
        /// Update a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public static dynamic AzMariadbServerUpdate(this ICakeContext context, AzMariadbServerUpdateSettings settings) {
            var baseCommand = "az mariadb server update";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--auto-grow", settings.AutoGrow);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--ssl-enforcement", settings.SslEnforcement);
            AppendIfNonNull(ref baseCommand, "--storage-size", settings.StorageSize);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server wait".
        /// Wait for server to satisfy certain conditions.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public static dynamic AzMariadbServerWait(this ICakeContext context, AzMariadbServerWaitSettings settings) {
            var baseCommand = "az mariadb server wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server configuration list".
        /// List the configuration values for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerConfiguration")]
        public static dynamic AzMariadbServerConfigurationList(this ICakeContext context, AzMariadbServerConfigurationListSettings settings) {
            var baseCommand = "az mariadb server configuration list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server configuration set".
        /// Update the configuration of a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerConfiguration")]
        public static dynamic AzMariadbServerConfigurationSet(this ICakeContext context, AzMariadbServerConfigurationSetSettings settings) {
            var baseCommand = "az mariadb server configuration set";
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server configuration show".
        /// Get the configuration for a server.".  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerConfiguration")]
        public static dynamic AzMariadbServerConfigurationShow(this ICakeContext context, AzMariadbServerConfigurationShowSettings settings) {
            var baseCommand = "az mariadb server configuration show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server firewall-rule create".
        /// Create a new firewall rule for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerFirewallRule")]
        public static dynamic AzMariadbServerFirewallRuleCreate(this ICakeContext context, AzMariadbServerFirewallRuleCreateSettings settings) {
            var baseCommand = "az mariadb server firewall-rule create";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server firewall-rule delete".
        /// Delete a firewall rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerFirewallRule")]
        public static dynamic AzMariadbServerFirewallRuleDelete(this ICakeContext context, AzMariadbServerFirewallRuleDeleteSettings settings) {
            var baseCommand = "az mariadb server firewall-rule delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server firewall-rule list".
        /// List all firewall rules for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerFirewallRule")]
        public static dynamic AzMariadbServerFirewallRuleList(this ICakeContext context, AzMariadbServerFirewallRuleListSettings settings) {
            var baseCommand = "az mariadb server firewall-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server firewall-rule show".
        /// Get the details of a firewall rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerFirewallRule")]
        public static dynamic AzMariadbServerFirewallRuleShow(this ICakeContext context, AzMariadbServerFirewallRuleShowSettings settings) {
            var baseCommand = "az mariadb server firewall-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server firewall-rule update".
        /// Update a firewall rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerFirewallRule")]
        public static dynamic AzMariadbServerFirewallRuleUpdate(this ICakeContext context, AzMariadbServerFirewallRuleUpdateSettings settings) {
            var baseCommand = "az mariadb server firewall-rule update";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server replica create".
        /// Create a read replica for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerReplica")]
        public static dynamic AzMariadbServerReplicaCreate(this ICakeContext context, AzMariadbServerReplicaCreateSettings settings) {
            var baseCommand = "az mariadb server replica create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server replica list".
        /// List all read replicas for a given server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerReplica")]
        public static dynamic AzMariadbServerReplicaList(this ICakeContext context, AzMariadbServerReplicaListSettings settings) {
            var baseCommand = "az mariadb server replica list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server replica stop".
        /// Stop replication to a read replica and make it a read/write server.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerReplica")]
        public static dynamic AzMariadbServerReplicaStop(this ICakeContext context, AzMariadbServerReplicaStopSettings settings) {
            var baseCommand = "az mariadb server replica stop";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server vnet-rule create".
        /// Create a virtual network rule to allows access to a MariaDB server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerVnetRule")]
        public static dynamic AzMariadbServerVnetRuleCreate(this ICakeContext context, AzMariadbServerVnetRuleCreateSettings settings) {
            var baseCommand = "az mariadb server vnet-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server vnet-rule delete".
        /// Deletes the virtual network rule with the given name.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerVnetRule")]
        public static dynamic AzMariadbServerVnetRuleDelete(this ICakeContext context, AzMariadbServerVnetRuleDeleteSettings settings) {
            var baseCommand = "az mariadb server vnet-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server vnet-rule list".
        /// Gets a list of virtual network rules in a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerVnetRule")]
        public static dynamic AzMariadbServerVnetRuleList(this ICakeContext context, AzMariadbServerVnetRuleListSettings settings) {
            var baseCommand = "az mariadb server vnet-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server vnet-rule show".
        /// Gets a virtual network rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerVnetRule")]
        public static dynamic AzMariadbServerVnetRuleShow(this ICakeContext context, AzMariadbServerVnetRuleShowSettings settings) {
            var baseCommand = "az mariadb server vnet-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server vnet-rule update".
        /// Update a virtual network rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerVnetRule")]
        public static dynamic AzMariadbServerVnetRuleUpdate(this ICakeContext context, AzMariadbServerVnetRuleUpdateSettings settings) {
            var baseCommand = "az mariadb server vnet-rule update";
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server-logs download".
        /// Download log files.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerLogs")]
        public static dynamic AzMariadbServerLogsDownload(this ICakeContext context, AzMariadbServerLogsDownloadSettings settings) {
            var baseCommand = "az mariadb server-logs download";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mariadb server-logs list".
        /// List log files for a server.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerLogs")]
        public static dynamic AzMariadbServerLogsList(this ICakeContext context, AzMariadbServerLogsListSettings settings) {
            var baseCommand = "az mariadb server-logs list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--file-last-written", settings.FileLastWritten);
            AppendIfNonNull(ref baseCommand, "--filename-contains", settings.FilenameContains);
            AppendIfNonNull(ref baseCommand, "--max-file-size", settings.MaxFileSize);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor action-group create".
        /// Create a new action group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActionGroup")]
        public static dynamic AzMonitorActionGroupCreate(this ICakeContext context, AzMonitorActionGroupCreateSettings settings) {
            var baseCommand = "az monitor action-group create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--short-name", settings.ShortName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor action-group delete".
        /// Delete an action group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActionGroup")]
        public static dynamic AzMonitorActionGroupDelete(this ICakeContext context, AzMonitorActionGroupDeleteSettings settings) {
            var baseCommand = "az monitor action-group delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor action-group enable-receiver".
        /// Enable a receiver in an action group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActionGroup")]
        public static dynamic AzMonitorActionGroupEnableReceiver(this ICakeContext context, AzMonitorActionGroupEnableReceiverSettings settings) {
            var baseCommand = "az monitor action-group enable-receiver";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--action-group", settings.ActionGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor action-group list".
        /// List action groups under a resource group or the current subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActionGroup")]
        public static dynamic AzMonitorActionGroupList(this ICakeContext context, AzMonitorActionGroupListSettings settings) {
            var baseCommand = "az monitor action-group list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor action-group show".
        /// Show the details of an action group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActionGroup")]
        public static dynamic AzMonitorActionGroupShow(this ICakeContext context, AzMonitorActionGroupShowSettings settings) {
            var baseCommand = "az monitor action-group show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor action-group update".
        /// Update an action group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActionGroup")]
        public static dynamic AzMonitorActionGroupUpdate(this ICakeContext context, AzMonitorActionGroupUpdateSettings settings) {
            var baseCommand = "az monitor action-group update";
            AppendIfNonNull(ref baseCommand, "--short-name", settings.ShortName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add-action", settings.AddAction);
            AppendIfNonNull(ref baseCommand, "--remove-action", settings.RemoveAction);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor activity-log list".
        /// List and query activity log events.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLog")]
        public static dynamic AzMonitorActivityLogList(this ICakeContext context, AzMonitorActivityLogListSettings settings) {
            var baseCommand = "az monitor activity-log list";
            AppendIfNonNull(ref baseCommand, "--max-events", settings.MaxEvents);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--caller", settings.Caller);
            AppendIfNonNull(ref baseCommand, "--correlation-id", settings.CorrelationId);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-id", settings.ResourceId);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--end-time", settings.EndTime);
            AppendIfNonNull(ref baseCommand, "--offset", settings.Offset);
            AppendIfNonNull(ref baseCommand, "--start-time", settings.StartTime);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor activity-log list-categories".
        /// List the event categories of activity logs.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLog")]
        public static dynamic AzMonitorActivityLogListCategories(this ICakeContext context, AzMonitorActivityLogListCategoriesSettings settings) {
            var baseCommand = "az monitor activity-log list-categories";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor activity-log alert create".
        /// Create a default activity log alert.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlert")]
        public static dynamic AzMonitorActivityLogAlertCreate(this ICakeContext context, AzMonitorActivityLogAlertCreateSettings settings) {
            var baseCommand = "az monitor activity-log alert create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--action-group", settings.ActionGroup);
            AppendIfNonNull(ref baseCommand, "--condition", settings.Condition);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--disable", settings.Disable);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--webhook-properties", settings.WebhookProperties);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor activity-log alert delete".
        /// Delete an activity log alert.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlert")]
        public static dynamic AzMonitorActivityLogAlertDelete(this ICakeContext context, AzMonitorActivityLogAlertDeleteSettings settings) {
            var baseCommand = "az monitor activity-log alert delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor activity-log alert list".
        /// List activity log alerts under a resource group or the current subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlert")]
        public static dynamic AzMonitorActivityLogAlertList(this ICakeContext context, AzMonitorActivityLogAlertListSettings settings) {
            var baseCommand = "az monitor activity-log alert list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor activity-log alert show".
        /// Get an activity log alert.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlert")]
        public static dynamic AzMonitorActivityLogAlertShow(this ICakeContext context, AzMonitorActivityLogAlertShowSettings settings) {
            var baseCommand = "az monitor activity-log alert show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor activity-log alert update".
        /// Update the details of this activity log alert.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlert")]
        public static dynamic AzMonitorActivityLogAlertUpdate(this ICakeContext context, AzMonitorActivityLogAlertUpdateSettings settings) {
            var baseCommand = "az monitor activity-log alert update";
            AppendIfNonNull(ref baseCommand, "--condition", settings.Condition);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor activity-log alert action-group add".
        /// Add action groups to this activity log alert. It can also be used to overwrite existing webhook properties of particular action groups.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlertActionGroup")]
        public static dynamic AzMonitorActivityLogAlertActionGroupAdd(this ICakeContext context, AzMonitorActivityLogAlertActionGroupAddSettings settings) {
            var baseCommand = "az monitor activity-log alert action-group add";
            AppendIfNonNull(ref baseCommand, "--action-group", settings.ActionGroup);
            AppendIfNonNull(ref baseCommand, "--reset", settings.Reset);
            AppendIfNonNull(ref baseCommand, "--strict", settings.Strict);
            AppendIfNonNull(ref baseCommand, "--webhook-properties", settings.WebhookProperties);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor activity-log alert action-group remove".
        /// Remove action groups from this activity log alert.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlertActionGroup")]
        public static dynamic AzMonitorActivityLogAlertActionGroupRemove(this ICakeContext context, AzMonitorActivityLogAlertActionGroupRemoveSettings settings) {
            var baseCommand = "az monitor activity-log alert action-group remove";
            AppendIfNonNull(ref baseCommand, "--action-group", settings.ActionGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor activity-log alert scope add".
        /// Add scopes to this activity log alert.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlertScope")]
        public static dynamic AzMonitorActivityLogAlertScopeAdd(this ICakeContext context, AzMonitorActivityLogAlertScopeAddSettings settings) {
            var baseCommand = "az monitor activity-log alert scope add";
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--reset", settings.Reset);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor activity-log alert scope remove".
        /// Removes scopes from this activity log alert.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlertScope")]
        public static dynamic AzMonitorActivityLogAlertScopeRemove(this ICakeContext context, AzMonitorActivityLogAlertScopeRemoveSettings settings) {
            var baseCommand = "az monitor activity-log alert scope remove";
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale create".
        /// Create new autoscale settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscale")]
        public static dynamic AzMonitorAutoscaleCreate(this ICakeContext context, AzMonitorAutoscaleCreateSettings settings) {
            var baseCommand = "az monitor autoscale create";
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--email-administrator", settings.EmailAdministrator);
            AppendIfNonNull(ref baseCommand, "--email-coadministrators", settings.EmailCoadministrators);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale delete".
        /// Deletes and autoscale setting.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscale")]
        public static dynamic AzMonitorAutoscaleDelete(this ICakeContext context, AzMonitorAutoscaleDeleteSettings settings) {
            var baseCommand = "az monitor autoscale delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale list".
        /// Lists the autoscale settings for a resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscale")]
        public static dynamic AzMonitorAutoscaleList(this ICakeContext context, AzMonitorAutoscaleListSettings settings) {
            var baseCommand = "az monitor autoscale list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale show".
        /// Show autoscale setting details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscale")]
        public static dynamic AzMonitorAutoscaleShow(this ICakeContext context, AzMonitorAutoscaleShowSettings settings) {
            var baseCommand = "az monitor autoscale show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale update".
        /// Update autoscale settings.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscale")]
        public static dynamic AzMonitorAutoscaleUpdate(this ICakeContext context, AzMonitorAutoscaleUpdateSettings settings) {
            var baseCommand = "az monitor autoscale update";
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--add-action", settings.AddAction);
            AppendIfNonNull(ref baseCommand, "--email-administrator", settings.EmailAdministrator);
            AppendIfNonNull(ref baseCommand, "--email-coadministrators", settings.EmailCoadministrators);
            AppendIfNonNull(ref baseCommand, "--remove-action", settings.RemoveAction);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale profile create".
        /// Create a fixed or recurring autoscale profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleProfile")]
        public static dynamic AzMonitorAutoscaleProfileCreate(this ICakeContext context, AzMonitorAutoscaleProfileCreateSettings settings) {
            var baseCommand = "az monitor autoscale profile create";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--copy-rules", settings.CopyRules);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--timezone", settings.Timezone);
            AppendIfNonNull(ref baseCommand, "--end", settings.End);
            AppendIfNonNull(ref baseCommand, "--recurrence", settings.Recurrence);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale profile delete".
        /// Delete an autoscale profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleProfile")]
        public static dynamic AzMonitorAutoscaleProfileDelete(this ICakeContext context, AzMonitorAutoscaleProfileDeleteSettings settings) {
            var baseCommand = "az monitor autoscale profile delete";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale profile list".
        /// List autoscale profiles.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleProfile")]
        public static dynamic AzMonitorAutoscaleProfileList(this ICakeContext context, AzMonitorAutoscaleProfileListSettings settings) {
            var baseCommand = "az monitor autoscale profile list";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale profile list-timezones".
        /// Look up time zone information.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleProfile")]
        public static dynamic AzMonitorAutoscaleProfileListTimezones(this ICakeContext context, AzMonitorAutoscaleProfileListTimezonesSettings settings) {
            var baseCommand = "az monitor autoscale profile list-timezones";
            AppendIfNonNull(ref baseCommand, "--offset", settings.Offset);
            AppendIfNonNull(ref baseCommand, "--search-query", settings.SearchQuery);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale profile show".
        /// Show details of an autoscale profile.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleProfile")]
        public static dynamic AzMonitorAutoscaleProfileShow(this ICakeContext context, AzMonitorAutoscaleProfileShowSettings settings) {
            var baseCommand = "az monitor autoscale profile show";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale rule copy".
        /// Copy autoscale rules from one profile to another.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleRule")]
        public static dynamic AzMonitorAutoscaleRuleCopy(this ICakeContext context, AzMonitorAutoscaleRuleCopySettings settings) {
            var baseCommand = "az monitor autoscale rule copy";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--dest-schedule", settings.DestSchedule);
            AppendIfNonNull(ref baseCommand, "--index", settings.Index);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-schedule", settings.SourceSchedule);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale rule create".
        /// Add a new autoscale rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleRule")]
        public static dynamic AzMonitorAutoscaleRuleCreate(this ICakeContext context, AzMonitorAutoscaleRuleCreateSettings settings) {
            var baseCommand = "az monitor autoscale rule create";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--condition", settings.Condition);
            AppendIfNonNull(ref baseCommand, "--scale", settings.Scale);
            AppendIfNonNull(ref baseCommand, "--cooldown", settings.Cooldown);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--timegrain", settings.Timegrain);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale rule delete".
        /// Remove autoscale rules from a profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleRule")]
        public static dynamic AzMonitorAutoscaleRuleDelete(this ICakeContext context, AzMonitorAutoscaleRuleDeleteSettings settings) {
            var baseCommand = "az monitor autoscale rule delete";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--index", settings.Index);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor autoscale rule list".
        /// List autoscale rules for a profile.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleRule")]
        public static dynamic AzMonitorAutoscaleRuleList(this ICakeContext context, AzMonitorAutoscaleRuleListSettings settings) {
            var baseCommand = "az monitor autoscale rule list";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor diagnostic-settings create".
        /// Create diagnostic settings for the specified resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettings")]
        public static dynamic AzMonitorDiagnosticSettingsCreate(this ICakeContext context, AzMonitorDiagnosticSettingsCreateSettings settings) {
            var baseCommand = "az monitor diagnostic-settings create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--event-hub", settings.EventHub);
            AppendIfNonNull(ref baseCommand, "--event-hub-rule", settings.EventHubRule);
            AppendIfNonNull(ref baseCommand, "--logs", settings.Logs);
            AppendIfNonNull(ref baseCommand, "--metrics", settings.Metrics);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--workspace", settings.Workspace);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor diagnostic-settings delete".
        /// Deletes existing diagnostic settings for the specified resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettings")]
        public static dynamic AzMonitorDiagnosticSettingsDelete(this ICakeContext context, AzMonitorDiagnosticSettingsDeleteSettings settings) {
            var baseCommand = "az monitor diagnostic-settings delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor diagnostic-settings list".
        /// Gets the active diagnostic settings list for the specified resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettings")]
        public static dynamic AzMonitorDiagnosticSettingsList(this ICakeContext context, AzMonitorDiagnosticSettingsListSettings settings) {
            var baseCommand = "az monitor diagnostic-settings list";
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor diagnostic-settings show".
        /// Gets the active diagnostic settings for the specified resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettings")]
        public static dynamic AzMonitorDiagnosticSettingsShow(this ICakeContext context, AzMonitorDiagnosticSettingsShowSettings settings) {
            var baseCommand = "az monitor diagnostic-settings show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor diagnostic-settings update".
        /// Update diagnostic settings.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettings")]
        public static dynamic AzMonitorDiagnosticSettingsUpdate(this ICakeContext context, AzMonitorDiagnosticSettingsUpdateSettings settings) {
            var baseCommand = "az monitor diagnostic-settings update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor diagnostic-settings categories list".
        /// Lists the diagnostic settings categories for the specified resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettingsCategories")]
        public static dynamic AzMonitorDiagnosticSettingsCategoriesList(this ICakeContext context, AzMonitorDiagnosticSettingsCategoriesListSettings settings) {
            var baseCommand = "az monitor diagnostic-settings categories list";
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor diagnostic-settings categories show".
        /// Gets the diagnostic settings category for the specified resource.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettingsCategories")]
        public static dynamic AzMonitorDiagnosticSettingsCategoriesShow(this ICakeContext context, AzMonitorDiagnosticSettingsCategoriesShowSettings settings) {
            var baseCommand = "az monitor diagnostic-settings categories show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-analytics workspace create".
        /// Create a workspace instance.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public static dynamic AzMonitorLogAnalyticsWorkspaceCreate(this ICakeContext context, AzMonitorLogAnalyticsWorkspaceCreateSettings settings) {
            var baseCommand = "az monitor log-analytics workspace create";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--retention-time", settings.RetentionTime);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-analytics workspace delete".
        /// Delete a workspace instance.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public static dynamic AzMonitorLogAnalyticsWorkspaceDelete(this ICakeContext context, AzMonitorLogAnalyticsWorkspaceDeleteSettings settings) {
            var baseCommand = "az monitor log-analytics workspace delete";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-analytics workspace get-schema".
        /// Get the schema for a given workspace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public static dynamic AzMonitorLogAnalyticsWorkspaceGetSchema(this ICakeContext context, AzMonitorLogAnalyticsWorkspaceGetSchemaSettings settings) {
            var baseCommand = "az monitor log-analytics workspace get-schema";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-analytics workspace get-shared-keys".
        /// Get the shared keys for a workspace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public static dynamic AzMonitorLogAnalyticsWorkspaceGetSharedKeys(this ICakeContext context, AzMonitorLogAnalyticsWorkspaceGetSharedKeysSettings settings) {
            var baseCommand = "az monitor log-analytics workspace get-shared-keys";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-analytics workspace list".
        /// Get a list of workspaces under a resource group or a subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public static dynamic AzMonitorLogAnalyticsWorkspaceList(this ICakeContext context, AzMonitorLogAnalyticsWorkspaceListSettings settings) {
            var baseCommand = "az monitor log-analytics workspace list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-analytics workspace list-management-groups".
        /// Get a list of management groups connected to a workspace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public static dynamic AzMonitorLogAnalyticsWorkspaceListManagementGroups(this ICakeContext context, AzMonitorLogAnalyticsWorkspaceListManagementGroupsSettings settings) {
            var baseCommand = "az monitor log-analytics workspace list-management-groups";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-analytics workspace list-usages".
        /// Get a list of usage metrics for a workspace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public static dynamic AzMonitorLogAnalyticsWorkspaceListUsages(this ICakeContext context, AzMonitorLogAnalyticsWorkspaceListUsagesSettings settings) {
            var baseCommand = "az monitor log-analytics workspace list-usages";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-analytics workspace show".
        /// Show a workspace instance.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public static dynamic AzMonitorLogAnalyticsWorkspaceShow(this ICakeContext context, AzMonitorLogAnalyticsWorkspaceShowSettings settings) {
            var baseCommand = "az monitor log-analytics workspace show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-analytics workspace update".
        /// Update a workspace instance.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public static dynamic AzMonitorLogAnalyticsWorkspaceUpdate(this ICakeContext context, AzMonitorLogAnalyticsWorkspaceUpdateSettings settings) {
            var baseCommand = "az monitor log-analytics workspace update";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--retention-time", settings.RetentionTime);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-analytics workspace pack disable".
        /// Disable an intelligence pack for a given workspace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspacePack")]
        public static dynamic AzMonitorLogAnalyticsWorkspacePackDisable(this ICakeContext context, AzMonitorLogAnalyticsWorkspacePackDisableSettings settings) {
            var baseCommand = "az monitor log-analytics workspace pack disable";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-analytics workspace pack enable".
        /// Enable an intelligence pack for a given workspace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspacePack")]
        public static dynamic AzMonitorLogAnalyticsWorkspacePackEnable(this ICakeContext context, AzMonitorLogAnalyticsWorkspacePackEnableSettings settings) {
            var baseCommand = "az monitor log-analytics workspace pack enable";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-analytics workspace pack list".
        /// List all the intelligence packs possible and whether they are enabled or disabled for a given workspace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspacePack")]
        public static dynamic AzMonitorLogAnalyticsWorkspacePackList(this ICakeContext context, AzMonitorLogAnalyticsWorkspacePackListSettings settings) {
            var baseCommand = "az monitor log-analytics workspace pack list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-profiles create".
        /// Create a log profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogProfiles")]
        public static dynamic AzMonitorLogProfilesCreate(this ICakeContext context, AzMonitorLogProfilesCreateSettings settings) {
            var baseCommand = "az monitor log-profiles create";
            AppendIfNonNull(ref baseCommand, "--categories", settings.Categories);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--locations", settings.Locations);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--service-bus-rule-id", settings.ServiceBusRuleId);
            AppendIfNonNull(ref baseCommand, "--storage-account-id", settings.StorageAccountId);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--days", settings.Days);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-profiles delete".
        /// Deletes the log profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogProfiles")]
        public static dynamic AzMonitorLogProfilesDelete(this ICakeContext context, AzMonitorLogProfilesDeleteSettings settings) {
            var baseCommand = "az monitor log-profiles delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-profiles list".
        /// List the log profiles.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogProfiles")]
        public static dynamic AzMonitorLogProfilesList(this ICakeContext context, AzMonitorLogProfilesListSettings settings) {
            var baseCommand = "az monitor log-profiles list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-profiles show".
        /// Gets the log profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogProfiles")]
        public static dynamic AzMonitorLogProfilesShow(this ICakeContext context, AzMonitorLogProfilesShowSettings settings) {
            var baseCommand = "az monitor log-profiles show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor log-profiles update".
        /// Update a log profile.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogProfiles")]
        public static dynamic AzMonitorLogProfilesUpdate(this ICakeContext context, AzMonitorLogProfilesUpdateSettings settings) {
            var baseCommand = "az monitor log-profiles update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor metrics list".
        /// List the metric values for a resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetrics")]
        public static dynamic AzMonitorMetricsList(this ICakeContext context, AzMonitorMetricsListSettings settings) {
            var baseCommand = "az monitor metrics list";
            AppendIfNonNull(ref baseCommand, "--aggregation", settings.Aggregation);
            AppendIfNonNull(ref baseCommand, "--dimension", settings.Dimension);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--metrics", settings.Metrics);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--end-time", settings.EndTime);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--offset", settings.Offset);
            AppendIfNonNull(ref baseCommand, "--start-time", settings.StartTime);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor metrics list-definitions".
        /// Lists the metric definitions for the resource.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetrics")]
        public static dynamic AzMonitorMetricsListDefinitions(this ICakeContext context, AzMonitorMetricsListDefinitionsSettings settings) {
            var baseCommand = "az monitor metrics list-definitions";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor metrics alert create".
        /// Create a metric-based alert rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetricsAlert")]
        public static dynamic AzMonitorMetricsAlertCreate(this ICakeContext context, AzMonitorMetricsAlertCreateSettings settings) {
            var baseCommand = "az monitor metrics alert create";
            AppendIfNonNull(ref baseCommand, "--condition", settings.Condition);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scopes", settings.Scopes);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--auto-mitigate", settings.AutoMitigate);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--evaluation-frequency", settings.EvaluationFrequency);
            AppendIfNonNull(ref baseCommand, "--severity", settings.Severity);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--window-size", settings.WindowSize);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor metrics alert delete".
        /// Delete a metrics-based alert rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetricsAlert")]
        public static dynamic AzMonitorMetricsAlertDelete(this ICakeContext context, AzMonitorMetricsAlertDeleteSettings settings) {
            var baseCommand = "az monitor metrics alert delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor metrics alert list".
        /// List metric-based alert rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetricsAlert")]
        public static dynamic AzMonitorMetricsAlertList(this ICakeContext context, AzMonitorMetricsAlertListSettings settings) {
            var baseCommand = "az monitor metrics alert list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor metrics alert show".
        /// Show a metrics-based alert rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetricsAlert")]
        public static dynamic AzMonitorMetricsAlertShow(this ICakeContext context, AzMonitorMetricsAlertShowSettings settings) {
            var baseCommand = "az monitor metrics alert show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az monitor metrics alert update".
        /// Update a metric-based alert rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetricsAlert")]
        public static dynamic AzMonitorMetricsAlertUpdate(this ICakeContext context, AzMonitorMetricsAlertUpdateSettings settings) {
            var baseCommand = "az monitor metrics alert update";
            AppendIfNonNull(ref baseCommand, "--auto-mitigate", settings.AutoMitigate);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--evaluation-frequency", settings.EvaluationFrequency);
            AppendIfNonNull(ref baseCommand, "--scopes", settings.Scopes);
            AppendIfNonNull(ref baseCommand, "--severity", settings.Severity);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--window-size", settings.WindowSize);
            AppendIfNonNull(ref baseCommand, "--add-action", settings.AddAction);
            AppendIfNonNull(ref baseCommand, "--remove-actions", settings.RemoveActions);
            AppendIfNonNull(ref baseCommand, "--add-condition", settings.AddCondition);
            AppendIfNonNull(ref baseCommand, "--remove-conditions", settings.RemoveConditions);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql db create".
        /// Create a MySQL database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlDb")]
        public static dynamic AzMysqlDbCreate(this ICakeContext context, AzMysqlDbCreateSettings settings) {
            var baseCommand = "az mysql db create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--charset", settings.Charset);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql db delete".
        /// Delete a database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlDb")]
        public static dynamic AzMysqlDbDelete(this ICakeContext context, AzMysqlDbDeleteSettings settings) {
            var baseCommand = "az mysql db delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql db list".
        /// List the databases for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlDb")]
        public static dynamic AzMysqlDbList(this ICakeContext context, AzMysqlDbListSettings settings) {
            var baseCommand = "az mysql db list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql db show".
        /// Show the details of a database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlDb")]
        public static dynamic AzMysqlDbShow(this ICakeContext context, AzMysqlDbShowSettings settings) {
            var baseCommand = "az mysql db show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server create".
        /// Create a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public static dynamic AzMysqlServerCreate(this ICakeContext context, AzMysqlServerCreateSettings settings) {
            var baseCommand = "az mysql server create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--auto-grow", settings.AutoGrow);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--geo-redundant-backup", settings.GeoRedundantBackup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--ssl-enforcement", settings.SslEnforcement);
            AppendIfNonNull(ref baseCommand, "--storage-size", settings.StorageSize);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server delete".
        /// Delete a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public static dynamic AzMysqlServerDelete(this ICakeContext context, AzMysqlServerDeleteSettings settings) {
            var baseCommand = "az mysql server delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server georestore".
        /// Geo-restore a server from backup.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public static dynamic AzMysqlServerGeorestore(this ICakeContext context, AzMysqlServerGeorestoreSettings settings) {
            var baseCommand = "az mysql server georestore";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--geo-redundant-backup", settings.GeoRedundantBackup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server list".
        /// List available servers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public static dynamic AzMysqlServerList(this ICakeContext context, AzMysqlServerListSettings settings) {
            var baseCommand = "az mysql server list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server restart".
        /// Restart a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public static dynamic AzMysqlServerRestart(this ICakeContext context, AzMysqlServerRestartSettings settings) {
            var baseCommand = "az mysql server restart";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server restore".
        /// Restore a server from backup.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public static dynamic AzMysqlServerRestore(this ICakeContext context, AzMysqlServerRestoreSettings settings) {
            var baseCommand = "az mysql server restore";
            AppendIfNonNull(ref baseCommand, "--restore-point-in-time", settings.RestorePointInTime);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server show".
        /// Get the details of a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public static dynamic AzMysqlServerShow(this ICakeContext context, AzMysqlServerShowSettings settings) {
            var baseCommand = "az mysql server show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server update".
        /// Update a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public static dynamic AzMysqlServerUpdate(this ICakeContext context, AzMysqlServerUpdateSettings settings) {
            var baseCommand = "az mysql server update";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--auto-grow", settings.AutoGrow);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--ssl-enforcement", settings.SslEnforcement);
            AppendIfNonNull(ref baseCommand, "--storage-size", settings.StorageSize);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server wait".
        /// Wait for server to satisfy certain conditions.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public static dynamic AzMysqlServerWait(this ICakeContext context, AzMysqlServerWaitSettings settings) {
            var baseCommand = "az mysql server wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server configuration list".
        /// List the configuration values for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerConfiguration")]
        public static dynamic AzMysqlServerConfigurationList(this ICakeContext context, AzMysqlServerConfigurationListSettings settings) {
            var baseCommand = "az mysql server configuration list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server configuration set".
        /// Update the configuration of a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerConfiguration")]
        public static dynamic AzMysqlServerConfigurationSet(this ICakeContext context, AzMysqlServerConfigurationSetSettings settings) {
            var baseCommand = "az mysql server configuration set";
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server configuration show".
        /// Get the configuration for a server.".  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerConfiguration")]
        public static dynamic AzMysqlServerConfigurationShow(this ICakeContext context, AzMysqlServerConfigurationShowSettings settings) {
            var baseCommand = "az mysql server configuration show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server firewall-rule create".
        /// Create a new firewall rule for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerFirewallRule")]
        public static dynamic AzMysqlServerFirewallRuleCreate(this ICakeContext context, AzMysqlServerFirewallRuleCreateSettings settings) {
            var baseCommand = "az mysql server firewall-rule create";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server firewall-rule delete".
        /// Delete a firewall rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerFirewallRule")]
        public static dynamic AzMysqlServerFirewallRuleDelete(this ICakeContext context, AzMysqlServerFirewallRuleDeleteSettings settings) {
            var baseCommand = "az mysql server firewall-rule delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server firewall-rule list".
        /// List all firewall rules for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerFirewallRule")]
        public static dynamic AzMysqlServerFirewallRuleList(this ICakeContext context, AzMysqlServerFirewallRuleListSettings settings) {
            var baseCommand = "az mysql server firewall-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server firewall-rule show".
        /// Get the details of a firewall rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerFirewallRule")]
        public static dynamic AzMysqlServerFirewallRuleShow(this ICakeContext context, AzMysqlServerFirewallRuleShowSettings settings) {
            var baseCommand = "az mysql server firewall-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server firewall-rule update".
        /// Update a firewall rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerFirewallRule")]
        public static dynamic AzMysqlServerFirewallRuleUpdate(this ICakeContext context, AzMysqlServerFirewallRuleUpdateSettings settings) {
            var baseCommand = "az mysql server firewall-rule update";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server replica create".
        /// Create a read replica for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerReplica")]
        public static dynamic AzMysqlServerReplicaCreate(this ICakeContext context, AzMysqlServerReplicaCreateSettings settings) {
            var baseCommand = "az mysql server replica create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server replica list".
        /// List all read replicas for a given server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerReplica")]
        public static dynamic AzMysqlServerReplicaList(this ICakeContext context, AzMysqlServerReplicaListSettings settings) {
            var baseCommand = "az mysql server replica list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server replica stop".
        /// Stop replication to a read replica and make it a read/write server.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerReplica")]
        public static dynamic AzMysqlServerReplicaStop(this ICakeContext context, AzMysqlServerReplicaStopSettings settings) {
            var baseCommand = "az mysql server replica stop";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server vnet-rule create".
        /// Create a virtual network rule to allows access to a MySQL server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerVnetRule")]
        public static dynamic AzMysqlServerVnetRuleCreate(this ICakeContext context, AzMysqlServerVnetRuleCreateSettings settings) {
            var baseCommand = "az mysql server vnet-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server vnet-rule delete".
        /// Deletes the virtual network rule with the given name.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerVnetRule")]
        public static dynamic AzMysqlServerVnetRuleDelete(this ICakeContext context, AzMysqlServerVnetRuleDeleteSettings settings) {
            var baseCommand = "az mysql server vnet-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server vnet-rule list".
        /// Gets a list of virtual network rules in a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerVnetRule")]
        public static dynamic AzMysqlServerVnetRuleList(this ICakeContext context, AzMysqlServerVnetRuleListSettings settings) {
            var baseCommand = "az mysql server vnet-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server vnet-rule show".
        /// Gets a virtual network rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerVnetRule")]
        public static dynamic AzMysqlServerVnetRuleShow(this ICakeContext context, AzMysqlServerVnetRuleShowSettings settings) {
            var baseCommand = "az mysql server vnet-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server vnet-rule update".
        /// Update a virtual network rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerVnetRule")]
        public static dynamic AzMysqlServerVnetRuleUpdate(this ICakeContext context, AzMysqlServerVnetRuleUpdateSettings settings) {
            var baseCommand = "az mysql server vnet-rule update";
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server-logs download".
        /// Download log files.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerLogs")]
        public static dynamic AzMysqlServerLogsDownload(this ICakeContext context, AzMysqlServerLogsDownloadSettings settings) {
            var baseCommand = "az mysql server-logs download";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az mysql server-logs list".
        /// List log files for a server.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerLogs")]
        public static dynamic AzMysqlServerLogsList(this ICakeContext context, AzMysqlServerLogsListSettings settings) {
            var baseCommand = "az mysql server-logs list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--file-last-written", settings.FileLastWritten);
            AppendIfNonNull(ref baseCommand, "--filename-contains", settings.FilenameContains);
            AppendIfNonNull(ref baseCommand, "--max-file-size", settings.MaxFileSize);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles list-mount-targets".
        /// List the mount targets of an Azure NetApp Files (ANF) volume.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfiles")]
        public static dynamic AzNetappfilesListMountTargets(this ICakeContext context, AzNetappfilesListMountTargetsSettings settings) {
            var baseCommand = "az netappfiles list-mount-targets";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--volume-name", settings.VolumeName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles account create".
        /// Create a new Azure NetApp Files (ANF) account. Note that active directories are added using the subgroup commands.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccount")]
        public static dynamic AzNetappfilesAccountCreate(this ICakeContext context, AzNetappfilesAccountCreateSettings settings) {
            var baseCommand = "az netappfiles account create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles account delete".
        /// Delete the specified ANF account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccount")]
        public static dynamic AzNetappfilesAccountDelete(this ICakeContext context, AzNetappfilesAccountDeleteSettings settings) {
            var baseCommand = "az netappfiles account delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles account list".
        /// List ANF accounts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccount")]
        public static dynamic AzNetappfilesAccountList(this ICakeContext context, AzNetappfilesAccountListSettings settings) {
            var baseCommand = "az netappfiles account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles account show".
        /// Get the specified ANF account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccount")]
        public static dynamic AzNetappfilesAccountShow(this ICakeContext context, AzNetappfilesAccountShowSettings settings) {
            var baseCommand = "az netappfiles account show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles account update".
        /// Set/modify the tags for a specified ANF account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccount")]
        public static dynamic AzNetappfilesAccountUpdate(this ICakeContext context, AzNetappfilesAccountUpdateSettings settings) {
            var baseCommand = "az netappfiles account update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles account ad add".
        /// Add an active directory to the account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccountAd")]
        public static dynamic AzNetappfilesAccountAdAdd(this ICakeContext context, AzNetappfilesAccountAdAddSettings settings) {
            var baseCommand = "az netappfiles account ad add";
            AppendIfNonNull(ref baseCommand, "--dns", settings.Dns);
            AppendIfNonNull(ref baseCommand, "--domain", settings.Domain);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--smb-server-name", settings.SmbServerName);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--organizational-unit", settings.OrganizationalUnit);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles account ad list".
        /// List the active directories of an account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccountAd")]
        public static dynamic AzNetappfilesAccountAdList(this ICakeContext context, AzNetappfilesAccountAdListSettings settings) {
            var baseCommand = "az netappfiles account ad list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles account ad remove".
        /// Remove an active directory from the account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccountAd")]
        public static dynamic AzNetappfilesAccountAdRemove(this ICakeContext context, AzNetappfilesAccountAdRemoveSettings settings) {
            var baseCommand = "az netappfiles account ad remove";
            AppendIfNonNull(ref baseCommand, "--active-directory", settings.ActiveDirectory);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles pool create".
        /// Create a new Azure NetApp Files (ANF) pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesPool")]
        public static dynamic AzNetappfilesPoolCreate(this ICakeContext context, AzNetappfilesPoolCreateSettings settings) {
            var baseCommand = "az netappfiles pool create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-level", settings.ServiceLevel);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles pool delete".
        /// Delete the specified ANF pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesPool")]
        public static dynamic AzNetappfilesPoolDelete(this ICakeContext context, AzNetappfilesPoolDeleteSettings settings) {
            var baseCommand = "az netappfiles pool delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles pool list".
        /// L:ist the ANF pools for the specified account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesPool")]
        public static dynamic AzNetappfilesPoolList(this ICakeContext context, AzNetappfilesPoolListSettings settings) {
            var baseCommand = "az netappfiles pool list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles pool show".
        /// Get the specified ANF pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesPool")]
        public static dynamic AzNetappfilesPoolShow(this ICakeContext context, AzNetappfilesPoolShowSettings settings) {
            var baseCommand = "az netappfiles pool show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles pool update".
        /// Update the tags of the specified ANF pool.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesPool")]
        public static dynamic AzNetappfilesPoolUpdate(this ICakeContext context, AzNetappfilesPoolUpdateSettings settings) {
            var baseCommand = "az netappfiles pool update";
            AppendIfNonNull(ref baseCommand, "--service-level", settings.ServiceLevel);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles snapshot create".
        /// Create a new Azure NetApp Files (ANF) snapshot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesSnapshot")]
        public static dynamic AzNetappfilesSnapshotCreate(this ICakeContext context, AzNetappfilesSnapshotCreateSettings settings) {
            var baseCommand = "az netappfiles snapshot create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--volume-name", settings.VolumeName);
            AppendIfNonNull(ref baseCommand, "--file-system-id", settings.FileSystemId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles snapshot delete".
        /// Delete the specified ANF snapshot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesSnapshot")]
        public static dynamic AzNetappfilesSnapshotDelete(this ICakeContext context, AzNetappfilesSnapshotDeleteSettings settings) {
            var baseCommand = "az netappfiles snapshot delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--volume-name", settings.VolumeName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles snapshot list".
        /// List the snapshots of an ANF volume.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesSnapshot")]
        public static dynamic AzNetappfilesSnapshotList(this ICakeContext context, AzNetappfilesSnapshotListSettings settings) {
            var baseCommand = "az netappfiles snapshot list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--volume-name", settings.VolumeName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles snapshot show".
        /// Get the specified ANF snapshot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesSnapshot")]
        public static dynamic AzNetappfilesSnapshotShow(this ICakeContext context, AzNetappfilesSnapshotShowSettings settings) {
            var baseCommand = "az netappfiles snapshot show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--volume-name", settings.VolumeName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles volume create".
        /// Create a new Azure NetApp Files (ANF) volume. Export policies are applied with the subgroup commands but note that volumes are always created with a default export policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolume")]
        public static dynamic AzNetappfilesVolumeCreate(this ICakeContext context, AzNetappfilesVolumeCreateSettings settings) {
            var baseCommand = "az netappfiles volume create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--usage-threshold", settings.UsageThreshold);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--protocol-types", settings.ProtocolTypes);
            AppendIfNonNull(ref baseCommand, "--service-level", settings.ServiceLevel);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles volume delete".
        /// Delete the specified ANF volume.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolume")]
        public static dynamic AzNetappfilesVolumeDelete(this ICakeContext context, AzNetappfilesVolumeDeleteSettings settings) {
            var baseCommand = "az netappfiles volume delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles volume list".
        /// List the ANF Pools for the specified account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolume")]
        public static dynamic AzNetappfilesVolumeList(this ICakeContext context, AzNetappfilesVolumeListSettings settings) {
            var baseCommand = "az netappfiles volume list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles volume show".
        /// Get the specified ANF volume.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolume")]
        public static dynamic AzNetappfilesVolumeShow(this ICakeContext context, AzNetappfilesVolumeShowSettings settings) {
            var baseCommand = "az netappfiles volume show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles volume update".
        /// Update the specified ANF volume with the values provided. Unspecified values will remain unchanged. Export policies are amended/created with the subgroup commands.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolume")]
        public static dynamic AzNetappfilesVolumeUpdate(this ICakeContext context, AzNetappfilesVolumeUpdateSettings settings) {
            var baseCommand = "az netappfiles volume update";
            AppendIfNonNull(ref baseCommand, "--protocol-types", settings.ProtocolTypes);
            AppendIfNonNull(ref baseCommand, "--service-level", settings.ServiceLevel);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--usage-threshold", settings.UsageThreshold);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles volume export-policy add".
        /// Add a new rule to the export policy for a volume.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolumeExportPolicy")]
        public static dynamic AzNetappfilesVolumeExportPolicyAdd(this ICakeContext context, AzNetappfilesVolumeExportPolicyAddSettings settings) {
            var baseCommand = "az netappfiles volume export-policy add";
            AppendIfNonNull(ref baseCommand, "--allowed-clients", settings.AllowedClients);
            AppendIfNonNull(ref baseCommand, "--cifs", settings.Cifs);
            AppendIfNonNull(ref baseCommand, "--nfsv3", settings.Nfsv3);
            AppendIfNonNull(ref baseCommand, "--nfsv41", settings.Nfsv41);
            AppendIfNonNull(ref baseCommand, "--rule-index", settings.RuleIndex);
            AppendIfNonNull(ref baseCommand, "--unix-read-only", settings.UnixReadOnly);
            AppendIfNonNull(ref baseCommand, "--unix-read-write", settings.UnixReadWrite);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles volume export-policy list".
        /// List the export policy rules for a volume.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolumeExportPolicy")]
        public static dynamic AzNetappfilesVolumeExportPolicyList(this ICakeContext context, AzNetappfilesVolumeExportPolicyListSettings settings) {
            var baseCommand = "az netappfiles volume export-policy list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az netappfiles volume export-policy remove".
        /// Remove a rule from the export policy for a volume by rule index. The current rules can be obtained by performing the subgroup list command.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolumeExportPolicy")]
        public static dynamic AzNetappfilesVolumeExportPolicyRemove(this ICakeContext context, AzNetappfilesVolumeExportPolicyRemoveSettings settings) {
            var baseCommand = "az netappfiles volume export-policy remove";
            AppendIfNonNull(ref baseCommand, "--rule-index", settings.RuleIndex);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network list-service-tags".
        /// List all service tags which are below to different resources.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetwork")]
        public static dynamic AzNetworkListServiceTags(this ICakeContext context, AzNetworkListServiceTagsSettings settings) {
            var baseCommand = "az network list-service-tags";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network list-usages".
        /// List the number of network resources in a region that are used against a subscription quota.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetwork")]
        public static dynamic AzNetworkListUsages(this ICakeContext context, AzNetworkListUsagesSettings settings) {
            var baseCommand = "az network list-usages";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway create".
        /// Create an application gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public static dynamic AzNetworkApplicationGatewayCreate(this ICakeContext context, AzNetworkApplicationGatewayCreateSettings settings) {
            var baseCommand = "az network application-gateway create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--custom-error-pages", settings.CustomErrorPages);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--max-capacity", settings.MaxCapacity);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--validate", settings.Validate);
            AppendIfNonNull(ref baseCommand, "--waf-policy", settings.WafPolicy);
            AppendIfNonNull(ref baseCommand, "--zones", settings.Zones);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--cert-password", settings.CertPassword);
            AppendIfNonNull(ref baseCommand, "--connection-draining-timeout", settings.ConnectionDrainingTimeout);
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--http-settings-cookie-based-affinity", settings.HttpSettingsCookieBasedAffinity);
            AppendIfNonNull(ref baseCommand, "--http-settings-port", settings.HttpSettingsPort);
            AppendIfNonNull(ref baseCommand, "--http-settings-protocol", settings.HttpSettingsProtocol);
            AppendIfNonNull(ref baseCommand, "--http2", settings.Http2);
            AppendIfNonNull(ref baseCommand, "--key-vault-secret-id", settings.KeyVaultSecretId);
            AppendIfNonNull(ref baseCommand, "--routing-rule-type", settings.RoutingRuleType);
            AppendIfNonNull(ref baseCommand, "--servers", settings.Servers);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--identity", settings.Identity);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address-allocation", settings.PublicIpAddressAllocation);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--subnet-address-prefix", settings.SubnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-address-prefix", settings.VnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway delete".
        /// Delete an application gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public static dynamic AzNetworkApplicationGatewayDelete(this ICakeContext context, AzNetworkApplicationGatewayDeleteSettings settings) {
            var baseCommand = "az network application-gateway delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway list".
        /// List application gateways.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public static dynamic AzNetworkApplicationGatewayList(this ICakeContext context, AzNetworkApplicationGatewayListSettings settings) {
            var baseCommand = "az network application-gateway list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway show".
        /// Get the details of an application gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public static dynamic AzNetworkApplicationGatewayShow(this ICakeContext context, AzNetworkApplicationGatewayShowSettings settings) {
            var baseCommand = "az network application-gateway show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway show-backend-health".
        /// Get information on the backend health of an application gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public static dynamic AzNetworkApplicationGatewayShowBackendHealth(this ICakeContext context, AzNetworkApplicationGatewayShowBackendHealthSettings settings) {
            var baseCommand = "az network application-gateway show-backend-health";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway start".
        /// Start an application gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public static dynamic AzNetworkApplicationGatewayStart(this ICakeContext context, AzNetworkApplicationGatewayStartSettings settings) {
            var baseCommand = "az network application-gateway start";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway stop".
        /// Stop an application gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public static dynamic AzNetworkApplicationGatewayStop(this ICakeContext context, AzNetworkApplicationGatewayStopSettings settings) {
            var baseCommand = "az network application-gateway stop";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway update".
        /// Update an application gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public static dynamic AzNetworkApplicationGatewayUpdate(this ICakeContext context, AzNetworkApplicationGatewayUpdateSettings settings) {
            var baseCommand = "az network application-gateway update";
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--custom-error-pages", settings.CustomErrorPages);
            AppendIfNonNull(ref baseCommand, "--http2", settings.Http2);
            AppendIfNonNull(ref baseCommand, "--max-capacity", settings.MaxCapacity);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway wait".
        /// Place the CLI in a waiting state until a condition of the application gateway is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public static dynamic AzNetworkApplicationGatewayWait(this ICakeContext context, AzNetworkApplicationGatewayWaitSettings settings) {
            var baseCommand = "az network application-gateway wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway address-pool create".
        /// Create an address pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAddressPool")]
        public static dynamic AzNetworkApplicationGatewayAddressPoolCreate(this ICakeContext context, AzNetworkApplicationGatewayAddressPoolCreateSettings settings) {
            var baseCommand = "az network application-gateway address-pool create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--servers", settings.Servers);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway address-pool delete".
        /// Delete an address pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAddressPool")]
        public static dynamic AzNetworkApplicationGatewayAddressPoolDelete(this ICakeContext context, AzNetworkApplicationGatewayAddressPoolDeleteSettings settings) {
            var baseCommand = "az network application-gateway address-pool delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway address-pool list".
        /// List address pools.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAddressPool")]
        public static dynamic AzNetworkApplicationGatewayAddressPoolList(this ICakeContext context, AzNetworkApplicationGatewayAddressPoolListSettings settings) {
            var baseCommand = "az network application-gateway address-pool list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway address-pool show".
        /// Get the details of an address pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAddressPool")]
        public static dynamic AzNetworkApplicationGatewayAddressPoolShow(this ICakeContext context, AzNetworkApplicationGatewayAddressPoolShowSettings settings) {
            var baseCommand = "az network application-gateway address-pool show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway address-pool update".
        /// Update an address pool.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAddressPool")]
        public static dynamic AzNetworkApplicationGatewayAddressPoolUpdate(this ICakeContext context, AzNetworkApplicationGatewayAddressPoolUpdateSettings settings) {
            var baseCommand = "az network application-gateway address-pool update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--servers", settings.Servers);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway auth-cert create".
        /// Create an authorization certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAuthCert")]
        public static dynamic AzNetworkApplicationGatewayAuthCertCreate(this ICakeContext context, AzNetworkApplicationGatewayAuthCertCreateSettings settings) {
            var baseCommand = "az network application-gateway auth-cert create";
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway auth-cert delete".
        /// Delete an authorization certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAuthCert")]
        public static dynamic AzNetworkApplicationGatewayAuthCertDelete(this ICakeContext context, AzNetworkApplicationGatewayAuthCertDeleteSettings settings) {
            var baseCommand = "az network application-gateway auth-cert delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway auth-cert list".
        /// List authorization certificates.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAuthCert")]
        public static dynamic AzNetworkApplicationGatewayAuthCertList(this ICakeContext context, AzNetworkApplicationGatewayAuthCertListSettings settings) {
            var baseCommand = "az network application-gateway auth-cert list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway auth-cert show".
        /// Show an authorization certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAuthCert")]
        public static dynamic AzNetworkApplicationGatewayAuthCertShow(this ICakeContext context, AzNetworkApplicationGatewayAuthCertShowSettings settings) {
            var baseCommand = "az network application-gateway auth-cert show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway auth-cert update".
        /// Update an authorization certificate.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAuthCert")]
        public static dynamic AzNetworkApplicationGatewayAuthCertUpdate(this ICakeContext context, AzNetworkApplicationGatewayAuthCertUpdateSettings settings) {
            var baseCommand = "az network application-gateway auth-cert update";
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway frontend-ip create".
        /// Create a frontend IP address.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendIp")]
        public static dynamic AzNetworkApplicationGatewayFrontendIpCreate(this ICakeContext context, AzNetworkApplicationGatewayFrontendIpCreateSettings settings) {
            var baseCommand = "az network application-gateway frontend-ip create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway frontend-ip delete".
        /// Delete a frontend IP address.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendIp")]
        public static dynamic AzNetworkApplicationGatewayFrontendIpDelete(this ICakeContext context, AzNetworkApplicationGatewayFrontendIpDeleteSettings settings) {
            var baseCommand = "az network application-gateway frontend-ip delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway frontend-ip list".
        /// List frontend IP addresses.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendIp")]
        public static dynamic AzNetworkApplicationGatewayFrontendIpList(this ICakeContext context, AzNetworkApplicationGatewayFrontendIpListSettings settings) {
            var baseCommand = "az network application-gateway frontend-ip list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway frontend-ip show".
        /// Get the details of a frontend IP address.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendIp")]
        public static dynamic AzNetworkApplicationGatewayFrontendIpShow(this ICakeContext context, AzNetworkApplicationGatewayFrontendIpShowSettings settings) {
            var baseCommand = "az network application-gateway frontend-ip show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway frontend-ip update".
        /// Update a frontend IP address.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendIp")]
        public static dynamic AzNetworkApplicationGatewayFrontendIpUpdate(this ICakeContext context, AzNetworkApplicationGatewayFrontendIpUpdateSettings settings) {
            var baseCommand = "az network application-gateway frontend-ip update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway frontend-port create".
        /// Create a frontend port.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendPort")]
        public static dynamic AzNetworkApplicationGatewayFrontendPortCreate(this ICakeContext context, AzNetworkApplicationGatewayFrontendPortCreateSettings settings) {
            var baseCommand = "az network application-gateway frontend-port create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway frontend-port delete".
        /// Delete a frontend port.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendPort")]
        public static dynamic AzNetworkApplicationGatewayFrontendPortDelete(this ICakeContext context, AzNetworkApplicationGatewayFrontendPortDeleteSettings settings) {
            var baseCommand = "az network application-gateway frontend-port delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway frontend-port list".
        /// List frontend ports.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendPort")]
        public static dynamic AzNetworkApplicationGatewayFrontendPortList(this ICakeContext context, AzNetworkApplicationGatewayFrontendPortListSettings settings) {
            var baseCommand = "az network application-gateway frontend-port list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway frontend-port show".
        /// Get the details of a frontend port.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendPort")]
        public static dynamic AzNetworkApplicationGatewayFrontendPortShow(this ICakeContext context, AzNetworkApplicationGatewayFrontendPortShowSettings settings) {
            var baseCommand = "az network application-gateway frontend-port show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway frontend-port update".
        /// Update a frontend port.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendPort")]
        public static dynamic AzNetworkApplicationGatewayFrontendPortUpdate(this ICakeContext context, AzNetworkApplicationGatewayFrontendPortUpdateSettings settings) {
            var baseCommand = "az network application-gateway frontend-port update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway http-listener create".
        /// Create an HTTP listener.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpListener")]
        public static dynamic AzNetworkApplicationGatewayHttpListenerCreate(this ICakeContext context, AzNetworkApplicationGatewayHttpListenerCreateSettings settings) {
            var baseCommand = "az network application-gateway http-listener create";
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--frontend-ip", settings.FrontendIp);
            AppendIfNonNull(ref baseCommand, "--host-name", settings.HostName);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ssl-cert", settings.SslCert);
            AppendIfNonNull(ref baseCommand, "--waf-policy", settings.WafPolicy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway http-listener delete".
        /// Delete an HTTP listener.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpListener")]
        public static dynamic AzNetworkApplicationGatewayHttpListenerDelete(this ICakeContext context, AzNetworkApplicationGatewayHttpListenerDeleteSettings settings) {
            var baseCommand = "az network application-gateway http-listener delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway http-listener list".
        /// List HTTP listeners.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpListener")]
        public static dynamic AzNetworkApplicationGatewayHttpListenerList(this ICakeContext context, AzNetworkApplicationGatewayHttpListenerListSettings settings) {
            var baseCommand = "az network application-gateway http-listener list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway http-listener show".
        /// Get the details of an HTTP listener.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpListener")]
        public static dynamic AzNetworkApplicationGatewayHttpListenerShow(this ICakeContext context, AzNetworkApplicationGatewayHttpListenerShowSettings settings) {
            var baseCommand = "az network application-gateway http-listener show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway http-listener update".
        /// Update an HTTP listener.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpListener")]
        public static dynamic AzNetworkApplicationGatewayHttpListenerUpdate(this ICakeContext context, AzNetworkApplicationGatewayHttpListenerUpdateSettings settings) {
            var baseCommand = "az network application-gateway http-listener update";
            AppendIfNonNull(ref baseCommand, "--frontend-ip", settings.FrontendIp);
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--host-name", settings.HostName);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ssl-cert", settings.SslCert);
            AppendIfNonNull(ref baseCommand, "--waf-policy", settings.WafPolicy);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway http-settings create".
        /// Create HTTP settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpSettings")]
        public static dynamic AzNetworkApplicationGatewayHttpSettingsCreate(this ICakeContext context, AzNetworkApplicationGatewayHttpSettingsCreateSettings settings) {
            var baseCommand = "az network application-gateway http-settings create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--affinity-cookie-name", settings.AffinityCookieName);
            AppendIfNonNull(ref baseCommand, "--auth-certs", settings.AuthCerts);
            AppendIfNonNull(ref baseCommand, "--connection-draining-timeout", settings.ConnectionDrainingTimeout);
            AppendIfNonNull(ref baseCommand, "--cookie-based-affinity", settings.CookieBasedAffinity);
            AppendIfNonNull(ref baseCommand, "--enable-probe", settings.EnableProbe);
            AppendIfNonNull(ref baseCommand, "--host-name", settings.HostName);
            AppendIfNonNull(ref baseCommand, "--host-name-from-backend-pool", settings.HostNameFromBackendPool);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--probe", settings.Probe);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--root-certs", settings.RootCerts);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway http-settings delete".
        /// Delete HTTP settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpSettings")]
        public static dynamic AzNetworkApplicationGatewayHttpSettingsDelete(this ICakeContext context, AzNetworkApplicationGatewayHttpSettingsDeleteSettings settings) {
            var baseCommand = "az network application-gateway http-settings delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway http-settings list".
        /// List HTTP settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpSettings")]
        public static dynamic AzNetworkApplicationGatewayHttpSettingsList(this ICakeContext context, AzNetworkApplicationGatewayHttpSettingsListSettings settings) {
            var baseCommand = "az network application-gateway http-settings list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway http-settings show".
        /// Get the details of a gateway's HTTP settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpSettings")]
        public static dynamic AzNetworkApplicationGatewayHttpSettingsShow(this ICakeContext context, AzNetworkApplicationGatewayHttpSettingsShowSettings settings) {
            var baseCommand = "az network application-gateway http-settings show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway http-settings update".
        /// Update HTTP settings.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpSettings")]
        public static dynamic AzNetworkApplicationGatewayHttpSettingsUpdate(this ICakeContext context, AzNetworkApplicationGatewayHttpSettingsUpdateSettings settings) {
            var baseCommand = "az network application-gateway http-settings update";
            AppendIfNonNull(ref baseCommand, "--affinity-cookie-name", settings.AffinityCookieName);
            AppendIfNonNull(ref baseCommand, "--auth-certs", settings.AuthCerts);
            AppendIfNonNull(ref baseCommand, "--connection-draining-timeout", settings.ConnectionDrainingTimeout);
            AppendIfNonNull(ref baseCommand, "--cookie-based-affinity", settings.CookieBasedAffinity);
            AppendIfNonNull(ref baseCommand, "--enable-probe", settings.EnableProbe);
            AppendIfNonNull(ref baseCommand, "--host-name", settings.HostName);
            AppendIfNonNull(ref baseCommand, "--host-name-from-backend-pool", settings.HostNameFromBackendPool);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--probe", settings.Probe);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--root-certs", settings.RootCerts);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway identity assign".
        /// Assign a managed service identity to an application-gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayIdentity")]
        public static dynamic AzNetworkApplicationGatewayIdentityAssign(this ICakeContext context, AzNetworkApplicationGatewayIdentityAssignSettings settings) {
            var baseCommand = "az network application-gateway identity assign";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--identity", settings.Identity);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway identity remove".
        /// Remove the managed service identity of an application-gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayIdentity")]
        public static dynamic AzNetworkApplicationGatewayIdentityRemove(this ICakeContext context, AzNetworkApplicationGatewayIdentityRemoveSettings settings) {
            var baseCommand = "az network application-gateway identity remove";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway identity show".
        /// Show the managed service identity of an application-gateway.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayIdentity")]
        public static dynamic AzNetworkApplicationGatewayIdentityShow(this ICakeContext context, AzNetworkApplicationGatewayIdentityShowSettings settings) {
            var baseCommand = "az network application-gateway identity show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway probe create".
        /// Create a probe.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayProbe")]
        public static dynamic AzNetworkApplicationGatewayProbeCreate(this ICakeContext context, AzNetworkApplicationGatewayProbeCreateSettings settings) {
            var baseCommand = "az network application-gateway probe create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--host", settings.Host);
            AppendIfNonNull(ref baseCommand, "--host-name-from-http-settings", settings.HostNameFromHttpSettings);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--match-body", settings.MatchBody);
            AppendIfNonNull(ref baseCommand, "--match-status-codes", settings.MatchStatusCodes);
            AppendIfNonNull(ref baseCommand, "--min-servers", settings.MinServers);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--threshold", settings.Threshold);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway probe delete".
        /// Delete a probe.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayProbe")]
        public static dynamic AzNetworkApplicationGatewayProbeDelete(this ICakeContext context, AzNetworkApplicationGatewayProbeDeleteSettings settings) {
            var baseCommand = "az network application-gateway probe delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway probe list".
        /// List probes.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayProbe")]
        public static dynamic AzNetworkApplicationGatewayProbeList(this ICakeContext context, AzNetworkApplicationGatewayProbeListSettings settings) {
            var baseCommand = "az network application-gateway probe list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway probe show".
        /// Get the details of a probe.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayProbe")]
        public static dynamic AzNetworkApplicationGatewayProbeShow(this ICakeContext context, AzNetworkApplicationGatewayProbeShowSettings settings) {
            var baseCommand = "az network application-gateway probe show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway probe update".
        /// Update a probe.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayProbe")]
        public static dynamic AzNetworkApplicationGatewayProbeUpdate(this ICakeContext context, AzNetworkApplicationGatewayProbeUpdateSettings settings) {
            var baseCommand = "az network application-gateway probe update";
            AppendIfNonNull(ref baseCommand, "--host", settings.Host);
            AppendIfNonNull(ref baseCommand, "--host-name-from-http-settings", settings.HostNameFromHttpSettings);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--match-body", settings.MatchBody);
            AppendIfNonNull(ref baseCommand, "--match-status-codes", settings.MatchStatusCodes);
            AppendIfNonNull(ref baseCommand, "--min-servers", settings.MinServers);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--threshold", settings.Threshold);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway redirect-config create".
        /// Create a redirect configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRedirectConfig")]
        public static dynamic AzNetworkApplicationGatewayRedirectConfigCreate(this ICakeContext context, AzNetworkApplicationGatewayRedirectConfigCreateSettings settings) {
            var baseCommand = "az network application-gateway redirect-config create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--include-path", settings.IncludePath);
            AppendIfNonNull(ref baseCommand, "--include-query-string", settings.IncludeQueryString);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--target-listener", settings.TargetListener);
            AppendIfNonNull(ref baseCommand, "--target-url", settings.TargetUrl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway redirect-config delete".
        /// Delete a redirect configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRedirectConfig")]
        public static dynamic AzNetworkApplicationGatewayRedirectConfigDelete(this ICakeContext context, AzNetworkApplicationGatewayRedirectConfigDeleteSettings settings) {
            var baseCommand = "az network application-gateway redirect-config delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway redirect-config list".
        /// List redirect configurations.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRedirectConfig")]
        public static dynamic AzNetworkApplicationGatewayRedirectConfigList(this ICakeContext context, AzNetworkApplicationGatewayRedirectConfigListSettings settings) {
            var baseCommand = "az network application-gateway redirect-config list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway redirect-config show".
        /// Get the details of a redirect configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRedirectConfig")]
        public static dynamic AzNetworkApplicationGatewayRedirectConfigShow(this ICakeContext context, AzNetworkApplicationGatewayRedirectConfigShowSettings settings) {
            var baseCommand = "az network application-gateway redirect-config show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway redirect-config update".
        /// Update a redirect configuration.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRedirectConfig")]
        public static dynamic AzNetworkApplicationGatewayRedirectConfigUpdate(this ICakeContext context, AzNetworkApplicationGatewayRedirectConfigUpdateSettings settings) {
            var baseCommand = "az network application-gateway redirect-config update";
            AppendIfNonNull(ref baseCommand, "--include-path", settings.IncludePath);
            AppendIfNonNull(ref baseCommand, "--include-query-string", settings.IncludeQueryString);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--target-listener", settings.TargetListener);
            AppendIfNonNull(ref baseCommand, "--target-url", settings.TargetUrl);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule create".
        /// Create a rewrite rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleCreate(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleCreateSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--request-headers", settings.RequestHeaders);
            AppendIfNonNull(ref baseCommand, "--response-headers", settings.ResponseHeaders);
            AppendIfNonNull(ref baseCommand, "--sequence", settings.Sequence);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule delete".
        /// Delete a rewrite rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleDelete(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleDeleteSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule list".
        /// List rewrite rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleList(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleListSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule list-request-headers".
        /// Lists all available request headers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleListRequestHeaders(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleListRequestHeadersSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule list-request-headers";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule list-response-headers".
        /// Lists all available response headers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleListResponseHeaders(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleListResponseHeadersSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule list-response-headers";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule show".
        /// Get the details of a rewrite rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleShow(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleShowSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule update".
        /// Update a rewrite rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleUpdate(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleUpdateSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--request-headers", settings.RequestHeaders);
            AppendIfNonNull(ref baseCommand, "--response-headers", settings.ResponseHeaders);
            AppendIfNonNull(ref baseCommand, "--sequence", settings.Sequence);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule condition create".
        /// Create a rewrite rule condition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleCondition")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleConditionCreate(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleConditionCreateSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule condition create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--variable", settings.Variable);
            AppendIfNonNull(ref baseCommand, "--ignore-case", settings.IgnoreCase);
            AppendIfNonNull(ref baseCommand, "--negate", settings.Negate);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule condition delete".
        /// Delete a rewrite rule condition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleCondition")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleConditionDelete(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleConditionDeleteSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule condition delete";
            AppendIfNonNull(ref baseCommand, "--variable", settings.Variable);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule condition list".
        /// List rewrite rule conditions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleCondition")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleConditionList(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleConditionListSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule condition list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule condition list-server-variables".
        /// Lists all available server variables.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleCondition")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleConditionListServerVariables(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleConditionListServerVariablesSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule condition list-server-variables";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule condition show".
        /// Get the details of a rewrite rule condition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleCondition")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleConditionShow(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleConditionShowSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule condition show";
            AppendIfNonNull(ref baseCommand, "--variable", settings.Variable);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule condition update".
        /// Update a rewrite rule condition.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleCondition")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleConditionUpdate(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleConditionUpdateSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule condition update";
            AppendIfNonNull(ref baseCommand, "--variable", settings.Variable);
            AppendIfNonNull(ref baseCommand, "--ignore-case", settings.IgnoreCase);
            AppendIfNonNull(ref baseCommand, "--negate", settings.Negate);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule set create".
        /// Create a rewrite rule set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleSet")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleSetCreate(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleSetCreateSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule set create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule set delete".
        /// Delete a rewrite rule set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleSet")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleSetDelete(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleSetDeleteSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule set delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule set list".
        /// List rewrite rule sets.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleSet")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleSetList(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleSetListSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule set list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule set show".
        /// Get the details of a rewrite rule set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleSet")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleSetShow(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleSetShowSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule set show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule set update".
        /// Update a rewrite rule set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleSet")]
        public static dynamic AzNetworkApplicationGatewayRewriteRuleSetUpdate(this ICakeContext context, AzNetworkApplicationGatewayRewriteRuleSetUpdateSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule set update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway root-cert create".
        /// Upload a trusted root certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRootCert")]
        public static dynamic AzNetworkApplicationGatewayRootCertCreate(this ICakeContext context, AzNetworkApplicationGatewayRootCertCreateSettings settings) {
            var baseCommand = "az network application-gateway root-cert create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--keyvault-secret", settings.KeyvaultSecret);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway root-cert delete".
        /// Delete a trusted root certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRootCert")]
        public static dynamic AzNetworkApplicationGatewayRootCertDelete(this ICakeContext context, AzNetworkApplicationGatewayRootCertDeleteSettings settings) {
            var baseCommand = "az network application-gateway root-cert delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway root-cert list".
        /// List trusted root certificates.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRootCert")]
        public static dynamic AzNetworkApplicationGatewayRootCertList(this ICakeContext context, AzNetworkApplicationGatewayRootCertListSettings settings) {
            var baseCommand = "az network application-gateway root-cert list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway root-cert show".
        /// Get the details of a trusted root certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRootCert")]
        public static dynamic AzNetworkApplicationGatewayRootCertShow(this ICakeContext context, AzNetworkApplicationGatewayRootCertShowSettings settings) {
            var baseCommand = "az network application-gateway root-cert show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway root-cert update".
        /// Update a trusted root certificate.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRootCert")]
        public static dynamic AzNetworkApplicationGatewayRootCertUpdate(this ICakeContext context, AzNetworkApplicationGatewayRootCertUpdateSettings settings) {
            var baseCommand = "az network application-gateway root-cert update";
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--keyvault-secret", settings.KeyvaultSecret);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rule create".
        /// Create a rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRule")]
        public static dynamic AzNetworkApplicationGatewayRuleCreate(this ICakeContext context, AzNetworkApplicationGatewayRuleCreateSettings settings) {
            var baseCommand = "az network application-gateway rule create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--http-listener", settings.HttpListener);
            AppendIfNonNull(ref baseCommand, "--http-settings", settings.HttpSettings);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--redirect-config", settings.RedirectConfig);
            AppendIfNonNull(ref baseCommand, "--rule-type", settings.RuleType);
            AppendIfNonNull(ref baseCommand, "--url-path-map", settings.UrlPathMap);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rule delete".
        /// Delete a rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRule")]
        public static dynamic AzNetworkApplicationGatewayRuleDelete(this ICakeContext context, AzNetworkApplicationGatewayRuleDeleteSettings settings) {
            var baseCommand = "az network application-gateway rule delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rule list".
        /// List rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRule")]
        public static dynamic AzNetworkApplicationGatewayRuleList(this ICakeContext context, AzNetworkApplicationGatewayRuleListSettings settings) {
            var baseCommand = "az network application-gateway rule list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rule show".
        /// Get the details of a rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRule")]
        public static dynamic AzNetworkApplicationGatewayRuleShow(this ICakeContext context, AzNetworkApplicationGatewayRuleShowSettings settings) {
            var baseCommand = "az network application-gateway rule show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway rule update".
        /// Update a rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRule")]
        public static dynamic AzNetworkApplicationGatewayRuleUpdate(this ICakeContext context, AzNetworkApplicationGatewayRuleUpdateSettings settings) {
            var baseCommand = "az network application-gateway rule update";
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--http-listener", settings.HttpListener);
            AppendIfNonNull(ref baseCommand, "--http-settings", settings.HttpSettings);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--redirect-config", settings.RedirectConfig);
            AppendIfNonNull(ref baseCommand, "--rule-type", settings.RuleType);
            AppendIfNonNull(ref baseCommand, "--url-path-map", settings.UrlPathMap);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway ssl-cert create".
        /// Upload an SSL certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslCert")]
        public static dynamic AzNetworkApplicationGatewaySslCertCreate(this ICakeContext context, AzNetworkApplicationGatewaySslCertCreateSettings settings) {
            var baseCommand = "az network application-gateway ssl-cert create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--cert-password", settings.CertPassword);
            AppendIfNonNull(ref baseCommand, "--key-vault-secret-id", settings.KeyVaultSecretId);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway ssl-cert delete".
        /// Delete an SSL certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslCert")]
        public static dynamic AzNetworkApplicationGatewaySslCertDelete(this ICakeContext context, AzNetworkApplicationGatewaySslCertDeleteSettings settings) {
            var baseCommand = "az network application-gateway ssl-cert delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway ssl-cert list".
        /// List SSL certificates.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslCert")]
        public static dynamic AzNetworkApplicationGatewaySslCertList(this ICakeContext context, AzNetworkApplicationGatewaySslCertListSettings settings) {
            var baseCommand = "az network application-gateway ssl-cert list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway ssl-cert show".
        /// Get the details of an SSL certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslCert")]
        public static dynamic AzNetworkApplicationGatewaySslCertShow(this ICakeContext context, AzNetworkApplicationGatewaySslCertShowSettings settings) {
            var baseCommand = "az network application-gateway ssl-cert show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway ssl-cert update".
        /// Update an SSL certificate.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslCert")]
        public static dynamic AzNetworkApplicationGatewaySslCertUpdate(this ICakeContext context, AzNetworkApplicationGatewaySslCertUpdateSettings settings) {
            var baseCommand = "az network application-gateway ssl-cert update";
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--cert-password", settings.CertPassword);
            AppendIfNonNull(ref baseCommand, "--key-vault-secret-id", settings.KeyVaultSecretId);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway ssl-policy list-options".
        /// Lists available SSL options for configuring SSL policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslPolicy")]
        public static dynamic AzNetworkApplicationGatewaySslPolicyListOptions(this ICakeContext context, AzNetworkApplicationGatewaySslPolicyListOptionsSettings settings) {
            var baseCommand = "az network application-gateway ssl-policy list-options";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway ssl-policy set".
        /// Update or clear SSL policy settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslPolicy")]
        public static dynamic AzNetworkApplicationGatewaySslPolicySet(this ICakeContext context, AzNetworkApplicationGatewaySslPolicySetSettings settings) {
            var baseCommand = "az network application-gateway ssl-policy set";
            AppendIfNonNull(ref baseCommand, "--cipher-suites", settings.CipherSuites);
            AppendIfNonNull(ref baseCommand, "--disabled-ssl-protocols", settings.DisabledSslProtocols);
            AppendIfNonNull(ref baseCommand, "--min-protocol-version", settings.MinProtocolVersion);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--policy-type", settings.PolicyType);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway ssl-policy show".
        /// Get the details of gateway's SSL policy settings.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslPolicy")]
        public static dynamic AzNetworkApplicationGatewaySslPolicyShow(this ICakeContext context, AzNetworkApplicationGatewaySslPolicyShowSettings settings) {
            var baseCommand = "az network application-gateway ssl-policy show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway ssl-policy predefined list".
        /// Lists all SSL predefined policies for configuring SSL policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslPolicyPredefined")]
        public static dynamic AzNetworkApplicationGatewaySslPolicyPredefinedList(this ICakeContext context, AzNetworkApplicationGatewaySslPolicyPredefinedListSettings settings) {
            var baseCommand = "az network application-gateway ssl-policy predefined list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway ssl-policy predefined show".
        /// Gets SSL predefined policy with the specified policy name.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslPolicyPredefined")]
        public static dynamic AzNetworkApplicationGatewaySslPolicyPredefinedShow(this ICakeContext context, AzNetworkApplicationGatewaySslPolicyPredefinedShowSettings settings) {
            var baseCommand = "az network application-gateway ssl-policy predefined show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway url-path-map create".
        /// Create a URL path map.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMap")]
        public static dynamic AzNetworkApplicationGatewayUrlPathMapCreate(this ICakeContext context, AzNetworkApplicationGatewayUrlPathMapCreateSettings settings) {
            var baseCommand = "az network application-gateway url-path-map create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--default-address-pool", settings.DefaultAddressPool);
            AppendIfNonNull(ref baseCommand, "--default-http-settings", settings.DefaultHttpSettings);
            AppendIfNonNull(ref baseCommand, "--default-redirect-config", settings.DefaultRedirectConfig);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--paths", settings.Paths);
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--http-settings", settings.HttpSettings);
            AppendIfNonNull(ref baseCommand, "--redirect-config", settings.RedirectConfig);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway url-path-map delete".
        /// Delete a URL path map.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMap")]
        public static dynamic AzNetworkApplicationGatewayUrlPathMapDelete(this ICakeContext context, AzNetworkApplicationGatewayUrlPathMapDeleteSettings settings) {
            var baseCommand = "az network application-gateway url-path-map delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway url-path-map list".
        /// List URL path maps.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMap")]
        public static dynamic AzNetworkApplicationGatewayUrlPathMapList(this ICakeContext context, AzNetworkApplicationGatewayUrlPathMapListSettings settings) {
            var baseCommand = "az network application-gateway url-path-map list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway url-path-map show".
        /// Get the details of a URL path map.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMap")]
        public static dynamic AzNetworkApplicationGatewayUrlPathMapShow(this ICakeContext context, AzNetworkApplicationGatewayUrlPathMapShowSettings settings) {
            var baseCommand = "az network application-gateway url-path-map show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway url-path-map update".
        /// Update a URL path map.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMap")]
        public static dynamic AzNetworkApplicationGatewayUrlPathMapUpdate(this ICakeContext context, AzNetworkApplicationGatewayUrlPathMapUpdateSettings settings) {
            var baseCommand = "az network application-gateway url-path-map update";
            AppendIfNonNull(ref baseCommand, "--default-address-pool", settings.DefaultAddressPool);
            AppendIfNonNull(ref baseCommand, "--default-http-settings", settings.DefaultHttpSettings);
            AppendIfNonNull(ref baseCommand, "--default-redirect-config", settings.DefaultRedirectConfig);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway url-path-map rule create".
        /// Create a rule for a URL path map.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMapRule")]
        public static dynamic AzNetworkApplicationGatewayUrlPathMapRuleCreate(this ICakeContext context, AzNetworkApplicationGatewayUrlPathMapRuleCreateSettings settings) {
            var baseCommand = "az network application-gateway url-path-map rule create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path-map-name", settings.PathMapName);
            AppendIfNonNull(ref baseCommand, "--paths", settings.Paths);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--http-settings", settings.HttpSettings);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--redirect-config", settings.RedirectConfig);
            AppendIfNonNull(ref baseCommand, "--waf-policy", settings.WafPolicy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway url-path-map rule delete".
        /// Delete a rule of a URL path map.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMapRule")]
        public static dynamic AzNetworkApplicationGatewayUrlPathMapRuleDelete(this ICakeContext context, AzNetworkApplicationGatewayUrlPathMapRuleDeleteSettings settings) {
            var baseCommand = "az network application-gateway url-path-map rule delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path-map-name", settings.PathMapName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-config list-rule-sets".
        /// Get information on available WAF rule sets, rule groups, and rule IDs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafConfig")]
        public static dynamic AzNetworkApplicationGatewayWafConfigListRuleSets(this ICakeContext context, AzNetworkApplicationGatewayWafConfigListRuleSetsSettings settings) {
            var baseCommand = "az network application-gateway waf-config list-rule-sets";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-config set".
        /// Update the firewall configuration of a web application.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafConfig")]
        public static dynamic AzNetworkApplicationGatewayWafConfigSet(this ICakeContext context, AzNetworkApplicationGatewayWafConfigSetSettings settings) {
            var baseCommand = "az network application-gateway waf-config set";
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--disabled-rule-groups", settings.DisabledRuleGroups);
            AppendIfNonNull(ref baseCommand, "--disabled-rules", settings.DisabledRules);
            AppendIfNonNull(ref baseCommand, "--exclusion", settings.Exclusion);
            AppendIfNonNull(ref baseCommand, "--file-upload-limit", settings.FileUploadLimit);
            AppendIfNonNull(ref baseCommand, "--firewall-mode", settings.FirewallMode);
            AppendIfNonNull(ref baseCommand, "--max-request-body-size", settings.MaxRequestBodySize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--request-body-check", settings.RequestBodyCheck);
            AppendIfNonNull(ref baseCommand, "--rule-set-type", settings.RuleSetType);
            AppendIfNonNull(ref baseCommand, "--rule-set-version", settings.RuleSetVersion);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-config show".
        /// Get the firewall configuration of a web application.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafConfig")]
        public static dynamic AzNetworkApplicationGatewayWafConfigShow(this ICakeContext context, AzNetworkApplicationGatewayWafConfigShowSettings settings) {
            var baseCommand = "az network application-gateway waf-config show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy create".
        /// Create an application gateway WAF policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicy")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyCreate(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyCreateSettings settings) {
            var baseCommand = "az network application-gateway waf-policy create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy delete".
        /// Delete an application gateway WAF policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicy")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyDelete(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyDeleteSettings settings) {
            var baseCommand = "az network application-gateway waf-policy delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy list".
        /// List application gateway WAF policies.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicy")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyList(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyListSettings settings) {
            var baseCommand = "az network application-gateway waf-policy list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy show".
        /// Get the details of an application gateway WAF policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicy")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyShow(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyShowSettings settings) {
            var baseCommand = "az network application-gateway waf-policy show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy update".
        /// Update an application gateway WAF policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicy")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyUpdate(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyUpdateSettings settings) {
            var baseCommand = "az network application-gateway waf-policy update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy wait".
        /// Place the CLI in a waiting state until a condition of the application gateway WAF policy is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicy")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyWait(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyWaitSettings settings) {
            var baseCommand = "az network application-gateway waf-policy wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule create".
        /// Create an application gateway WAF policy custom rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRule")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyCustomRuleCreate(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyCustomRuleCreateSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule create";
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-type", settings.RuleType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule delete".
        /// Delete an application gateway WAF policy custom rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRule")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyCustomRuleDelete(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyCustomRuleDeleteSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule list".
        /// List application gateway WAF policy custom rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRule")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyCustomRuleList(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyCustomRuleListSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule list";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule show".
        /// Get the details of an application gateway WAF policy custom rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRule")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyCustomRuleShow(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyCustomRuleShowSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule update".
        /// Update an application gateway WAF policy custom rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRule")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyCustomRuleUpdate(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyCustomRuleUpdateSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule update";
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--rule-type", settings.RuleType);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule match-condition add".
        /// A match condition to an application gateway WAF policy custom rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRuleMatchCondition")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyCustomRuleMatchConditionAdd(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyCustomRuleMatchConditionAddSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule match-condition add";
            AppendIfNonNull(ref baseCommand, "--match-variables", settings.MatchVariables);
            AppendIfNonNull(ref baseCommand, "--operator", settings.Operator);
            AppendIfNonNull(ref baseCommand, "--values", settings.Values);
            AppendIfNonNull(ref baseCommand, "--negate", settings.Negate);
            AppendIfNonNull(ref baseCommand, "--transforms", settings.Transforms);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule match-condition list".
        /// List application gateway WAF policy custom rule match conditions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRuleMatchCondition")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyCustomRuleMatchConditionList(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyCustomRuleMatchConditionListSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule match-condition list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule match-condition remove".
        /// Remove a match condition from an application gateway WAF policy custom rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRuleMatchCondition")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyCustomRuleMatchConditionRemove(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyCustomRuleMatchConditionRemoveSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule match-condition remove";
            AppendIfNonNull(ref baseCommand, "--index", settings.Index);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule exclusion add".
        /// Add an OWASP CRS exclusion rule to the WAF policy managed rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleExclusion")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyManagedRuleExclusionAdd(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyManagedRuleExclusionAddSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule exclusion add";
            AppendIfNonNull(ref baseCommand, "--match-variable", settings.MatchVariable);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--selector", settings.Selector);
            AppendIfNonNull(ref baseCommand, "--selector-match-operator", settings.SelectorMatchOperator);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule exclusion list".
        /// List all OWASP CRS exclusion rules that are applied on a Waf policy managed rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleExclusion")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyManagedRuleExclusionList(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyManagedRuleExclusionListSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule exclusion list";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule exclusion remove".
        /// List all OWASP CRS exclusion rules that are applied on a Waf policy managed rules.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleExclusion")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyManagedRuleExclusionRemove(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyManagedRuleExclusionRemoveSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule exclusion remove";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule rule-set add".
        /// Add managed rule set to the WAF policy managed rules. For rule set and rules, please visit: https://docs.microsoft.com/en-us/azure/web-application-firewall/ag/application- gateway-crs-rulegroups-rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSet")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSetAdd(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSetAddSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule rule-set add";
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rules", settings.Rules);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule rule-set list".
        /// List all managed rule set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSet")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSetList(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSetListSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule rule-set list";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule rule-set remove".
        /// Remove a managed rule set by rule set group name if rule_group_name is specified. Otherwise, remove all rule set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSet")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSetRemove(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSetRemoveSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule rule-set remove";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule rule-set update".
        /// Update(Override) existing rule set of a WAF policy managed rules. For rule set and rules, please visit: https://docs.microsoft.com/en-us/azure/web-application- firewall/ag/application-gateway-crs-rulegroups-rules.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSet")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSetUpdate(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSetUpdateSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule rule-set update";
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--rules", settings.Rules);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy policy-setting list".
        /// List properties of a web application firewall global configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyPolicySetting")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyPolicySettingList(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyPolicySettingListSettings settings) {
            var baseCommand = "az network application-gateway waf-policy policy-setting list";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network application-gateway waf-policy policy-setting update".
        /// Update properties of a web application firewall global configuration.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyPolicySetting")]
        public static dynamic AzNetworkApplicationGatewayWafPolicyPolicySettingUpdate(this ICakeContext context, AzNetworkApplicationGatewayWafPolicyPolicySettingUpdateSettings settings) {
            var baseCommand = "az network application-gateway waf-policy policy-setting update";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--file-upload-limit-in-mb", settings.FileUploadLimitInMb);
            AppendIfNonNull(ref baseCommand, "--max-request-body-size-in-kb", settings.MaxRequestBodySizeInKb);
            AppendIfNonNull(ref baseCommand, "--mode", settings.Mode);
            AppendIfNonNull(ref baseCommand, "--request-body-check", settings.RequestBodyCheck);
            AppendIfNonNull(ref baseCommand, "--state", settings.State);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network asg create".
        /// Create an application security group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkAsg")]
        public static dynamic AzNetworkAsgCreate(this ICakeContext context, AzNetworkAsgCreateSettings settings) {
            var baseCommand = "az network asg create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network asg delete".
        /// Delete an application security group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkAsg")]
        public static dynamic AzNetworkAsgDelete(this ICakeContext context, AzNetworkAsgDeleteSettings settings) {
            var baseCommand = "az network asg delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network asg list".
        /// List all application security groups in a subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkAsg")]
        public static dynamic AzNetworkAsgList(this ICakeContext context, AzNetworkAsgListSettings settings) {
            var baseCommand = "az network asg list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network asg show".
        /// Get details of an application security group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkAsg")]
        public static dynamic AzNetworkAsgShow(this ICakeContext context, AzNetworkAsgShowSettings settings) {
            var baseCommand = "az network asg show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network asg update".
        /// Update an application security group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkAsg")]
        public static dynamic AzNetworkAsgUpdate(this ICakeContext context, AzNetworkAsgUpdateSettings settings) {
            var baseCommand = "az network asg update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network ddos-protection create".
        /// Create a DDoS protection plan.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDdosProtection")]
        public static dynamic AzNetworkDdosProtectionCreate(this ICakeContext context, AzNetworkDdosProtectionCreateSettings settings) {
            var baseCommand = "az network ddos-protection create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vnets", settings.Vnets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network ddos-protection delete".
        /// Delete a DDoS protection plan.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDdosProtection")]
        public static dynamic AzNetworkDdosProtectionDelete(this ICakeContext context, AzNetworkDdosProtectionDeleteSettings settings) {
            var baseCommand = "az network ddos-protection delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network ddos-protection list".
        /// List DDoS protection plans.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDdosProtection")]
        public static dynamic AzNetworkDdosProtectionList(this ICakeContext context, AzNetworkDdosProtectionListSettings settings) {
            var baseCommand = "az network ddos-protection list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network ddos-protection show".
        /// Show details of a DDoS protection plan.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDdosProtection")]
        public static dynamic AzNetworkDdosProtectionShow(this ICakeContext context, AzNetworkDdosProtectionShowSettings settings) {
            var baseCommand = "az network ddos-protection show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network ddos-protection update".
        /// Update a DDoS protection plan.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDdosProtection")]
        public static dynamic AzNetworkDdosProtectionUpdate(this ICakeContext context, AzNetworkDdosProtectionUpdateSettings settings) {
            var baseCommand = "az network ddos-protection update";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vnets", settings.Vnets);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns list-references".
        /// Returns the DNS records specified by the referencing targetResourceIds.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDns")]
        public static dynamic AzNetworkDnsListReferences(this ICakeContext context, AzNetworkDnsListReferencesSettings settings) {
            var baseCommand = "az network dns list-references";
            AppendIfNonNull(ref baseCommand, "--target-resources", settings.TargetResources);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set list".
        /// List all record sets within a DNS zone.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSet")]
        public static dynamic AzNetworkDnsRecordSetList(this ICakeContext context, AzNetworkDnsRecordSetListSettings settings) {
            var baseCommand = "az network dns record-set list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set a add-record".
        /// Add an A record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public static dynamic AzNetworkDnsRecordSetAAddRecord(this ICakeContext context, AzNetworkDnsRecordSetAAddRecordSettings settings) {
            var baseCommand = "az network dns record-set a add-record";
            AppendIfNonNull(ref baseCommand, "--ipv4-address", settings.Ipv4Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set a create".
        /// Create an empty A record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public static dynamic AzNetworkDnsRecordSetACreate(this ICakeContext context, AzNetworkDnsRecordSetACreateSettings settings) {
            var baseCommand = "az network dns record-set a create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set a delete".
        /// Delete an A record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public static dynamic AzNetworkDnsRecordSetADelete(this ICakeContext context, AzNetworkDnsRecordSetADeleteSettings settings) {
            var baseCommand = "az network dns record-set a delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set a list".
        /// List all A record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public static dynamic AzNetworkDnsRecordSetAList(this ICakeContext context, AzNetworkDnsRecordSetAListSettings settings) {
            var baseCommand = "az network dns record-set a list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set a remove-record".
        /// Remove an A record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public static dynamic AzNetworkDnsRecordSetARemoveRecord(this ICakeContext context, AzNetworkDnsRecordSetARemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set a remove-record";
            AppendIfNonNull(ref baseCommand, "--ipv4-address", settings.Ipv4Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set a show".
        /// Get the details of an A record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public static dynamic AzNetworkDnsRecordSetAShow(this ICakeContext context, AzNetworkDnsRecordSetAShowSettings settings) {
            var baseCommand = "az network dns record-set a show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set a update".
        /// Update an A record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public static dynamic AzNetworkDnsRecordSetAUpdate(this ICakeContext context, AzNetworkDnsRecordSetAUpdateSettings settings) {
            var baseCommand = "az network dns record-set a update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set aaaa add-record".
        /// Add an AAAA record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public static dynamic AzNetworkDnsRecordSetAaaaAddRecord(this ICakeContext context, AzNetworkDnsRecordSetAaaaAddRecordSettings settings) {
            var baseCommand = "az network dns record-set aaaa add-record";
            AppendIfNonNull(ref baseCommand, "--ipv6-address", settings.Ipv6Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set aaaa create".
        /// Create an empty AAAA record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public static dynamic AzNetworkDnsRecordSetAaaaCreate(this ICakeContext context, AzNetworkDnsRecordSetAaaaCreateSettings settings) {
            var baseCommand = "az network dns record-set aaaa create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set aaaa delete".
        /// Delete an AAAA record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public static dynamic AzNetworkDnsRecordSetAaaaDelete(this ICakeContext context, AzNetworkDnsRecordSetAaaaDeleteSettings settings) {
            var baseCommand = "az network dns record-set aaaa delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set aaaa list".
        /// List all AAAA record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public static dynamic AzNetworkDnsRecordSetAaaaList(this ICakeContext context, AzNetworkDnsRecordSetAaaaListSettings settings) {
            var baseCommand = "az network dns record-set aaaa list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set aaaa remove-record".
        /// Remove AAAA record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public static dynamic AzNetworkDnsRecordSetAaaaRemoveRecord(this ICakeContext context, AzNetworkDnsRecordSetAaaaRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set aaaa remove-record";
            AppendIfNonNull(ref baseCommand, "--ipv6-address", settings.Ipv6Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set aaaa show".
        /// Get the details of an AAAA record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public static dynamic AzNetworkDnsRecordSetAaaaShow(this ICakeContext context, AzNetworkDnsRecordSetAaaaShowSettings settings) {
            var baseCommand = "az network dns record-set aaaa show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set aaaa update".
        /// Update an AAAA record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public static dynamic AzNetworkDnsRecordSetAaaaUpdate(this ICakeContext context, AzNetworkDnsRecordSetAaaaUpdateSettings settings) {
            var baseCommand = "az network dns record-set aaaa update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set caa add-record".
        /// Add a CAA record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public static dynamic AzNetworkDnsRecordSetCaaAddRecord(this ICakeContext context, AzNetworkDnsRecordSetCaaAddRecordSettings settings) {
            var baseCommand = "az network dns record-set caa add-record";
            AppendIfNonNull(ref baseCommand, "--flags", settings.Flags);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tag", settings.Tag);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set caa create".
        /// Create an empty CAA record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public static dynamic AzNetworkDnsRecordSetCaaCreate(this ICakeContext context, AzNetworkDnsRecordSetCaaCreateSettings settings) {
            var baseCommand = "az network dns record-set caa create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set caa delete".
        /// Delete a CAA record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public static dynamic AzNetworkDnsRecordSetCaaDelete(this ICakeContext context, AzNetworkDnsRecordSetCaaDeleteSettings settings) {
            var baseCommand = "az network dns record-set caa delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set caa list".
        /// List all CAA record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public static dynamic AzNetworkDnsRecordSetCaaList(this ICakeContext context, AzNetworkDnsRecordSetCaaListSettings settings) {
            var baseCommand = "az network dns record-set caa list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set caa remove-record".
        /// Remove a CAA record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public static dynamic AzNetworkDnsRecordSetCaaRemoveRecord(this ICakeContext context, AzNetworkDnsRecordSetCaaRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set caa remove-record";
            AppendIfNonNull(ref baseCommand, "--flags", settings.Flags);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tag", settings.Tag);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set caa show".
        /// Get the details of a CAA record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public static dynamic AzNetworkDnsRecordSetCaaShow(this ICakeContext context, AzNetworkDnsRecordSetCaaShowSettings settings) {
            var baseCommand = "az network dns record-set caa show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set caa update".
        /// Update a CAA record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public static dynamic AzNetworkDnsRecordSetCaaUpdate(this ICakeContext context, AzNetworkDnsRecordSetCaaUpdateSettings settings) {
            var baseCommand = "az network dns record-set caa update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set cname create".
        /// Create an empty CNAME record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCname")]
        public static dynamic AzNetworkDnsRecordSetCnameCreate(this ICakeContext context, AzNetworkDnsRecordSetCnameCreateSettings settings) {
            var baseCommand = "az network dns record-set cname create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set cname delete".
        /// Delete a CNAME record set and its associated record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCname")]
        public static dynamic AzNetworkDnsRecordSetCnameDelete(this ICakeContext context, AzNetworkDnsRecordSetCnameDeleteSettings settings) {
            var baseCommand = "az network dns record-set cname delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set cname list".
        /// List the CNAME record set in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCname")]
        public static dynamic AzNetworkDnsRecordSetCnameList(this ICakeContext context, AzNetworkDnsRecordSetCnameListSettings settings) {
            var baseCommand = "az network dns record-set cname list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set cname remove-record".
        /// Remove a CNAME record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCname")]
        public static dynamic AzNetworkDnsRecordSetCnameRemoveRecord(this ICakeContext context, AzNetworkDnsRecordSetCnameRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set cname remove-record";
            AppendIfNonNull(ref baseCommand, "--cname", settings.Cname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set cname set-record".
        /// Set the value of a CNAME record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCname")]
        public static dynamic AzNetworkDnsRecordSetCnameSetRecord(this ICakeContext context, AzNetworkDnsRecordSetCnameSetRecordSettings settings) {
            var baseCommand = "az network dns record-set cname set-record";
            AppendIfNonNull(ref baseCommand, "--cname", settings.Cname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set cname show".
        /// Get the details of a CNAME record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCname")]
        public static dynamic AzNetworkDnsRecordSetCnameShow(this ICakeContext context, AzNetworkDnsRecordSetCnameShowSettings settings) {
            var baseCommand = "az network dns record-set cname show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set mx add-record".
        /// Add an MX record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public static dynamic AzNetworkDnsRecordSetMxAddRecord(this ICakeContext context, AzNetworkDnsRecordSetMxAddRecordSettings settings) {
            var baseCommand = "az network dns record-set mx add-record";
            AppendIfNonNull(ref baseCommand, "--exchange", settings.Exchange);
            AppendIfNonNull(ref baseCommand, "--preference", settings.Preference);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set mx create".
        /// Create an empty MX record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public static dynamic AzNetworkDnsRecordSetMxCreate(this ICakeContext context, AzNetworkDnsRecordSetMxCreateSettings settings) {
            var baseCommand = "az network dns record-set mx create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set mx delete".
        /// Delete an MX record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public static dynamic AzNetworkDnsRecordSetMxDelete(this ICakeContext context, AzNetworkDnsRecordSetMxDeleteSettings settings) {
            var baseCommand = "az network dns record-set mx delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set mx list".
        /// List all MX record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public static dynamic AzNetworkDnsRecordSetMxList(this ICakeContext context, AzNetworkDnsRecordSetMxListSettings settings) {
            var baseCommand = "az network dns record-set mx list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set mx remove-record".
        /// Remove an MX record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public static dynamic AzNetworkDnsRecordSetMxRemoveRecord(this ICakeContext context, AzNetworkDnsRecordSetMxRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set mx remove-record";
            AppendIfNonNull(ref baseCommand, "--exchange", settings.Exchange);
            AppendIfNonNull(ref baseCommand, "--preference", settings.Preference);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set mx show".
        /// Get the details of an MX record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public static dynamic AzNetworkDnsRecordSetMxShow(this ICakeContext context, AzNetworkDnsRecordSetMxShowSettings settings) {
            var baseCommand = "az network dns record-set mx show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set mx update".
        /// Update an MX record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public static dynamic AzNetworkDnsRecordSetMxUpdate(this ICakeContext context, AzNetworkDnsRecordSetMxUpdateSettings settings) {
            var baseCommand = "az network dns record-set mx update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ns add-record".
        /// Add an NS record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public static dynamic AzNetworkDnsRecordSetNsAddRecord(this ICakeContext context, AzNetworkDnsRecordSetNsAddRecordSettings settings) {
            var baseCommand = "az network dns record-set ns add-record";
            AppendIfNonNull(ref baseCommand, "--nsdname", settings.Nsdname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--subscriptionid", settings.Subscriptionid);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ns create".
        /// Create an empty NS record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public static dynamic AzNetworkDnsRecordSetNsCreate(this ICakeContext context, AzNetworkDnsRecordSetNsCreateSettings settings) {
            var baseCommand = "az network dns record-set ns create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ns delete".
        /// Delete an NS record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public static dynamic AzNetworkDnsRecordSetNsDelete(this ICakeContext context, AzNetworkDnsRecordSetNsDeleteSettings settings) {
            var baseCommand = "az network dns record-set ns delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ns list".
        /// List all NS record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public static dynamic AzNetworkDnsRecordSetNsList(this ICakeContext context, AzNetworkDnsRecordSetNsListSettings settings) {
            var baseCommand = "az network dns record-set ns list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ns remove-record".
        /// Remove an NS record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public static dynamic AzNetworkDnsRecordSetNsRemoveRecord(this ICakeContext context, AzNetworkDnsRecordSetNsRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set ns remove-record";
            AppendIfNonNull(ref baseCommand, "--nsdname", settings.Nsdname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ns show".
        /// Get the details of an NS record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public static dynamic AzNetworkDnsRecordSetNsShow(this ICakeContext context, AzNetworkDnsRecordSetNsShowSettings settings) {
            var baseCommand = "az network dns record-set ns show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ns update".
        /// Update an NS record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public static dynamic AzNetworkDnsRecordSetNsUpdate(this ICakeContext context, AzNetworkDnsRecordSetNsUpdateSettings settings) {
            var baseCommand = "az network dns record-set ns update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ptr add-record".
        /// Add a PTR record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public static dynamic AzNetworkDnsRecordSetPtrAddRecord(this ICakeContext context, AzNetworkDnsRecordSetPtrAddRecordSettings settings) {
            var baseCommand = "az network dns record-set ptr add-record";
            AppendIfNonNull(ref baseCommand, "--ptrdname", settings.Ptrdname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ptr create".
        /// Create an empty PTR record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public static dynamic AzNetworkDnsRecordSetPtrCreate(this ICakeContext context, AzNetworkDnsRecordSetPtrCreateSettings settings) {
            var baseCommand = "az network dns record-set ptr create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ptr delete".
        /// Delete a PTR record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public static dynamic AzNetworkDnsRecordSetPtrDelete(this ICakeContext context, AzNetworkDnsRecordSetPtrDeleteSettings settings) {
            var baseCommand = "az network dns record-set ptr delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ptr list".
        /// List all PTR record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public static dynamic AzNetworkDnsRecordSetPtrList(this ICakeContext context, AzNetworkDnsRecordSetPtrListSettings settings) {
            var baseCommand = "az network dns record-set ptr list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ptr remove-record".
        /// Remove a PTR record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public static dynamic AzNetworkDnsRecordSetPtrRemoveRecord(this ICakeContext context, AzNetworkDnsRecordSetPtrRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set ptr remove-record";
            AppendIfNonNull(ref baseCommand, "--ptrdname", settings.Ptrdname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ptr show".
        /// Get the details of a PTR record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public static dynamic AzNetworkDnsRecordSetPtrShow(this ICakeContext context, AzNetworkDnsRecordSetPtrShowSettings settings) {
            var baseCommand = "az network dns record-set ptr show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set ptr update".
        /// Update a PTR record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public static dynamic AzNetworkDnsRecordSetPtrUpdate(this ICakeContext context, AzNetworkDnsRecordSetPtrUpdateSettings settings) {
            var baseCommand = "az network dns record-set ptr update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set soa show".
        /// Get the details of an SOA record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSoa")]
        public static dynamic AzNetworkDnsRecordSetSoaShow(this ICakeContext context, AzNetworkDnsRecordSetSoaShowSettings settings) {
            var baseCommand = "az network dns record-set soa show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set soa update".
        /// Update properties of an SOA record.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSoa")]
        public static dynamic AzNetworkDnsRecordSetSoaUpdate(this ICakeContext context, AzNetworkDnsRecordSetSoaUpdateSettings settings) {
            var baseCommand = "az network dns record-set soa update";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--expire-time", settings.ExpireTime);
            AppendIfNonNull(ref baseCommand, "--host", settings.Host);
            AppendIfNonNull(ref baseCommand, "--minimum-ttl", settings.MinimumTtl);
            AppendIfNonNull(ref baseCommand, "--refresh-time", settings.RefreshTime);
            AppendIfNonNull(ref baseCommand, "--retry-time", settings.RetryTime);
            AppendIfNonNull(ref baseCommand, "--serial-number", settings.SerialNumber);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set srv add-record".
        /// Add an SRV record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public static dynamic AzNetworkDnsRecordSetSrvAddRecord(this ICakeContext context, AzNetworkDnsRecordSetSrvAddRecordSettings settings) {
            var baseCommand = "az network dns record-set srv add-record";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--weight", settings.Weight);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set srv create".
        /// Create an empty SRV record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public static dynamic AzNetworkDnsRecordSetSrvCreate(this ICakeContext context, AzNetworkDnsRecordSetSrvCreateSettings settings) {
            var baseCommand = "az network dns record-set srv create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set srv delete".
        /// Delete an SRV record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public static dynamic AzNetworkDnsRecordSetSrvDelete(this ICakeContext context, AzNetworkDnsRecordSetSrvDeleteSettings settings) {
            var baseCommand = "az network dns record-set srv delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set srv list".
        /// List all SRV record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public static dynamic AzNetworkDnsRecordSetSrvList(this ICakeContext context, AzNetworkDnsRecordSetSrvListSettings settings) {
            var baseCommand = "az network dns record-set srv list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set srv remove-record".
        /// Remove an SRV record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public static dynamic AzNetworkDnsRecordSetSrvRemoveRecord(this ICakeContext context, AzNetworkDnsRecordSetSrvRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set srv remove-record";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--weight", settings.Weight);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set srv show".
        /// Get the details of an SRV record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public static dynamic AzNetworkDnsRecordSetSrvShow(this ICakeContext context, AzNetworkDnsRecordSetSrvShowSettings settings) {
            var baseCommand = "az network dns record-set srv show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set srv update".
        /// Update an SRV record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public static dynamic AzNetworkDnsRecordSetSrvUpdate(this ICakeContext context, AzNetworkDnsRecordSetSrvUpdateSettings settings) {
            var baseCommand = "az network dns record-set srv update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set txt add-record".
        /// Add a TXT record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public static dynamic AzNetworkDnsRecordSetTxtAddRecord(this ICakeContext context, AzNetworkDnsRecordSetTxtAddRecordSettings settings) {
            var baseCommand = "az network dns record-set txt add-record";
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set txt create".
        /// Create an empty TXT record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public static dynamic AzNetworkDnsRecordSetTxtCreate(this ICakeContext context, AzNetworkDnsRecordSetTxtCreateSettings settings) {
            var baseCommand = "az network dns record-set txt create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set txt delete".
        /// Delete a TXT record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public static dynamic AzNetworkDnsRecordSetTxtDelete(this ICakeContext context, AzNetworkDnsRecordSetTxtDeleteSettings settings) {
            var baseCommand = "az network dns record-set txt delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set txt list".
        /// List all TXT record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public static dynamic AzNetworkDnsRecordSetTxtList(this ICakeContext context, AzNetworkDnsRecordSetTxtListSettings settings) {
            var baseCommand = "az network dns record-set txt list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set txt remove-record".
        /// Remove a TXT record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public static dynamic AzNetworkDnsRecordSetTxtRemoveRecord(this ICakeContext context, AzNetworkDnsRecordSetTxtRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set txt remove-record";
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set txt show".
        /// Get the details of a TXT record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public static dynamic AzNetworkDnsRecordSetTxtShow(this ICakeContext context, AzNetworkDnsRecordSetTxtShowSettings settings) {
            var baseCommand = "az network dns record-set txt show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns record-set txt update".
        /// Update a TXT record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public static dynamic AzNetworkDnsRecordSetTxtUpdate(this ICakeContext context, AzNetworkDnsRecordSetTxtUpdateSettings settings) {
            var baseCommand = "az network dns record-set txt update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns zone create".
        /// Create a DNS zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public static dynamic AzNetworkDnsZoneCreate(this ICakeContext context, AzNetworkDnsZoneCreateSettings settings) {
            var baseCommand = "az network dns zone create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--parent-name", settings.ParentName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-type", settings.ZoneType);
            AppendIfNonNull(ref baseCommand, "--registration-vnets", settings.RegistrationVnets);
            AppendIfNonNull(ref baseCommand, "--resolution-vnets", settings.ResolutionVnets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns zone delete".
        /// Delete a DNS zone and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public static dynamic AzNetworkDnsZoneDelete(this ICakeContext context, AzNetworkDnsZoneDeleteSettings settings) {
            var baseCommand = "az network dns zone delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns zone export".
        /// Export a DNS zone as a DNS zone file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public static dynamic AzNetworkDnsZoneExport(this ICakeContext context, AzNetworkDnsZoneExportSettings settings) {
            var baseCommand = "az network dns zone export";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--file-name", settings.FileName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns zone import".
        /// Create a DNS zone using a DNS zone file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public static dynamic AzNetworkDnsZoneImport(this ICakeContext context, AzNetworkDnsZoneImportSettings settings) {
            var baseCommand = "az network dns zone import";
            AppendIfNonNull(ref baseCommand, "--file-name", settings.FileName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns zone list".
        /// List DNS zones.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public static dynamic AzNetworkDnsZoneList(this ICakeContext context, AzNetworkDnsZoneListSettings settings) {
            var baseCommand = "az network dns zone list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns zone show".
        /// Get a DNS zone parameters. Does not show DNS records within the zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public static dynamic AzNetworkDnsZoneShow(this ICakeContext context, AzNetworkDnsZoneShowSettings settings) {
            var baseCommand = "az network dns zone show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network dns zone update".
        /// Update a DNS zone properties. Does not modify DNS records within the zone.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public static dynamic AzNetworkDnsZoneUpdate(this ICakeContext context, AzNetworkDnsZoneUpdateSettings settings) {
            var baseCommand = "az network dns zone update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-type", settings.ZoneType);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--registration-vnets", settings.RegistrationVnets);
            AppendIfNonNull(ref baseCommand, "--resolution-vnets", settings.ResolutionVnets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route create".
        /// Create an ExpressRoute circuit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public static dynamic AzNetworkExpressRouteCreate(this ICakeContext context, AzNetworkExpressRouteCreateSettings settings) {
            var baseCommand = "az network express-route create";
            AppendIfNonNull(ref baseCommand, "--bandwidth", settings.Bandwidth);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--peering-location", settings.PeeringLocation);
            AppendIfNonNull(ref baseCommand, "--provider", settings.Provider);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allow-classic-operations", settings.AllowClassicOperations);
            AppendIfNonNull(ref baseCommand, "--allow-global-reach", settings.AllowGlobalReach);
            AppendIfNonNull(ref baseCommand, "--express-route-port", settings.ExpressRoutePort);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-family", settings.SkuFamily);
            AppendIfNonNull(ref baseCommand, "--sku-tier", settings.SkuTier);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route delete".
        /// Delete an ExpressRoute circuit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public static dynamic AzNetworkExpressRouteDelete(this ICakeContext context, AzNetworkExpressRouteDeleteSettings settings) {
            var baseCommand = "az network express-route delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route get-stats".
        /// Get the statistics of an ExpressRoute circuit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public static dynamic AzNetworkExpressRouteGetStats(this ICakeContext context, AzNetworkExpressRouteGetStatsSettings settings) {
            var baseCommand = "az network express-route get-stats";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route list".
        /// List all ExpressRoute circuits for the current subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public static dynamic AzNetworkExpressRouteList(this ICakeContext context, AzNetworkExpressRouteListSettings settings) {
            var baseCommand = "az network express-route list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route list-arp-tables".
        /// Show the current Address Resolution Protocol (ARP) table of an ExpressRoute circuit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public static dynamic AzNetworkExpressRouteListArpTables(this ICakeContext context, AzNetworkExpressRouteListArpTablesSettings settings) {
            var baseCommand = "az network express-route list-arp-tables";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route list-route-tables".
        /// Show the current routing table of an ExpressRoute circuit peering.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public static dynamic AzNetworkExpressRouteListRouteTables(this ICakeContext context, AzNetworkExpressRouteListRouteTablesSettings settings) {
            var baseCommand = "az network express-route list-route-tables";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route list-service-providers".
        /// List available ExpressRoute service providers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public static dynamic AzNetworkExpressRouteListServiceProviders(this ICakeContext context, AzNetworkExpressRouteListServiceProvidersSettings settings) {
            var baseCommand = "az network express-route list-service-providers";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route show".
        /// Get the details of an ExpressRoute circuit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public static dynamic AzNetworkExpressRouteShow(this ICakeContext context, AzNetworkExpressRouteShowSettings settings) {
            var baseCommand = "az network express-route show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route update".
        /// Update settings of an ExpressRoute circuit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public static dynamic AzNetworkExpressRouteUpdate(this ICakeContext context, AzNetworkExpressRouteUpdateSettings settings) {
            var baseCommand = "az network express-route update";
            AppendIfNonNull(ref baseCommand, "--allow-classic-operations", settings.AllowClassicOperations);
            AppendIfNonNull(ref baseCommand, "--allow-global-reach", settings.AllowGlobalReach);
            AppendIfNonNull(ref baseCommand, "--bandwidth", settings.Bandwidth);
            AppendIfNonNull(ref baseCommand, "--express-route-port", settings.ExpressRoutePort);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--peering-location", settings.PeeringLocation);
            AppendIfNonNull(ref baseCommand, "--provider", settings.Provider);
            AppendIfNonNull(ref baseCommand, "--sku-family", settings.SkuFamily);
            AppendIfNonNull(ref baseCommand, "--sku-tier", settings.SkuTier);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route wait".
        /// Place the CLI in a waiting state until a condition of the ExpressRoute is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public static dynamic AzNetworkExpressRouteWait(this ICakeContext context, AzNetworkExpressRouteWaitSettings settings) {
            var baseCommand = "az network express-route wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route auth create".
        /// Create a new link authorization for an ExpressRoute circuit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteAuth")]
        public static dynamic AzNetworkExpressRouteAuthCreate(this ICakeContext context, AzNetworkExpressRouteAuthCreateSettings settings) {
            var baseCommand = "az network express-route auth create";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route auth delete".
        /// Delete a link authorization of an ExpressRoute circuit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteAuth")]
        public static dynamic AzNetworkExpressRouteAuthDelete(this ICakeContext context, AzNetworkExpressRouteAuthDeleteSettings settings) {
            var baseCommand = "az network express-route auth delete";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route auth list".
        /// List link authorizations of an ExpressRoute circuit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteAuth")]
        public static dynamic AzNetworkExpressRouteAuthList(this ICakeContext context, AzNetworkExpressRouteAuthListSettings settings) {
            var baseCommand = "az network express-route auth list";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route auth show".
        /// Get the details of a link authorization of an ExpressRoute circuit.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteAuth")]
        public static dynamic AzNetworkExpressRouteAuthShow(this ICakeContext context, AzNetworkExpressRouteAuthShowSettings settings) {
            var baseCommand = "az network express-route auth show";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route gateway create".
        /// Create an ExpressRoute gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGateway")]
        public static dynamic AzNetworkExpressRouteGatewayCreate(this ICakeContext context, AzNetworkExpressRouteGatewayCreateSettings settings) {
            var baseCommand = "az network express-route gateway create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--virtual-hub", settings.VirtualHub);
            AppendIfNonNull(ref baseCommand, "--max-val", settings.MaxVal);
            AppendIfNonNull(ref baseCommand, "--min-val", settings.MinVal);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route gateway delete".
        /// Delete an ExpressRoute gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGateway")]
        public static dynamic AzNetworkExpressRouteGatewayDelete(this ICakeContext context, AzNetworkExpressRouteGatewayDeleteSettings settings) {
            var baseCommand = "az network express-route gateway delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route gateway list".
        /// List ExpressRoute gateways.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGateway")]
        public static dynamic AzNetworkExpressRouteGatewayList(this ICakeContext context, AzNetworkExpressRouteGatewayListSettings settings) {
            var baseCommand = "az network express-route gateway list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route gateway show".
        /// Get the details of an ExpressRoute gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGateway")]
        public static dynamic AzNetworkExpressRouteGatewayShow(this ICakeContext context, AzNetworkExpressRouteGatewayShowSettings settings) {
            var baseCommand = "az network express-route gateway show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route gateway update".
        /// Update settings of an ExpressRoute gateway.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGateway")]
        public static dynamic AzNetworkExpressRouteGatewayUpdate(this ICakeContext context, AzNetworkExpressRouteGatewayUpdateSettings settings) {
            var baseCommand = "az network express-route gateway update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--max-val", settings.MaxVal);
            AppendIfNonNull(ref baseCommand, "--min-val", settings.MinVal);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route gateway connection create".
        /// Create an ExpressRoute gateway connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGatewayConnection")]
        public static dynamic AzNetworkExpressRouteGatewayConnectionCreate(this ICakeContext context, AzNetworkExpressRouteGatewayConnectionCreateSettings settings) {
            var baseCommand = "az network express-route gateway connection create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--authorization-key", settings.AuthorizationKey);
            AppendIfNonNull(ref baseCommand, "--internet-security", settings.InternetSecurity);
            AppendIfNonNull(ref baseCommand, "--routing-weight", settings.RoutingWeight);
            AppendIfNonNull(ref baseCommand, "--peering", settings.Peering);
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route gateway connection delete".
        /// Delete an ExpressRoute gateway connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGatewayConnection")]
        public static dynamic AzNetworkExpressRouteGatewayConnectionDelete(this ICakeContext context, AzNetworkExpressRouteGatewayConnectionDeleteSettings settings) {
            var baseCommand = "az network express-route gateway connection delete";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route gateway connection list".
        /// List ExpressRoute gateway connections.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGatewayConnection")]
        public static dynamic AzNetworkExpressRouteGatewayConnectionList(this ICakeContext context, AzNetworkExpressRouteGatewayConnectionListSettings settings) {
            var baseCommand = "az network express-route gateway connection list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route gateway connection show".
        /// Get the details of an ExpressRoute gateway connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGatewayConnection")]
        public static dynamic AzNetworkExpressRouteGatewayConnectionShow(this ICakeContext context, AzNetworkExpressRouteGatewayConnectionShowSettings settings) {
            var baseCommand = "az network express-route gateway connection show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route gateway connection update".
        /// Update an ExpressRoute gateway connection.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGatewayConnection")]
        public static dynamic AzNetworkExpressRouteGatewayConnectionUpdate(this ICakeContext context, AzNetworkExpressRouteGatewayConnectionUpdateSettings settings) {
            var baseCommand = "az network express-route gateway connection update";
            AppendIfNonNull(ref baseCommand, "--authorization-key", settings.AuthorizationKey);
            AppendIfNonNull(ref baseCommand, "--internet-security", settings.InternetSecurity);
            AppendIfNonNull(ref baseCommand, "--routing-weight", settings.RoutingWeight);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--peering", settings.Peering);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route peering create".
        /// Create peering settings for an ExpressRoute circuit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeering")]
        public static dynamic AzNetworkExpressRoutePeeringCreate(this ICakeContext context, AzNetworkExpressRoutePeeringCreateSettings settings) {
            var baseCommand = "az network express-route peering create";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--peer-asn", settings.PeerAsn);
            AppendIfNonNull(ref baseCommand, "--peering-type", settings.PeeringType);
            AppendIfNonNull(ref baseCommand, "--primary-peer-subnet", settings.PrimaryPeerSubnet);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--secondary-peer-subnet", settings.SecondaryPeerSubnet);
            AppendIfNonNull(ref baseCommand, "--vlan-id", settings.VlanId);
            AppendIfNonNull(ref baseCommand, "--shared-key", settings.SharedKey);
            AppendIfNonNull(ref baseCommand, "--advertised-public-prefixes", settings.AdvertisedPublicPrefixes);
            AppendIfNonNull(ref baseCommand, "--customer-asn", settings.CustomerAsn);
            AppendIfNonNull(ref baseCommand, "--legacy-mode", settings.LegacyMode);
            AppendIfNonNull(ref baseCommand, "--route-filter", settings.RouteFilter);
            AppendIfNonNull(ref baseCommand, "--routing-registry-name", settings.RoutingRegistryName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route peering delete".
        /// Delete peering settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeering")]
        public static dynamic AzNetworkExpressRoutePeeringDelete(this ICakeContext context, AzNetworkExpressRoutePeeringDeleteSettings settings) {
            var baseCommand = "az network express-route peering delete";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route peering list".
        /// List peering settings of an ExpressRoute circuit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeering")]
        public static dynamic AzNetworkExpressRoutePeeringList(this ICakeContext context, AzNetworkExpressRoutePeeringListSettings settings) {
            var baseCommand = "az network express-route peering list";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route peering show".
        /// Get the details of an express route peering.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeering")]
        public static dynamic AzNetworkExpressRoutePeeringShow(this ICakeContext context, AzNetworkExpressRoutePeeringShowSettings settings) {
            var baseCommand = "az network express-route peering show";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route peering update".
        /// Update peering settings of an ExpressRoute circuit.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeering")]
        public static dynamic AzNetworkExpressRoutePeeringUpdate(this ICakeContext context, AzNetworkExpressRoutePeeringUpdateSettings settings) {
            var baseCommand = "az network express-route peering update";
            AppendIfNonNull(ref baseCommand, "--peer-asn", settings.PeerAsn);
            AppendIfNonNull(ref baseCommand, "--primary-peer-subnet", settings.PrimaryPeerSubnet);
            AppendIfNonNull(ref baseCommand, "--secondary-peer-subnet", settings.SecondaryPeerSubnet);
            AppendIfNonNull(ref baseCommand, "--shared-key", settings.SharedKey);
            AppendIfNonNull(ref baseCommand, "--vlan-id", settings.VlanId);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--advertised-public-prefixes", settings.AdvertisedPublicPrefixes);
            AppendIfNonNull(ref baseCommand, "--customer-asn", settings.CustomerAsn);
            AppendIfNonNull(ref baseCommand, "--ip-version", settings.IpVersion);
            AppendIfNonNull(ref baseCommand, "--legacy-mode", settings.LegacyMode);
            AppendIfNonNull(ref baseCommand, "--route-filter", settings.RouteFilter);
            AppendIfNonNull(ref baseCommand, "--routing-registry-name", settings.RoutingRegistryName);
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route peering connection create".
        /// Create connections between two ExpressRoute circuits.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeeringConnection")]
        public static dynamic AzNetworkExpressRoutePeeringConnectionCreate(this ICakeContext context, AzNetworkExpressRoutePeeringConnectionCreateSettings settings) {
            var baseCommand = "az network express-route peering connection create";
            AppendIfNonNull(ref baseCommand, "--address-prefix", settings.AddressPrefix);
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--peer-circuit", settings.PeerCircuit);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--authorization-key", settings.AuthorizationKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route peering connection delete".
        /// Delete an ExpressRoute circuit connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeeringConnection")]
        public static dynamic AzNetworkExpressRoutePeeringConnectionDelete(this ICakeContext context, AzNetworkExpressRoutePeeringConnectionDeleteSettings settings) {
            var baseCommand = "az network express-route peering connection delete";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route peering connection show".
        /// Get the details of an ExpressRoute circuit connection.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeeringConnection")]
        public static dynamic AzNetworkExpressRoutePeeringConnectionShow(this ICakeContext context, AzNetworkExpressRoutePeeringConnectionShowSettings settings) {
            var baseCommand = "az network express-route peering connection show";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route peering peer-connection list".
        /// Gets all global reach peer connections associated with a private peering in an express route circuit.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeeringPeerConnection")]
        public static dynamic AzNetworkExpressRoutePeeringPeerConnectionList(this ICakeContext context, AzNetworkExpressRoutePeeringPeerConnectionListSettings settings) {
            var baseCommand = "az network express-route peering peer-connection list";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route peering peer-connection show".
        /// Gets the specified Peer Express Route Circuit Connection from the specified express route circuit.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeeringPeerConnection")]
        public static dynamic AzNetworkExpressRoutePeeringPeerConnectionShow(this ICakeContext context, AzNetworkExpressRoutePeeringPeerConnectionShowSettings settings) {
            var baseCommand = "az network express-route peering peer-connection show";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port create".
        /// Create an ExpressRoute port.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePort")]
        public static dynamic AzNetworkExpressRoutePortCreate(this ICakeContext context, AzNetworkExpressRoutePortCreateSettings settings) {
            var baseCommand = "az network express-route port create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--bandwidth", settings.Bandwidth);
            AppendIfNonNull(ref baseCommand, "--encapsulation", settings.Encapsulation);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--peering-location", settings.PeeringLocation);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port delete".
        /// Delete an ExpressRoute port.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePort")]
        public static dynamic AzNetworkExpressRoutePortDelete(this ICakeContext context, AzNetworkExpressRoutePortDeleteSettings settings) {
            var baseCommand = "az network express-route port delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port list".
        /// List ExpressRoute ports.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePort")]
        public static dynamic AzNetworkExpressRoutePortList(this ICakeContext context, AzNetworkExpressRoutePortListSettings settings) {
            var baseCommand = "az network express-route port list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port show".
        /// Get the details of an ExpressRoute port.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePort")]
        public static dynamic AzNetworkExpressRoutePortShow(this ICakeContext context, AzNetworkExpressRoutePortShowSettings settings) {
            var baseCommand = "az network express-route port show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port update".
        /// Update settings of an ExpressRoute port.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePort")]
        public static dynamic AzNetworkExpressRoutePortUpdate(this ICakeContext context, AzNetworkExpressRoutePortUpdateSettings settings) {
            var baseCommand = "az network express-route port update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port identity assign".
        /// Assign a managed service identity to an ExpressRoute Port.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortIdentity")]
        public static dynamic AzNetworkExpressRoutePortIdentityAssign(this ICakeContext context, AzNetworkExpressRoutePortIdentityAssignSettings settings) {
            var baseCommand = "az network express-route port identity assign";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--identity", settings.Identity);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port identity remove".
        /// Remove the managed service identity of an ExpressRoute Port.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortIdentity")]
        public static dynamic AzNetworkExpressRoutePortIdentityRemove(this ICakeContext context, AzNetworkExpressRoutePortIdentityRemoveSettings settings) {
            var baseCommand = "az network express-route port identity remove";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port identity show".
        /// Show the managed service identity of an ExpressRoute Port.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortIdentity")]
        public static dynamic AzNetworkExpressRoutePortIdentityShow(this ICakeContext context, AzNetworkExpressRoutePortIdentityShowSettings settings) {
            var baseCommand = "az network express-route port identity show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port link list".
        /// List ExpressRoute links.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortLink")]
        public static dynamic AzNetworkExpressRoutePortLinkList(this ICakeContext context, AzNetworkExpressRoutePortLinkListSettings settings) {
            var baseCommand = "az network express-route port link list";
            AppendIfNonNull(ref baseCommand, "--port-name", settings.PortName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port link show".
        /// Get the details of an ExpressRoute link.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortLink")]
        public static dynamic AzNetworkExpressRoutePortLinkShow(this ICakeContext context, AzNetworkExpressRoutePortLinkShowSettings settings) {
            var baseCommand = "az network express-route port link show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--port-name", settings.PortName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port link update".
        /// Manage MACsec configuration of an ExpressRoute Link.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortLink")]
        public static dynamic AzNetworkExpressRoutePortLinkUpdate(this ICakeContext context, AzNetworkExpressRoutePortLinkUpdateSettings settings) {
            var baseCommand = "az network express-route port link update";
            AppendIfNonNull(ref baseCommand, "--admin-state", settings.AdminState);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--macsec-cak-secret-identifier", settings.MacsecCakSecretIdentifier);
            AppendIfNonNull(ref baseCommand, "--macsec-cipher", settings.MacsecCipher);
            AppendIfNonNull(ref baseCommand, "--macsec-ckn-secret-identifier", settings.MacsecCknSecretIdentifier);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--port-name", settings.PortName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port location list".
        /// List ExpressRoute port locations.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortLocation")]
        public static dynamic AzNetworkExpressRoutePortLocationList(this ICakeContext context, AzNetworkExpressRoutePortLocationListSettings settings) {
            var baseCommand = "az network express-route port location list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network express-route port location show".
        /// Get the details of an ExpressRoute port location.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortLocation")]
        public static dynamic AzNetworkExpressRoutePortLocationShow(this ICakeContext context, AzNetworkExpressRoutePortLocationShowSettings settings) {
            var baseCommand = "az network express-route port location show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb create".
        /// Create a load balancer.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLb")]
        public static dynamic AzNetworkLbCreate(this ICakeContext context, AzNetworkLbCreateSettings settings) {
            var baseCommand = "az network lb create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--backend-pool-name", settings.BackendPoolName);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-zone", settings.FrontendIpZone);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--private-ip-address-version", settings.PrivateIpAddressVersion);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--validate", settings.Validate);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address-allocation", settings.PublicIpAddressAllocation);
            AppendIfNonNull(ref baseCommand, "--public-ip-dns-name", settings.PublicIpDnsName);
            AppendIfNonNull(ref baseCommand, "--public-ip-zone", settings.PublicIpZone);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--subnet-address-prefix", settings.SubnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-address-prefix", settings.VnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb delete".
        /// Delete a load balancer.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLb")]
        public static dynamic AzNetworkLbDelete(this ICakeContext context, AzNetworkLbDeleteSettings settings) {
            var baseCommand = "az network lb delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb list".
        /// List load balancers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLb")]
        public static dynamic AzNetworkLbList(this ICakeContext context, AzNetworkLbListSettings settings) {
            var baseCommand = "az network lb list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb show".
        /// Get the details of a load balancer.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLb")]
        public static dynamic AzNetworkLbShow(this ICakeContext context, AzNetworkLbShowSettings settings) {
            var baseCommand = "az network lb show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb update".
        /// Update a load balancer.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLb")]
        public static dynamic AzNetworkLbUpdate(this ICakeContext context, AzNetworkLbUpdateSettings settings) {
            var baseCommand = "az network lb update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb address-pool create".
        /// Create an address pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbAddressPool")]
        public static dynamic AzNetworkLbAddressPoolCreate(this ICakeContext context, AzNetworkLbAddressPoolCreateSettings settings) {
            var baseCommand = "az network lb address-pool create";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb address-pool delete".
        /// Delete an address pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbAddressPool")]
        public static dynamic AzNetworkLbAddressPoolDelete(this ICakeContext context, AzNetworkLbAddressPoolDeleteSettings settings) {
            var baseCommand = "az network lb address-pool delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb address-pool list".
        /// List address pools.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbAddressPool")]
        public static dynamic AzNetworkLbAddressPoolList(this ICakeContext context, AzNetworkLbAddressPoolListSettings settings) {
            var baseCommand = "az network lb address-pool list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb address-pool show".
        /// Get the details of an address pool.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbAddressPool")]
        public static dynamic AzNetworkLbAddressPoolShow(this ICakeContext context, AzNetworkLbAddressPoolShowSettings settings) {
            var baseCommand = "az network lb address-pool show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb frontend-ip create".
        /// Create a frontend IP address.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbFrontendIp")]
        public static dynamic AzNetworkLbFrontendIpCreate(this ICakeContext context, AzNetworkLbFrontendIpCreateSettings settings) {
            var baseCommand = "az network lb frontend-ip create";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--private-ip-address-version", settings.PrivateIpAddressVersion);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-prefix", settings.PublicIpPrefix);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb frontend-ip delete".
        /// Delete a frontend IP address.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbFrontendIp")]
        public static dynamic AzNetworkLbFrontendIpDelete(this ICakeContext context, AzNetworkLbFrontendIpDeleteSettings settings) {
            var baseCommand = "az network lb frontend-ip delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb frontend-ip list".
        /// List frontend IP addresses.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbFrontendIp")]
        public static dynamic AzNetworkLbFrontendIpList(this ICakeContext context, AzNetworkLbFrontendIpListSettings settings) {
            var baseCommand = "az network lb frontend-ip list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb frontend-ip show".
        /// Get the details of a frontend IP address.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbFrontendIp")]
        public static dynamic AzNetworkLbFrontendIpShow(this ICakeContext context, AzNetworkLbFrontendIpShowSettings settings) {
            var baseCommand = "az network lb frontend-ip show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb frontend-ip update".
        /// Update a frontend IP address.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbFrontendIp")]
        public static dynamic AzNetworkLbFrontendIpUpdate(this ICakeContext context, AzNetworkLbFrontendIpUpdateSettings settings) {
            var baseCommand = "az network lb frontend-ip update";
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-prefix", settings.PublicIpPrefix);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb inbound-nat-pool create".
        /// Create an inbound NAT address pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatPool")]
        public static dynamic AzNetworkLbInboundNatPoolCreate(this ICakeContext context, AzNetworkLbInboundNatPoolCreateSettings settings) {
            var baseCommand = "az network lb inbound-nat-pool create";
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--frontend-port-range-end", settings.FrontendPortRangeEnd);
            AppendIfNonNull(ref baseCommand, "--frontend-port-range-start", settings.FrontendPortRangeStart);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--floating-ip", settings.FloatingIp);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb inbound-nat-pool delete".
        /// Delete an inbound NAT address pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatPool")]
        public static dynamic AzNetworkLbInboundNatPoolDelete(this ICakeContext context, AzNetworkLbInboundNatPoolDeleteSettings settings) {
            var baseCommand = "az network lb inbound-nat-pool delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb inbound-nat-pool list".
        /// List inbound NAT address pools.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatPool")]
        public static dynamic AzNetworkLbInboundNatPoolList(this ICakeContext context, AzNetworkLbInboundNatPoolListSettings settings) {
            var baseCommand = "az network lb inbound-nat-pool list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb inbound-nat-pool show".
        /// Get the details of an inbound NAT address pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatPool")]
        public static dynamic AzNetworkLbInboundNatPoolShow(this ICakeContext context, AzNetworkLbInboundNatPoolShowSettings settings) {
            var baseCommand = "az network lb inbound-nat-pool show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb inbound-nat-pool update".
        /// Update an inbound NAT address pool.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatPool")]
        public static dynamic AzNetworkLbInboundNatPoolUpdate(this ICakeContext context, AzNetworkLbInboundNatPoolUpdateSettings settings) {
            var baseCommand = "az network lb inbound-nat-pool update";
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--floating-ip", settings.FloatingIp);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--frontend-port-range-end", settings.FrontendPortRangeEnd);
            AppendIfNonNull(ref baseCommand, "--frontend-port-range-start", settings.FrontendPortRangeStart);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb inbound-nat-rule create".
        /// Create an inbound NAT rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatRule")]
        public static dynamic AzNetworkLbInboundNatRuleCreate(this ICakeContext context, AzNetworkLbInboundNatRuleCreateSettings settings) {
            var baseCommand = "az network lb inbound-nat-rule create";
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--floating-ip", settings.FloatingIp);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb inbound-nat-rule delete".
        /// Delete an inbound NAT rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatRule")]
        public static dynamic AzNetworkLbInboundNatRuleDelete(this ICakeContext context, AzNetworkLbInboundNatRuleDeleteSettings settings) {
            var baseCommand = "az network lb inbound-nat-rule delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb inbound-nat-rule list".
        /// List inbound NAT rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatRule")]
        public static dynamic AzNetworkLbInboundNatRuleList(this ICakeContext context, AzNetworkLbInboundNatRuleListSettings settings) {
            var baseCommand = "az network lb inbound-nat-rule list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb inbound-nat-rule show".
        /// Get the details of an inbound NAT rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatRule")]
        public static dynamic AzNetworkLbInboundNatRuleShow(this ICakeContext context, AzNetworkLbInboundNatRuleShowSettings settings) {
            var baseCommand = "az network lb inbound-nat-rule show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb inbound-nat-rule update".
        /// Update an inbound NAT rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatRule")]
        public static dynamic AzNetworkLbInboundNatRuleUpdate(this ICakeContext context, AzNetworkLbInboundNatRuleUpdateSettings settings) {
            var baseCommand = "az network lb inbound-nat-rule update";
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--floating-ip", settings.FloatingIp);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb outbound-rule create".
        /// Create an outbound-rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbOutboundRule")]
        public static dynamic AzNetworkLbOutboundRuleCreate(this ICakeContext context, AzNetworkLbOutboundRuleCreateSettings settings) {
            var baseCommand = "az network lb outbound-rule create";
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-configs", settings.FrontendIpConfigs);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--outbound-ports", settings.OutboundPorts);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb outbound-rule delete".
        /// Delete an outbound-rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbOutboundRule")]
        public static dynamic AzNetworkLbOutboundRuleDelete(this ICakeContext context, AzNetworkLbOutboundRuleDeleteSettings settings) {
            var baseCommand = "az network lb outbound-rule delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb outbound-rule list".
        /// List outbound rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbOutboundRule")]
        public static dynamic AzNetworkLbOutboundRuleList(this ICakeContext context, AzNetworkLbOutboundRuleListSettings settings) {
            var baseCommand = "az network lb outbound-rule list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb outbound-rule show".
        /// Get the details of an outbound rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbOutboundRule")]
        public static dynamic AzNetworkLbOutboundRuleShow(this ICakeContext context, AzNetworkLbOutboundRuleShowSettings settings) {
            var baseCommand = "az network lb outbound-rule show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb outbound-rule update".
        /// Update an outbound-rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbOutboundRule")]
        public static dynamic AzNetworkLbOutboundRuleUpdate(this ICakeContext context, AzNetworkLbOutboundRuleUpdateSettings settings) {
            var baseCommand = "az network lb outbound-rule update";
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-configs", settings.FrontendIpConfigs);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--outbound-ports", settings.OutboundPorts);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb probe create".
        /// Create a probe.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbProbe")]
        public static dynamic AzNetworkLbProbeCreate(this ICakeContext context, AzNetworkLbProbeCreateSettings settings) {
            var baseCommand = "az network lb probe create";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--threshold", settings.Threshold);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb probe delete".
        /// Delete a probe.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbProbe")]
        public static dynamic AzNetworkLbProbeDelete(this ICakeContext context, AzNetworkLbProbeDeleteSettings settings) {
            var baseCommand = "az network lb probe delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb probe list".
        /// List probes.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbProbe")]
        public static dynamic AzNetworkLbProbeList(this ICakeContext context, AzNetworkLbProbeListSettings settings) {
            var baseCommand = "az network lb probe list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb probe show".
        /// Get the details of a probe.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbProbe")]
        public static dynamic AzNetworkLbProbeShow(this ICakeContext context, AzNetworkLbProbeShowSettings settings) {
            var baseCommand = "az network lb probe show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb probe update".
        /// Update a probe.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbProbe")]
        public static dynamic AzNetworkLbProbeUpdate(this ICakeContext context, AzNetworkLbProbeUpdateSettings settings) {
            var baseCommand = "az network lb probe update";
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--threshold", settings.Threshold);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb rule create".
        /// Create a load balancing rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbRule")]
        public static dynamic AzNetworkLbRuleCreate(this ICakeContext context, AzNetworkLbRuleCreateSettings settings) {
            var baseCommand = "az network lb rule create";
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--backend-pool-name", settings.BackendPoolName);
            AppendIfNonNull(ref baseCommand, "--disable-outbound-snat", settings.DisableOutboundSnat);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--floating-ip", settings.FloatingIp);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--load-distribution", settings.LoadDistribution);
            AppendIfNonNull(ref baseCommand, "--probe-name", settings.ProbeName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb rule delete".
        /// Delete a load balancing rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbRule")]
        public static dynamic AzNetworkLbRuleDelete(this ICakeContext context, AzNetworkLbRuleDeleteSettings settings) {
            var baseCommand = "az network lb rule delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb rule list".
        /// List load balancing rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbRule")]
        public static dynamic AzNetworkLbRuleList(this ICakeContext context, AzNetworkLbRuleListSettings settings) {
            var baseCommand = "az network lb rule list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb rule show".
        /// Get the details of a load balancing rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbRule")]
        public static dynamic AzNetworkLbRuleShow(this ICakeContext context, AzNetworkLbRuleShowSettings settings) {
            var baseCommand = "az network lb rule show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network lb rule update".
        /// Update a load balancing rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbRule")]
        public static dynamic AzNetworkLbRuleUpdate(this ICakeContext context, AzNetworkLbRuleUpdateSettings settings) {
            var baseCommand = "az network lb rule update";
            AppendIfNonNull(ref baseCommand, "--backend-pool-name", settings.BackendPoolName);
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--disable-outbound-snat", settings.DisableOutboundSnat);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--floating-ip", settings.FloatingIp);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--load-distribution", settings.LoadDistribution);
            AppendIfNonNull(ref baseCommand, "--probe-name", settings.ProbeName);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network local-gateway create".
        /// Create a local VPN gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLocalGateway")]
        public static dynamic AzNetworkLocalGatewayCreate(this ICakeContext context, AzNetworkLocalGatewayCreateSettings settings) {
            var baseCommand = "az network local-gateway create";
            AppendIfNonNull(ref baseCommand, "--gateway-ip-address", settings.GatewayIpAddress);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--local-address-prefixes", settings.LocalAddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--asn", settings.Asn);
            AppendIfNonNull(ref baseCommand, "--bgp-peering-address", settings.BgpPeeringAddress);
            AppendIfNonNull(ref baseCommand, "--peer-weight", settings.PeerWeight);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network local-gateway delete".
        /// Delete a local VPN gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLocalGateway")]
        public static dynamic AzNetworkLocalGatewayDelete(this ICakeContext context, AzNetworkLocalGatewayDeleteSettings settings) {
            var baseCommand = "az network local-gateway delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network local-gateway list".
        /// List all local VPN gateways in a resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLocalGateway")]
        public static dynamic AzNetworkLocalGatewayList(this ICakeContext context, AzNetworkLocalGatewayListSettings settings) {
            var baseCommand = "az network local-gateway list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network local-gateway show".
        /// Get the details of a local VPN gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLocalGateway")]
        public static dynamic AzNetworkLocalGatewayShow(this ICakeContext context, AzNetworkLocalGatewayShowSettings settings) {
            var baseCommand = "az network local-gateway show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network local-gateway update".
        /// Update a local VPN gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLocalGateway")]
        public static dynamic AzNetworkLocalGatewayUpdate(this ICakeContext context, AzNetworkLocalGatewayUpdateSettings settings) {
            var baseCommand = "az network local-gateway update";
            AppendIfNonNull(ref baseCommand, "--gateway-ip-address", settings.GatewayIpAddress);
            AppendIfNonNull(ref baseCommand, "--local-address-prefixes", settings.LocalAddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--asn", settings.Asn);
            AppendIfNonNull(ref baseCommand, "--bgp-peering-address", settings.BgpPeeringAddress);
            AppendIfNonNull(ref baseCommand, "--peer-weight", settings.PeerWeight);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network local-gateway wait".
        /// Place the CLI in a waiting state until a condition of the local gateway is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLocalGateway")]
        public static dynamic AzNetworkLocalGatewayWait(this ICakeContext context, AzNetworkLocalGatewayWaitSettings settings) {
            var baseCommand = "az network local-gateway wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nat gateway create".
        /// Create a NAT gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNatGateway")]
        public static dynamic AzNetworkNatGatewayCreate(this ICakeContext context, AzNetworkNatGatewayCreateSettings settings) {
            var baseCommand = "az network nat gateway create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--public-ip-addresses", settings.PublicIpAddresses);
            AppendIfNonNull(ref baseCommand, "--public-ip-prefixes", settings.PublicIpPrefixes);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nat gateway delete".
        /// Delete a NAT gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNatGateway")]
        public static dynamic AzNetworkNatGatewayDelete(this ICakeContext context, AzNetworkNatGatewayDeleteSettings settings) {
            var baseCommand = "az network nat gateway delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nat gateway list".
        /// List NAT gateways.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNatGateway")]
        public static dynamic AzNetworkNatGatewayList(this ICakeContext context, AzNetworkNatGatewayListSettings settings) {
            var baseCommand = "az network nat gateway list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nat gateway show".
        /// Show details of a NAT gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNatGateway")]
        public static dynamic AzNetworkNatGatewayShow(this ICakeContext context, AzNetworkNatGatewayShowSettings settings) {
            var baseCommand = "az network nat gateway show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nat gateway update".
        /// Update a NAT gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNatGateway")]
        public static dynamic AzNetworkNatGatewayUpdate(this ICakeContext context, AzNetworkNatGatewayUpdateSettings settings) {
            var baseCommand = "az network nat gateway update";
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--public-ip-addresses", settings.PublicIpAddresses);
            AppendIfNonNull(ref baseCommand, "--public-ip-prefixes", settings.PublicIpPrefixes);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nat gateway wait".
        /// Place the CLI in a waiting state until a condition of the NAT gateway is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNatGateway")]
        public static dynamic AzNetworkNatGatewayWait(this ICakeContext context, AzNetworkNatGatewayWaitSettings settings) {
            var baseCommand = "az network nat gateway wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic create".
        /// Create a network interface.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public static dynamic AzNetworkNicCreate(this ICakeContext context, AzNetworkNicCreateSettings settings) {
            var baseCommand = "az network nic create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--accelerated-networking", settings.AcceleratedNetworking);
            AppendIfNonNull(ref baseCommand, "--application-security-groups", settings.ApplicationSecurityGroups);
            AppendIfNonNull(ref baseCommand, "--ip-forwarding", settings.IpForwarding);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--network-security-group", settings.NetworkSecurityGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--private-ip-address-version", settings.PrivateIpAddressVersion);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--app-gateway-address-pools", settings.AppGatewayAddressPools);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--dns-servers", settings.DnsServers);
            AppendIfNonNull(ref baseCommand, "--internal-dns-name", settings.InternalDnsName);
            AppendIfNonNull(ref baseCommand, "--lb-address-pools", settings.LbAddressPools);
            AppendIfNonNull(ref baseCommand, "--lb-inbound-nat-rules", settings.LbInboundNatRules);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic delete".
        /// Delete a network interface.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public static dynamic AzNetworkNicDelete(this ICakeContext context, AzNetworkNicDeleteSettings settings) {
            var baseCommand = "az network nic delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic list".
        /// List network interfaces.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public static dynamic AzNetworkNicList(this ICakeContext context, AzNetworkNicListSettings settings) {
            var baseCommand = "az network nic list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic list-effective-nsg".
        /// List all effective network security groups applied to a network interface.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public static dynamic AzNetworkNicListEffectiveNsg(this ICakeContext context, AzNetworkNicListEffectiveNsgSettings settings) {
            var baseCommand = "az network nic list-effective-nsg";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic show".
        /// Get the details of a network interface.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public static dynamic AzNetworkNicShow(this ICakeContext context, AzNetworkNicShowSettings settings) {
            var baseCommand = "az network nic show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic show-effective-route-table".
        /// Show the effective route table applied to a network interface.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public static dynamic AzNetworkNicShowEffectiveRouteTable(this ICakeContext context, AzNetworkNicShowEffectiveRouteTableSettings settings) {
            var baseCommand = "az network nic show-effective-route-table";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic update".
        /// Update a network interface.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public static dynamic AzNetworkNicUpdate(this ICakeContext context, AzNetworkNicUpdateSettings settings) {
            var baseCommand = "az network nic update";
            AppendIfNonNull(ref baseCommand, "--accelerated-networking", settings.AcceleratedNetworking);
            AppendIfNonNull(ref baseCommand, "--ip-forwarding", settings.IpForwarding);
            AppendIfNonNull(ref baseCommand, "--network-security-group", settings.NetworkSecurityGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--dns-servers", settings.DnsServers);
            AppendIfNonNull(ref baseCommand, "--internal-dns-name", settings.InternalDnsName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic wait".
        /// Place the CLI in a waiting state until a condition of the network interface is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public static dynamic AzNetworkNicWait(this ICakeContext context, AzNetworkNicWaitSettings settings) {
            var baseCommand = "az network nic wait";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic ip-config create".
        /// Create an IP configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfig")]
        public static dynamic AzNetworkNicIpConfigCreate(this ICakeContext context, AzNetworkNicIpConfigCreateSettings settings) {
            var baseCommand = "az network nic ip-config create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--application-security-groups", settings.ApplicationSecurityGroups);
            AppendIfNonNull(ref baseCommand, "--make-primary", settings.MakePrimary);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--private-ip-address-version", settings.PrivateIpAddressVersion);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--app-gateway-address-pools", settings.AppGatewayAddressPools);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--lb-address-pools", settings.LbAddressPools);
            AppendIfNonNull(ref baseCommand, "--lb-inbound-nat-rules", settings.LbInboundNatRules);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic ip-config delete".
        /// Delete an IP configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfig")]
        public static dynamic AzNetworkNicIpConfigDelete(this ICakeContext context, AzNetworkNicIpConfigDeleteSettings settings) {
            var baseCommand = "az network nic ip-config delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic ip-config list".
        /// List the IP configurations of a NIC.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfig")]
        public static dynamic AzNetworkNicIpConfigList(this ICakeContext context, AzNetworkNicIpConfigListSettings settings) {
            var baseCommand = "az network nic ip-config list";
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic ip-config show".
        /// Show the details of an IP configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfig")]
        public static dynamic AzNetworkNicIpConfigShow(this ICakeContext context, AzNetworkNicIpConfigShowSettings settings) {
            var baseCommand = "az network nic ip-config show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic ip-config update".
        /// Update an IP configuration.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfig")]
        public static dynamic AzNetworkNicIpConfigUpdate(this ICakeContext context, AzNetworkNicIpConfigUpdateSettings settings) {
            var baseCommand = "az network nic ip-config update";
            AppendIfNonNull(ref baseCommand, "--application-security-groups", settings.ApplicationSecurityGroups);
            AppendIfNonNull(ref baseCommand, "--make-primary", settings.MakePrimary);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--private-ip-address-version", settings.PrivateIpAddressVersion);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--app-gateway-address-pools", settings.AppGatewayAddressPools);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--lb-address-pools", settings.LbAddressPools);
            AppendIfNonNull(ref baseCommand, "--lb-inbound-nat-rules", settings.LbInboundNatRules);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic ip-config address-pool add".
        /// Add an address pool to an IP configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfigAddressPool")]
        public static dynamic AzNetworkNicIpConfigAddressPoolAdd(this ICakeContext context, AzNetworkNicIpConfigAddressPoolAddSettings settings) {
            var baseCommand = "az network nic ip-config address-pool add";
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--ip-config-name", settings.IpConfigName);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic ip-config address-pool remove".
        /// Remove an address pool of an IP configuration.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfigAddressPool")]
        public static dynamic AzNetworkNicIpConfigAddressPoolRemove(this ICakeContext context, AzNetworkNicIpConfigAddressPoolRemoveSettings settings) {
            var baseCommand = "az network nic ip-config address-pool remove";
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--ip-config-name", settings.IpConfigName);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic ip-config inbound-nat-rule add".
        /// Add an inbound NAT rule to an IP configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfigInboundNatRule")]
        public static dynamic AzNetworkNicIpConfigInboundNatRuleAdd(this ICakeContext context, AzNetworkNicIpConfigInboundNatRuleAddSettings settings) {
            var baseCommand = "az network nic ip-config inbound-nat-rule add";
            AppendIfNonNull(ref baseCommand, "--inbound-nat-rule", settings.InboundNatRule);
            AppendIfNonNull(ref baseCommand, "--ip-config-name", settings.IpConfigName);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nic ip-config inbound-nat-rule remove".
        /// Remove an inbound NAT rule of an IP configuration.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfigInboundNatRule")]
        public static dynamic AzNetworkNicIpConfigInboundNatRuleRemove(this ICakeContext context, AzNetworkNicIpConfigInboundNatRuleRemoveSettings settings) {
            var baseCommand = "az network nic ip-config inbound-nat-rule remove";
            AppendIfNonNull(ref baseCommand, "--inbound-nat-rule", settings.InboundNatRule);
            AppendIfNonNull(ref baseCommand, "--ip-config-name", settings.IpConfigName);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nsg create".
        /// Create a network security group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsg")]
        public static dynamic AzNetworkNsgCreate(this ICakeContext context, AzNetworkNsgCreateSettings settings) {
            var baseCommand = "az network nsg create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nsg delete".
        /// Delete a network security group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsg")]
        public static dynamic AzNetworkNsgDelete(this ICakeContext context, AzNetworkNsgDeleteSettings settings) {
            var baseCommand = "az network nsg delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nsg list".
        /// List network security groups.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsg")]
        public static dynamic AzNetworkNsgList(this ICakeContext context, AzNetworkNsgListSettings settings) {
            var baseCommand = "az network nsg list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nsg show".
        /// Get information about a network security group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsg")]
        public static dynamic AzNetworkNsgShow(this ICakeContext context, AzNetworkNsgShowSettings settings) {
            var baseCommand = "az network nsg show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nsg update".
        /// Update a network security group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsg")]
        public static dynamic AzNetworkNsgUpdate(this ICakeContext context, AzNetworkNsgUpdateSettings settings) {
            var baseCommand = "az network nsg update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nsg rule create".
        /// Create a network security group rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsgRule")]
        public static dynamic AzNetworkNsgRuleCreate(this ICakeContext context, AzNetworkNsgRuleCreateSettings settings) {
            var baseCommand = "az network nsg rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nsg-name", settings.NsgName);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--access", settings.Access);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--direction", settings.Direction);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--destination-address-prefixes", settings.DestinationAddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--destination-asgs", settings.DestinationAsgs);
            AppendIfNonNull(ref baseCommand, "--destination-port-ranges", settings.DestinationPortRanges);
            AppendIfNonNull(ref baseCommand, "--source-address-prefixes", settings.SourceAddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--source-asgs", settings.SourceAsgs);
            AppendIfNonNull(ref baseCommand, "--source-port-ranges", settings.SourcePortRanges);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nsg rule delete".
        /// Delete a network security group rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsgRule")]
        public static dynamic AzNetworkNsgRuleDelete(this ICakeContext context, AzNetworkNsgRuleDeleteSettings settings) {
            var baseCommand = "az network nsg rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nsg-name", settings.NsgName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nsg rule list".
        /// List all rules in a network security group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsgRule")]
        public static dynamic AzNetworkNsgRuleList(this ICakeContext context, AzNetworkNsgRuleListSettings settings) {
            var baseCommand = "az network nsg rule list";
            AppendIfNonNull(ref baseCommand, "--nsg-name", settings.NsgName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--include-default", settings.IncludeDefault);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nsg rule show".
        /// Get the details of a network security group rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsgRule")]
        public static dynamic AzNetworkNsgRuleShow(this ICakeContext context, AzNetworkNsgRuleShowSettings settings) {
            var baseCommand = "az network nsg rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nsg-name", settings.NsgName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network nsg rule update".
        /// Update a network security group rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsgRule")]
        public static dynamic AzNetworkNsgRuleUpdate(this ICakeContext context, AzNetworkNsgRuleUpdateSettings settings) {
            var baseCommand = "az network nsg rule update";
            AppendIfNonNull(ref baseCommand, "--access", settings.Access);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--direction", settings.Direction);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--destination-address-prefixes", settings.DestinationAddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--destination-asgs", settings.DestinationAsgs);
            AppendIfNonNull(ref baseCommand, "--destination-port-ranges", settings.DestinationPortRanges);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nsg-name", settings.NsgName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--source-address-prefixes", settings.SourceAddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--source-asgs", settings.SourceAsgs);
            AppendIfNonNull(ref baseCommand, "--source-port-ranges", settings.SourcePortRanges);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns link vnet create".
        /// Create a virtual network link to the specified Private DNS zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsLinkVnet")]
        public static dynamic AzNetworkPrivateDnsLinkVnetCreate(this ICakeContext context, AzNetworkPrivateDnsLinkVnetCreateSettings settings) {
            var baseCommand = "az network private-dns link vnet create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registration-enabled", settings.RegistrationEnabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--virtual-network", settings.VirtualNetwork);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns link vnet delete".
        /// Delete a virtual network link to the specified Private DNS zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsLinkVnet")]
        public static dynamic AzNetworkPrivateDnsLinkVnetDelete(this ICakeContext context, AzNetworkPrivateDnsLinkVnetDeleteSettings settings) {
            var baseCommand = "az network private-dns link vnet delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns link vnet list".
        /// List the virtual network links to the specified Private DNS zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsLinkVnet")]
        public static dynamic AzNetworkPrivateDnsLinkVnetList(this ICakeContext context, AzNetworkPrivateDnsLinkVnetListSettings settings) {
            var baseCommand = "az network private-dns link vnet list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns link vnet show".
        /// Get a virtual network link to the specified Private DNS zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsLinkVnet")]
        public static dynamic AzNetworkPrivateDnsLinkVnetShow(this ICakeContext context, AzNetworkPrivateDnsLinkVnetShowSettings settings) {
            var baseCommand = "az network private-dns link vnet show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns link vnet update".
        /// Update a virtual network link's properties. Does not modify virtual network within the link.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsLinkVnet")]
        public static dynamic AzNetworkPrivateDnsLinkVnetUpdate(this ICakeContext context, AzNetworkPrivateDnsLinkVnetUpdateSettings settings) {
            var baseCommand = "az network private-dns link vnet update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--registration-enabled", settings.RegistrationEnabled);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns link vnet wait".
        /// Place the CLI in a waiting state until a condition of the virtual network link to the specified Private DNS zone is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsLinkVnet")]
        public static dynamic AzNetworkPrivateDnsLinkVnetWait(this ICakeContext context, AzNetworkPrivateDnsLinkVnetWaitSettings settings) {
            var baseCommand = "az network private-dns link vnet wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set list".
        /// List all record sets within a Private DNS zone.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSet")]
        public static dynamic AzNetworkPrivateDnsRecordSetList(this ICakeContext context, AzNetworkPrivateDnsRecordSetListSettings settings) {
            var baseCommand = "az network private-dns record-set list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set a add-record".
        /// Add an A record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public static dynamic AzNetworkPrivateDnsRecordSetAAddRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetAAddRecordSettings settings) {
            var baseCommand = "az network private-dns record-set a add-record";
            AppendIfNonNull(ref baseCommand, "--ipv4-address", settings.Ipv4Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set a create".
        /// Create an empty A record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public static dynamic AzNetworkPrivateDnsRecordSetACreate(this ICakeContext context, AzNetworkPrivateDnsRecordSetACreateSettings settings) {
            var baseCommand = "az network private-dns record-set a create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set a delete".
        /// Delete an A record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public static dynamic AzNetworkPrivateDnsRecordSetADelete(this ICakeContext context, AzNetworkPrivateDnsRecordSetADeleteSettings settings) {
            var baseCommand = "az network private-dns record-set a delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set a list".
        /// List all A record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public static dynamic AzNetworkPrivateDnsRecordSetAList(this ICakeContext context, AzNetworkPrivateDnsRecordSetAListSettings settings) {
            var baseCommand = "az network private-dns record-set a list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set a remove-record".
        /// Remove an A record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public static dynamic AzNetworkPrivateDnsRecordSetARemoveRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetARemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set a remove-record";
            AppendIfNonNull(ref baseCommand, "--ipv4-address", settings.Ipv4Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set a show".
        /// Get the details of an A record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public static dynamic AzNetworkPrivateDnsRecordSetAShow(this ICakeContext context, AzNetworkPrivateDnsRecordSetAShowSettings settings) {
            var baseCommand = "az network private-dns record-set a show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set a update".
        /// Update an A record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public static dynamic AzNetworkPrivateDnsRecordSetAUpdate(this ICakeContext context, AzNetworkPrivateDnsRecordSetAUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set a update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa add-record".
        /// Add an AAAA record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public static dynamic AzNetworkPrivateDnsRecordSetAaaaAddRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetAaaaAddRecordSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa add-record";
            AppendIfNonNull(ref baseCommand, "--ipv6-address", settings.Ipv6Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa create".
        /// Create an empty AAAA record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public static dynamic AzNetworkPrivateDnsRecordSetAaaaCreate(this ICakeContext context, AzNetworkPrivateDnsRecordSetAaaaCreateSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa delete".
        /// Delete an AAAA record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public static dynamic AzNetworkPrivateDnsRecordSetAaaaDelete(this ICakeContext context, AzNetworkPrivateDnsRecordSetAaaaDeleteSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa list".
        /// List all AAAA record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public static dynamic AzNetworkPrivateDnsRecordSetAaaaList(this ICakeContext context, AzNetworkPrivateDnsRecordSetAaaaListSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa remove-record".
        /// Remove AAAA record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public static dynamic AzNetworkPrivateDnsRecordSetAaaaRemoveRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetAaaaRemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa remove-record";
            AppendIfNonNull(ref baseCommand, "--ipv6-address", settings.Ipv6Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa show".
        /// Get the details of an AAAA record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public static dynamic AzNetworkPrivateDnsRecordSetAaaaShow(this ICakeContext context, AzNetworkPrivateDnsRecordSetAaaaShowSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa update".
        /// Update an AAAA record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public static dynamic AzNetworkPrivateDnsRecordSetAaaaUpdate(this ICakeContext context, AzNetworkPrivateDnsRecordSetAaaaUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set cname create".
        /// Create an empty CNAME record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public static dynamic AzNetworkPrivateDnsRecordSetCnameCreate(this ICakeContext context, AzNetworkPrivateDnsRecordSetCnameCreateSettings settings) {
            var baseCommand = "az network private-dns record-set cname create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set cname delete".
        /// Delete a CNAME record set and its associated record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public static dynamic AzNetworkPrivateDnsRecordSetCnameDelete(this ICakeContext context, AzNetworkPrivateDnsRecordSetCnameDeleteSettings settings) {
            var baseCommand = "az network private-dns record-set cname delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set cname list".
        /// List the CNAME record set in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public static dynamic AzNetworkPrivateDnsRecordSetCnameList(this ICakeContext context, AzNetworkPrivateDnsRecordSetCnameListSettings settings) {
            var baseCommand = "az network private-dns record-set cname list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set cname remove-record".
        /// Remove a CNAME record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public static dynamic AzNetworkPrivateDnsRecordSetCnameRemoveRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetCnameRemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set cname remove-record";
            AppendIfNonNull(ref baseCommand, "--cname", settings.Cname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set cname set-record".
        /// Set the value of a CNAME record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public static dynamic AzNetworkPrivateDnsRecordSetCnameSetRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetCnameSetRecordSettings settings) {
            var baseCommand = "az network private-dns record-set cname set-record";
            AppendIfNonNull(ref baseCommand, "--cname", settings.Cname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set cname show".
        /// Get the details of a CNAME record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public static dynamic AzNetworkPrivateDnsRecordSetCnameShow(this ICakeContext context, AzNetworkPrivateDnsRecordSetCnameShowSettings settings) {
            var baseCommand = "az network private-dns record-set cname show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set cname update".
        /// Update a CNAME record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public static dynamic AzNetworkPrivateDnsRecordSetCnameUpdate(this ICakeContext context, AzNetworkPrivateDnsRecordSetCnameUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set cname update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set mx add-record".
        /// Add an MX record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public static dynamic AzNetworkPrivateDnsRecordSetMxAddRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetMxAddRecordSettings settings) {
            var baseCommand = "az network private-dns record-set mx add-record";
            AppendIfNonNull(ref baseCommand, "--exchange", settings.Exchange);
            AppendIfNonNull(ref baseCommand, "--preference", settings.Preference);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set mx create".
        /// Create an empty MX record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public static dynamic AzNetworkPrivateDnsRecordSetMxCreate(this ICakeContext context, AzNetworkPrivateDnsRecordSetMxCreateSettings settings) {
            var baseCommand = "az network private-dns record-set mx create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set mx delete".
        /// Delete an MX record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public static dynamic AzNetworkPrivateDnsRecordSetMxDelete(this ICakeContext context, AzNetworkPrivateDnsRecordSetMxDeleteSettings settings) {
            var baseCommand = "az network private-dns record-set mx delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set mx list".
        /// List all MX record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public static dynamic AzNetworkPrivateDnsRecordSetMxList(this ICakeContext context, AzNetworkPrivateDnsRecordSetMxListSettings settings) {
            var baseCommand = "az network private-dns record-set mx list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set mx remove-record".
        /// Remove an MX record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public static dynamic AzNetworkPrivateDnsRecordSetMxRemoveRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetMxRemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set mx remove-record";
            AppendIfNonNull(ref baseCommand, "--exchange", settings.Exchange);
            AppendIfNonNull(ref baseCommand, "--preference", settings.Preference);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set mx show".
        /// Get the details of an MX record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public static dynamic AzNetworkPrivateDnsRecordSetMxShow(this ICakeContext context, AzNetworkPrivateDnsRecordSetMxShowSettings settings) {
            var baseCommand = "az network private-dns record-set mx show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set mx update".
        /// Update an MX record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public static dynamic AzNetworkPrivateDnsRecordSetMxUpdate(this ICakeContext context, AzNetworkPrivateDnsRecordSetMxUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set mx update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set ptr add-record".
        /// Add a PTR record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public static dynamic AzNetworkPrivateDnsRecordSetPtrAddRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetPtrAddRecordSettings settings) {
            var baseCommand = "az network private-dns record-set ptr add-record";
            AppendIfNonNull(ref baseCommand, "--ptrdname", settings.Ptrdname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set ptr create".
        /// Create an empty PTR record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public static dynamic AzNetworkPrivateDnsRecordSetPtrCreate(this ICakeContext context, AzNetworkPrivateDnsRecordSetPtrCreateSettings settings) {
            var baseCommand = "az network private-dns record-set ptr create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set ptr delete".
        /// Delete a PTR record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public static dynamic AzNetworkPrivateDnsRecordSetPtrDelete(this ICakeContext context, AzNetworkPrivateDnsRecordSetPtrDeleteSettings settings) {
            var baseCommand = "az network private-dns record-set ptr delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set ptr list".
        /// List all PTR record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public static dynamic AzNetworkPrivateDnsRecordSetPtrList(this ICakeContext context, AzNetworkPrivateDnsRecordSetPtrListSettings settings) {
            var baseCommand = "az network private-dns record-set ptr list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set ptr remove-record".
        /// Remove a PTR record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public static dynamic AzNetworkPrivateDnsRecordSetPtrRemoveRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetPtrRemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set ptr remove-record";
            AppendIfNonNull(ref baseCommand, "--ptrdname", settings.Ptrdname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set ptr show".
        /// Get the details of a PTR record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public static dynamic AzNetworkPrivateDnsRecordSetPtrShow(this ICakeContext context, AzNetworkPrivateDnsRecordSetPtrShowSettings settings) {
            var baseCommand = "az network private-dns record-set ptr show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set ptr update".
        /// Update a PTR record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public static dynamic AzNetworkPrivateDnsRecordSetPtrUpdate(this ICakeContext context, AzNetworkPrivateDnsRecordSetPtrUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set ptr update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set soa show".
        /// Get the details of an SOA record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSoa")]
        public static dynamic AzNetworkPrivateDnsRecordSetSoaShow(this ICakeContext context, AzNetworkPrivateDnsRecordSetSoaShowSettings settings) {
            var baseCommand = "az network private-dns record-set soa show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set soa update".
        /// Update properties of an SOA record.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSoa")]
        public static dynamic AzNetworkPrivateDnsRecordSetSoaUpdate(this ICakeContext context, AzNetworkPrivateDnsRecordSetSoaUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set soa update";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--expire-time", settings.ExpireTime);
            AppendIfNonNull(ref baseCommand, "--host", settings.Host);
            AppendIfNonNull(ref baseCommand, "--minimum-ttl", settings.MinimumTtl);
            AppendIfNonNull(ref baseCommand, "--refresh-time", settings.RefreshTime);
            AppendIfNonNull(ref baseCommand, "--retry-time", settings.RetryTime);
            AppendIfNonNull(ref baseCommand, "--serial-number", settings.SerialNumber);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set srv add-record".
        /// Add an SRV record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public static dynamic AzNetworkPrivateDnsRecordSetSrvAddRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetSrvAddRecordSettings settings) {
            var baseCommand = "az network private-dns record-set srv add-record";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--weight", settings.Weight);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set srv create".
        /// Create an empty SRV record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public static dynamic AzNetworkPrivateDnsRecordSetSrvCreate(this ICakeContext context, AzNetworkPrivateDnsRecordSetSrvCreateSettings settings) {
            var baseCommand = "az network private-dns record-set srv create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set srv delete".
        /// Delete an SRV record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public static dynamic AzNetworkPrivateDnsRecordSetSrvDelete(this ICakeContext context, AzNetworkPrivateDnsRecordSetSrvDeleteSettings settings) {
            var baseCommand = "az network private-dns record-set srv delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set srv list".
        /// List all SRV record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public static dynamic AzNetworkPrivateDnsRecordSetSrvList(this ICakeContext context, AzNetworkPrivateDnsRecordSetSrvListSettings settings) {
            var baseCommand = "az network private-dns record-set srv list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set srv remove-record".
        /// Remove an SRV record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public static dynamic AzNetworkPrivateDnsRecordSetSrvRemoveRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetSrvRemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set srv remove-record";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--weight", settings.Weight);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set srv show".
        /// Get the details of an SRV record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public static dynamic AzNetworkPrivateDnsRecordSetSrvShow(this ICakeContext context, AzNetworkPrivateDnsRecordSetSrvShowSettings settings) {
            var baseCommand = "az network private-dns record-set srv show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set srv update".
        /// Update an SRV record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public static dynamic AzNetworkPrivateDnsRecordSetSrvUpdate(this ICakeContext context, AzNetworkPrivateDnsRecordSetSrvUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set srv update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set txt add-record".
        /// Add a TXT record.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public static dynamic AzNetworkPrivateDnsRecordSetTxtAddRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetTxtAddRecordSettings settings) {
            var baseCommand = "az network private-dns record-set txt add-record";
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set txt create".
        /// Create an empty TXT record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public static dynamic AzNetworkPrivateDnsRecordSetTxtCreate(this ICakeContext context, AzNetworkPrivateDnsRecordSetTxtCreateSettings settings) {
            var baseCommand = "az network private-dns record-set txt create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set txt delete".
        /// Delete a TXT record set and all associated records.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public static dynamic AzNetworkPrivateDnsRecordSetTxtDelete(this ICakeContext context, AzNetworkPrivateDnsRecordSetTxtDeleteSettings settings) {
            var baseCommand = "az network private-dns record-set txt delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set txt list".
        /// List all TXT record sets in a zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public static dynamic AzNetworkPrivateDnsRecordSetTxtList(this ICakeContext context, AzNetworkPrivateDnsRecordSetTxtListSettings settings) {
            var baseCommand = "az network private-dns record-set txt list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set txt remove-record".
        /// Remove a TXT record from its record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public static dynamic AzNetworkPrivateDnsRecordSetTxtRemoveRecord(this ICakeContext context, AzNetworkPrivateDnsRecordSetTxtRemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set txt remove-record";
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set txt show".
        /// Get the details of a TXT record set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public static dynamic AzNetworkPrivateDnsRecordSetTxtShow(this ICakeContext context, AzNetworkPrivateDnsRecordSetTxtShowSettings settings) {
            var baseCommand = "az network private-dns record-set txt show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns record-set txt update".
        /// Update a TXT record set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public static dynamic AzNetworkPrivateDnsRecordSetTxtUpdate(this ICakeContext context, AzNetworkPrivateDnsRecordSetTxtUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set txt update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns zone create".
        /// Create a Private DNS zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsZone")]
        public static dynamic AzNetworkPrivateDnsZoneCreate(this ICakeContext context, AzNetworkPrivateDnsZoneCreateSettings settings) {
            var baseCommand = "az network private-dns zone create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns zone delete".
        /// Delete a Private DNS zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsZone")]
        public static dynamic AzNetworkPrivateDnsZoneDelete(this ICakeContext context, AzNetworkPrivateDnsZoneDeleteSettings settings) {
            var baseCommand = "az network private-dns zone delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns zone list".
        /// List Private DNS zones.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsZone")]
        public static dynamic AzNetworkPrivateDnsZoneList(this ICakeContext context, AzNetworkPrivateDnsZoneListSettings settings) {
            var baseCommand = "az network private-dns zone list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns zone show".
        /// Get a Private DNS zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsZone")]
        public static dynamic AzNetworkPrivateDnsZoneShow(this ICakeContext context, AzNetworkPrivateDnsZoneShowSettings settings) {
            var baseCommand = "az network private-dns zone show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns zone update".
        /// Update a Private DNS zone's properties. Does not modify Private DNS records or virtual network links within the zone.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsZone")]
        public static dynamic AzNetworkPrivateDnsZoneUpdate(this ICakeContext context, AzNetworkPrivateDnsZoneUpdateSettings settings) {
            var baseCommand = "az network private-dns zone update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-dns zone wait".
        /// Place the CLI in a waiting state until a condition of the Private DNS zone is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsZone")]
        public static dynamic AzNetworkPrivateDnsZoneWait(this ICakeContext context, AzNetworkPrivateDnsZoneWaitSettings settings) {
            var baseCommand = "az network private-dns zone wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-endpoint create".
        /// Create a private endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateEndpoint")]
        public static dynamic AzNetworkPrivateEndpointCreate(this ICakeContext context, AzNetworkPrivateEndpointCreateSettings settings) {
            var baseCommand = "az network private-endpoint create";
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--private-connection-resource-id", settings.PrivateConnectionResourceId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--group-ids", settings.GroupIds);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--manual-request", settings.ManualRequest);
            AppendIfNonNull(ref baseCommand, "--request-message", settings.RequestMessage);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-endpoint delete".
        /// Delete a private endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateEndpoint")]
        public static dynamic AzNetworkPrivateEndpointDelete(this ICakeContext context, AzNetworkPrivateEndpointDeleteSettings settings) {
            var baseCommand = "az network private-endpoint delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-endpoint list".
        /// List private endpoints.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateEndpoint")]
        public static dynamic AzNetworkPrivateEndpointList(this ICakeContext context, AzNetworkPrivateEndpointListSettings settings) {
            var baseCommand = "az network private-endpoint list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-endpoint list-types".
        /// Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateEndpoint")]
        public static dynamic AzNetworkPrivateEndpointListTypes(this ICakeContext context, AzNetworkPrivateEndpointListTypesSettings settings) {
            var baseCommand = "az network private-endpoint list-types";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-endpoint show".
        /// Get the details of a private endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateEndpoint")]
        public static dynamic AzNetworkPrivateEndpointShow(this ICakeContext context, AzNetworkPrivateEndpointShowSettings settings) {
            var baseCommand = "az network private-endpoint show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-endpoint update".
        /// Update a private endpoint.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateEndpoint")]
        public static dynamic AzNetworkPrivateEndpointUpdate(this ICakeContext context, AzNetworkPrivateEndpointUpdateSettings settings) {
            var baseCommand = "az network private-endpoint update";
            AppendIfNonNull(ref baseCommand, "--request-message", settings.RequestMessage);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-link-service create".
        /// Create a private link service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkService")]
        public static dynamic AzNetworkPrivateLinkServiceCreate(this ICakeContext context, AzNetworkPrivateLinkServiceCreateSettings settings) {
            var baseCommand = "az network private-link-service create";
            AppendIfNonNull(ref baseCommand, "--lb-frontend-ip-configs", settings.LbFrontendIpConfigs);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--auto-approval", settings.AutoApproval);
            AppendIfNonNull(ref baseCommand, "--fqdns", settings.Fqdns);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--visibility", settings.Visibility);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--private-ip-address-version", settings.PrivateIpAddressVersion);
            AppendIfNonNull(ref baseCommand, "--private-ip-allocation-method", settings.PrivateIpAllocationMethod);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-link-service delete".
        /// Delete a private link service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkService")]
        public static dynamic AzNetworkPrivateLinkServiceDelete(this ICakeContext context, AzNetworkPrivateLinkServiceDeleteSettings settings) {
            var baseCommand = "az network private-link-service delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-link-service list".
        /// List private link services.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkService")]
        public static dynamic AzNetworkPrivateLinkServiceList(this ICakeContext context, AzNetworkPrivateLinkServiceListSettings settings) {
            var baseCommand = "az network private-link-service list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-link-service show".
        /// Get the details of a private link service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkService")]
        public static dynamic AzNetworkPrivateLinkServiceShow(this ICakeContext context, AzNetworkPrivateLinkServiceShowSettings settings) {
            var baseCommand = "az network private-link-service show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-link-service update".
        /// Update a private link service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkService")]
        public static dynamic AzNetworkPrivateLinkServiceUpdate(this ICakeContext context, AzNetworkPrivateLinkServiceUpdateSettings settings) {
            var baseCommand = "az network private-link-service update";
            AppendIfNonNull(ref baseCommand, "--auto-approval", settings.AutoApproval);
            AppendIfNonNull(ref baseCommand, "--fqdns", settings.Fqdns);
            AppendIfNonNull(ref baseCommand, "--lb-frontend-ip-configs", settings.LbFrontendIpConfigs);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--visibility", settings.Visibility);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-link-service connection delete".
        /// Delete a private link service endpoint connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkServiceConnection")]
        public static dynamic AzNetworkPrivateLinkServiceConnectionDelete(this ICakeContext context, AzNetworkPrivateLinkServiceConnectionDeleteSettings settings) {
            var baseCommand = "az network private-link-service connection delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network private-link-service connection update".
        /// Update a private link service endpoint connection.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkServiceConnection")]
        public static dynamic AzNetworkPrivateLinkServiceConnectionUpdate(this ICakeContext context, AzNetworkPrivateLinkServiceConnectionUpdateSettings settings) {
            var baseCommand = "az network private-link-service connection update";
            AppendIfNonNull(ref baseCommand, "--connection-status", settings.ConnectionStatus);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--action-required", settings.ActionRequired);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network profile delete".
        /// Delete a network profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkProfile")]
        public static dynamic AzNetworkProfileDelete(this ICakeContext context, AzNetworkProfileDeleteSettings settings) {
            var baseCommand = "az network profile delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network profile list".
        /// List network profiles.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkProfile")]
        public static dynamic AzNetworkProfileList(this ICakeContext context, AzNetworkProfileListSettings settings) {
            var baseCommand = "az network profile list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network profile show".
        /// Get the details of a network profile.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkProfile")]
        public static dynamic AzNetworkProfileShow(this ICakeContext context, AzNetworkProfileShowSettings settings) {
            var baseCommand = "az network profile show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network public-ip create".
        /// Create a public IP address.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIp")]
        public static dynamic AzNetworkPublicIpCreate(this ICakeContext context, AzNetworkPublicIpCreateSettings settings) {
            var baseCommand = "az network public-ip create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allocation-method", settings.AllocationMethod);
            AppendIfNonNull(ref baseCommand, "--dns-name", settings.DnsName);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--ip-tags", settings.IpTags);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--public-ip-prefix", settings.PublicIpPrefix);
            AppendIfNonNull(ref baseCommand, "--reverse-fqdn", settings.ReverseFqdn);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network public-ip delete".
        /// Delete a public IP address.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIp")]
        public static dynamic AzNetworkPublicIpDelete(this ICakeContext context, AzNetworkPublicIpDeleteSettings settings) {
            var baseCommand = "az network public-ip delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network public-ip list".
        /// List public IP addresses.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIp")]
        public static dynamic AzNetworkPublicIpList(this ICakeContext context, AzNetworkPublicIpListSettings settings) {
            var baseCommand = "az network public-ip list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network public-ip show".
        /// Get the details of a public IP address.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIp")]
        public static dynamic AzNetworkPublicIpShow(this ICakeContext context, AzNetworkPublicIpShowSettings settings) {
            var baseCommand = "az network public-ip show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network public-ip update".
        /// Update a public IP address.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIp")]
        public static dynamic AzNetworkPublicIpUpdate(this ICakeContext context, AzNetworkPublicIpUpdateSettings settings) {
            var baseCommand = "az network public-ip update";
            AppendIfNonNull(ref baseCommand, "--allocation-method", settings.AllocationMethod);
            AppendIfNonNull(ref baseCommand, "--dns-name", settings.DnsName);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--ip-tags", settings.IpTags);
            AppendIfNonNull(ref baseCommand, "--public-ip-prefix", settings.PublicIpPrefix);
            AppendIfNonNull(ref baseCommand, "--reverse-fqdn", settings.ReverseFqdn);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network public-ip prefix create".
        /// Create a public IP prefix resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIpPrefix")]
        public static dynamic AzNetworkPublicIpPrefixCreate(this ICakeContext context, AzNetworkPublicIpPrefixCreateSettings settings) {
            var baseCommand = "az network public-ip prefix create";
            AppendIfNonNull(ref baseCommand, "--length", settings.Length);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network public-ip prefix delete".
        /// Delete a public IP prefix resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIpPrefix")]
        public static dynamic AzNetworkPublicIpPrefixDelete(this ICakeContext context, AzNetworkPublicIpPrefixDeleteSettings settings) {
            var baseCommand = "az network public-ip prefix delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network public-ip prefix list".
        /// List public IP prefix resources.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIpPrefix")]
        public static dynamic AzNetworkPublicIpPrefixList(this ICakeContext context, AzNetworkPublicIpPrefixListSettings settings) {
            var baseCommand = "az network public-ip prefix list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network public-ip prefix show".
        /// Get the details of a public IP prefix resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIpPrefix")]
        public static dynamic AzNetworkPublicIpPrefixShow(this ICakeContext context, AzNetworkPublicIpPrefixShowSettings settings) {
            var baseCommand = "az network public-ip prefix show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network public-ip prefix update".
        /// Update a public IP prefix resource.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIpPrefix")]
        public static dynamic AzNetworkPublicIpPrefixUpdate(this ICakeContext context, AzNetworkPublicIpPrefixUpdateSettings settings) {
            var baseCommand = "az network public-ip prefix update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-filter create".
        /// Create a route filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilter")]
        public static dynamic AzNetworkRouteFilterCreate(this ICakeContext context, AzNetworkRouteFilterCreateSettings settings) {
            var baseCommand = "az network route-filter create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-filter delete".
        /// Delete a route filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilter")]
        public static dynamic AzNetworkRouteFilterDelete(this ICakeContext context, AzNetworkRouteFilterDeleteSettings settings) {
            var baseCommand = "az network route-filter delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-filter list".
        /// List route filters.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilter")]
        public static dynamic AzNetworkRouteFilterList(this ICakeContext context, AzNetworkRouteFilterListSettings settings) {
            var baseCommand = "az network route-filter list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-filter show".
        /// Get the details of a route filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilter")]
        public static dynamic AzNetworkRouteFilterShow(this ICakeContext context, AzNetworkRouteFilterShowSettings settings) {
            var baseCommand = "az network route-filter show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-filter update".
        /// Update a route filter.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilter")]
        public static dynamic AzNetworkRouteFilterUpdate(this ICakeContext context, AzNetworkRouteFilterUpdateSettings settings) {
            var baseCommand = "az network route-filter update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-filter rule create".
        /// Create a rule in a route filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilterRule")]
        public static dynamic AzNetworkRouteFilterRuleCreate(this ICakeContext context, AzNetworkRouteFilterRuleCreateSettings settings) {
            var baseCommand = "az network route-filter rule create";
            AppendIfNonNull(ref baseCommand, "--access", settings.Access);
            AppendIfNonNull(ref baseCommand, "--communities", settings.Communities);
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-filter rule delete".
        /// Delete a rule from a route filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilterRule")]
        public static dynamic AzNetworkRouteFilterRuleDelete(this ICakeContext context, AzNetworkRouteFilterRuleDeleteSettings settings) {
            var baseCommand = "az network route-filter rule delete";
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-filter rule list".
        /// List rules in a route filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilterRule")]
        public static dynamic AzNetworkRouteFilterRuleList(this ICakeContext context, AzNetworkRouteFilterRuleListSettings settings) {
            var baseCommand = "az network route-filter rule list";
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-filter rule list-service-communities".
        /// Gets all the available BGP service communities.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilterRule")]
        public static dynamic AzNetworkRouteFilterRuleListServiceCommunities(this ICakeContext context, AzNetworkRouteFilterRuleListServiceCommunitiesSettings settings) {
            var baseCommand = "az network route-filter rule list-service-communities";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-filter rule show".
        /// Get the details of a rule in a route filter.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilterRule")]
        public static dynamic AzNetworkRouteFilterRuleShow(this ICakeContext context, AzNetworkRouteFilterRuleShowSettings settings) {
            var baseCommand = "az network route-filter rule show";
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-filter rule update".
        /// Update a rule in a route filter.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilterRule")]
        public static dynamic AzNetworkRouteFilterRuleUpdate(this ICakeContext context, AzNetworkRouteFilterRuleUpdateSettings settings) {
            var baseCommand = "az network route-filter rule update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-table create".
        /// Create a route table.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTable")]
        public static dynamic AzNetworkRouteTableCreate(this ICakeContext context, AzNetworkRouteTableCreateSettings settings) {
            var baseCommand = "az network route-table create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--disable-bgp-route-propagation", settings.DisableBgpRoutePropagation);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-table delete".
        /// Delete a route table.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTable")]
        public static dynamic AzNetworkRouteTableDelete(this ICakeContext context, AzNetworkRouteTableDeleteSettings settings) {
            var baseCommand = "az network route-table delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-table list".
        /// List route tables.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTable")]
        public static dynamic AzNetworkRouteTableList(this ICakeContext context, AzNetworkRouteTableListSettings settings) {
            var baseCommand = "az network route-table list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-table show".
        /// Get the details of a route table.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTable")]
        public static dynamic AzNetworkRouteTableShow(this ICakeContext context, AzNetworkRouteTableShowSettings settings) {
            var baseCommand = "az network route-table show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-table update".
        /// Update a route table.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTable")]
        public static dynamic AzNetworkRouteTableUpdate(this ICakeContext context, AzNetworkRouteTableUpdateSettings settings) {
            var baseCommand = "az network route-table update";
            AppendIfNonNull(ref baseCommand, "--disable-bgp-route-propagation", settings.DisableBgpRoutePropagation);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-table route create".
        /// Create a route in a route table.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTableRoute")]
        public static dynamic AzNetworkRouteTableRouteCreate(this ICakeContext context, AzNetworkRouteTableRouteCreateSettings settings) {
            var baseCommand = "az network route-table route create";
            AppendIfNonNull(ref baseCommand, "--address-prefix", settings.AddressPrefix);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--next-hop-type", settings.NextHopType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--route-table-name", settings.RouteTableName);
            AppendIfNonNull(ref baseCommand, "--next-hop-ip-address", settings.NextHopIpAddress);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-table route delete".
        /// Delete a route from a route table.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTableRoute")]
        public static dynamic AzNetworkRouteTableRouteDelete(this ICakeContext context, AzNetworkRouteTableRouteDeleteSettings settings) {
            var baseCommand = "az network route-table route delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--route-table-name", settings.RouteTableName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-table route list".
        /// List routes in a route table.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTableRoute")]
        public static dynamic AzNetworkRouteTableRouteList(this ICakeContext context, AzNetworkRouteTableRouteListSettings settings) {
            var baseCommand = "az network route-table route list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--route-table-name", settings.RouteTableName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-table route show".
        /// Get the details of a route in a route table.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTableRoute")]
        public static dynamic AzNetworkRouteTableRouteShow(this ICakeContext context, AzNetworkRouteTableRouteShowSettings settings) {
            var baseCommand = "az network route-table route show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--route-table-name", settings.RouteTableName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network route-table route update".
        /// Update a route in a route table.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTableRoute")]
        public static dynamic AzNetworkRouteTableRouteUpdate(this ICakeContext context, AzNetworkRouteTableRouteUpdateSettings settings) {
            var baseCommand = "az network route-table route update";
            AppendIfNonNull(ref baseCommand, "--address-prefix", settings.AddressPrefix);
            AppendIfNonNull(ref baseCommand, "--next-hop-ip-address", settings.NextHopIpAddress);
            AppendIfNonNull(ref baseCommand, "--next-hop-type", settings.NextHopType);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--route-table-name", settings.RouteTableName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network service-endpoint list".
        /// List what values of endpoint services are available for use.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpoint")]
        public static dynamic AzNetworkServiceEndpointList(this ICakeContext context, AzNetworkServiceEndpointListSettings settings) {
            var baseCommand = "az network service-endpoint list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network service-endpoint policy create".
        /// Create a service endpoint policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicy")]
        public static dynamic AzNetworkServiceEndpointPolicyCreate(this ICakeContext context, AzNetworkServiceEndpointPolicyCreateSettings settings) {
            var baseCommand = "az network service-endpoint policy create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network service-endpoint policy delete".
        /// Delete a service endpoint policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicy")]
        public static dynamic AzNetworkServiceEndpointPolicyDelete(this ICakeContext context, AzNetworkServiceEndpointPolicyDeleteSettings settings) {
            var baseCommand = "az network service-endpoint policy delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network service-endpoint policy list".
        /// List service endpoint policies.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicy")]
        public static dynamic AzNetworkServiceEndpointPolicyList(this ICakeContext context, AzNetworkServiceEndpointPolicyListSettings settings) {
            var baseCommand = "az network service-endpoint policy list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network service-endpoint policy show".
        /// Get the details of a service endpoint policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicy")]
        public static dynamic AzNetworkServiceEndpointPolicyShow(this ICakeContext context, AzNetworkServiceEndpointPolicyShowSettings settings) {
            var baseCommand = "az network service-endpoint policy show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network service-endpoint policy update".
        /// Update a service endpoint policy.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicy")]
        public static dynamic AzNetworkServiceEndpointPolicyUpdate(this ICakeContext context, AzNetworkServiceEndpointPolicyUpdateSettings settings) {
            var baseCommand = "az network service-endpoint policy update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network service-endpoint policy-definition create".
        /// Create a service endpoint policy definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicyDefinition")]
        public static dynamic AzNetworkServiceEndpointPolicyDefinitionCreate(this ICakeContext context, AzNetworkServiceEndpointPolicyDefinitionCreateSettings settings) {
            var baseCommand = "az network service-endpoint policy-definition create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service", settings.Service);
            AppendIfNonNull(ref baseCommand, "--service-resources", settings.ServiceResources);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network service-endpoint policy-definition delete".
        /// Delete a service endpoint policy definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicyDefinition")]
        public static dynamic AzNetworkServiceEndpointPolicyDefinitionDelete(this ICakeContext context, AzNetworkServiceEndpointPolicyDefinitionDeleteSettings settings) {
            var baseCommand = "az network service-endpoint policy-definition delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network service-endpoint policy-definition list".
        /// List service endpoint policy definitions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicyDefinition")]
        public static dynamic AzNetworkServiceEndpointPolicyDefinitionList(this ICakeContext context, AzNetworkServiceEndpointPolicyDefinitionListSettings settings) {
            var baseCommand = "az network service-endpoint policy-definition list";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network service-endpoint policy-definition show".
        /// Get the details of a service endpoint policy definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicyDefinition")]
        public static dynamic AzNetworkServiceEndpointPolicyDefinitionShow(this ICakeContext context, AzNetworkServiceEndpointPolicyDefinitionShowSettings settings) {
            var baseCommand = "az network service-endpoint policy-definition show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network service-endpoint policy-definition update".
        /// Update a service endpoint policy definition.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicyDefinition")]
        public static dynamic AzNetworkServiceEndpointPolicyDefinitionUpdate(this ICakeContext context, AzNetworkServiceEndpointPolicyDefinitionUpdateSettings settings) {
            var baseCommand = "az network service-endpoint policy-definition update";
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--service", settings.Service);
            AppendIfNonNull(ref baseCommand, "--service-resources", settings.ServiceResources);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network traffic-manager endpoint create".
        /// Create a traffic manager endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerEndpoint")]
        public static dynamic AzNetworkTrafficManagerEndpointCreate(this ICakeContext context, AzNetworkTrafficManagerEndpointCreateSettings settings) {
            var baseCommand = "az network traffic-manager endpoint create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--custom-headers", settings.CustomHeaders);
            AppendIfNonNull(ref baseCommand, "--endpoint-location", settings.EndpointLocation);
            AppendIfNonNull(ref baseCommand, "--endpoint-monitor-status", settings.EndpointMonitorStatus);
            AppendIfNonNull(ref baseCommand, "--endpoint-status", settings.EndpointStatus);
            AppendIfNonNull(ref baseCommand, "--geo-mapping", settings.GeoMapping);
            AppendIfNonNull(ref baseCommand, "--min-child-endpoints", settings.MinChildEndpoints);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--subnets", settings.Subnets);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--target-resource-id", settings.TargetResourceId);
            AppendIfNonNull(ref baseCommand, "--weight", settings.Weight);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network traffic-manager endpoint delete".
        /// Delete a traffic manager endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerEndpoint")]
        public static dynamic AzNetworkTrafficManagerEndpointDelete(this ICakeContext context, AzNetworkTrafficManagerEndpointDeleteSettings settings) {
            var baseCommand = "az network traffic-manager endpoint delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network traffic-manager endpoint list".
        /// List traffic manager endpoints.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerEndpoint")]
        public static dynamic AzNetworkTrafficManagerEndpointList(this ICakeContext context, AzNetworkTrafficManagerEndpointListSettings settings) {
            var baseCommand = "az network traffic-manager endpoint list";
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network traffic-manager endpoint show".
        /// Get the details of a traffic manager endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerEndpoint")]
        public static dynamic AzNetworkTrafficManagerEndpointShow(this ICakeContext context, AzNetworkTrafficManagerEndpointShowSettings settings) {
            var baseCommand = "az network traffic-manager endpoint show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network traffic-manager endpoint show-geographic-hierarchy".
        /// Get the default geographic hierarchy used by the geographic traffic routing method.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerEndpoint")]
        public static dynamic AzNetworkTrafficManagerEndpointShowGeographicHierarchy(this ICakeContext context, AzNetworkTrafficManagerEndpointShowGeographicHierarchySettings settings) {
            var baseCommand = "az network traffic-manager endpoint show-geographic-hierarchy";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network traffic-manager endpoint update".
        /// Update a traffic manager endpoint.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerEndpoint")]
        public static dynamic AzNetworkTrafficManagerEndpointUpdate(this ICakeContext context, AzNetworkTrafficManagerEndpointUpdateSettings settings) {
            var baseCommand = "az network traffic-manager endpoint update";
            AppendIfNonNull(ref baseCommand, "--custom-headers", settings.CustomHeaders);
            AppendIfNonNull(ref baseCommand, "--endpoint-location", settings.EndpointLocation);
            AppendIfNonNull(ref baseCommand, "--endpoint-monitor-status", settings.EndpointMonitorStatus);
            AppendIfNonNull(ref baseCommand, "--endpoint-status", settings.EndpointStatus);
            AppendIfNonNull(ref baseCommand, "--geo-mapping", settings.GeoMapping);
            AppendIfNonNull(ref baseCommand, "--min-child-endpoints", settings.MinChildEndpoints);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--subnets", settings.Subnets);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--target-resource-id", settings.TargetResourceId);
            AppendIfNonNull(ref baseCommand, "--weight", settings.Weight);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network traffic-manager profile check-dns".
        /// Check the availability of a relative DNS name.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerProfile")]
        public static dynamic AzNetworkTrafficManagerProfileCheckDns(this ICakeContext context, AzNetworkTrafficManagerProfileCheckDnsSettings settings) {
            var baseCommand = "az network traffic-manager profile check-dns";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network traffic-manager profile create".
        /// Create a traffic manager profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerProfile")]
        public static dynamic AzNetworkTrafficManagerProfileCreate(this ICakeContext context, AzNetworkTrafficManagerProfileCreateSettings settings) {
            var baseCommand = "az network traffic-manager profile create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--routing-method", settings.RoutingMethod);
            AppendIfNonNull(ref baseCommand, "--unique-dns-name", settings.UniqueDnsName);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--custom-headers", settings.CustomHeaders);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--max-failures", settings.MaxFailures);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--status-code-ranges", settings.StatusCodeRanges);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network traffic-manager profile delete".
        /// Delete a traffic manager profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerProfile")]
        public static dynamic AzNetworkTrafficManagerProfileDelete(this ICakeContext context, AzNetworkTrafficManagerProfileDeleteSettings settings) {
            var baseCommand = "az network traffic-manager profile delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network traffic-manager profile list".
        /// List traffic manager profiles.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerProfile")]
        public static dynamic AzNetworkTrafficManagerProfileList(this ICakeContext context, AzNetworkTrafficManagerProfileListSettings settings) {
            var baseCommand = "az network traffic-manager profile list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network traffic-manager profile show".
        /// Get the details of a traffic manager profile.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerProfile")]
        public static dynamic AzNetworkTrafficManagerProfileShow(this ICakeContext context, AzNetworkTrafficManagerProfileShowSettings settings) {
            var baseCommand = "az network traffic-manager profile show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network traffic-manager profile update".
        /// Update a traffic manager profile.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerProfile")]
        public static dynamic AzNetworkTrafficManagerProfileUpdate(this ICakeContext context, AzNetworkTrafficManagerProfileUpdateSettings settings) {
            var baseCommand = "az network traffic-manager profile update";
            AppendIfNonNull(ref baseCommand, "--routing-method", settings.RoutingMethod);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--custom-headers", settings.CustomHeaders);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--max-failures", settings.MaxFailures);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--status-code-ranges", settings.StatusCodeRanges);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet check-ip-address".
        /// Check if a private IP address is available for use within a virtual network.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public static dynamic AzNetworkVnetCheckIpAddress(this ICakeContext context, AzNetworkVnetCheckIpAddressSettings settings) {
            var baseCommand = "az network vnet check-ip-address";
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet create".
        /// Create a virtual network.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public static dynamic AzNetworkVnetCreate(this ICakeContext context, AzNetworkVnetCreateSettings settings) {
            var baseCommand = "az network vnet create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--address-prefixes", settings.AddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--ddos-protection", settings.DdosProtection);
            AppendIfNonNull(ref baseCommand, "--ddos-protection-plan", settings.DdosProtectionPlan);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--dns-servers", settings.DnsServers);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vm-protection", settings.VmProtection);
            AppendIfNonNull(ref baseCommand, "--subnet-name", settings.SubnetName);
            AppendIfNonNull(ref baseCommand, "--subnet-prefixes", settings.SubnetPrefixes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet delete".
        /// Delete a virtual network.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public static dynamic AzNetworkVnetDelete(this ICakeContext context, AzNetworkVnetDeleteSettings settings) {
            var baseCommand = "az network vnet delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet list".
        /// List virtual networks.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public static dynamic AzNetworkVnetList(this ICakeContext context, AzNetworkVnetListSettings settings) {
            var baseCommand = "az network vnet list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet list-endpoint-services".
        /// List which services support VNET service tunneling in a given region.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public static dynamic AzNetworkVnetListEndpointServices(this ICakeContext context, AzNetworkVnetListEndpointServicesSettings settings) {
            var baseCommand = "az network vnet list-endpoint-services";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet show".
        /// Get the details of a virtual network.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public static dynamic AzNetworkVnetShow(this ICakeContext context, AzNetworkVnetShowSettings settings) {
            var baseCommand = "az network vnet show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet update".
        /// Update a virtual network.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public static dynamic AzNetworkVnetUpdate(this ICakeContext context, AzNetworkVnetUpdateSettings settings) {
            var baseCommand = "az network vnet update";
            AppendIfNonNull(ref baseCommand, "--address-prefixes", settings.AddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--ddos-protection", settings.DdosProtection);
            AppendIfNonNull(ref baseCommand, "--ddos-protection-plan", settings.DdosProtectionPlan);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--dns-servers", settings.DnsServers);
            AppendIfNonNull(ref baseCommand, "--vm-protection", settings.VmProtection);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet peering create".
        /// Create a virtual network peering connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetPeering")]
        public static dynamic AzNetworkVnetPeeringCreate(this ICakeContext context, AzNetworkVnetPeeringCreateSettings settings) {
            var baseCommand = "az network vnet peering create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--remote-vnet", settings.RemoteVnet);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--allow-forwarded-traffic", settings.AllowForwardedTraffic);
            AppendIfNonNull(ref baseCommand, "--allow-gateway-transit", settings.AllowGatewayTransit);
            AppendIfNonNull(ref baseCommand, "--allow-vnet-access", settings.AllowVnetAccess);
            AppendIfNonNull(ref baseCommand, "--use-remote-gateways", settings.UseRemoteGateways);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet peering delete".
        /// Delete a peering.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetPeering")]
        public static dynamic AzNetworkVnetPeeringDelete(this ICakeContext context, AzNetworkVnetPeeringDeleteSettings settings) {
            var baseCommand = "az network vnet peering delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet peering list".
        /// List peerings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetPeering")]
        public static dynamic AzNetworkVnetPeeringList(this ICakeContext context, AzNetworkVnetPeeringListSettings settings) {
            var baseCommand = "az network vnet peering list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet peering show".
        /// Show details of a peering.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetPeering")]
        public static dynamic AzNetworkVnetPeeringShow(this ICakeContext context, AzNetworkVnetPeeringShowSettings settings) {
            var baseCommand = "az network vnet peering show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet peering update".
        /// Update a peering.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetPeering")]
        public static dynamic AzNetworkVnetPeeringUpdate(this ICakeContext context, AzNetworkVnetPeeringUpdateSettings settings) {
            var baseCommand = "az network vnet peering update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet subnet create".
        /// Create a subnet and associate an existing NSG and route table.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetSubnet")]
        public static dynamic AzNetworkVnetSubnetCreate(this ICakeContext context, AzNetworkVnetSubnetCreateSettings settings) {
            var baseCommand = "az network vnet subnet create";
            AppendIfNonNull(ref baseCommand, "--address-prefixes", settings.AddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--delegations", settings.Delegations);
            AppendIfNonNull(ref baseCommand, "--nat-gateway", settings.NatGateway);
            AppendIfNonNull(ref baseCommand, "--network-security-group", settings.NetworkSecurityGroup);
            AppendIfNonNull(ref baseCommand, "--route-table", settings.RouteTable);
            AppendIfNonNull(ref baseCommand, "--service-endpoint-policy", settings.ServiceEndpointPolicy);
            AppendIfNonNull(ref baseCommand, "--service-endpoints", settings.ServiceEndpoints);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet subnet delete".
        /// Delete a subnet.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetSubnet")]
        public static dynamic AzNetworkVnetSubnetDelete(this ICakeContext context, AzNetworkVnetSubnetDeleteSettings settings) {
            var baseCommand = "az network vnet subnet delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet subnet list".
        /// List the subnets in a virtual network.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetSubnet")]
        public static dynamic AzNetworkVnetSubnetList(this ICakeContext context, AzNetworkVnetSubnetListSettings settings) {
            var baseCommand = "az network vnet subnet list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet subnet list-available-delegations".
        /// List the services available for subnet delegation.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetSubnet")]
        public static dynamic AzNetworkVnetSubnetListAvailableDelegations(this ICakeContext context, AzNetworkVnetSubnetListAvailableDelegationsSettings settings) {
            var baseCommand = "az network vnet subnet list-available-delegations";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet subnet show".
        /// Show details of a subnet.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetSubnet")]
        public static dynamic AzNetworkVnetSubnetShow(this ICakeContext context, AzNetworkVnetSubnetShowSettings settings) {
            var baseCommand = "az network vnet subnet show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet subnet update".
        /// Update a subnet.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetSubnet")]
        public static dynamic AzNetworkVnetSubnetUpdate(this ICakeContext context, AzNetworkVnetSubnetUpdateSettings settings) {
            var baseCommand = "az network vnet subnet update";
            AppendIfNonNull(ref baseCommand, "--address-prefixes", settings.AddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--delegations", settings.Delegations);
            AppendIfNonNull(ref baseCommand, "--disable-private-endpoint-network-policies", settings.DisablePrivateEndpointNetworkPolicies);
            AppendIfNonNull(ref baseCommand, "--disable-private-link-service-network-policies", settings.DisablePrivateLinkServiceNetworkPolicies);
            AppendIfNonNull(ref baseCommand, "--nat-gateway", settings.NatGateway);
            AppendIfNonNull(ref baseCommand, "--network-security-group", settings.NetworkSecurityGroup);
            AppendIfNonNull(ref baseCommand, "--route-table", settings.RouteTable);
            AppendIfNonNull(ref baseCommand, "--service-endpoint-policy", settings.ServiceEndpointPolicy);
            AppendIfNonNull(ref baseCommand, "--service-endpoints", settings.ServiceEndpoints);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway create".
        /// Create a virtual network gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public static dynamic AzNetworkVnetGatewayCreate(this ICakeContext context, AzNetworkVnetGatewayCreateSettings settings) {
            var baseCommand = "az network vnet-gateway create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--public-ip-addresses", settings.PublicIpAddresses);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--gateway-default-site", settings.GatewayDefaultSite);
            AppendIfNonNull(ref baseCommand, "--gateway-type", settings.GatewayType);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vpn-type", settings.VpnType);
            AppendIfNonNull(ref baseCommand, "--asn", settings.Asn);
            AppendIfNonNull(ref baseCommand, "--bgp-peering-address", settings.BgpPeeringAddress);
            AppendIfNonNull(ref baseCommand, "--peer-weight", settings.PeerWeight);
            AppendIfNonNull(ref baseCommand, "--address-prefixes", settings.AddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--client-protocol", settings.ClientProtocol);
            AppendIfNonNull(ref baseCommand, "--custom-routes", settings.CustomRoutes);
            AppendIfNonNull(ref baseCommand, "--radius-secret", settings.RadiusSecret);
            AppendIfNonNull(ref baseCommand, "--radius-server", settings.RadiusServer);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway delete".
        /// Delete a virtual network gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public static dynamic AzNetworkVnetGatewayDelete(this ICakeContext context, AzNetworkVnetGatewayDeleteSettings settings) {
            var baseCommand = "az network vnet-gateway delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway list".
        /// List virtual network gateways.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public static dynamic AzNetworkVnetGatewayList(this ICakeContext context, AzNetworkVnetGatewayListSettings settings) {
            var baseCommand = "az network vnet-gateway list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway list-advertised-routes".
        /// List the routes of a virtual network gateway advertised to the specified peer.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public static dynamic AzNetworkVnetGatewayListAdvertisedRoutes(this ICakeContext context, AzNetworkVnetGatewayListAdvertisedRoutesSettings settings) {
            var baseCommand = "az network vnet-gateway list-advertised-routes";
            AppendIfNonNull(ref baseCommand, "--peer", settings.Peer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway list-bgp-peer-status".
        /// Retrieve the status of BGP peers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public static dynamic AzNetworkVnetGatewayListBgpPeerStatus(this ICakeContext context, AzNetworkVnetGatewayListBgpPeerStatusSettings settings) {
            var baseCommand = "az network vnet-gateway list-bgp-peer-status";
            AppendIfNonNull(ref baseCommand, "--peer", settings.Peer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway list-learned-routes".
        /// This operation retrieves a list of routes the virtual network gateway has learned, including routes learned from BGP peers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public static dynamic AzNetworkVnetGatewayListLearnedRoutes(this ICakeContext context, AzNetworkVnetGatewayListLearnedRoutesSettings settings) {
            var baseCommand = "az network vnet-gateway list-learned-routes";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway reset".
        /// Reset a virtual network gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public static dynamic AzNetworkVnetGatewayReset(this ICakeContext context, AzNetworkVnetGatewayResetSettings settings) {
            var baseCommand = "az network vnet-gateway reset";
            AppendIfNonNull(ref baseCommand, "--gateway-vip", settings.GatewayVip);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway show".
        /// Get the details of a virtual network gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public static dynamic AzNetworkVnetGatewayShow(this ICakeContext context, AzNetworkVnetGatewayShowSettings settings) {
            var baseCommand = "az network vnet-gateway show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway update".
        /// Update a virtual network gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public static dynamic AzNetworkVnetGatewayUpdate(this ICakeContext context, AzNetworkVnetGatewayUpdateSettings settings) {
            var baseCommand = "az network vnet-gateway update";
            AppendIfNonNull(ref baseCommand, "--gateway-default-site", settings.GatewayDefaultSite);
            AppendIfNonNull(ref baseCommand, "--gateway-type", settings.GatewayType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--public-ip-addresses", settings.PublicIpAddresses);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--vpn-type", settings.VpnType);
            AppendIfNonNull(ref baseCommand, "--asn", settings.Asn);
            AppendIfNonNull(ref baseCommand, "--bgp-peering-address", settings.BgpPeeringAddress);
            AppendIfNonNull(ref baseCommand, "--enable-bgp", settings.EnableBgp);
            AppendIfNonNull(ref baseCommand, "--peer-weight", settings.PeerWeight);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--address-prefixes", settings.AddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--client-protocol", settings.ClientProtocol);
            AppendIfNonNull(ref baseCommand, "--custom-routes", settings.CustomRoutes);
            AppendIfNonNull(ref baseCommand, "--radius-secret", settings.RadiusSecret);
            AppendIfNonNull(ref baseCommand, "--radius-server", settings.RadiusServer);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway wait".
        /// Place the CLI in a waiting state until a condition of the virtual network gateway is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public static dynamic AzNetworkVnetGatewayWait(this ICakeContext context, AzNetworkVnetGatewayWaitSettings settings) {
            var baseCommand = "az network vnet-gateway wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway aad assign".
        /// Assign/Update AAD(Azure Active Directory) authentication to a virtual network gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayAad")]
        public static dynamic AzNetworkVnetGatewayAadAssign(this ICakeContext context, AzNetworkVnetGatewayAadAssignSettings settings) {
            var baseCommand = "az network vnet-gateway aad assign";
            AppendIfNonNull(ref baseCommand, "--audience", settings.Audience);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--issuer", settings.Issuer);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tenant", settings.Tenant);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway aad remove".
        /// Remove AAD(Azure Active Directory) authentication from a virtual network gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayAad")]
        public static dynamic AzNetworkVnetGatewayAadRemove(this ICakeContext context, AzNetworkVnetGatewayAadRemoveSettings settings) {
            var baseCommand = "az network vnet-gateway aad remove";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway aad show".
        /// Show AAD(Azure Active Directory) authentication of a virtual network gateway.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayAad")]
        public static dynamic AzNetworkVnetGatewayAadShow(this ICakeContext context, AzNetworkVnetGatewayAadShowSettings settings) {
            var baseCommand = "az network vnet-gateway aad show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway ipsec-policy add".
        /// Add a virtual network gateway IPSec policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayIpsecPolicy")]
        public static dynamic AzNetworkVnetGatewayIpsecPolicyAdd(this ICakeContext context, AzNetworkVnetGatewayIpsecPolicyAddSettings settings) {
            var baseCommand = "az network vnet-gateway ipsec-policy add";
            AppendIfNonNull(ref baseCommand, "--dh-group", settings.DhGroup);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ike-encryption", settings.IkeEncryption);
            AppendIfNonNull(ref baseCommand, "--ike-integrity", settings.IkeIntegrity);
            AppendIfNonNull(ref baseCommand, "--ipsec-encryption", settings.IpsecEncryption);
            AppendIfNonNull(ref baseCommand, "--ipsec-integrity", settings.IpsecIntegrity);
            AppendIfNonNull(ref baseCommand, "--pfs-group", settings.PfsGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sa-lifetime", settings.SaLifetime);
            AppendIfNonNull(ref baseCommand, "--sa-max-size", settings.SaMaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway ipsec-policy clear".
        /// Delete all IPsec policies on a virtual network gateway.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayIpsecPolicy")]
        public static dynamic AzNetworkVnetGatewayIpsecPolicyClear(this ICakeContext context, AzNetworkVnetGatewayIpsecPolicyClearSettings settings) {
            var baseCommand = "az network vnet-gateway ipsec-policy clear";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway ipsec-policy list".
        /// List IPSec policies associated with a virtual network gateway.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayIpsecPolicy")]
        public static dynamic AzNetworkVnetGatewayIpsecPolicyList(this ICakeContext context, AzNetworkVnetGatewayIpsecPolicyListSettings settings) {
            var baseCommand = "az network vnet-gateway ipsec-policy list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway revoked-cert create".
        /// Revoke a certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayRevokedCert")]
        public static dynamic AzNetworkVnetGatewayRevokedCertCreate(this ICakeContext context, AzNetworkVnetGatewayRevokedCertCreateSettings settings) {
            var baseCommand = "az network vnet-gateway revoked-cert create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--thumbprint", settings.Thumbprint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway revoked-cert delete".
        /// Delete a revoked certificate.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayRevokedCert")]
        public static dynamic AzNetworkVnetGatewayRevokedCertDelete(this ICakeContext context, AzNetworkVnetGatewayRevokedCertDeleteSettings settings) {
            var baseCommand = "az network vnet-gateway revoked-cert delete";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway root-cert create".
        /// Upload a root certificate.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayRootCert")]
        public static dynamic AzNetworkVnetGatewayRootCertCreate(this ICakeContext context, AzNetworkVnetGatewayRootCertCreateSettings settings) {
            var baseCommand = "az network vnet-gateway root-cert create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--public-cert-data", settings.PublicCertData);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway root-cert delete".
        /// Delete a root certificate.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayRootCert")]
        public static dynamic AzNetworkVnetGatewayRootCertDelete(this ICakeContext context, AzNetworkVnetGatewayRootCertDeleteSettings settings) {
            var baseCommand = "az network vnet-gateway root-cert delete";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway vpn-client generate".
        /// Generate VPN client configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayVpnClient")]
        public static dynamic AzNetworkVnetGatewayVpnClientGenerate(this ICakeContext context, AzNetworkVnetGatewayVpnClientGenerateSettings settings) {
            var baseCommand = "az network vnet-gateway vpn-client generate";
            AppendIfNonNull(ref baseCommand, "--authentication-method", settings.AuthenticationMethod);
            AppendIfNonNull(ref baseCommand, "--client-root-certificates", settings.ClientRootCertificates);
            AppendIfNonNull(ref baseCommand, "--processor-architecture", settings.ProcessorArchitecture);
            AppendIfNonNull(ref baseCommand, "--radius-server-auth-certificate", settings.RadiusServerAuthCertificate);
            AppendIfNonNull(ref baseCommand, "--use-legacy", settings.UseLegacy);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vnet-gateway vpn-client show-url".
        /// Retrieve a pre-generated VPN client configuration.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayVpnClient")]
        public static dynamic AzNetworkVnetGatewayVpnClientShowUrl(this ICakeContext context, AzNetworkVnetGatewayVpnClientShowUrlSettings settings) {
            var baseCommand = "az network vnet-gateway vpn-client show-url";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vpn-connection create".
        /// Create a VPN connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnection")]
        public static dynamic AzNetworkVpnConnectionCreate(this ICakeContext context, AzNetworkVpnConnectionCreateSettings settings) {
            var baseCommand = "az network vpn-connection create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet-gateway1", settings.VnetGateway1);
            AppendIfNonNull(ref baseCommand, "--authorization-key", settings.AuthorizationKey);
            AppendIfNonNull(ref baseCommand, "--enable-bgp", settings.EnableBgp);
            AppendIfNonNull(ref baseCommand, "--express-route-gateway-bypass", settings.ExpressRouteGatewayBypass);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--routing-weight", settings.RoutingWeight);
            AppendIfNonNull(ref baseCommand, "--shared-key", settings.SharedKey);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--use-policy-based-traffic-selectors", settings.UsePolicyBasedTrafficSelectors);
            AppendIfNonNull(ref baseCommand, "--validate", settings.Validate);
            AppendIfNonNull(ref baseCommand, "--express-route-circuit2", settings.ExpressRouteCircuit2);
            AppendIfNonNull(ref baseCommand, "--local-gateway2", settings.LocalGateway2);
            AppendIfNonNull(ref baseCommand, "--vnet-gateway2", settings.VnetGateway2);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vpn-connection delete".
        /// Delete a VPN connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnection")]
        public static dynamic AzNetworkVpnConnectionDelete(this ICakeContext context, AzNetworkVpnConnectionDeleteSettings settings) {
            var baseCommand = "az network vpn-connection delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vpn-connection list".
        /// List all VPN connections in a resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnection")]
        public static dynamic AzNetworkVpnConnectionList(this ICakeContext context, AzNetworkVpnConnectionListSettings settings) {
            var baseCommand = "az network vpn-connection list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vpn-connection show".
        /// Get the details of a VPN connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnection")]
        public static dynamic AzNetworkVpnConnectionShow(this ICakeContext context, AzNetworkVpnConnectionShowSettings settings) {
            var baseCommand = "az network vpn-connection show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vpn-connection update".
        /// Update a VPN connection.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnection")]
        public static dynamic AzNetworkVpnConnectionUpdate(this ICakeContext context, AzNetworkVpnConnectionUpdateSettings settings) {
            var baseCommand = "az network vpn-connection update";
            AppendIfNonNull(ref baseCommand, "--enable-bgp", settings.EnableBgp);
            AppendIfNonNull(ref baseCommand, "--express-route-gateway-bypass", settings.ExpressRouteGatewayBypass);
            AppendIfNonNull(ref baseCommand, "--routing-weight", settings.RoutingWeight);
            AppendIfNonNull(ref baseCommand, "--shared-key", settings.SharedKey);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--use-policy-based-traffic-selectors", settings.UsePolicyBasedTrafficSelectors);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vpn-connection ipsec-policy add".
        /// Add a VPN connection IPSec policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnectionIpsecPolicy")]
        public static dynamic AzNetworkVpnConnectionIpsecPolicyAdd(this ICakeContext context, AzNetworkVpnConnectionIpsecPolicyAddSettings settings) {
            var baseCommand = "az network vpn-connection ipsec-policy add";
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--dh-group", settings.DhGroup);
            AppendIfNonNull(ref baseCommand, "--ike-encryption", settings.IkeEncryption);
            AppendIfNonNull(ref baseCommand, "--ike-integrity", settings.IkeIntegrity);
            AppendIfNonNull(ref baseCommand, "--ipsec-encryption", settings.IpsecEncryption);
            AppendIfNonNull(ref baseCommand, "--ipsec-integrity", settings.IpsecIntegrity);
            AppendIfNonNull(ref baseCommand, "--pfs-group", settings.PfsGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sa-lifetime", settings.SaLifetime);
            AppendIfNonNull(ref baseCommand, "--sa-max-size", settings.SaMaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vpn-connection ipsec-policy clear".
        /// Delete all IPsec policies on a VPN connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnectionIpsecPolicy")]
        public static dynamic AzNetworkVpnConnectionIpsecPolicyClear(this ICakeContext context, AzNetworkVpnConnectionIpsecPolicyClearSettings settings) {
            var baseCommand = "az network vpn-connection ipsec-policy clear";
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vpn-connection ipsec-policy list".
        /// List IPSec policies associated with a VPN connection.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnectionIpsecPolicy")]
        public static dynamic AzNetworkVpnConnectionIpsecPolicyList(this ICakeContext context, AzNetworkVpnConnectionIpsecPolicyListSettings settings) {
            var baseCommand = "az network vpn-connection ipsec-policy list";
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vpn-connection shared-key reset".
        /// Reset a VPN connection shared key.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnectionSharedKey")]
        public static dynamic AzNetworkVpnConnectionSharedKeyReset(this ICakeContext context, AzNetworkVpnConnectionSharedKeyResetSettings settings) {
            var baseCommand = "az network vpn-connection shared-key reset";
            AppendIfNonNull(ref baseCommand, "--key-length", settings.KeyLength);
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vpn-connection shared-key show".
        /// Retrieve a VPN connection shared key.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnectionSharedKey")]
        public static dynamic AzNetworkVpnConnectionSharedKeyShow(this ICakeContext context, AzNetworkVpnConnectionSharedKeyShowSettings settings) {
            var baseCommand = "az network vpn-connection shared-key show";
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vpn-connection shared-key update".
        /// Update a VPN connection shared key.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnectionSharedKey")]
        public static dynamic AzNetworkVpnConnectionSharedKeyUpdate(this ICakeContext context, AzNetworkVpnConnectionSharedKeyUpdateSettings settings) {
            var baseCommand = "az network vpn-connection shared-key update";
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vrouter create".
        /// Create a virtual router.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouter")]
        public static dynamic AzNetworkVrouterCreate(this ICakeContext context, AzNetworkVrouterCreateSettings settings) {
            var baseCommand = "az network vrouter create";
            AppendIfNonNull(ref baseCommand, "--hosted-gateway", settings.HostedGateway);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vrouter delete".
        /// Deletes the specified Virtual Router.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouter")]
        public static dynamic AzNetworkVrouterDelete(this ICakeContext context, AzNetworkVrouterDeleteSettings settings) {
            var baseCommand = "az network vrouter delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vrouter list".
        /// List all virtual routers under a subscription or a resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouter")]
        public static dynamic AzNetworkVrouterList(this ICakeContext context, AzNetworkVrouterListSettings settings) {
            var baseCommand = "az network vrouter list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vrouter show".
        /// Gets the specified Virtual Router.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouter")]
        public static dynamic AzNetworkVrouterShow(this ICakeContext context, AzNetworkVrouterShowSettings settings) {
            var baseCommand = "az network vrouter show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vrouter update".
        /// Update a virtual router.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouter")]
        public static dynamic AzNetworkVrouterUpdate(this ICakeContext context, AzNetworkVrouterUpdateSettings settings) {
            var baseCommand = "az network vrouter update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vrouter peering create".
        /// Create a virtual router peering.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouterPeering")]
        public static dynamic AzNetworkVrouterPeeringCreate(this ICakeContext context, AzNetworkVrouterPeeringCreateSettings settings) {
            var baseCommand = "az network vrouter peering create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--peer-asn", settings.PeerAsn);
            AppendIfNonNull(ref baseCommand, "--peer-ip", settings.PeerIp);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vrouter-name", settings.VrouterName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vrouter peering delete".
        /// Deletes the specified peering from a Virtual Router.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouterPeering")]
        public static dynamic AzNetworkVrouterPeeringDelete(this ICakeContext context, AzNetworkVrouterPeeringDeleteSettings settings) {
            var baseCommand = "az network vrouter peering delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vrouter-name", settings.VrouterName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vrouter peering list".
        /// Lists all Virtual Router Peerings in a Virtual Router resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouterPeering")]
        public static dynamic AzNetworkVrouterPeeringList(this ICakeContext context, AzNetworkVrouterPeeringListSettings settings) {
            var baseCommand = "az network vrouter peering list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vrouter-name", settings.VrouterName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vrouter peering show".
        /// Gets the specified Virtual Router Peering.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouterPeering")]
        public static dynamic AzNetworkVrouterPeeringShow(this ICakeContext context, AzNetworkVrouterPeeringShowSettings settings) {
            var baseCommand = "az network vrouter peering show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vrouter-name", settings.VrouterName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network vrouter peering update".
        /// Update a virtual router peering.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouterPeering")]
        public static dynamic AzNetworkVrouterPeeringUpdate(this ICakeContext context, AzNetworkVrouterPeeringUpdateSettings settings) {
            var baseCommand = "az network vrouter peering update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vrouter-name", settings.VrouterName);
            AppendIfNonNull(ref baseCommand, "--peer-asn", settings.PeerAsn);
            AppendIfNonNull(ref baseCommand, "--peer-ip", settings.PeerIp);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher configure".
        /// Configure the Network Watcher service for different regions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public static dynamic AzNetworkWatcherConfigure(this ICakeContext context, AzNetworkWatcherConfigureSettings settings) {
            var baseCommand = "az network watcher configure";
            AppendIfNonNull(ref baseCommand, "--locations", settings.Locations);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher list".
        /// List Network Watchers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public static dynamic AzNetworkWatcherList(this ICakeContext context, AzNetworkWatcherListSettings settings) {
            var baseCommand = "az network watcher list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher run-configuration-diagnostic".
        /// Run a configuration diagnostic on a target resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public static dynamic AzNetworkWatcherRunConfigurationDiagnostic(this ICakeContext context, AzNetworkWatcherRunConfigurationDiagnosticSettings settings) {
            var baseCommand = "az network watcher run-configuration-diagnostic";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--direction", settings.Direction);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--queries", settings.Queries);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher show-next-hop".
        /// Get information on the 'next hop' of a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public static dynamic AzNetworkWatcherShowNextHop(this ICakeContext context, AzNetworkWatcherShowNextHopSettings settings) {
            var baseCommand = "az network watcher show-next-hop";
            AppendIfNonNull(ref baseCommand, "--dest-ip", settings.DestIp);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-ip", settings.SourceIp);
            AppendIfNonNull(ref baseCommand, "--vm", settings.Vm);
            AppendIfNonNull(ref baseCommand, "--nic", settings.Nic);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher show-security-group-view".
        /// Get detailed security information on a VM for the currently configured network security group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public static dynamic AzNetworkWatcherShowSecurityGroupView(this ICakeContext context, AzNetworkWatcherShowSecurityGroupViewSettings settings) {
            var baseCommand = "az network watcher show-security-group-view";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm", settings.Vm);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher show-topology".
        /// Get the network topology of a resource group, virtual network or subnet.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public static dynamic AzNetworkWatcherShowTopology(this ICakeContext context, AzNetworkWatcherShowTopologySettings settings) {
            var baseCommand = "az network watcher show-topology";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher test-connectivity".
        /// Test if a connection can be established between a Virtual Machine and a given endpoint.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public static dynamic AzNetworkWatcherTestConnectivity(this ICakeContext context, AzNetworkWatcherTestConnectivitySettings settings) {
            var baseCommand = "az network watcher test-connectivity";
            AppendIfNonNull(ref baseCommand, "--source-resource", settings.SourceResource);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-port", settings.SourcePort);
            AppendIfNonNull(ref baseCommand, "--dest-address", settings.DestAddress);
            AppendIfNonNull(ref baseCommand, "--dest-port", settings.DestPort);
            AppendIfNonNull(ref baseCommand, "--dest-resource", settings.DestResource);
            AppendIfNonNull(ref baseCommand, "--headers", settings.Headers);
            AppendIfNonNull(ref baseCommand, "--method", settings.Method);
            AppendIfNonNull(ref baseCommand, "--valid-status-codes", settings.ValidStatusCodes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher test-ip-flow".
        /// Test IP flow to/from a VM given the currently configured network security group rules.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public static dynamic AzNetworkWatcherTestIpFlow(this ICakeContext context, AzNetworkWatcherTestIpFlowSettings settings) {
            var baseCommand = "az network watcher test-ip-flow";
            AppendIfNonNull(ref baseCommand, "--direction", settings.Direction);
            AppendIfNonNull(ref baseCommand, "--local", settings.Local);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--remote", settings.Remote);
            AppendIfNonNull(ref baseCommand, "--vm", settings.Vm);
            AppendIfNonNull(ref baseCommand, "--nic", settings.Nic);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher connection-monitor create".
        /// Create a connection monitor.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public static dynamic AzNetworkWatcherConnectionMonitorCreate(this ICakeContext context, AzNetworkWatcherConnectionMonitorCreateSettings settings) {
            var baseCommand = "az network watcher connection-monitor create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source-resource", settings.SourceResource);
            AppendIfNonNull(ref baseCommand, "--do-not-start", settings.DoNotStart);
            AppendIfNonNull(ref baseCommand, "--monitoring-interval", settings.MonitoringInterval);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-port", settings.SourcePort);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--dest-address", settings.DestAddress);
            AppendIfNonNull(ref baseCommand, "--dest-port", settings.DestPort);
            AppendIfNonNull(ref baseCommand, "--dest-resource", settings.DestResource);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher connection-monitor delete".
        /// Delete a connection monitor for the given region.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public static dynamic AzNetworkWatcherConnectionMonitorDelete(this ICakeContext context, AzNetworkWatcherConnectionMonitorDeleteSettings settings) {
            var baseCommand = "az network watcher connection-monitor delete";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher connection-monitor list".
        /// List connection monitors for the given region.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public static dynamic AzNetworkWatcherConnectionMonitorList(this ICakeContext context, AzNetworkWatcherConnectionMonitorListSettings settings) {
            var baseCommand = "az network watcher connection-monitor list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher connection-monitor query".
        /// Query a snapshot of the most recent connection state of a connection monitor.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public static dynamic AzNetworkWatcherConnectionMonitorQuery(this ICakeContext context, AzNetworkWatcherConnectionMonitorQuerySettings settings) {
            var baseCommand = "az network watcher connection-monitor query";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher connection-monitor show".
        /// Shows a connection monitor by name.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public static dynamic AzNetworkWatcherConnectionMonitorShow(this ICakeContext context, AzNetworkWatcherConnectionMonitorShowSettings settings) {
            var baseCommand = "az network watcher connection-monitor show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher connection-monitor start".
        /// Start the specified connection monitor.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public static dynamic AzNetworkWatcherConnectionMonitorStart(this ICakeContext context, AzNetworkWatcherConnectionMonitorStartSettings settings) {
            var baseCommand = "az network watcher connection-monitor start";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher connection-monitor stop".
        /// Stop the specified connection monitor.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public static dynamic AzNetworkWatcherConnectionMonitorStop(this ICakeContext context, AzNetworkWatcherConnectionMonitorStopSettings settings) {
            var baseCommand = "az network watcher connection-monitor stop";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher flow-log configure".
        /// Configure flow logging on a network security group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherFlowLog")]
        public static dynamic AzNetworkWatcherFlowLogConfigure(this ICakeContext context, AzNetworkWatcherFlowLogConfigureSettings settings) {
            var baseCommand = "az network watcher flow-log configure";
            AppendIfNonNull(ref baseCommand, "--nsg", settings.Nsg);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--retention", settings.Retention);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--format", settings.Format);
            AppendIfNonNull(ref baseCommand, "--log-version", settings.LogVersion);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--traffic-analytics", settings.TrafficAnalytics);
            AppendIfNonNull(ref baseCommand, "--workspace", settings.Workspace);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher flow-log show".
        /// Get the flow log configuration of a network security group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherFlowLog")]
        public static dynamic AzNetworkWatcherFlowLogShow(this ICakeContext context, AzNetworkWatcherFlowLogShowSettings settings) {
            var baseCommand = "az network watcher flow-log show";
            AppendIfNonNull(ref baseCommand, "--nsg", settings.Nsg);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher packet-capture create".
        /// Create and start a packet capture session.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherPacketCapture")]
        public static dynamic AzNetworkWatcherPacketCaptureCreate(this ICakeContext context, AzNetworkWatcherPacketCaptureCreateSettings settings) {
            var baseCommand = "az network watcher packet-capture create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm", settings.Vm);
            AppendIfNonNull(ref baseCommand, "--capture-limit", settings.CaptureLimit);
            AppendIfNonNull(ref baseCommand, "--capture-size", settings.CaptureSize);
            AppendIfNonNull(ref baseCommand, "--filters", settings.Filters);
            AppendIfNonNull(ref baseCommand, "--time-limit", settings.TimeLimit);
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--storage-path", settings.StoragePath);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher packet-capture delete".
        /// Delete a packet capture session.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherPacketCapture")]
        public static dynamic AzNetworkWatcherPacketCaptureDelete(this ICakeContext context, AzNetworkWatcherPacketCaptureDeleteSettings settings) {
            var baseCommand = "az network watcher packet-capture delete";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher packet-capture list".
        /// List all packet capture sessions within a resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherPacketCapture")]
        public static dynamic AzNetworkWatcherPacketCaptureList(this ICakeContext context, AzNetworkWatcherPacketCaptureListSettings settings) {
            var baseCommand = "az network watcher packet-capture list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher packet-capture show".
        /// Show details of a packet capture session.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherPacketCapture")]
        public static dynamic AzNetworkWatcherPacketCaptureShow(this ICakeContext context, AzNetworkWatcherPacketCaptureShowSettings settings) {
            var baseCommand = "az network watcher packet-capture show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher packet-capture show-status".
        /// Show the status of a packet capture session.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherPacketCapture")]
        public static dynamic AzNetworkWatcherPacketCaptureShowStatus(this ICakeContext context, AzNetworkWatcherPacketCaptureShowStatusSettings settings) {
            var baseCommand = "az network watcher packet-capture show-status";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher packet-capture stop".
        /// Stop a running packet capture session.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherPacketCapture")]
        public static dynamic AzNetworkWatcherPacketCaptureStop(this ICakeContext context, AzNetworkWatcherPacketCaptureStopSettings settings) {
            var baseCommand = "az network watcher packet-capture stop";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher troubleshooting show".
        /// Get the results of the last troubleshooting operation.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherTroubleshooting")]
        public static dynamic AzNetworkWatcherTroubleshootingShow(this ICakeContext context, AzNetworkWatcherTroubleshootingShowSettings settings) {
            var baseCommand = "az network watcher troubleshooting show";
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az network watcher troubleshooting start".
        /// Troubleshoot issues with VPN connections or gateway connectivity.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherTroubleshooting")]
        public static dynamic AzNetworkWatcherTroubleshootingStart(this ICakeContext context, AzNetworkWatcherTroubleshootingStartSettings settings) {
            var baseCommand = "az network watcher troubleshooting start";
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--storage-path", settings.StoragePath);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az openshift create".
        /// Create a new managed OpenShift cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzOpenshift")]
        public static dynamic AzOpenshiftCreate(this ICakeContext context, AzOpenshiftCreateSettings settings) {
            var baseCommand = "az openshift create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--aad-client-app-id", settings.AadClientAppId);
            AppendIfNonNull(ref baseCommand, "--aad-client-app-secret", settings.AadClientAppSecret);
            AppendIfNonNull(ref baseCommand, "--aad-tenant-id", settings.AadTenantId);
            AppendIfNonNull(ref baseCommand, "--compute-count", settings.ComputeCount);
            AppendIfNonNull(ref baseCommand, "--compute-vm-size", settings.ComputeVmSize);
            AppendIfNonNull(ref baseCommand, "--customer-admin-group-id", settings.CustomerAdminGroupId);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--subnet-prefix", settings.SubnetPrefix);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vnet-peer", settings.VnetPeer);
            AppendIfNonNull(ref baseCommand, "--vnet-prefix", settings.VnetPrefix);
            AppendIfNonNull(ref baseCommand, "--workspace-resource-id", settings.WorkspaceResourceId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az openshift delete".
        /// Delete a managed OpenShift cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzOpenshift")]
        public static dynamic AzOpenshiftDelete(this ICakeContext context, AzOpenshiftDeleteSettings settings) {
            var baseCommand = "az openshift delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az openshift list".
        /// List managed OpenShift clusters.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzOpenshift")]
        public static dynamic AzOpenshiftList(this ICakeContext context, AzOpenshiftListSettings settings) {
            var baseCommand = "az openshift list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az openshift scale".
        /// Scale the compute pool in a managed OpenShift cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzOpenshift")]
        public static dynamic AzOpenshiftScale(this ICakeContext context, AzOpenshiftScaleSettings settings) {
            var baseCommand = "az openshift scale";
            AppendIfNonNull(ref baseCommand, "--compute-count", settings.ComputeCount);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az openshift show".
        /// Show the details for a managed OpenShift cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzOpenshift")]
        public static dynamic AzOpenshiftShow(this ICakeContext context, AzOpenshiftShowSettings settings) {
            var baseCommand = "az openshift show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az openshift wait".
        /// Wait for a managed OpenShift cluster to reach a desired state.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzOpenshift")]
        public static dynamic AzOpenshiftWait(this ICakeContext context, AzOpenshiftWaitSettings settings) {
            var baseCommand = "az openshift wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy assignment create".
        /// Create a resource policy assignment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignment")]
        public static dynamic AzPolicyAssignmentCreate(this ICakeContext context, AzPolicyAssignmentCreateSettings settings) {
            var baseCommand = "az policy assignment create";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--enforcement-mode", settings.EnforcementMode);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--not-scopes", settings.NotScopes);
            AppendIfNonNull(ref baseCommand, "--params", settings.Params);
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--policy-set-definition", settings.PolicySetDefinition);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--identity-scope", settings.IdentityScope);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy assignment delete".
        /// Delete a resource policy assignment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignment")]
        public static dynamic AzPolicyAssignmentDelete(this ICakeContext context, AzPolicyAssignmentDeleteSettings settings) {
            var baseCommand = "az policy assignment delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy assignment list".
        /// List resource policy assignments.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignment")]
        public static dynamic AzPolicyAssignmentList(this ICakeContext context, AzPolicyAssignmentListSettings settings) {
            var baseCommand = "az policy assignment list";
            AppendIfNonNull(ref baseCommand, "--disable-scope-strict-match", settings.DisableScopeStrictMatch);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy assignment show".
        /// Show a resource policy assignment.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignment")]
        public static dynamic AzPolicyAssignmentShow(this ICakeContext context, AzPolicyAssignmentShowSettings settings) {
            var baseCommand = "az policy assignment show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy assignment identity assign".
        /// Add a system assigned identity to a policy assignment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignmentIdentity")]
        public static dynamic AzPolicyAssignmentIdentityAssign(this ICakeContext context, AzPolicyAssignmentIdentityAssignSettings settings) {
            var baseCommand = "az policy assignment identity assign";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--identity-scope", settings.IdentityScope);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy assignment identity remove".
        /// Remove a managed identity from a policy assignment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignmentIdentity")]
        public static dynamic AzPolicyAssignmentIdentityRemove(this ICakeContext context, AzPolicyAssignmentIdentityRemoveSettings settings) {
            var baseCommand = "az policy assignment identity remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy assignment identity show".
        /// Show a policy assignment's managed identity.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignmentIdentity")]
        public static dynamic AzPolicyAssignmentIdentityShow(this ICakeContext context, AzPolicyAssignmentIdentityShowSettings settings) {
            var baseCommand = "az policy assignment identity show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy definition create".
        /// Create a policy definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyDefinition")]
        public static dynamic AzPolicyDefinitionCreate(this ICakeContext context, AzPolicyDefinitionCreateSettings settings) {
            var baseCommand = "az policy definition create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--mode", settings.Mode);
            AppendIfNonNull(ref baseCommand, "--params", settings.Params);
            AppendIfNonNull(ref baseCommand, "--rules", settings.Rules);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy definition delete".
        /// Delete a policy definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyDefinition")]
        public static dynamic AzPolicyDefinitionDelete(this ICakeContext context, AzPolicyDefinitionDeleteSettings settings) {
            var baseCommand = "az policy definition delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy definition list".
        /// List policy definitions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyDefinition")]
        public static dynamic AzPolicyDefinitionList(this ICakeContext context, AzPolicyDefinitionListSettings settings) {
            var baseCommand = "az policy definition list";
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy definition show".
        /// Show a policy definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyDefinition")]
        public static dynamic AzPolicyDefinitionShow(this ICakeContext context, AzPolicyDefinitionShowSettings settings) {
            var baseCommand = "az policy definition show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy definition update".
        /// Update a policy definition.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyDefinition")]
        public static dynamic AzPolicyDefinitionUpdate(this ICakeContext context, AzPolicyDefinitionUpdateSettings settings) {
            var baseCommand = "az policy definition update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--mode", settings.Mode);
            AppendIfNonNull(ref baseCommand, "--params", settings.Params);
            AppendIfNonNull(ref baseCommand, "--rules", settings.Rules);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy event list".
        /// List policy events.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyEvent")]
        public static dynamic AzPolicyEventList(this ICakeContext context, AzPolicyEventListSettings settings) {
            var baseCommand = "az policy event list";
            AppendIfNonNull(ref baseCommand, "--apply", settings.Apply);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--from", settings.From);
            AppendIfNonNull(ref baseCommand, "--order-by", settings.OrderBy);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--to", settings.To);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--policy-assignment", settings.PolicyAssignment);
            AppendIfNonNull(ref baseCommand, "--policy-definition", settings.PolicyDefinition);
            AppendIfNonNull(ref baseCommand, "--policy-set-definition", settings.PolicySetDefinition);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy remediation cancel".
        /// Cancel a resource policy remediation.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyRemediation")]
        public static dynamic AzPolicyRemediationCancel(this ICakeContext context, AzPolicyRemediationCancelSettings settings) {
            var baseCommand = "az policy remediation cancel";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy remediation create".
        /// Create a resource policy remediation.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyRemediation")]
        public static dynamic AzPolicyRemediationCreate(this ICakeContext context, AzPolicyRemediationCreateSettings settings) {
            var baseCommand = "az policy remediation create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-assignment", settings.PolicyAssignment);
            AppendIfNonNull(ref baseCommand, "--definition-reference-id", settings.DefinitionReferenceId);
            AppendIfNonNull(ref baseCommand, "--location-filters", settings.LocationFilters);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy remediation delete".
        /// Delete a resource policy remediation.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyRemediation")]
        public static dynamic AzPolicyRemediationDelete(this ICakeContext context, AzPolicyRemediationDeleteSettings settings) {
            var baseCommand = "az policy remediation delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy remediation list".
        /// List resource policy remediations.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyRemediation")]
        public static dynamic AzPolicyRemediationList(this ICakeContext context, AzPolicyRemediationListSettings settings) {
            var baseCommand = "az policy remediation list";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy remediation show".
        /// Show a resource policy remediation.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyRemediation")]
        public static dynamic AzPolicyRemediationShow(this ICakeContext context, AzPolicyRemediationShowSettings settings) {
            var baseCommand = "az policy remediation show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy remediation deployment list".
        /// Lists deployments for a resource policy remediation.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyRemediationDeployment")]
        public static dynamic AzPolicyRemediationDeploymentList(this ICakeContext context, AzPolicyRemediationDeploymentListSettings settings) {
            var baseCommand = "az policy remediation deployment list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy set-definition create".
        /// Create a policy set definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicySetDefinition")]
        public static dynamic AzPolicySetDefinitionCreate(this ICakeContext context, AzPolicySetDefinitionCreateSettings settings) {
            var baseCommand = "az policy set-definition create";
            AppendIfNonNull(ref baseCommand, "--definitions", settings.Definitions);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--params", settings.Params);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy set-definition delete".
        /// Delete a policy set definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicySetDefinition")]
        public static dynamic AzPolicySetDefinitionDelete(this ICakeContext context, AzPolicySetDefinitionDeleteSettings settings) {
            var baseCommand = "az policy set-definition delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy set-definition list".
        /// List policy set definitions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicySetDefinition")]
        public static dynamic AzPolicySetDefinitionList(this ICakeContext context, AzPolicySetDefinitionListSettings settings) {
            var baseCommand = "az policy set-definition list";
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy set-definition show".
        /// Show a policy set definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicySetDefinition")]
        public static dynamic AzPolicySetDefinitionShow(this ICakeContext context, AzPolicySetDefinitionShowSettings settings) {
            var baseCommand = "az policy set-definition show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy set-definition update".
        /// Update a policy set definition.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicySetDefinition")]
        public static dynamic AzPolicySetDefinitionUpdate(this ICakeContext context, AzPolicySetDefinitionUpdateSettings settings) {
            var baseCommand = "az policy set-definition update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--definitions", settings.Definitions);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--params", settings.Params);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy state list".
        /// List policy compliance states.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyState")]
        public static dynamic AzPolicyStateList(this ICakeContext context, AzPolicyStateListSettings settings) {
            var baseCommand = "az policy state list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--apply", settings.Apply);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--from", settings.From);
            AppendIfNonNull(ref baseCommand, "--order-by", settings.OrderBy);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--to", settings.To);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--policy-assignment", settings.PolicyAssignment);
            AppendIfNonNull(ref baseCommand, "--policy-definition", settings.PolicyDefinition);
            AppendIfNonNull(ref baseCommand, "--policy-set-definition", settings.PolicySetDefinition);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az policy state summarize".
        /// Summarize policy compliance states.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyState")]
        public static dynamic AzPolicyStateSummarize(this ICakeContext context, AzPolicyStateSummarizeSettings settings) {
            var baseCommand = "az policy state summarize";
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--from", settings.From);
            AppendIfNonNull(ref baseCommand, "--to", settings.To);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--policy-assignment", settings.PolicyAssignment);
            AppendIfNonNull(ref baseCommand, "--policy-definition", settings.PolicyDefinition);
            AppendIfNonNull(ref baseCommand, "--policy-set-definition", settings.PolicySetDefinition);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres db create".
        /// Create a PostgreSQL database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresDb")]
        public static dynamic AzPostgresDbCreate(this ICakeContext context, AzPostgresDbCreateSettings settings) {
            var baseCommand = "az postgres db create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--charset", settings.Charset);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres db delete".
        /// Delete a database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresDb")]
        public static dynamic AzPostgresDbDelete(this ICakeContext context, AzPostgresDbDeleteSettings settings) {
            var baseCommand = "az postgres db delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres db list".
        /// List the databases for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresDb")]
        public static dynamic AzPostgresDbList(this ICakeContext context, AzPostgresDbListSettings settings) {
            var baseCommand = "az postgres db list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres db show".
        /// Show the details of a database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresDb")]
        public static dynamic AzPostgresDbShow(this ICakeContext context, AzPostgresDbShowSettings settings) {
            var baseCommand = "az postgres db show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server create".
        /// Create a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public static dynamic AzPostgresServerCreate(this ICakeContext context, AzPostgresServerCreateSettings settings) {
            var baseCommand = "az postgres server create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--auto-grow", settings.AutoGrow);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--geo-redundant-backup", settings.GeoRedundantBackup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--ssl-enforcement", settings.SslEnforcement);
            AppendIfNonNull(ref baseCommand, "--storage-size", settings.StorageSize);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server delete".
        /// Delete a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public static dynamic AzPostgresServerDelete(this ICakeContext context, AzPostgresServerDeleteSettings settings) {
            var baseCommand = "az postgres server delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server georestore".
        /// Geo-restore a server from backup.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public static dynamic AzPostgresServerGeorestore(this ICakeContext context, AzPostgresServerGeorestoreSettings settings) {
            var baseCommand = "az postgres server georestore";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--geo-redundant-backup", settings.GeoRedundantBackup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server list".
        /// List available servers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public static dynamic AzPostgresServerList(this ICakeContext context, AzPostgresServerListSettings settings) {
            var baseCommand = "az postgres server list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server restart".
        /// Restart a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public static dynamic AzPostgresServerRestart(this ICakeContext context, AzPostgresServerRestartSettings settings) {
            var baseCommand = "az postgres server restart";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server restore".
        /// Restore a server from backup.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public static dynamic AzPostgresServerRestore(this ICakeContext context, AzPostgresServerRestoreSettings settings) {
            var baseCommand = "az postgres server restore";
            AppendIfNonNull(ref baseCommand, "--restore-point-in-time", settings.RestorePointInTime);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server show".
        /// Get the details of a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public static dynamic AzPostgresServerShow(this ICakeContext context, AzPostgresServerShowSettings settings) {
            var baseCommand = "az postgres server show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server update".
        /// Update a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public static dynamic AzPostgresServerUpdate(this ICakeContext context, AzPostgresServerUpdateSettings settings) {
            var baseCommand = "az postgres server update";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--auto-grow", settings.AutoGrow);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--ssl-enforcement", settings.SslEnforcement);
            AppendIfNonNull(ref baseCommand, "--storage-size", settings.StorageSize);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server wait".
        /// Wait for server to satisfy certain conditions.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public static dynamic AzPostgresServerWait(this ICakeContext context, AzPostgresServerWaitSettings settings) {
            var baseCommand = "az postgres server wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server configuration list".
        /// List the configuration values for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerConfiguration")]
        public static dynamic AzPostgresServerConfigurationList(this ICakeContext context, AzPostgresServerConfigurationListSettings settings) {
            var baseCommand = "az postgres server configuration list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server configuration set".
        /// Update the configuration of a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerConfiguration")]
        public static dynamic AzPostgresServerConfigurationSet(this ICakeContext context, AzPostgresServerConfigurationSetSettings settings) {
            var baseCommand = "az postgres server configuration set";
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server configuration show".
        /// Get the configuration for a server.".  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerConfiguration")]
        public static dynamic AzPostgresServerConfigurationShow(this ICakeContext context, AzPostgresServerConfigurationShowSettings settings) {
            var baseCommand = "az postgres server configuration show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server firewall-rule create".
        /// Create a new firewall rule for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerFirewallRule")]
        public static dynamic AzPostgresServerFirewallRuleCreate(this ICakeContext context, AzPostgresServerFirewallRuleCreateSettings settings) {
            var baseCommand = "az postgres server firewall-rule create";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server firewall-rule delete".
        /// Delete a firewall rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerFirewallRule")]
        public static dynamic AzPostgresServerFirewallRuleDelete(this ICakeContext context, AzPostgresServerFirewallRuleDeleteSettings settings) {
            var baseCommand = "az postgres server firewall-rule delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server firewall-rule list".
        /// List all firewall rules for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerFirewallRule")]
        public static dynamic AzPostgresServerFirewallRuleList(this ICakeContext context, AzPostgresServerFirewallRuleListSettings settings) {
            var baseCommand = "az postgres server firewall-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server firewall-rule show".
        /// Get the details of a firewall rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerFirewallRule")]
        public static dynamic AzPostgresServerFirewallRuleShow(this ICakeContext context, AzPostgresServerFirewallRuleShowSettings settings) {
            var baseCommand = "az postgres server firewall-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server firewall-rule update".
        /// Update a firewall rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerFirewallRule")]
        public static dynamic AzPostgresServerFirewallRuleUpdate(this ICakeContext context, AzPostgresServerFirewallRuleUpdateSettings settings) {
            var baseCommand = "az postgres server firewall-rule update";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server replica create".
        /// Create a read replica for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerReplica")]
        public static dynamic AzPostgresServerReplicaCreate(this ICakeContext context, AzPostgresServerReplicaCreateSettings settings) {
            var baseCommand = "az postgres server replica create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server replica list".
        /// List all read replicas for a given server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerReplica")]
        public static dynamic AzPostgresServerReplicaList(this ICakeContext context, AzPostgresServerReplicaListSettings settings) {
            var baseCommand = "az postgres server replica list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server replica stop".
        /// Stop replication to a read replica and make it a read/write server.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerReplica")]
        public static dynamic AzPostgresServerReplicaStop(this ICakeContext context, AzPostgresServerReplicaStopSettings settings) {
            var baseCommand = "az postgres server replica stop";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server vnet-rule create".
        /// Create a virtual network rule to allows access to a PostgreSQL server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerVnetRule")]
        public static dynamic AzPostgresServerVnetRuleCreate(this ICakeContext context, AzPostgresServerVnetRuleCreateSettings settings) {
            var baseCommand = "az postgres server vnet-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server vnet-rule delete".
        /// Deletes the virtual network rule with the given name.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerVnetRule")]
        public static dynamic AzPostgresServerVnetRuleDelete(this ICakeContext context, AzPostgresServerVnetRuleDeleteSettings settings) {
            var baseCommand = "az postgres server vnet-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server vnet-rule list".
        /// Gets a list of virtual network rules in a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerVnetRule")]
        public static dynamic AzPostgresServerVnetRuleList(this ICakeContext context, AzPostgresServerVnetRuleListSettings settings) {
            var baseCommand = "az postgres server vnet-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server vnet-rule show".
        /// Gets a virtual network rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerVnetRule")]
        public static dynamic AzPostgresServerVnetRuleShow(this ICakeContext context, AzPostgresServerVnetRuleShowSettings settings) {
            var baseCommand = "az postgres server vnet-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server vnet-rule update".
        /// Update a virtual network rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerVnetRule")]
        public static dynamic AzPostgresServerVnetRuleUpdate(this ICakeContext context, AzPostgresServerVnetRuleUpdateSettings settings) {
            var baseCommand = "az postgres server vnet-rule update";
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server-logs download".
        /// Download log files.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerLogs")]
        public static dynamic AzPostgresServerLogsDownload(this ICakeContext context, AzPostgresServerLogsDownloadSettings settings) {
            var baseCommand = "az postgres server-logs download";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az postgres server-logs list".
        /// List log files for a server.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerLogs")]
        public static dynamic AzPostgresServerLogsList(this ICakeContext context, AzPostgresServerLogsListSettings settings) {
            var baseCommand = "az postgres server-logs list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--file-last-written", settings.FileLastWritten);
            AppendIfNonNull(ref baseCommand, "--filename-contains", settings.FilenameContains);
            AppendIfNonNull(ref baseCommand, "--max-file-size", settings.MaxFileSize);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ppg create".
        /// Create a proximity placement group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPpg")]
        public static dynamic AzPpgCreate(this ICakeContext context, AzPpgCreateSettings settings) {
            var baseCommand = "az ppg create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ppg delete".
        /// Delete a proximity placement group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPpg")]
        public static dynamic AzPpgDelete(this ICakeContext context, AzPpgDeleteSettings settings) {
            var baseCommand = "az ppg delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ppg list".
        /// List proximity placement groups.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPpg")]
        public static dynamic AzPpgList(this ICakeContext context, AzPpgListSettings settings) {
            var baseCommand = "az ppg list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ppg show".
        /// Get a proximity placement group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPpg")]
        public static dynamic AzPpgShow(this ICakeContext context, AzPpgShowSettings settings) {
            var baseCommand = "az ppg show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--include-colocation-status", settings.IncludeColocationStatus);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az ppg update".
        /// Update a proximity placement group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPpg")]
        public static dynamic AzPpgUpdate(this ICakeContext context, AzPpgUpdateSettings settings) {
            var baseCommand = "az ppg update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--include-colocation-status", settings.IncludeColocationStatus);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az provider list".
        /// Gets all resource providers for a subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzProvider")]
        public static dynamic AzProviderList(this ICakeContext context, AzProviderListSettings settings) {
            var baseCommand = "az provider list";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az provider register".
        /// Register a provider.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzProvider")]
        public static dynamic AzProviderRegister(this ICakeContext context, AzProviderRegisterSettings settings) {
            var baseCommand = "az provider register";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--wait", settings.Wait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az provider show".
        /// Gets the specified resource provider.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzProvider")]
        public static dynamic AzProviderShow(this ICakeContext context, AzProviderShowSettings settings) {
            var baseCommand = "az provider show";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az provider unregister".
        /// Unregister a provider.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzProvider")]
        public static dynamic AzProviderUnregister(this ICakeContext context, AzProviderUnregisterSettings settings) {
            var baseCommand = "az provider unregister";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--wait", settings.Wait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az provider operation list".
        /// Get operations from all providers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzProviderOperation")]
        public static dynamic AzProviderOperationList(this ICakeContext context, AzProviderOperationListSettings settings) {
            var baseCommand = "az provider operation list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az provider operation show".
        /// Get an individual provider's operations.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzProviderOperation")]
        public static dynamic AzProviderOperationShow(this ICakeContext context, AzProviderOperationShowSettings settings) {
            var baseCommand = "az provider operation show";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis create".
        /// Create new Redis Cache instance.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public static dynamic AzRedisCreate(this ICakeContext context, AzRedisCreateSettings settings) {
            var baseCommand = "az redis create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--vm-size", settings.VmSize);
            AppendIfNonNull(ref baseCommand, "--enable-non-ssl-port", settings.EnableNonSslPort);
            AppendIfNonNull(ref baseCommand, "--minimum-tls-version", settings.MinimumTlsVersion);
            AppendIfNonNull(ref baseCommand, "--redis-configuration", settings.RedisConfiguration);
            AppendIfNonNull(ref baseCommand, "--shard-count", settings.ShardCount);
            AppendIfNonNull(ref baseCommand, "--static-ip", settings.StaticIp);
            AppendIfNonNull(ref baseCommand, "--subnet-id", settings.SubnetId);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--tenant-settings", settings.TenantSettings);
            AppendIfNonNull(ref baseCommand, "--zones", settings.Zones);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis delete".
        /// Deletes a Redis cache.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public static dynamic AzRedisDelete(this ICakeContext context, AzRedisDeleteSettings settings) {
            var baseCommand = "az redis delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis export".
        /// Export data stored in a Redis cache.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public static dynamic AzRedisExport(this ICakeContext context, AzRedisExportSettings settings) {
            var baseCommand = "az redis export";
            AppendIfNonNull(ref baseCommand, "--container", settings.Container);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--file-format", settings.FileFormat);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis force-reboot".
        /// Reboot specified Redis node(s).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public static dynamic AzRedisForceReboot(this ICakeContext context, AzRedisForceRebootSettings settings) {
            var baseCommand = "az redis force-reboot";
            AppendIfNonNull(ref baseCommand, "--reboot-type", settings.RebootType);
            AppendIfNonNull(ref baseCommand, "--shard-id", settings.ShardId);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis import".
        /// Import data into a Redis cache.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public static dynamic AzRedisImport(this ICakeContext context, AzRedisImportSettings settings) {
            var baseCommand = "az redis import";
            AppendIfNonNull(ref baseCommand, "--files", settings.Files);
            AppendIfNonNull(ref baseCommand, "--file-format", settings.FileFormat);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis list".
        /// List Redis Caches.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public static dynamic AzRedisList(this ICakeContext context, AzRedisListSettings settings) {
            var baseCommand = "az redis list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis list-keys".
        /// Retrieve a Redis cache's access keys.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public static dynamic AzRedisListKeys(this ICakeContext context, AzRedisListKeysSettings settings) {
            var baseCommand = "az redis list-keys";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis regenerate-keys".
        /// Regenerate Redis cache's access keys.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public static dynamic AzRedisRegenerateKeys(this ICakeContext context, AzRedisRegenerateKeysSettings settings) {
            var baseCommand = "az redis regenerate-keys";
            AppendIfNonNull(ref baseCommand, "--key-type", settings.KeyType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis show".
        /// Gets a Redis cache (resource description).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public static dynamic AzRedisShow(this ICakeContext context, AzRedisShowSettings settings) {
            var baseCommand = "az redis show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis update".
        /// Update a Redis cache.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public static dynamic AzRedisUpdate(this ICakeContext context, AzRedisUpdateSettings settings) {
            var baseCommand = "az redis update";
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--vm-size", settings.VmSize);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis firewall-rules create".
        /// Create a redis cache firewall rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisFirewallRules")]
        public static dynamic AzRedisFirewallRulesCreate(this ICakeContext context, AzRedisFirewallRulesCreateSettings settings) {
            var baseCommand = "az redis firewall-rules create";
            AppendIfNonNull(ref baseCommand, "--end-ip", settings.EndIp);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--start-ip", settings.StartIp);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis firewall-rules delete".
        /// Deletes a single firewall rule in a specified redis cache.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisFirewallRules")]
        public static dynamic AzRedisFirewallRulesDelete(this ICakeContext context, AzRedisFirewallRulesDeleteSettings settings) {
            var baseCommand = "az redis firewall-rules delete";
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis firewall-rules list".
        /// Gets all firewall rules in the specified redis cache.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisFirewallRules")]
        public static dynamic AzRedisFirewallRulesList(this ICakeContext context, AzRedisFirewallRulesListSettings settings) {
            var baseCommand = "az redis firewall-rules list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis firewall-rules show".
        /// Gets a single firewall rule in a specified redis cache.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisFirewallRules")]
        public static dynamic AzRedisFirewallRulesShow(this ICakeContext context, AzRedisFirewallRulesShowSettings settings) {
            var baseCommand = "az redis firewall-rules show";
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis firewall-rules update".
        /// Update a redis cache firewall rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisFirewallRules")]
        public static dynamic AzRedisFirewallRulesUpdate(this ICakeContext context, AzRedisFirewallRulesUpdateSettings settings) {
            var baseCommand = "az redis firewall-rules update";
            AppendIfNonNull(ref baseCommand, "--end-ip", settings.EndIp);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--start-ip", settings.StartIp);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis patch-schedule create".
        /// Create patching schedule for Redis cache.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisPatchSchedule")]
        public static dynamic AzRedisPatchScheduleCreate(this ICakeContext context, AzRedisPatchScheduleCreateSettings settings) {
            var baseCommand = "az redis patch-schedule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--schedule-entries", settings.ScheduleEntries);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis patch-schedule delete".
        /// Deletes the patching schedule of a redis cache (requires Premium SKU).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisPatchSchedule")]
        public static dynamic AzRedisPatchScheduleDelete(this ICakeContext context, AzRedisPatchScheduleDeleteSettings settings) {
            var baseCommand = "az redis patch-schedule delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis patch-schedule show".
        /// Gets the patching schedule of a redis cache (requires Premium SKU).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisPatchSchedule")]
        public static dynamic AzRedisPatchScheduleShow(this ICakeContext context, AzRedisPatchScheduleShowSettings settings) {
            var baseCommand = "az redis patch-schedule show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis patch-schedule update".
        /// Update the patching schedule for Redis cache.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisPatchSchedule")]
        public static dynamic AzRedisPatchScheduleUpdate(this ICakeContext context, AzRedisPatchScheduleUpdateSettings settings) {
            var baseCommand = "az redis patch-schedule update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--schedule-entries", settings.ScheduleEntries);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis server-link create".
        /// Adds a server link to the Redis cache (requires Premium SKU).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisServerLink")]
        public static dynamic AzRedisServerLinkCreate(this ICakeContext context, AzRedisServerLinkCreateSettings settings) {
            var baseCommand = "az redis server-link create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--replication-role", settings.ReplicationRole);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-to-link", settings.ServerToLink);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis server-link delete".
        /// Deletes the linked server from a redis cache (requires Premium SKU).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisServerLink")]
        public static dynamic AzRedisServerLinkDelete(this ICakeContext context, AzRedisServerLinkDeleteSettings settings) {
            var baseCommand = "az redis server-link delete";
            AppendIfNonNull(ref baseCommand, "--linked-server-name", settings.LinkedServerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis server-link list".
        /// Gets the list of linked servers associated with this redis cache (requires Premium SKU).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisServerLink")]
        public static dynamic AzRedisServerLinkList(this ICakeContext context, AzRedisServerLinkListSettings settings) {
            var baseCommand = "az redis server-link list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az redis server-link show".
        /// Gets the detailed information about a linked server of a redis cache (requires Premium SKU).  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisServerLink")]
        public static dynamic AzRedisServerLinkShow(this ICakeContext context, AzRedisServerLinkShowSettings settings) {
            var baseCommand = "az redis server-link show";
            AppendIfNonNull(ref baseCommand, "--linked-server-name", settings.LinkedServerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay hyco create".
        /// Create the Relay Service Hybrid Connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHyco")]
        public static dynamic AzRelayHycoCreate(this ICakeContext context, AzRelayHycoCreateSettings settings) {
            var baseCommand = "az relay hyco create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--requires-client-authorization", settings.RequiresClientAuthorization);
            AppendIfNonNull(ref baseCommand, "--user-metadata", settings.UserMetadata);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay hyco delete".
        /// Deletes the Relay Service Hybrid Connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHyco")]
        public static dynamic AzRelayHycoDelete(this ICakeContext context, AzRelayHycoDeleteSettings settings) {
            var baseCommand = "az relay hyco delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay hyco list".
        /// List the Hybrid Connection by Relay Service Namepsace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHyco")]
        public static dynamic AzRelayHycoList(this ICakeContext context, AzRelayHycoListSettings settings) {
            var baseCommand = "az relay hyco list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay hyco show".
        /// Shows the Relay Service Hybrid Connection Details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHyco")]
        public static dynamic AzRelayHycoShow(this ICakeContext context, AzRelayHycoShowSettings settings) {
            var baseCommand = "az relay hyco show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay hyco update".
        /// Updates the Relay Service Hybrid Connection.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHyco")]
        public static dynamic AzRelayHycoUpdate(this ICakeContext context, AzRelayHycoUpdateSettings settings) {
            var baseCommand = "az relay hyco update";
            AppendIfNonNull(ref baseCommand, "--requires-client-authorization", settings.RequiresClientAuthorization);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--user-metadata", settings.UserMetadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay hyco authorization-rule create".
        /// Create Authorization Rule for given Relay Service Hybrid Connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRule")]
        public static dynamic AzRelayHycoAuthorizationRuleCreate(this ICakeContext context, AzRelayHycoAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az relay hyco authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay hyco authorization-rule delete".
        /// Deletes the Authorization Rule of the given Relay Service Hybrid Connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRule")]
        public static dynamic AzRelayHycoAuthorizationRuleDelete(this ICakeContext context, AzRelayHycoAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az relay hyco authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay hyco authorization-rule list".
        /// Shows list of Authorization Rule by Relay Service Hybrid Connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRule")]
        public static dynamic AzRelayHycoAuthorizationRuleList(this ICakeContext context, AzRelayHycoAuthorizationRuleListSettings settings) {
            var baseCommand = "az relay hyco authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay hyco authorization-rule show".
        /// Shows the details of Authorization Rule for given Relay Service Hybrid Connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRule")]
        public static dynamic AzRelayHycoAuthorizationRuleShow(this ICakeContext context, AzRelayHycoAuthorizationRuleShowSettings settings) {
            var baseCommand = "az relay hyco authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay hyco authorization-rule update".
        /// Create Authorization Rule for given Relay Service Hybrid Connection.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRule")]
        public static dynamic AzRelayHycoAuthorizationRuleUpdate(this ICakeContext context, AzRelayHycoAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az relay hyco authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay hyco authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for Relay Service Hybrid Connection.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRuleKeys")]
        public static dynamic AzRelayHycoAuthorizationRuleKeysList(this ICakeContext context, AzRelayHycoAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az relay hyco authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay hyco authorization-rule keys renew".
        /// Regenerate keys of Authorization Rule for Relay Service Hybrid Connection.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRuleKeys")]
        public static dynamic AzRelayHycoAuthorizationRuleKeysRenew(this ICakeContext context, AzRelayHycoAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az relay hyco authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace create".
        /// Create a Relay Service Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespace")]
        public static dynamic AzRelayNamespaceCreate(this ICakeContext context, AzRelayNamespaceCreateSettings settings) {
            var baseCommand = "az relay namespace create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace delete".
        /// Deletes the Relay Service Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespace")]
        public static dynamic AzRelayNamespaceDelete(this ICakeContext context, AzRelayNamespaceDeleteSettings settings) {
            var baseCommand = "az relay namespace delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace exists".
        /// Check for the availability of the given name for the Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespace")]
        public static dynamic AzRelayNamespaceExists(this ICakeContext context, AzRelayNamespaceExistsSettings settings) {
            var baseCommand = "az relay namespace exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace list".
        /// List the Relay Service Namespaces.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespace")]
        public static dynamic AzRelayNamespaceList(this ICakeContext context, AzRelayNamespaceListSettings settings) {
            var baseCommand = "az relay namespace list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace show".
        /// Shows the Relay Service Namespace details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespace")]
        public static dynamic AzRelayNamespaceShow(this ICakeContext context, AzRelayNamespaceShowSettings settings) {
            var baseCommand = "az relay namespace show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace update".
        /// Updates a Relay Service Namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespace")]
        public static dynamic AzRelayNamespaceUpdate(this ICakeContext context, AzRelayNamespaceUpdateSettings settings) {
            var baseCommand = "az relay namespace update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace authorization-rule create".
        /// Create Authorization Rule for the given Relay Service Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRule")]
        public static dynamic AzRelayNamespaceAuthorizationRuleCreate(this ICakeContext context, AzRelayNamespaceAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az relay namespace authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace authorization-rule delete".
        /// Deletes the Authorization Rule of the Relay Service Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRule")]
        public static dynamic AzRelayNamespaceAuthorizationRuleDelete(this ICakeContext context, AzRelayNamespaceAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az relay namespace authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace authorization-rule list".
        /// Shows the list of Authorization Rule by Relay Service Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRule")]
        public static dynamic AzRelayNamespaceAuthorizationRuleList(this ICakeContext context, AzRelayNamespaceAuthorizationRuleListSettings settings) {
            var baseCommand = "az relay namespace authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace authorization-rule show".
        /// Shows the details of Relay Service Namespace Authorization Rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRule")]
        public static dynamic AzRelayNamespaceAuthorizationRuleShow(this ICakeContext context, AzRelayNamespaceAuthorizationRuleShowSettings settings) {
            var baseCommand = "az relay namespace authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace authorization-rule update".
        /// Updates Authorization Rule for the given Relay Service Namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRule")]
        public static dynamic AzRelayNamespaceAuthorizationRuleUpdate(this ICakeContext context, AzRelayNamespaceAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az relay namespace authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for Relay Service Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRuleKeys")]
        public static dynamic AzRelayNamespaceAuthorizationRuleKeysList(this ICakeContext context, AzRelayNamespaceAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az relay namespace authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay namespace authorization-rule keys renew".
        /// Regenerate keys of Authorization Rule for the Relay Service Namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRuleKeys")]
        public static dynamic AzRelayNamespaceAuthorizationRuleKeysRenew(this ICakeContext context, AzRelayNamespaceAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az relay namespace authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay wcfrelay create".
        /// Create the Relay Service WCF Relay.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelay")]
        public static dynamic AzRelayWcfrelayCreate(this ICakeContext context, AzRelayWcfrelayCreateSettings settings) {
            var baseCommand = "az relay wcfrelay create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-type", settings.RelayType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--requires-client-authorization", settings.RequiresClientAuthorization);
            AppendIfNonNull(ref baseCommand, "--requires-transport-security", settings.RequiresTransportSecurity);
            AppendIfNonNull(ref baseCommand, "--user-metadata", settings.UserMetadata);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay wcfrelay delete".
        /// Deletes the Relay Service WCF Relay.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelay")]
        public static dynamic AzRelayWcfrelayDelete(this ICakeContext context, AzRelayWcfrelayDeleteSettings settings) {
            var baseCommand = "az relay wcfrelay delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay wcfrelay list".
        /// List the WCF Relay by Relay Service Namepsace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelay")]
        public static dynamic AzRelayWcfrelayList(this ICakeContext context, AzRelayWcfrelayListSettings settings) {
            var baseCommand = "az relay wcfrelay list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay wcfrelay show".
        /// Shows the Relay Service WCF Relay Details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelay")]
        public static dynamic AzRelayWcfrelayShow(this ICakeContext context, AzRelayWcfrelayShowSettings settings) {
            var baseCommand = "az relay wcfrelay show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay wcfrelay update".
        /// Updates existing Relay Service WCF Relay.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelay")]
        public static dynamic AzRelayWcfrelayUpdate(this ICakeContext context, AzRelayWcfrelayUpdateSettings settings) {
            var baseCommand = "az relay wcfrelay update";
            AppendIfNonNull(ref baseCommand, "--relay-type", settings.RelayType);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--user-metadata", settings.UserMetadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule create".
        /// Create Authorization Rule for the given Relay Service WCF Relay.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRule")]
        public static dynamic AzRelayWcfrelayAuthorizationRuleCreate(this ICakeContext context, AzRelayWcfrelayAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule delete".
        /// Delete the Authorization Rule of Relay Service WCF Relay.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRule")]
        public static dynamic AzRelayWcfrelayAuthorizationRuleDelete(this ICakeContext context, AzRelayWcfrelayAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule list".
        /// List of Authorization Rule by Relay Service WCF Relay.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRule")]
        public static dynamic AzRelayWcfrelayAuthorizationRuleList(this ICakeContext context, AzRelayWcfrelayAuthorizationRuleListSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule show".
        /// Show properties of Authorization Rule for the given Relay Service WCF Relay.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRule")]
        public static dynamic AzRelayWcfrelayAuthorizationRuleShow(this ICakeContext context, AzRelayWcfrelayAuthorizationRuleShowSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule update".
        /// Update Authorization Rule for the given Relay Service WCF Relay.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRule")]
        public static dynamic AzRelayWcfrelayAuthorizationRuleUpdate(this ICakeContext context, AzRelayWcfrelayAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for the given Relay Service WCF Relay.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRuleKeys")]
        public static dynamic AzRelayWcfrelayAuthorizationRuleKeysList(this ICakeContext context, AzRelayWcfrelayAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule keys renew".
        /// Regenerate keys of Authorization Rule for Relay Service WCF Relay.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRuleKeys")]
        public static dynamic AzRelayWcfrelayAuthorizationRuleKeysRenew(this ICakeContext context, AzRelayWcfrelayAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az reservations catalog show".
        /// Get catalog of available reservation.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsCatalog")]
        public static dynamic AzReservationsCatalogShow(this ICakeContext context, AzReservationsCatalogShowSettings settings) {
            var baseCommand = "az reservations catalog show";
            AppendIfNonNull(ref baseCommand, "--reserved-resource-type", settings.ReservedResourceType);
            AppendIfNonNull(ref baseCommand, "--subscription-id", settings.SubscriptionId);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az reservations reservation list".
        /// Get all reservations.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservation")]
        public static dynamic AzReservationsReservationList(this ICakeContext context, AzReservationsReservationListSettings settings) {
            var baseCommand = "az reservations reservation list";
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az reservations reservation list-history".
        /// Get history of a reservation.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservation")]
        public static dynamic AzReservationsReservationListHistory(this ICakeContext context, AzReservationsReservationListHistorySettings settings) {
            var baseCommand = "az reservations reservation list-history";
            AppendIfNonNull(ref baseCommand, "--reservation-id", settings.ReservationId);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az reservations reservation merge".
        /// Merge two reservations.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservation")]
        public static dynamic AzReservationsReservationMerge(this ICakeContext context, AzReservationsReservationMergeSettings settings) {
            var baseCommand = "az reservations reservation merge";
            AppendIfNonNull(ref baseCommand, "--reservation-id-1", settings.ReservationId1);
            AppendIfNonNull(ref baseCommand, "--reservation-id-2", settings.ReservationId2);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az reservations reservation show".
        /// Get details of a reservation.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservation")]
        public static dynamic AzReservationsReservationShow(this ICakeContext context, AzReservationsReservationShowSettings settings) {
            var baseCommand = "az reservations reservation show";
            AppendIfNonNull(ref baseCommand, "--reservation-id", settings.ReservationId);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az reservations reservation split".
        /// Split a reservation.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservation")]
        public static dynamic AzReservationsReservationSplit(this ICakeContext context, AzReservationsReservationSplitSettings settings) {
            var baseCommand = "az reservations reservation split";
            AppendIfNonNull(ref baseCommand, "--quantity-1", settings.Quantity1);
            AppendIfNonNull(ref baseCommand, "--quantity-2", settings.Quantity2);
            AppendIfNonNull(ref baseCommand, "--reservation-id", settings.ReservationId);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az reservations reservation update".
        /// Updates the applied scopes of the reservation.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservation")]
        public static dynamic AzReservationsReservationUpdate(this ICakeContext context, AzReservationsReservationUpdateSettings settings) {
            var baseCommand = "az reservations reservation update";
            AppendIfNonNull(ref baseCommand, "--applied-scope-type", settings.AppliedScopeType);
            AppendIfNonNull(ref baseCommand, "--reservation-id", settings.ReservationId);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--applied-scopes", settings.AppliedScopes);
            AppendIfNonNull(ref baseCommand, "--instance-flexibility", settings.InstanceFlexibility);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az reservations reservation-order calculate".
        /// Calculate price for a reservation order.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservationOrder")]
        public static dynamic AzReservationsReservationOrderCalculate(this ICakeContext context, AzReservationsReservationOrderCalculateSettings settings) {
            var baseCommand = "az reservations reservation-order calculate";
            AppendIfNonNull(ref baseCommand, "--applied-scope-type", settings.AppliedScopeType);
            AppendIfNonNull(ref baseCommand, "--billing-scope", settings.BillingScope);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--quantity", settings.Quantity);
            AppendIfNonNull(ref baseCommand, "--reserved-resource-type", settings.ReservedResourceType);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--term", settings.Term);
            AppendIfNonNull(ref baseCommand, "--applied-scope", settings.AppliedScope);
            AppendIfNonNull(ref baseCommand, "--billing-plan", settings.BillingPlan);
            AppendIfNonNull(ref baseCommand, "--instance-flexibility", settings.InstanceFlexibility);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--renew", settings.Renew);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az reservations reservation-order list".
        /// Get all reservation orders.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservationOrder")]
        public static dynamic AzReservationsReservationOrderList(this ICakeContext context, AzReservationsReservationOrderListSettings settings) {
            var baseCommand = "az reservations reservation-order list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az reservations reservation-order purchase".
        /// Purchase reservation order.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservationOrder")]
        public static dynamic AzReservationsReservationOrderPurchase(this ICakeContext context, AzReservationsReservationOrderPurchaseSettings settings) {
            var baseCommand = "az reservations reservation-order purchase";
            AppendIfNonNull(ref baseCommand, "--applied-scope-type", settings.AppliedScopeType);
            AppendIfNonNull(ref baseCommand, "--billing-scope", settings.BillingScope);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--quantity", settings.Quantity);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--reserved-resource-type", settings.ReservedResourceType);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--term", settings.Term);
            AppendIfNonNull(ref baseCommand, "--applied-scope", settings.AppliedScope);
            AppendIfNonNull(ref baseCommand, "--billing-plan", settings.BillingPlan);
            AppendIfNonNull(ref baseCommand, "--instance-flexibility", settings.InstanceFlexibility);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--renew", settings.Renew);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az reservations reservation-order show".
        /// Get a specific reservation order.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservationOrder")]
        public static dynamic AzReservationsReservationOrderShow(this ICakeContext context, AzReservationsReservationOrderShowSettings settings) {
            var baseCommand = "az reservations reservation-order show";
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az reservations reservation-order-id list".
        /// Get list of applicable reservation order ids.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservationOrderId")]
        public static dynamic AzReservationsReservationOrderIdList(this ICakeContext context, AzReservationsReservationOrderIdListSettings settings) {
            var baseCommand = "az reservations reservation-order-id list";
            AppendIfNonNull(ref baseCommand, "--subscription-id", settings.SubscriptionId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource create".
        /// Create a resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public static dynamic AzResourceCreate(this ICakeContext context, AzResourceCreateSettings settings) {
            var baseCommand = "az resource create";
            AppendIfNonNull(ref baseCommand, "--properties", settings.Properties);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--is-full-object", settings.IsFullObject);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource delete".
        /// Delete a resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public static dynamic AzResourceDelete(this ICakeContext context, AzResourceDeleteSettings settings) {
            var baseCommand = "az resource delete";
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource invoke-action".
        /// Invoke an action on the resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public static dynamic AzResourceInvokeAction(this ICakeContext context, AzResourceInvokeActionSettings settings) {
            var baseCommand = "az resource invoke-action";
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--request-body", settings.RequestBody);
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource list".
        /// List resources.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public static dynamic AzResourceList(this ICakeContext context, AzResourceListSettings settings) {
            var baseCommand = "az resource list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tag", settings.Tag);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource move".
        /// Moves resources from one resource group to another(can be under different subscription).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public static dynamic AzResourceMove(this ICakeContext context, AzResourceMoveSettings settings) {
            var baseCommand = "az resource move";
            AppendIfNonNull(ref baseCommand, "--destination-group", settings.DestinationGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--destination-subscription-id", settings.DestinationSubscriptionId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource show".
        /// Get the details of a resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public static dynamic AzResourceShow(this ICakeContext context, AzResourceShowSettings settings) {
            var baseCommand = "az resource show";
            AppendIfNonNull(ref baseCommand, "--include-response-body", settings.IncludeResponseBody);
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource tag".
        /// Tag a resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public static dynamic AzResourceTag(this ICakeContext context, AzResourceTagSettings settings) {
            var baseCommand = "az resource tag";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource update".
        /// Update a resource.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public static dynamic AzResourceUpdate(this ICakeContext context, AzResourceUpdateSettings settings) {
            var baseCommand = "az resource update";
            AppendIfNonNull(ref baseCommand, "--include-response-body", settings.IncludeResponseBody);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource wait".
        /// Place the CLI in a waiting state until a condition of a resources is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public static dynamic AzResourceWait(this ICakeContext context, AzResourceWaitSettings settings) {
            var baseCommand = "az resource wait";
            AppendIfNonNull(ref baseCommand, "--include-response-body", settings.IncludeResponseBody);
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource link create".
        /// Create a new link between resources.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLink")]
        public static dynamic AzResourceLinkCreate(this ICakeContext context, AzResourceLinkCreateSettings settings) {
            var baseCommand = "az resource link create";
            AppendIfNonNull(ref baseCommand, "--link", settings.Link);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource link delete".
        /// Delete a link between resources.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLink")]
        public static dynamic AzResourceLinkDelete(this ICakeContext context, AzResourceLinkDeleteSettings settings) {
            var baseCommand = "az resource link delete";
            AppendIfNonNull(ref baseCommand, "--link", settings.Link);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource link list".
        /// List resource links.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLink")]
        public static dynamic AzResourceLinkList(this ICakeContext context, AzResourceLinkListSettings settings) {
            var baseCommand = "az resource link list";
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource link show".
        /// Gets a resource link with the specified ID.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLink")]
        public static dynamic AzResourceLinkShow(this ICakeContext context, AzResourceLinkShowSettings settings) {
            var baseCommand = "az resource link show";
            AppendIfNonNull(ref baseCommand, "--link", settings.Link);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource link update".
        /// Update link between resources.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLink")]
        public static dynamic AzResourceLinkUpdate(this ICakeContext context, AzResourceLinkUpdateSettings settings) {
            var baseCommand = "az resource link update";
            AppendIfNonNull(ref baseCommand, "--link", settings.Link);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource lock create".
        /// Create a resource-level lock.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLock")]
        public static dynamic AzResourceLockCreate(this ICakeContext context, AzResourceLockCreateSettings settings) {
            var baseCommand = "az resource lock create";
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource lock delete".
        /// Delete a resource-level lock.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLock")]
        public static dynamic AzResourceLockDelete(this ICakeContext context, AzResourceLockDeleteSettings settings) {
            var baseCommand = "az resource lock delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource lock list".
        /// List lock information in the resource-level.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLock")]
        public static dynamic AzResourceLockList(this ICakeContext context, AzResourceLockListSettings settings) {
            var baseCommand = "az resource lock list";
            AppendIfNonNull(ref baseCommand, "--filter-string", settings.FilterString);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource lock show".
        /// Show the details of a resource-level lock.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLock")]
        public static dynamic AzResourceLockShow(this ICakeContext context, AzResourceLockShowSettings settings) {
            var baseCommand = "az resource lock show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az resource lock update".
        /// Update a resource-level lock.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLock")]
        public static dynamic AzResourceLockUpdate(this ICakeContext context, AzResourceLockUpdateSettings settings) {
            var baseCommand = "az resource lock update";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az role assignment create".
        /// Create a new role assignment for a user, group, or service principal.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleAssignment")]
        public static dynamic AzRoleAssignmentCreate(this ICakeContext context, AzRoleAssignmentCreateSettings settings) {
            var baseCommand = "az role assignment create";
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--assignee", settings.Assignee);
            AppendIfNonNull(ref baseCommand, "--assignee-object-id", settings.AssigneeObjectId);
            AppendIfNonNull(ref baseCommand, "--assignee-principal-type", settings.AssigneePrincipalType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az role assignment delete".
        /// Delete role assignments.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleAssignment")]
        public static dynamic AzRoleAssignmentDelete(this ICakeContext context, AzRoleAssignmentDeleteSettings settings) {
            var baseCommand = "az role assignment delete";
            AppendIfNonNull(ref baseCommand, "--assignee", settings.Assignee);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--include-inherited", settings.IncludeInherited);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az role assignment list".
        /// List role assignments.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleAssignment")]
        public static dynamic AzRoleAssignmentList(this ICakeContext context, AzRoleAssignmentListSettings settings) {
            var baseCommand = "az role assignment list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--assignee", settings.Assignee);
            AppendIfNonNull(ref baseCommand, "--include-classic-administrators", settings.IncludeClassicAdministrators);
            AppendIfNonNull(ref baseCommand, "--include-groups", settings.IncludeGroups);
            AppendIfNonNull(ref baseCommand, "--include-inherited", settings.IncludeInherited);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az role assignment list-changelogs".
        /// List changelogs for role assignments.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleAssignment")]
        public static dynamic AzRoleAssignmentListChangelogs(this ICakeContext context, AzRoleAssignmentListChangelogsSettings settings) {
            var baseCommand = "az role assignment list-changelogs";
            AppendIfNonNull(ref baseCommand, "--end-time", settings.EndTime);
            AppendIfNonNull(ref baseCommand, "--start-time", settings.StartTime);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az role definition create".
        /// Create a custom role definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleDefinition")]
        public static dynamic AzRoleDefinitionCreate(this ICakeContext context, AzRoleDefinitionCreateSettings settings) {
            var baseCommand = "az role definition create";
            AppendIfNonNull(ref baseCommand, "--role-definition", settings.RoleDefinition);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az role definition delete".
        /// Delete a role definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleDefinition")]
        public static dynamic AzRoleDefinitionDelete(this ICakeContext context, AzRoleDefinitionDeleteSettings settings) {
            var baseCommand = "az role definition delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--custom-role-only", settings.CustomRoleOnly);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az role definition list".
        /// List role definitions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleDefinition")]
        public static dynamic AzRoleDefinitionList(this ICakeContext context, AzRoleDefinitionListSettings settings) {
            var baseCommand = "az role definition list";
            AppendIfNonNull(ref baseCommand, "--custom-role-only", settings.CustomRoleOnly);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az role definition update".
        /// Update a role definition.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleDefinition")]
        public static dynamic AzRoleDefinitionUpdate(this ICakeContext context, AzRoleDefinitionUpdateSettings settings) {
            var baseCommand = "az role definition update";
            AppendIfNonNull(ref baseCommand, "--role-definition", settings.RoleDefinition);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az search admin-key renew".
        /// Regenerates either the primary or secondary admin API key.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchAdminKey")]
        public static dynamic AzSearchAdminKeyRenew(this ICakeContext context, AzSearchAdminKeyRenewSettings settings) {
            var baseCommand = "az search admin-key renew";
            AppendIfNonNull(ref baseCommand, "--key-kind", settings.KeyKind);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az search admin-key show".
        /// Gets the primary and secondary admin API keys for the specified Azure Search service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchAdminKey")]
        public static dynamic AzSearchAdminKeyShow(this ICakeContext context, AzSearchAdminKeyShowSettings settings) {
            var baseCommand = "az search admin-key show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az search query-key create".
        /// Generates a new query key for the specified Search service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchQueryKey")]
        public static dynamic AzSearchQueryKeyCreate(this ICakeContext context, AzSearchQueryKeyCreateSettings settings) {
            var baseCommand = "az search query-key create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az search query-key delete".
        /// Deletes the specified query key.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchQueryKey")]
        public static dynamic AzSearchQueryKeyDelete(this ICakeContext context, AzSearchQueryKeyDeleteSettings settings) {
            var baseCommand = "az search query-key delete";
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az search query-key list".
        /// Returns the list of query API keys for the given Azure Search service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchQueryKey")]
        public static dynamic AzSearchQueryKeyList(this ICakeContext context, AzSearchQueryKeyListSettings settings) {
            var baseCommand = "az search query-key list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az search service create".
        /// Creates a Search service in the given resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchService")]
        public static dynamic AzSearchServiceCreate(this ICakeContext context, AzSearchServiceCreateSettings settings) {
            var baseCommand = "az search service create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--partition-count", settings.PartitionCount);
            AppendIfNonNull(ref baseCommand, "--replica-count", settings.ReplicaCount);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az search service delete".
        /// Deletes a Search service in the given resource group, along with its associated resources.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchService")]
        public static dynamic AzSearchServiceDelete(this ICakeContext context, AzSearchServiceDeleteSettings settings) {
            var baseCommand = "az search service delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az search service list".
        /// Gets a list of all Search services in the given resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchService")]
        public static dynamic AzSearchServiceList(this ICakeContext context, AzSearchServiceListSettings settings) {
            var baseCommand = "az search service list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az search service show".
        /// Gets the Search service with the given name in the given resource group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchService")]
        public static dynamic AzSearchServiceShow(this ICakeContext context, AzSearchServiceShowSettings settings) {
            var baseCommand = "az search service show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az search service update".
        /// Update partition and replica of the given search service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchService")]
        public static dynamic AzSearchServiceUpdate(this ICakeContext context, AzSearchServiceUpdateSettings settings) {
            var baseCommand = "az search service update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--partition-count", settings.PartitionCount);
            AppendIfNonNull(ref baseCommand, "--replica-count", settings.ReplicaCount);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security alert list".
        /// List security alerts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityAlert")]
        public static dynamic AzSecurityAlertList(this ICakeContext context, AzSecurityAlertListSettings settings) {
            var baseCommand = "az security alert list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security alert show".
        /// Shows a security alert.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityAlert")]
        public static dynamic AzSecurityAlertShow(this ICakeContext context, AzSecurityAlertShowSettings settings) {
            var baseCommand = "az security alert show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security alert update".
        /// Updates a security alert status.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityAlert")]
        public static dynamic AzSecurityAlertUpdate(this ICakeContext context, AzSecurityAlertUpdateSettings settings) {
            var baseCommand = "az security alert update";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security auto-provisioning-setting list".
        /// List the auto provisioning settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityAutoProvisioningSetting")]
        public static dynamic AzSecurityAutoProvisioningSettingList(this ICakeContext context, AzSecurityAutoProvisioningSettingListSettings settings) {
            var baseCommand = "az security auto-provisioning-setting list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security auto-provisioning-setting show".
        /// Shows an auto provisioning setting.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityAutoProvisioningSetting")]
        public static dynamic AzSecurityAutoProvisioningSettingShow(this ICakeContext context, AzSecurityAutoProvisioningSettingShowSettings settings) {
            var baseCommand = "az security auto-provisioning-setting show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security auto-provisioning-setting update".
        /// Updates your automatic provisioning settings on the subscription.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityAutoProvisioningSetting")]
        public static dynamic AzSecurityAutoProvisioningSettingUpdate(this ICakeContext context, AzSecurityAutoProvisioningSettingUpdateSettings settings) {
            var baseCommand = "az security auto-provisioning-setting update";
            AppendIfNonNull(ref baseCommand, "--auto-provision", settings.AutoProvision);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security contact create".
        /// Creates a security contact.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityContact")]
        public static dynamic AzSecurityContactCreate(this ICakeContext context, AzSecurityContactCreateSettings settings) {
            var baseCommand = "az security contact create";
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--alert-notifications", settings.AlertNotifications);
            AppendIfNonNull(ref baseCommand, "--alerts-admins", settings.AlertsAdmins);
            AppendIfNonNull(ref baseCommand, "--phone", settings.Phone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security contact delete".
        /// Deletes a security contact.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityContact")]
        public static dynamic AzSecurityContactDelete(this ICakeContext context, AzSecurityContactDeleteSettings settings) {
            var baseCommand = "az security contact delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security contact list".
        /// List security contact.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityContact")]
        public static dynamic AzSecurityContactList(this ICakeContext context, AzSecurityContactListSettings settings) {
            var baseCommand = "az security contact list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security contact show".
        /// Shows a security contact.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityContact")]
        public static dynamic AzSecurityContactShow(this ICakeContext context, AzSecurityContactShowSettings settings) {
            var baseCommand = "az security contact show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security discovered-security-solution list".
        /// List the discovered security solutions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityDiscoveredSecuritySolution")]
        public static dynamic AzSecurityDiscoveredSecuritySolutionList(this ICakeContext context, AzSecurityDiscoveredSecuritySolutionListSettings settings) {
            var baseCommand = "az security discovered-security-solution list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security discovered-security-solution show".
        /// Shows a discovered security solution.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityDiscoveredSecuritySolution")]
        public static dynamic AzSecurityDiscoveredSecuritySolutionShow(this ICakeContext context, AzSecurityDiscoveredSecuritySolutionShowSettings settings) {
            var baseCommand = "az security discovered-security-solution show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security external-security-solution list".
        /// List the external security solutions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityExternalSecuritySolution")]
        public static dynamic AzSecurityExternalSecuritySolutionList(this ICakeContext context, AzSecurityExternalSecuritySolutionListSettings settings) {
            var baseCommand = "az security external-security-solution list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security external-security-solution show".
        /// Shows an external security solution.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityExternalSecuritySolution")]
        public static dynamic AzSecurityExternalSecuritySolutionShow(this ICakeContext context, AzSecurityExternalSecuritySolutionShowSettings settings) {
            var baseCommand = "az security external-security-solution show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security jit-policy list".
        /// List your Just in Time network access policies.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityJitPolicy")]
        public static dynamic AzSecurityJitPolicyList(this ICakeContext context, AzSecurityJitPolicyListSettings settings) {
            var baseCommand = "az security jit-policy list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security jit-policy show".
        /// Shows a Just in Time network access policy.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityJitPolicy")]
        public static dynamic AzSecurityJitPolicyShow(this ICakeContext context, AzSecurityJitPolicyShowSettings settings) {
            var baseCommand = "az security jit-policy show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security location list".
        /// Shows the Azure Security Center Home region location.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityLocation")]
        public static dynamic AzSecurityLocationList(this ICakeContext context, AzSecurityLocationListSettings settings) {
            var baseCommand = "az security location list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security location show".
        /// Shows the Azure Security Center Home region location.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityLocation")]
        public static dynamic AzSecurityLocationShow(this ICakeContext context, AzSecurityLocationShowSettings settings) {
            var baseCommand = "az security location show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security pricing create".
        /// Updates the Azure Security Center Pricing tier for the subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityPricing")]
        public static dynamic AzSecurityPricingCreate(this ICakeContext context, AzSecurityPricingCreateSettings settings) {
            var baseCommand = "az security pricing create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security pricing list".
        /// Shows the Azure Security Center Pricing tier for the subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityPricing")]
        public static dynamic AzSecurityPricingList(this ICakeContext context, AzSecurityPricingListSettings settings) {
            var baseCommand = "az security pricing list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security pricing show".
        /// Shows the Azure Security Center Pricing tier for the subscription.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityPricing")]
        public static dynamic AzSecurityPricingShow(this ICakeContext context, AzSecurityPricingShowSettings settings) {
            var baseCommand = "az security pricing show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security setting list".
        /// List security settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecuritySetting")]
        public static dynamic AzSecuritySettingList(this ICakeContext context, AzSecuritySettingListSettings settings) {
            var baseCommand = "az security setting list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security setting show".
        /// Shows a security setting.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecuritySetting")]
        public static dynamic AzSecuritySettingShow(this ICakeContext context, AzSecuritySettingShowSettings settings) {
            var baseCommand = "az security setting show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security task list".
        /// List security tasks (recommendations).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityTask")]
        public static dynamic AzSecurityTaskList(this ICakeContext context, AzSecurityTaskListSettings settings) {
            var baseCommand = "az security task list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security task show".
        /// Shows a security task (recommendation).  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityTask")]
        public static dynamic AzSecurityTaskShow(this ICakeContext context, AzSecurityTaskShowSettings settings) {
            var baseCommand = "az security task show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security topology list".
        /// Shows the network topology in your subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityTopology")]
        public static dynamic AzSecurityTopologyList(this ICakeContext context, AzSecurityTopologyListSettings settings) {
            var baseCommand = "az security topology list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security topology show".
        /// Shows the network topology in your subscription.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityTopology")]
        public static dynamic AzSecurityTopologyShow(this ICakeContext context, AzSecurityTopologyShowSettings settings) {
            var baseCommand = "az security topology show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security workspace-setting create".
        /// Creates a workspace settings in your subscription - these settings let you control which workspace will hold your security data.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityWorkspaceSetting")]
        public static dynamic AzSecurityWorkspaceSettingCreate(this ICakeContext context, AzSecurityWorkspaceSettingCreateSettings settings) {
            var baseCommand = "az security workspace-setting create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--target-workspace", settings.TargetWorkspace);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security workspace-setting delete".
        /// Deletes the workspace settings in your subscription - this will make the security events on the subscription be reported to the default workspace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityWorkspaceSetting")]
        public static dynamic AzSecurityWorkspaceSettingDelete(this ICakeContext context, AzSecurityWorkspaceSettingDeleteSettings settings) {
            var baseCommand = "az security workspace-setting delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security workspace-setting list".
        /// Shows the workspace settings in your subscription - these settings let you control which workspace will hold your security data.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityWorkspaceSetting")]
        public static dynamic AzSecurityWorkspaceSettingList(this ICakeContext context, AzSecurityWorkspaceSettingListSettings settings) {
            var baseCommand = "az security workspace-setting list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az security workspace-setting show".
        /// Shows the workspace settings in your subscription - these settings let you control which workspace will hold your security data.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityWorkspaceSetting")]
        public static dynamic AzSecurityWorkspaceSettingShow(this ICakeContext context, AzSecurityWorkspaceSettingShowSettings settings) {
            var baseCommand = "az security workspace-setting show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus georecovery-alias break-pair".
        /// Disables Service Bus Geo-Disaster Recovery Configuration Alias and stops replicating changes from primary to secondary namespaces.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public static dynamic AzServicebusGeorecoveryAliasBreakPair(this ICakeContext context, AzServicebusGeorecoveryAliasBreakPairSettings settings) {
            var baseCommand = "az servicebus georecovery-alias break-pair";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus georecovery-alias delete".
        /// Deletes Service Bus Geo-Disaster Recovery Configuration Alias request accepted.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public static dynamic AzServicebusGeorecoveryAliasDelete(this ICakeContext context, AzServicebusGeorecoveryAliasDeleteSettings settings) {
            var baseCommand = "az servicebus georecovery-alias delete";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus georecovery-alias exists".
        /// Check if Geo Recovery Alias Name is available.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public static dynamic AzServicebusGeorecoveryAliasExists(this ICakeContext context, AzServicebusGeorecoveryAliasExistsSettings settings) {
            var baseCommand = "az servicebus georecovery-alias exists";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus georecovery-alias fail-over".
        /// Invokes Service Bus Geo-Disaster Recovery Configuration Alias failover and re-configure the alias to point to the secondary namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public static dynamic AzServicebusGeorecoveryAliasFailOver(this ICakeContext context, AzServicebusGeorecoveryAliasFailOverSettings settings) {
            var baseCommand = "az servicebus georecovery-alias fail-over";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus georecovery-alias list".
        /// Gets all Alias(Disaster Recovery configurations).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public static dynamic AzServicebusGeorecoveryAliasList(this ICakeContext context, AzServicebusGeorecoveryAliasListSettings settings) {
            var baseCommand = "az servicebus georecovery-alias list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus georecovery-alias set".
        /// Sets Service Bus Geo-Disaster Recovery Configuration Alias for the give Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public static dynamic AzServicebusGeorecoveryAliasSet(this ICakeContext context, AzServicebusGeorecoveryAliasSetSettings settings) {
            var baseCommand = "az servicebus georecovery-alias set";
            AppendIfNonNull(ref baseCommand, "--partner-namespace", settings.PartnerNamespace);
            AppendIfNonNull(ref baseCommand, "--alternate-name", settings.AlternateName);
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus georecovery-alias show".
        /// Shows properties of Service Bus Geo-Disaster Recovery Configuration Alias for Primay/Secondary Namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public static dynamic AzServicebusGeorecoveryAliasShow(this ICakeContext context, AzServicebusGeorecoveryAliasShowSettings settings) {
            var baseCommand = "az servicebus georecovery-alias show";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus georecovery-alias authorization-rule list".
        /// Shows the list of Authorization Rule by Service Bus Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAliasAuthorizationRule")]
        public static dynamic AzServicebusGeorecoveryAliasAuthorizationRuleList(this ICakeContext context, AzServicebusGeorecoveryAliasAuthorizationRuleListSettings settings) {
            var baseCommand = "az servicebus georecovery-alias authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus georecovery-alias authorization-rule show".
        /// Gets an authorization rule for a namespace by rule name.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAliasAuthorizationRule")]
        public static dynamic AzServicebusGeorecoveryAliasAuthorizationRuleShow(this ICakeContext context, AzServicebusGeorecoveryAliasAuthorizationRuleShowSettings settings) {
            var baseCommand = "az servicebus georecovery-alias authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus georecovery-alias authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for the Service Bus Namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAliasAuthorizationRuleKeys")]
        public static dynamic AzServicebusGeorecoveryAliasAuthorizationRuleKeysList(this ICakeContext context, AzServicebusGeorecoveryAliasAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az servicebus georecovery-alias authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus migration abort".
        /// Disable the Service Bus Migration of Standard to Premium namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusMigration")]
        public static dynamic AzServicebusMigrationAbort(this ICakeContext context, AzServicebusMigrationAbortSettings settings) {
            var baseCommand = "az servicebus migration abort";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus migration complete".
        /// Completes the Service Bus Migration of Standard to Premium namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusMigration")]
        public static dynamic AzServicebusMigrationComplete(this ICakeContext context, AzServicebusMigrationCompleteSettings settings) {
            var baseCommand = "az servicebus migration complete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus migration show".
        /// Shows properties of properties of Service Bus Migration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusMigration")]
        public static dynamic AzServicebusMigrationShow(this ICakeContext context, AzServicebusMigrationShowSettings settings) {
            var baseCommand = "az servicebus migration show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus migration start".
        /// Create and Start Service Bus Migration of Standard to Premium namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusMigration")]
        public static dynamic AzServicebusMigrationStart(this ICakeContext context, AzServicebusMigrationStartSettings settings) {
            var baseCommand = "az servicebus migration start";
            AppendIfNonNull(ref baseCommand, "--post-migration-name", settings.PostMigrationName);
            AppendIfNonNull(ref baseCommand, "--target-namespace", settings.TargetNamespace);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace create".
        /// Create a Service Bus Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespace")]
        public static dynamic AzServicebusNamespaceCreate(this ICakeContext context, AzServicebusNamespaceCreateSettings settings) {
            var baseCommand = "az servicebus namespace create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace delete".
        /// Deletes the Service Bus Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespace")]
        public static dynamic AzServicebusNamespaceDelete(this ICakeContext context, AzServicebusNamespaceDeleteSettings settings) {
            var baseCommand = "az servicebus namespace delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace exists".
        /// Check for the availability of the given name for the Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespace")]
        public static dynamic AzServicebusNamespaceExists(this ICakeContext context, AzServicebusNamespaceExistsSettings settings) {
            var baseCommand = "az servicebus namespace exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace list".
        /// List the Service Bus Namespaces.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespace")]
        public static dynamic AzServicebusNamespaceList(this ICakeContext context, AzServicebusNamespaceListSettings settings) {
            var baseCommand = "az servicebus namespace list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace show".
        /// Shows the Service Bus Namespace details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespace")]
        public static dynamic AzServicebusNamespaceShow(this ICakeContext context, AzServicebusNamespaceShowSettings settings) {
            var baseCommand = "az servicebus namespace show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace update".
        /// Updates a Service Bus Namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespace")]
        public static dynamic AzServicebusNamespaceUpdate(this ICakeContext context, AzServicebusNamespaceUpdateSettings settings) {
            var baseCommand = "az servicebus namespace update";
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule create".
        /// Create Authorization Rule for the given Service Bus Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRule")]
        public static dynamic AzServicebusNamespaceAuthorizationRuleCreate(this ICakeContext context, AzServicebusNamespaceAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule delete".
        /// Deletes the Authorization Rule of the Service Bus Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRule")]
        public static dynamic AzServicebusNamespaceAuthorizationRuleDelete(this ICakeContext context, AzServicebusNamespaceAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule list".
        /// Shows the list of Authorization Rule by Service Bus Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRule")]
        public static dynamic AzServicebusNamespaceAuthorizationRuleList(this ICakeContext context, AzServicebusNamespaceAuthorizationRuleListSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule show".
        /// Shows the details of Service Bus Namespace Authorization Rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRule")]
        public static dynamic AzServicebusNamespaceAuthorizationRuleShow(this ICakeContext context, AzServicebusNamespaceAuthorizationRuleShowSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule update".
        /// Updates Authorization Rule for the given Service Bus Namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRule")]
        public static dynamic AzServicebusNamespaceAuthorizationRuleUpdate(this ICakeContext context, AzServicebusNamespaceAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for Service Bus Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRuleKeys")]
        public static dynamic AzServicebusNamespaceAuthorizationRuleKeysList(this ICakeContext context, AzServicebusNamespaceAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule keys renew".
        /// Regenerate keys of Authorization Rule for the Service Bus Namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRuleKeys")]
        public static dynamic AzServicebusNamespaceAuthorizationRuleKeysRenew(this ICakeContext context, AzServicebusNamespaceAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace network-rule add".
        /// Add a network rule for a namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceNetworkRule")]
        public static dynamic AzServicebusNamespaceNetworkRuleAdd(this ICakeContext context, AzServicebusNamespaceNetworkRuleAddSettings settings) {
            var baseCommand = "az servicebus namespace network-rule add";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace network-rule list".
        /// Show properties of Network rule of the given Namespace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceNetworkRule")]
        public static dynamic AzServicebusNamespaceNetworkRuleList(this ICakeContext context, AzServicebusNamespaceNetworkRuleListSettings settings) {
            var baseCommand = "az servicebus namespace network-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus namespace network-rule remove".
        /// Remove network rule for a namespace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceNetworkRule")]
        public static dynamic AzServicebusNamespaceNetworkRuleRemove(this ICakeContext context, AzServicebusNamespaceNetworkRuleRemoveSettings settings) {
            var baseCommand = "az servicebus namespace network-rule remove";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus queue create".
        /// Create the Service Bus Queue.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueue")]
        public static dynamic AzServicebusQueueCreate(this ICakeContext context, AzServicebusQueueCreateSettings settings) {
            var baseCommand = "az servicebus queue create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--auto-delete-on-idle", settings.AutoDeleteOnIdle);
            AppendIfNonNull(ref baseCommand, "--default-message-time-to-live", settings.DefaultMessageTimeToLive);
            AppendIfNonNull(ref baseCommand, "--duplicate-detection-history-time-window", settings.DuplicateDetectionHistoryTimeWindow);
            AppendIfNonNull(ref baseCommand, "--enable-batched-operations", settings.EnableBatchedOperations);
            AppendIfNonNull(ref baseCommand, "--enable-dead-lettering-on-message-expiration", settings.EnableDeadLetteringOnMessageExpiration);
            AppendIfNonNull(ref baseCommand, "--enable-duplicate-detection", settings.EnableDuplicateDetection);
            AppendIfNonNull(ref baseCommand, "--enable-express", settings.EnableExpress);
            AppendIfNonNull(ref baseCommand, "--enable-partitioning", settings.EnablePartitioning);
            AppendIfNonNull(ref baseCommand, "--enable-session", settings.EnableSession);
            AppendIfNonNull(ref baseCommand, "--forward-dead-lettered-messages-to", settings.ForwardDeadLetteredMessagesTo);
            AppendIfNonNull(ref baseCommand, "--forward-to", settings.ForwardTo);
            AppendIfNonNull(ref baseCommand, "--lock-duration", settings.LockDuration);
            AppendIfNonNull(ref baseCommand, "--max-delivery-count", settings.MaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus queue delete".
        /// Deletes the Service Bus Queue.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueue")]
        public static dynamic AzServicebusQueueDelete(this ICakeContext context, AzServicebusQueueDeleteSettings settings) {
            var baseCommand = "az servicebus queue delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus queue list".
        /// List the Queue by Service Bus Namepsace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueue")]
        public static dynamic AzServicebusQueueList(this ICakeContext context, AzServicebusQueueListSettings settings) {
            var baseCommand = "az servicebus queue list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus queue show".
        /// Shows the Service Bus Queue Details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueue")]
        public static dynamic AzServicebusQueueShow(this ICakeContext context, AzServicebusQueueShowSettings settings) {
            var baseCommand = "az servicebus queue show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus queue update".
        /// Updates existing Service Bus Queue.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueue")]
        public static dynamic AzServicebusQueueUpdate(this ICakeContext context, AzServicebusQueueUpdateSettings settings) {
            var baseCommand = "az servicebus queue update";
            AppendIfNonNull(ref baseCommand, "--auto-delete-on-idle", settings.AutoDeleteOnIdle);
            AppendIfNonNull(ref baseCommand, "--default-message-time-to-live", settings.DefaultMessageTimeToLive);
            AppendIfNonNull(ref baseCommand, "--duplicate-detection-history-time-window", settings.DuplicateDetectionHistoryTimeWindow);
            AppendIfNonNull(ref baseCommand, "--enable-batched-operations", settings.EnableBatchedOperations);
            AppendIfNonNull(ref baseCommand, "--enable-dead-lettering-on-message-expiration", settings.EnableDeadLetteringOnMessageExpiration);
            AppendIfNonNull(ref baseCommand, "--enable-duplicate-detection", settings.EnableDuplicateDetection);
            AppendIfNonNull(ref baseCommand, "--enable-express", settings.EnableExpress);
            AppendIfNonNull(ref baseCommand, "--enable-partitioning", settings.EnablePartitioning);
            AppendIfNonNull(ref baseCommand, "--enable-session", settings.EnableSession);
            AppendIfNonNull(ref baseCommand, "--forward-dead-lettered-messages-to", settings.ForwardDeadLetteredMessagesTo);
            AppendIfNonNull(ref baseCommand, "--forward-to", settings.ForwardTo);
            AppendIfNonNull(ref baseCommand, "--lock-duration", settings.LockDuration);
            AppendIfNonNull(ref baseCommand, "--max-delivery-count", settings.MaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule create".
        /// Create Authorization Rule for the given Service Bus Queue.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRule")]
        public static dynamic AzServicebusQueueAuthorizationRuleCreate(this ICakeContext context, AzServicebusQueueAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule delete".
        /// Delete the Authorization Rule of Service Bus Queue.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRule")]
        public static dynamic AzServicebusQueueAuthorizationRuleDelete(this ICakeContext context, AzServicebusQueueAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule list".
        /// List of Authorization Rule by Service Bus Queue.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRule")]
        public static dynamic AzServicebusQueueAuthorizationRuleList(this ICakeContext context, AzServicebusQueueAuthorizationRuleListSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule show".
        /// Show properties of Authorization Rule for the given Service Bus Queue.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRule")]
        public static dynamic AzServicebusQueueAuthorizationRuleShow(this ICakeContext context, AzServicebusQueueAuthorizationRuleShowSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule update".
        /// Update Authorization Rule for the given Service Bus Queue.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRule")]
        public static dynamic AzServicebusQueueAuthorizationRuleUpdate(this ICakeContext context, AzServicebusQueueAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for the given Service Bus Queue.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRuleKeys")]
        public static dynamic AzServicebusQueueAuthorizationRuleKeysList(this ICakeContext context, AzServicebusQueueAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule keys renew".
        /// Regenerate keys of Authorization Rule for Service Bus Queue.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRuleKeys")]
        public static dynamic AzServicebusQueueAuthorizationRuleKeysRenew(this ICakeContext context, AzServicebusQueueAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic create".
        /// Create the Service Bus Topic.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopic")]
        public static dynamic AzServicebusTopicCreate(this ICakeContext context, AzServicebusTopicCreateSettings settings) {
            var baseCommand = "az servicebus topic create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--auto-delete-on-idle", settings.AutoDeleteOnIdle);
            AppendIfNonNull(ref baseCommand, "--default-message-time-to-live", settings.DefaultMessageTimeToLive);
            AppendIfNonNull(ref baseCommand, "--duplicate-detection-history-time-window", settings.DuplicateDetectionHistoryTimeWindow);
            AppendIfNonNull(ref baseCommand, "--enable-batched-operations", settings.EnableBatchedOperations);
            AppendIfNonNull(ref baseCommand, "--enable-duplicate-detection", settings.EnableDuplicateDetection);
            AppendIfNonNull(ref baseCommand, "--enable-express", settings.EnableExpress);
            AppendIfNonNull(ref baseCommand, "--enable-ordering", settings.EnableOrdering);
            AppendIfNonNull(ref baseCommand, "--enable-partitioning", settings.EnablePartitioning);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic delete".
        /// Deletes the Service Bus Topic.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopic")]
        public static dynamic AzServicebusTopicDelete(this ICakeContext context, AzServicebusTopicDeleteSettings settings) {
            var baseCommand = "az servicebus topic delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic list".
        /// List the Topic by Service Bus Namepsace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopic")]
        public static dynamic AzServicebusTopicList(this ICakeContext context, AzServicebusTopicListSettings settings) {
            var baseCommand = "az servicebus topic list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic show".
        /// Shows the Service Bus Topic Details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopic")]
        public static dynamic AzServicebusTopicShow(this ICakeContext context, AzServicebusTopicShowSettings settings) {
            var baseCommand = "az servicebus topic show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic update".
        /// Updates the Service Bus Topic.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopic")]
        public static dynamic AzServicebusTopicUpdate(this ICakeContext context, AzServicebusTopicUpdateSettings settings) {
            var baseCommand = "az servicebus topic update";
            AppendIfNonNull(ref baseCommand, "--auto-delete-on-idle", settings.AutoDeleteOnIdle);
            AppendIfNonNull(ref baseCommand, "--default-message-time-to-live", settings.DefaultMessageTimeToLive);
            AppendIfNonNull(ref baseCommand, "--duplicate-detection-history-time-window", settings.DuplicateDetectionHistoryTimeWindow);
            AppendIfNonNull(ref baseCommand, "--enable-batched-operations", settings.EnableBatchedOperations);
            AppendIfNonNull(ref baseCommand, "--enable-duplicate-detection", settings.EnableDuplicateDetection);
            AppendIfNonNull(ref baseCommand, "--enable-express", settings.EnableExpress);
            AppendIfNonNull(ref baseCommand, "--enable-ordering", settings.EnableOrdering);
            AppendIfNonNull(ref baseCommand, "--enable-partitioning", settings.EnablePartitioning);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule create".
        /// Create Authorization Rule for given Service Bus Topic.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRule")]
        public static dynamic AzServicebusTopicAuthorizationRuleCreate(this ICakeContext context, AzServicebusTopicAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule delete".
        /// Deletes the Authorization Rule of the given Service Bus Topic.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRule")]
        public static dynamic AzServicebusTopicAuthorizationRuleDelete(this ICakeContext context, AzServicebusTopicAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule list".
        /// Shows list of Authorization Rule by Service Bus Topic.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRule")]
        public static dynamic AzServicebusTopicAuthorizationRuleList(this ICakeContext context, AzServicebusTopicAuthorizationRuleListSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule show".
        /// Shows the details of Authorization Rule for given Service Bus Topic.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRule")]
        public static dynamic AzServicebusTopicAuthorizationRuleShow(this ICakeContext context, AzServicebusTopicAuthorizationRuleShowSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule update".
        /// Create Authorization Rule for given Service Bus Topic.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRule")]
        public static dynamic AzServicebusTopicAuthorizationRuleUpdate(this ICakeContext context, AzServicebusTopicAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for Service Bus Topic.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRuleKeys")]
        public static dynamic AzServicebusTopicAuthorizationRuleKeysList(this ICakeContext context, AzServicebusTopicAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule keys renew".
        /// Regenerate keys of Authorization Rule for Service Bus Topic.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRuleKeys")]
        public static dynamic AzServicebusTopicAuthorizationRuleKeysRenew(this ICakeContext context, AzServicebusTopicAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic subscription create".
        /// Create the ServiceBus Subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscription")]
        public static dynamic AzServicebusTopicSubscriptionCreate(this ICakeContext context, AzServicebusTopicSubscriptionCreateSettings settings) {
            var baseCommand = "az servicebus topic subscription create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--auto-delete-on-idle", settings.AutoDeleteOnIdle);
            AppendIfNonNull(ref baseCommand, "--dead-letter-on-filter-exceptions", settings.DeadLetterOnFilterExceptions);
            AppendIfNonNull(ref baseCommand, "--default-message-time-to-live", settings.DefaultMessageTimeToLive);
            AppendIfNonNull(ref baseCommand, "--enable-batched-operations", settings.EnableBatchedOperations);
            AppendIfNonNull(ref baseCommand, "--enable-dead-lettering-on-message-expiration", settings.EnableDeadLetteringOnMessageExpiration);
            AppendIfNonNull(ref baseCommand, "--enable-session", settings.EnableSession);
            AppendIfNonNull(ref baseCommand, "--forward-dead-lettered-messages-to", settings.ForwardDeadLetteredMessagesTo);
            AppendIfNonNull(ref baseCommand, "--forward-to", settings.ForwardTo);
            AppendIfNonNull(ref baseCommand, "--lock-duration", settings.LockDuration);
            AppendIfNonNull(ref baseCommand, "--max-delivery-count", settings.MaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic subscription delete".
        /// Deletes the Service Bus Subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscription")]
        public static dynamic AzServicebusTopicSubscriptionDelete(this ICakeContext context, AzServicebusTopicSubscriptionDeleteSettings settings) {
            var baseCommand = "az servicebus topic subscription delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic subscription list".
        /// List the Subscription by Service Bus Topic.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscription")]
        public static dynamic AzServicebusTopicSubscriptionList(this ICakeContext context, AzServicebusTopicSubscriptionListSettings settings) {
            var baseCommand = "az servicebus topic subscription list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic subscription show".
        /// Shows Service Bus Subscription Details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscription")]
        public static dynamic AzServicebusTopicSubscriptionShow(this ICakeContext context, AzServicebusTopicSubscriptionShowSettings settings) {
            var baseCommand = "az servicebus topic subscription show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic subscription update".
        /// Updates the ServiceBus Subscription.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscription")]
        public static dynamic AzServicebusTopicSubscriptionUpdate(this ICakeContext context, AzServicebusTopicSubscriptionUpdateSettings settings) {
            var baseCommand = "az servicebus topic subscription update";
            AppendIfNonNull(ref baseCommand, "--auto-delete-on-idle", settings.AutoDeleteOnIdle);
            AppendIfNonNull(ref baseCommand, "--dead-letter-on-filter-exceptions", settings.DeadLetterOnFilterExceptions);
            AppendIfNonNull(ref baseCommand, "--default-message-time-to-live", settings.DefaultMessageTimeToLive);
            AppendIfNonNull(ref baseCommand, "--enable-batched-operations", settings.EnableBatchedOperations);
            AppendIfNonNull(ref baseCommand, "--enable-dead-lettering-on-message-expiration", settings.EnableDeadLetteringOnMessageExpiration);
            AppendIfNonNull(ref baseCommand, "--enable-session", settings.EnableSession);
            AppendIfNonNull(ref baseCommand, "--forward-dead-lettered-messages-to", settings.ForwardDeadLetteredMessagesTo);
            AppendIfNonNull(ref baseCommand, "--forward-to", settings.ForwardTo);
            AppendIfNonNull(ref baseCommand, "--lock-duration", settings.LockDuration);
            AppendIfNonNull(ref baseCommand, "--max-delivery-count", settings.MaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic subscription rule create".
        /// Create the ServiceBus Rule for Subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscriptionRule")]
        public static dynamic AzServicebusTopicSubscriptionRuleCreate(this ICakeContext context, AzServicebusTopicSubscriptionRuleCreateSettings settings) {
            var baseCommand = "az servicebus topic subscription rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription-name", settings.SubscriptionName);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--action-compatibility-level", settings.ActionCompatibilityLevel);
            AppendIfNonNull(ref baseCommand, "--action-sql-expression", settings.ActionSqlExpression);
            AppendIfNonNull(ref baseCommand, "--enable-action-preprocessing", settings.EnableActionPreprocessing);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--correlation-id", settings.CorrelationId);
            AppendIfNonNull(ref baseCommand, "--enable-correlation-preprocessing", settings.EnableCorrelationPreprocessing);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--message-id", settings.MessageId);
            AppendIfNonNull(ref baseCommand, "--reply-to", settings.ReplyTo);
            AppendIfNonNull(ref baseCommand, "--reply-to-session-id", settings.ReplyToSessionId);
            AppendIfNonNull(ref baseCommand, "--session-id", settings.SessionId);
            AppendIfNonNull(ref baseCommand, "--to", settings.To);
            AppendIfNonNull(ref baseCommand, "--enable-sql-preprocessing", settings.EnableSqlPreprocessing);
            AppendIfNonNull(ref baseCommand, "--filter-sql-expression", settings.FilterSqlExpression);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic subscription rule delete".
        /// Deletes the ServiceBus Rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscriptionRule")]
        public static dynamic AzServicebusTopicSubscriptionRuleDelete(this ICakeContext context, AzServicebusTopicSubscriptionRuleDeleteSettings settings) {
            var baseCommand = "az servicebus topic subscription rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--subscription-name", settings.SubscriptionName);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic subscription rule list".
        /// List the ServiceBus Rule by Subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscriptionRule")]
        public static dynamic AzServicebusTopicSubscriptionRuleList(this ICakeContext context, AzServicebusTopicSubscriptionRuleListSettings settings) {
            var baseCommand = "az servicebus topic subscription rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription-name", settings.SubscriptionName);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic subscription rule show".
        /// Shows ServiceBus Rule Details.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscriptionRule")]
        public static dynamic AzServicebusTopicSubscriptionRuleShow(this ICakeContext context, AzServicebusTopicSubscriptionRuleShowSettings settings) {
            var baseCommand = "az servicebus topic subscription rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--subscription-name", settings.SubscriptionName);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az servicebus topic subscription rule update".
        /// Updates the ServiceBus Rule for Subscription.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscriptionRule")]
        public static dynamic AzServicebusTopicSubscriptionRuleUpdate(this ICakeContext context, AzServicebusTopicSubscriptionRuleUpdateSettings settings) {
            var baseCommand = "az servicebus topic subscription rule update";
            AppendIfNonNull(ref baseCommand, "--action-compatibility-level", settings.ActionCompatibilityLevel);
            AppendIfNonNull(ref baseCommand, "--action-sql-expression", settings.ActionSqlExpression);
            AppendIfNonNull(ref baseCommand, "--enable-action-preprocessing", settings.EnableActionPreprocessing);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--correlation-id", settings.CorrelationId);
            AppendIfNonNull(ref baseCommand, "--enable-correlation-preprocessing", settings.EnableCorrelationPreprocessing);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--message-id", settings.MessageId);
            AppendIfNonNull(ref baseCommand, "--reply-to", settings.ReplyTo);
            AppendIfNonNull(ref baseCommand, "--reply-to-session-id", settings.ReplyToSessionId);
            AppendIfNonNull(ref baseCommand, "--session-id", settings.SessionId);
            AppendIfNonNull(ref baseCommand, "--to", settings.To);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--subscription-name", settings.SubscriptionName);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--enable-sql-preprocessing", settings.EnableSqlPreprocessing);
            AppendIfNonNull(ref baseCommand, "--filter-sql-expression", settings.FilterSqlExpression);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf application certificate add".
        /// Add a new certificate to the Virtual Machine Scale Sets that make up the cluster to be used by hosted applications.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfApplicationCertificate")]
        public static dynamic AzSfApplicationCertificateAdd(this ICakeContext context, AzSfApplicationCertificateAddSettings settings) {
            var baseCommand = "az sf application certificate add";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--certificate-file", settings.CertificateFile);
            AppendIfNonNull(ref baseCommand, "--certificate-output-folder", settings.CertificateOutputFolder);
            AppendIfNonNull(ref baseCommand, "--certificate-password", settings.CertificatePassword);
            AppendIfNonNull(ref baseCommand, "--certificate-subject-name", settings.CertificateSubjectName);
            AppendIfNonNull(ref baseCommand, "--secret-identifier", settings.SecretIdentifier);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--vault-resource-group", settings.VaultResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster create".
        /// Create a new Azure Service Fabric cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfCluster")]
        public static dynamic AzSfClusterCreate(this ICakeContext context, AzSfClusterCreateSettings settings) {
            var baseCommand = "az sf cluster create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--certificate-file", settings.CertificateFile);
            AppendIfNonNull(ref baseCommand, "--certificate-output-folder", settings.CertificateOutputFolder);
            AppendIfNonNull(ref baseCommand, "--certificate-password", settings.CertificatePassword);
            AppendIfNonNull(ref baseCommand, "--certificate-subject-name", settings.CertificateSubjectName);
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--cluster-size", settings.ClusterSize);
            AppendIfNonNull(ref baseCommand, "--os", settings.Os);
            AppendIfNonNull(ref baseCommand, "--parameter-file", settings.ParameterFile);
            AppendIfNonNull(ref baseCommand, "--secret-identifier", settings.SecretIdentifier);
            AppendIfNonNull(ref baseCommand, "--template-file", settings.TemplateFile);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--vault-resource-group", settings.VaultResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-password", settings.VmPassword);
            AppendIfNonNull(ref baseCommand, "--vm-sku", settings.VmSku);
            AppendIfNonNull(ref baseCommand, "--vm-user-name", settings.VmUserName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster list".
        /// List cluster resources.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfCluster")]
        public static dynamic AzSfClusterList(this ICakeContext context, AzSfClusterListSettings settings) {
            var baseCommand = "az sf cluster list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster show".
        /// Get cluster resource.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfCluster")]
        public static dynamic AzSfClusterShow(this ICakeContext context, AzSfClusterShowSettings settings) {
            var baseCommand = "az sf cluster show";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster certificate add".
        /// Add a secondary cluster certificate to the cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterCertificate")]
        public static dynamic AzSfClusterCertificateAdd(this ICakeContext context, AzSfClusterCertificateAddSettings settings) {
            var baseCommand = "az sf cluster certificate add";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--certificate-file", settings.CertificateFile);
            AppendIfNonNull(ref baseCommand, "--certificate-output-folder", settings.CertificateOutputFolder);
            AppendIfNonNull(ref baseCommand, "--certificate-password", settings.CertificatePassword);
            AppendIfNonNull(ref baseCommand, "--certificate-subject-name", settings.CertificateSubjectName);
            AppendIfNonNull(ref baseCommand, "--secret-identifier", settings.SecretIdentifier);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--vault-resource-group", settings.VaultResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster certificate remove".
        /// Remove a certificate from a cluster.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterCertificate")]
        public static dynamic AzSfClusterCertificateRemove(this ICakeContext context, AzSfClusterCertificateRemoveSettings settings) {
            var baseCommand = "az sf cluster certificate remove";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--thumbprint", settings.Thumbprint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster client-certificate add".
        /// Add a common name or certificate thumbprint to the cluster for client authentication.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterClientCertificate")]
        public static dynamic AzSfClusterClientCertificateAdd(this ICakeContext context, AzSfClusterClientCertificateAddSettings settings) {
            var baseCommand = "az sf cluster client-certificate add";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--admin-client-thumbprints", settings.AdminClientThumbprints);
            AppendIfNonNull(ref baseCommand, "--certificate-common-name", settings.CertificateCommonName);
            AppendIfNonNull(ref baseCommand, "--certificate-issuer-thumbprint", settings.CertificateIssuerThumbprint);
            AppendIfNonNull(ref baseCommand, "--client-certificate-common-names", settings.ClientCertificateCommonNames);
            AppendIfNonNull(ref baseCommand, "--is-admin", settings.IsAdmin);
            AppendIfNonNull(ref baseCommand, "--readonly-client-thumbprints", settings.ReadonlyClientThumbprints);
            AppendIfNonNull(ref baseCommand, "--thumbprint", settings.Thumbprint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster client-certificate remove".
        /// Remove client certificates or subject names used for authentication.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterClientCertificate")]
        public static dynamic AzSfClusterClientCertificateRemove(this ICakeContext context, AzSfClusterClientCertificateRemoveSettings settings) {
            var baseCommand = "az sf cluster client-certificate remove";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--certificate-common-name", settings.CertificateCommonName);
            AppendIfNonNull(ref baseCommand, "--certificate-issuer-thumbprint", settings.CertificateIssuerThumbprint);
            AppendIfNonNull(ref baseCommand, "--client-certificate-common-names", settings.ClientCertificateCommonNames);
            AppendIfNonNull(ref baseCommand, "--thumbprints", settings.Thumbprints);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster durability update".
        /// Update the durability tier or VM SKU of a node type in the cluster.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterDurability")]
        public static dynamic AzSfClusterDurabilityUpdate(this ICakeContext context, AzSfClusterDurabilityUpdateSettings settings) {
            var baseCommand = "az sf cluster durability update";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--durability-level", settings.DurabilityLevel);
            AppendIfNonNull(ref baseCommand, "--node-type", settings.NodeType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster node add".
        /// Add nodes to a node type in a cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterNode")]
        public static dynamic AzSfClusterNodeAdd(this ICakeContext context, AzSfClusterNodeAddSettings settings) {
            var baseCommand = "az sf cluster node add";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--node-type", settings.NodeType);
            AppendIfNonNull(ref baseCommand, "--number-of-nodes-to-add", settings.NumberOfNodesToAdd);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster node remove".
        /// Remove nodes from a node type in a cluster.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterNode")]
        public static dynamic AzSfClusterNodeRemove(this ICakeContext context, AzSfClusterNodeRemoveSettings settings) {
            var baseCommand = "az sf cluster node remove";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--node-type", settings.NodeType);
            AppendIfNonNull(ref baseCommand, "--number-of-nodes-to-remove", settings.NumberOfNodesToRemove);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster node-type add".
        /// Add a new node type to a cluster.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterNodeType")]
        public static dynamic AzSfClusterNodeTypeAdd(this ICakeContext context, AzSfClusterNodeTypeAddSettings settings) {
            var baseCommand = "az sf cluster node-type add";
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--node-type", settings.NodeType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-password", settings.VmPassword);
            AppendIfNonNull(ref baseCommand, "--vm-user-name", settings.VmUserName);
            AppendIfNonNull(ref baseCommand, "--durability-level", settings.DurabilityLevel);
            AppendIfNonNull(ref baseCommand, "--vm-sku", settings.VmSku);
            AppendIfNonNull(ref baseCommand, "--vm-tier", settings.VmTier);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster reliability update".
        /// Update the reliability tier for the primary node in a cluster.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterReliability")]
        public static dynamic AzSfClusterReliabilityUpdate(this ICakeContext context, AzSfClusterReliabilityUpdateSettings settings) {
            var baseCommand = "az sf cluster reliability update";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--reliability-level", settings.ReliabilityLevel);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--auto-add-node", settings.AutoAddNode);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster setting remove".
        /// Remove settings from a cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterSetting")]
        public static dynamic AzSfClusterSettingRemove(this ICakeContext context, AzSfClusterSettingRemoveSettings settings) {
            var baseCommand = "az sf cluster setting remove";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--parameter", settings.Parameter);
            AppendIfNonNull(ref baseCommand, "--section", settings.Section);
            AppendIfNonNull(ref baseCommand, "--settings-section-description", settings.SettingsSectionDescription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster setting set".
        /// Update the settings of a cluster.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterSetting")]
        public static dynamic AzSfClusterSettingSet(this ICakeContext context, AzSfClusterSettingSetSettings settings) {
            var baseCommand = "az sf cluster setting set";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--parameter", settings.Parameter);
            AppendIfNonNull(ref baseCommand, "--section", settings.Section);
            AppendIfNonNull(ref baseCommand, "--settings-section-description", settings.SettingsSectionDescription);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sf cluster upgrade-type set".
        /// Change the  upgrade type for a cluster.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterUpgradeType")]
        public static dynamic AzSfClusterUpgradeTypeSet(this ICakeContext context, AzSfClusterUpgradeTypeSetSettings settings) {
            var baseCommand = "az sf cluster upgrade-type set";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--upgrade-mode", settings.UpgradeMode);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig create".
        /// Create a share image gallery.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSig")]
        public static dynamic AzSigCreate(this ICakeContext context, AzSigCreateSettings settings) {
            var baseCommand = "az sig create";
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig delete".
        /// Delete a Shared Image Gallery.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSig")]
        public static dynamic AzSigDelete(this ICakeContext context, AzSigDeleteSettings settings) {
            var baseCommand = "az sig delete";
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig list".
        /// List share image galleries.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSig")]
        public static dynamic AzSigList(this ICakeContext context, AzSigListSettings settings) {
            var baseCommand = "az sig list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig show".
        /// Retrieves information about a Shared Image Gallery.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSig")]
        public static dynamic AzSigShow(this ICakeContext context, AzSigShowSettings settings) {
            var baseCommand = "az sig show";
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig update".
        /// Update a share image gallery.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSig")]
        public static dynamic AzSigUpdate(this ICakeContext context, AzSigUpdateSettings settings) {
            var baseCommand = "az sig update";
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig image-definition create".
        /// Create a gallery image definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageDefinition")]
        public static dynamic AzSigImageDefinitionCreate(this ICakeContext context, AzSigImageDefinitionCreateSettings settings) {
            var baseCommand = "az sig image-definition create";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--disallowed-disk-types", settings.DisallowedDiskTypes);
            AppendIfNonNull(ref baseCommand, "--end-of-life-date", settings.EndOfLifeDate);
            AppendIfNonNull(ref baseCommand, "--eula", settings.Eula);
            AppendIfNonNull(ref baseCommand, "--hyper-v-generation", settings.HyperVGeneration);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--os-state", settings.OsState);
            AppendIfNonNull(ref baseCommand, "--privacy-statement-uri", settings.PrivacyStatementUri);
            AppendIfNonNull(ref baseCommand, "--release-note-uri", settings.ReleaseNoteUri);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--plan-name", settings.PlanName);
            AppendIfNonNull(ref baseCommand, "--plan-product", settings.PlanProduct);
            AppendIfNonNull(ref baseCommand, "--plan-publisher", settings.PlanPublisher);
            AppendIfNonNull(ref baseCommand, "--maximum-cpu-core", settings.MaximumCpuCore);
            AppendIfNonNull(ref baseCommand, "--maximum-memory", settings.MaximumMemory);
            AppendIfNonNull(ref baseCommand, "--minimum-cpu-core", settings.MinimumCpuCore);
            AppendIfNonNull(ref baseCommand, "--minimum-memory", settings.MinimumMemory);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig image-definition delete".
        /// Delete a gallery image.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageDefinition")]
        public static dynamic AzSigImageDefinitionDelete(this ICakeContext context, AzSigImageDefinitionDeleteSettings settings) {
            var baseCommand = "az sig image-definition delete";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig image-definition list".
        /// List gallery Image Definitions in a gallery.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageDefinition")]
        public static dynamic AzSigImageDefinitionList(this ICakeContext context, AzSigImageDefinitionListSettings settings) {
            var baseCommand = "az sig image-definition list";
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig image-definition show".
        /// Retrieves information about a gallery Image Definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageDefinition")]
        public static dynamic AzSigImageDefinitionShow(this ICakeContext context, AzSigImageDefinitionShowSettings settings) {
            var baseCommand = "az sig image-definition show";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig image-definition update".
        /// Update a share image defintiion.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageDefinition")]
        public static dynamic AzSigImageDefinitionUpdate(this ICakeContext context, AzSigImageDefinitionUpdateSettings settings) {
            var baseCommand = "az sig image-definition update";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig image-version create".
        /// Create a new image version.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageVersion")]
        public static dynamic AzSigImageVersionCreate(this ICakeContext context, AzSigImageVersionCreateSettings settings) {
            var baseCommand = "az sig image-version create";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-image-version", settings.GalleryImageVersion);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--data-snapshots", settings.DataSnapshots);
            AppendIfNonNull(ref baseCommand, "--end-of-life-date", settings.EndOfLifeDate);
            AppendIfNonNull(ref baseCommand, "--exclude-from-latest", settings.ExcludeFromLatest);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--managed-image", settings.ManagedImage);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--os-snapshot", settings.OsSnapshot);
            AppendIfNonNull(ref baseCommand, "--replica-count", settings.ReplicaCount);
            AppendIfNonNull(ref baseCommand, "--storage-account-type", settings.StorageAccountType);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--target-regions", settings.TargetRegions);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig image-version delete".
        /// Delete a gallery Image Version.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageVersion")]
        public static dynamic AzSigImageVersionDelete(this ICakeContext context, AzSigImageVersionDeleteSettings settings) {
            var baseCommand = "az sig image-version delete";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-image-version", settings.GalleryImageVersion);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig image-version list".
        /// List gallery Image Versions in a gallery Image Definition.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageVersion")]
        public static dynamic AzSigImageVersionList(this ICakeContext context, AzSigImageVersionListSettings settings) {
            var baseCommand = "az sig image-version list";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig image-version show".
        /// Retrieves information about a gallery Image Version.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageVersion")]
        public static dynamic AzSigImageVersionShow(this ICakeContext context, AzSigImageVersionShowSettings settings) {
            var baseCommand = "az sig image-version show";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-image-version", settings.GalleryImageVersion);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig image-version update".
        /// Update a share image version.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageVersion")]
        public static dynamic AzSigImageVersionUpdate(this ICakeContext context, AzSigImageVersionUpdateSettings settings) {
            var baseCommand = "az sig image-version update";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-image-version", settings.GalleryImageVersion);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--replica-count", settings.ReplicaCount);
            AppendIfNonNull(ref baseCommand, "--target-regions", settings.TargetRegions);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sig image-version wait".
        /// Wait for image version related operation.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageVersion")]
        public static dynamic AzSigImageVersionWait(this ICakeContext context, AzSigImageVersionWaitSettings settings) {
            var baseCommand = "az sig image-version wait";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-image-version", settings.GalleryImageVersion);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az signalr create".
        /// Creates a SignalR Service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalr")]
        public static dynamic AzSignalrCreate(this ICakeContext context, AzSignalrCreateSettings settings) {
            var baseCommand = "az signalr create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--service-mode", settings.ServiceMode);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--unit-count", settings.UnitCount);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az signalr delete".
        /// Deletes a SignalR Service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalr")]
        public static dynamic AzSignalrDelete(this ICakeContext context, AzSignalrDeleteSettings settings) {
            var baseCommand = "az signalr delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az signalr list".
        /// Lists all the SignalR Service under the current subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalr")]
        public static dynamic AzSignalrList(this ICakeContext context, AzSignalrListSettings settings) {
            var baseCommand = "az signalr list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az signalr restart".
        /// Restart an existing SignalR Service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalr")]
        public static dynamic AzSignalrRestart(this ICakeContext context, AzSignalrRestartSettings settings) {
            var baseCommand = "az signalr restart";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az signalr show".
        /// Get the details of a SignalR Service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalr")]
        public static dynamic AzSignalrShow(this ICakeContext context, AzSignalrShowSettings settings) {
            var baseCommand = "az signalr show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az signalr update".
        /// Update an existing SignalR Service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalr")]
        public static dynamic AzSignalrUpdate(this ICakeContext context, AzSignalrUpdateSettings settings) {
            var baseCommand = "az signalr update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--service-mode", settings.ServiceMode);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--unit-count", settings.UnitCount);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az signalr cors add".
        /// Add allowed origins to a SignalR Service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalrCors")]
        public static dynamic AzSignalrCorsAdd(this ICakeContext context, AzSignalrCorsAddSettings settings) {
            var baseCommand = "az signalr cors add";
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az signalr cors list".
        /// List allowed origins of a SignalR Service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalrCors")]
        public static dynamic AzSignalrCorsList(this ICakeContext context, AzSignalrCorsListSettings settings) {
            var baseCommand = "az signalr cors list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az signalr cors remove".
        /// Remove allowed origins from a SignalR Service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalrCors")]
        public static dynamic AzSignalrCorsRemove(this ICakeContext context, AzSignalrCorsRemoveSettings settings) {
            var baseCommand = "az signalr cors remove";
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az signalr key list".
        /// List the access keys for a SignalR Service.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalrKey")]
        public static dynamic AzSignalrKeyList(this ICakeContext context, AzSignalrKeyListSettings settings) {
            var baseCommand = "az signalr key list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az signalr key renew".
        /// Regenerate the access key for a SignalR Service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalrKey")]
        public static dynamic AzSignalrKeyRenew(this ICakeContext context, AzSignalrKeyRenewSettings settings) {
            var baseCommand = "az signalr key renew";
            AppendIfNonNull(ref baseCommand, "--key-type", settings.KeyType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az snapshot create".
        /// Create a snapshot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public static dynamic AzSnapshotCreate(this ICakeContext context, AzSnapshotCreateSettings settings) {
            var baseCommand = "az snapshot create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--for-upload", settings.ForUpload);
            AppendIfNonNull(ref baseCommand, "--hyper-v-generation", settings.HyperVGeneration);
            AppendIfNonNull(ref baseCommand, "--incremental", settings.Incremental);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--size-gb", settings.SizeGb);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--source-storage-account-id", settings.SourceStorageAccountId);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az snapshot delete".
        /// Deletes a snapshot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public static dynamic AzSnapshotDelete(this ICakeContext context, AzSnapshotDeleteSettings settings) {
            var baseCommand = "az snapshot delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az snapshot grant-access".
        /// Grant read access to a snapshot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public static dynamic AzSnapshotGrantAccess(this ICakeContext context, AzSnapshotGrantAccessSettings settings) {
            var baseCommand = "az snapshot grant-access";
            AppendIfNonNull(ref baseCommand, "--duration-in-seconds", settings.DurationInSeconds);
            AppendIfNonNull(ref baseCommand, "--access-level", settings.AccessLevel);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az snapshot list".
        /// List snapshots.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public static dynamic AzSnapshotList(this ICakeContext context, AzSnapshotListSettings settings) {
            var baseCommand = "az snapshot list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az snapshot revoke-access".
        /// Revoke read access to a snapshot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public static dynamic AzSnapshotRevokeAccess(this ICakeContext context, AzSnapshotRevokeAccessSettings settings) {
            var baseCommand = "az snapshot revoke-access";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az snapshot show".
        /// Gets information about a snapshot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public static dynamic AzSnapshotShow(this ICakeContext context, AzSnapshotShowSettings settings) {
            var baseCommand = "az snapshot show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az snapshot update".
        /// Update a snapshot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public static dynamic AzSnapshotUpdate(this ICakeContext context, AzSnapshotUpdateSettings settings) {
            var baseCommand = "az snapshot update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az snapshot wait".
        /// Place the CLI in a waiting state until a condition of a snapshot is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public static dynamic AzSnapshotWait(this ICakeContext context, AzSnapshotWaitSettings settings) {
            var baseCommand = "az snapshot wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql list-usages".
        /// Gets all subscription usage metrics in a given location.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSql")]
        public static dynamic AzSqlListUsages(this ICakeContext context, AzSqlListUsagesSettings settings) {
            var baseCommand = "az sql list-usages";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql show-usage".
        /// Gets a subscription usage metric.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSql")]
        public static dynamic AzSqlShowUsage(this ICakeContext context, AzSqlShowUsageSettings settings) {
            var baseCommand = "az sql show-usage";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--usage", settings.Usage);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db copy".
        /// Create a copy of a database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbCopy(this ICakeContext context, AzSqlDbCopySettings settings) {
            var baseCommand = "az sql db copy";
            AppendIfNonNull(ref baseCommand, "--dest-name", settings.DestName);
            AppendIfNonNull(ref baseCommand, "--dest-resource-group", settings.DestResourceGroup);
            AppendIfNonNull(ref baseCommand, "--dest-server", settings.DestServer);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--auto-pause-delay", settings.AutoPauseDelay);
            AppendIfNonNull(ref baseCommand, "--compute-model", settings.ComputeModel);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db create".
        /// Create a database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbCreate(this ICakeContext context, AzSqlDbCreateSettings settings) {
            var baseCommand = "az sql db create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--catalog-collation", settings.CatalogCollation);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--sample-name", settings.SampleName);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--auto-pause-delay", settings.AutoPauseDelay);
            AppendIfNonNull(ref baseCommand, "--compute-model", settings.ComputeModel);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db delete".
        /// Delete a database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbDelete(this ICakeContext context, AzSqlDbDeleteSettings settings) {
            var baseCommand = "az sql db delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db export".
        /// Export a database to a bacpac.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbExport(this ICakeContext context, AzSqlDbExportSettings settings) {
            var baseCommand = "az sql db export";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--storage-key", settings.StorageKey);
            AppendIfNonNull(ref baseCommand, "--storage-key-type", settings.StorageKeyType);
            AppendIfNonNull(ref baseCommand, "--storage-uri", settings.StorageUri);
            AppendIfNonNull(ref baseCommand, "--auth-type", settings.AuthType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db import".
        /// Imports a bacpac into an existing database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbImport(this ICakeContext context, AzSqlDbImportSettings settings) {
            var baseCommand = "az sql db import";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--storage-key", settings.StorageKey);
            AppendIfNonNull(ref baseCommand, "--storage-key-type", settings.StorageKeyType);
            AppendIfNonNull(ref baseCommand, "--storage-uri", settings.StorageUri);
            AppendIfNonNull(ref baseCommand, "--auth-type", settings.AuthType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db list".
        /// List databases a server or elastic pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbList(this ICakeContext context, AzSqlDbListSettings settings) {
            var baseCommand = "az sql db list";
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db list-deleted".
        /// Gets a list of deleted databases that can be restored.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbListDeleted(this ICakeContext context, AzSqlDbListDeletedSettings settings) {
            var baseCommand = "az sql db list-deleted";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db list-editions".
        /// Show database editions available for the currently active subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbListEditions(this ICakeContext context, AzSqlDbListEditionsSettings settings) {
            var baseCommand = "az sql db list-editions";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--available", settings.Available);
            AppendIfNonNull(ref baseCommand, "--show-details", settings.ShowDetails);
            AppendIfNonNull(ref baseCommand, "--dtu", settings.Dtu);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--vcores", settings.Vcores);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db list-usages".
        /// Returns database usages.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbListUsages(this ICakeContext context, AzSqlDbListUsagesSettings settings) {
            var baseCommand = "az sql db list-usages";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db rename".
        /// Rename a database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbRename(this ICakeContext context, AzSqlDbRenameSettings settings) {
            var baseCommand = "az sql db rename";
            AppendIfNonNull(ref baseCommand, "--new-name", settings.NewName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db restore".
        /// Create a new database by restoring from a backup.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbRestore(this ICakeContext context, AzSqlDbRestoreSettings settings) {
            var baseCommand = "az sql db restore";
            AppendIfNonNull(ref baseCommand, "--dest-name", settings.DestName);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--deleted-time", settings.DeletedTime);
            AppendIfNonNull(ref baseCommand, "--time", settings.Time);
            AppendIfNonNull(ref baseCommand, "--auto-pause-delay", settings.AutoPauseDelay);
            AppendIfNonNull(ref baseCommand, "--compute-model", settings.ComputeModel);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db show".
        /// Get the details for a database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbShow(this ICakeContext context, AzSqlDbShowSettings settings) {
            var baseCommand = "az sql db show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db show-connection-string".
        /// Generates a connection string to a database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbShowConnectionString(this ICakeContext context, AzSqlDbShowConnectionStringSettings settings) {
            var baseCommand = "az sql db show-connection-string";
            AppendIfNonNull(ref baseCommand, "--client", settings.Client);
            AppendIfNonNull(ref baseCommand, "--auth-type", settings.AuthType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db update".
        /// Update a database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public static dynamic AzSqlDbUpdate(this ICakeContext context, AzSqlDbUpdateSettings settings) {
            var baseCommand = "az sql db update";
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--auto-pause-delay", settings.AutoPauseDelay);
            AppendIfNonNull(ref baseCommand, "--compute-model", settings.ComputeModel);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db audit-policy show".
        /// Gets a database's blob auditing policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbAuditPolicy")]
        public static dynamic AzSqlDbAuditPolicyShow(this ICakeContext context, AzSqlDbAuditPolicyShowSettings settings) {
            var baseCommand = "az sql db audit-policy show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db audit-policy update".
        /// Update a database's auditing policy.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbAuditPolicy")]
        public static dynamic AzSqlDbAuditPolicyUpdate(this ICakeContext context, AzSqlDbAuditPolicyUpdateSettings settings) {
            var baseCommand = "az sql db audit-policy update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--actions", settings.Actions);
            AppendIfNonNull(ref baseCommand, "--retention-days", settings.RetentionDays);
            AppendIfNonNull(ref baseCommand, "--state", settings.State);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--storage-endpoint", settings.StorageEndpoint);
            AppendIfNonNull(ref baseCommand, "--storage-key", settings.StorageKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db op cancel".
        /// Cancels the asynchronous operation on the database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbOp")]
        public static dynamic AzSqlDbOpCancel(this ICakeContext context, AzSqlDbOpCancelSettings settings) {
            var baseCommand = "az sql db op cancel";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--database", settings.Database);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db op list".
        /// Gets a list of operations performed on the database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbOp")]
        public static dynamic AzSqlDbOpList(this ICakeContext context, AzSqlDbOpListSettings settings) {
            var baseCommand = "az sql db op list";
            AppendIfNonNull(ref baseCommand, "--database", settings.Database);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db replica create".
        /// Create a database as a readable secondary replica of an existing database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbReplica")]
        public static dynamic AzSqlDbReplicaCreate(this ICakeContext context, AzSqlDbReplicaCreateSettings settings) {
            var baseCommand = "az sql db replica create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--partner-server", settings.PartnerServer);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--partner-resource-group", settings.PartnerResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--auto-pause-delay", settings.AutoPauseDelay);
            AppendIfNonNull(ref baseCommand, "--compute-model", settings.ComputeModel);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db replica delete-link".
        /// Permanently stop data replication between two database replicas.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbReplica")]
        public static dynamic AzSqlDbReplicaDeleteLink(this ICakeContext context, AzSqlDbReplicaDeleteLinkSettings settings) {
            var baseCommand = "az sql db replica delete-link";
            AppendIfNonNull(ref baseCommand, "--partner-server", settings.PartnerServer);
            AppendIfNonNull(ref baseCommand, "--partner-resource-group", settings.PartnerResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db replica list-links".
        /// List the replicas of a database and their replication status.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbReplica")]
        public static dynamic AzSqlDbReplicaListLinks(this ICakeContext context, AzSqlDbReplicaListLinksSettings settings) {
            var baseCommand = "az sql db replica list-links";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db replica set-primary".
        /// Set the primary replica database by failing over from the current primary replica database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbReplica")]
        public static dynamic AzSqlDbReplicaSetPrimary(this ICakeContext context, AzSqlDbReplicaSetPrimarySettings settings) {
            var baseCommand = "az sql db replica set-primary";
            AppendIfNonNull(ref baseCommand, "--allow-data-loss", settings.AllowDataLoss);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db tde list-activity".
        /// Returns a database's transparent data encryption operation result.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbTde")]
        public static dynamic AzSqlDbTdeListActivity(this ICakeContext context, AzSqlDbTdeListActivitySettings settings) {
            var baseCommand = "az sql db tde list-activity";
            AppendIfNonNull(ref baseCommand, "--database", settings.Database);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db tde set".
        /// Sets a database's transparent data encryption configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbTde")]
        public static dynamic AzSqlDbTdeSet(this ICakeContext context, AzSqlDbTdeSetSettings settings) {
            var baseCommand = "az sql db tde set";
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--database", settings.Database);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db tde show".
        /// Gets a database's transparent data encryption configuration.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbTde")]
        public static dynamic AzSqlDbTdeShow(this ICakeContext context, AzSqlDbTdeShowSettings settings) {
            var baseCommand = "az sql db tde show";
            AppendIfNonNull(ref baseCommand, "--database", settings.Database);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db threat-policy show".
        /// Gets a database's threat detection policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbThreatPolicy")]
        public static dynamic AzSqlDbThreatPolicyShow(this ICakeContext context, AzSqlDbThreatPolicyShowSettings settings) {
            var baseCommand = "az sql db threat-policy show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql db threat-policy update".
        /// Update a database's threat detection policy.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbThreatPolicy")]
        public static dynamic AzSqlDbThreatPolicyUpdate(this ICakeContext context, AzSqlDbThreatPolicyUpdateSettings settings) {
            var baseCommand = "az sql db threat-policy update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--email-account-admins", settings.EmailAccountAdmins);
            AppendIfNonNull(ref baseCommand, "--email-addresses", settings.EmailAddresses);
            AppendIfNonNull(ref baseCommand, "--disabled-alerts", settings.DisabledAlerts);
            AppendIfNonNull(ref baseCommand, "--retention-days", settings.RetentionDays);
            AppendIfNonNull(ref baseCommand, "--state", settings.State);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--storage-endpoint", settings.StorageEndpoint);
            AppendIfNonNull(ref baseCommand, "--storage-key", settings.StorageKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql dw create".
        /// Create a data warehouse.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public static dynamic AzSqlDwCreate(this ICakeContext context, AzSqlDwCreateSettings settings) {
            var baseCommand = "az sql dw create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql dw delete".
        /// Delete a data warehouse.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public static dynamic AzSqlDwDelete(this ICakeContext context, AzSqlDwDeleteSettings settings) {
            var baseCommand = "az sql dw delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql dw list".
        /// List data warehouses for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public static dynamic AzSqlDwList(this ICakeContext context, AzSqlDwListSettings settings) {
            var baseCommand = "az sql dw list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql dw pause".
        /// Pauses a datawarehouse.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public static dynamic AzSqlDwPause(this ICakeContext context, AzSqlDwPauseSettings settings) {
            var baseCommand = "az sql dw pause";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql dw resume".
        /// Resumes a datawarehouse.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public static dynamic AzSqlDwResume(this ICakeContext context, AzSqlDwResumeSettings settings) {
            var baseCommand = "az sql dw resume";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql dw show".
        /// Get the details for a data warehouse.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public static dynamic AzSqlDwShow(this ICakeContext context, AzSqlDwShowSettings settings) {
            var baseCommand = "az sql dw show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql dw update".
        /// Update a data warehouse.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public static dynamic AzSqlDwUpdate(this ICakeContext context, AzSqlDwUpdateSettings settings) {
            var baseCommand = "az sql dw update";
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql elastic-pool create".
        /// Create an elastic pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public static dynamic AzSqlElasticPoolCreate(this ICakeContext context, AzSqlElasticPoolCreateSettings settings) {
            var baseCommand = "az sql elastic-pool create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--db-dtu-max", settings.DbDtuMax);
            AppendIfNonNull(ref baseCommand, "--db-dtu-min", settings.DbDtuMin);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql elastic-pool delete".
        /// Deletes an elastic pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public static dynamic AzSqlElasticPoolDelete(this ICakeContext context, AzSqlElasticPoolDeleteSettings settings) {
            var baseCommand = "az sql elastic-pool delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql elastic-pool list".
        /// Gets all elastic pools in a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public static dynamic AzSqlElasticPoolList(this ICakeContext context, AzSqlElasticPoolListSettings settings) {
            var baseCommand = "az sql elastic-pool list";
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql elastic-pool list-dbs".
        /// Gets a list of databases in an elastic pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public static dynamic AzSqlElasticPoolListDbs(this ICakeContext context, AzSqlElasticPoolListDbsSettings settings) {
            var baseCommand = "az sql elastic-pool list-dbs";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql elastic-pool list-editions".
        /// List elastic pool editions available for the active subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public static dynamic AzSqlElasticPoolListEditions(this ICakeContext context, AzSqlElasticPoolListEditionsSettings settings) {
            var baseCommand = "az sql elastic-pool list-editions";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--available", settings.Available);
            AppendIfNonNull(ref baseCommand, "--show-details", settings.ShowDetails);
            AppendIfNonNull(ref baseCommand, "--dtu", settings.Dtu);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--vcores", settings.Vcores);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql elastic-pool show".
        /// Gets an elastic pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public static dynamic AzSqlElasticPoolShow(this ICakeContext context, AzSqlElasticPoolShowSettings settings) {
            var baseCommand = "az sql elastic-pool show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql elastic-pool update".
        /// Update an elastic pool.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public static dynamic AzSqlElasticPoolUpdate(this ICakeContext context, AzSqlElasticPoolUpdateSettings settings) {
            var baseCommand = "az sql elastic-pool update";
            AppendIfNonNull(ref baseCommand, "--db-dtu-max", settings.DbDtuMax);
            AppendIfNonNull(ref baseCommand, "--db-dtu-min", settings.DbDtuMin);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql elastic-pool op cancel".
        /// Cancels the asynchronous operation on the elastic pool.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPoolOp")]
        public static dynamic AzSqlElasticPoolOpCancel(this ICakeContext context, AzSqlElasticPoolOpCancelSettings settings) {
            var baseCommand = "az sql elastic-pool op cancel";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql elastic-pool op list".
        /// Gets a list of operations performed on the elastic pool.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPoolOp")]
        public static dynamic AzSqlElasticPoolOpList(this ICakeContext context, AzSqlElasticPoolOpListSettings settings) {
            var baseCommand = "az sql elastic-pool op list";
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql failover-group create".
        /// Creates a failover group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlFailoverGroup")]
        public static dynamic AzSqlFailoverGroupCreate(this ICakeContext context, AzSqlFailoverGroupCreateSettings settings) {
            var baseCommand = "az sql failover-group create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--partner-server", settings.PartnerServer);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--add-db", settings.AddDb);
            AppendIfNonNull(ref baseCommand, "--failover-policy", settings.FailoverPolicy);
            AppendIfNonNull(ref baseCommand, "--grace-period", settings.GracePeriod);
            AppendIfNonNull(ref baseCommand, "--partner-resource-group", settings.PartnerResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql failover-group delete".
        /// Deletes a failover group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlFailoverGroup")]
        public static dynamic AzSqlFailoverGroupDelete(this ICakeContext context, AzSqlFailoverGroupDeleteSettings settings) {
            var baseCommand = "az sql failover-group delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql failover-group list".
        /// Lists the failover groups in a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlFailoverGroup")]
        public static dynamic AzSqlFailoverGroupList(this ICakeContext context, AzSqlFailoverGroupListSettings settings) {
            var baseCommand = "az sql failover-group list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql failover-group set-primary".
        /// Set the primary of the failover group by failing over all databases from the current primary server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlFailoverGroup")]
        public static dynamic AzSqlFailoverGroupSetPrimary(this ICakeContext context, AzSqlFailoverGroupSetPrimarySettings settings) {
            var baseCommand = "az sql failover-group set-primary";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--allow-data-loss", settings.AllowDataLoss);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql failover-group show".
        /// Gets a failover group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlFailoverGroup")]
        public static dynamic AzSqlFailoverGroupShow(this ICakeContext context, AzSqlFailoverGroupShowSettings settings) {
            var baseCommand = "az sql failover-group show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql failover-group update".
        /// Updates the failover group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlFailoverGroup")]
        public static dynamic AzSqlFailoverGroupUpdate(this ICakeContext context, AzSqlFailoverGroupUpdateSettings settings) {
            var baseCommand = "az sql failover-group update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--add-db", settings.AddDb);
            AppendIfNonNull(ref baseCommand, "--failover-policy", settings.FailoverPolicy);
            AppendIfNonNull(ref baseCommand, "--grace-period", settings.GracePeriod);
            AppendIfNonNull(ref baseCommand, "--remove-db", settings.RemoveDb);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql instance-failover-group create".
        /// Creates an instance failover group between two connected managed instances.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlInstanceFailoverGroup")]
        public static dynamic AzSqlInstanceFailoverGroupCreate(this ICakeContext context, AzSqlInstanceFailoverGroupCreateSettings settings) {
            var baseCommand = "az sql instance-failover-group create";
            AppendIfNonNull(ref baseCommand, "--mi", settings.Mi);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--partner-mi", settings.PartnerMi);
            AppendIfNonNull(ref baseCommand, "--partner-resource-group", settings.PartnerResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--failover-policy", settings.FailoverPolicy);
            AppendIfNonNull(ref baseCommand, "--grace-period", settings.GracePeriod);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql instance-failover-group delete".
        /// Deletes a failover group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlInstanceFailoverGroup")]
        public static dynamic AzSqlInstanceFailoverGroupDelete(this ICakeContext context, AzSqlInstanceFailoverGroupDeleteSettings settings) {
            var baseCommand = "az sql instance-failover-group delete";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql instance-failover-group set-primary".
        /// Set the primary of the instance failover group by failing over all databases from the current primary managed instance.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlInstanceFailoverGroup")]
        public static dynamic AzSqlInstanceFailoverGroupSetPrimary(this ICakeContext context, AzSqlInstanceFailoverGroupSetPrimarySettings settings) {
            var baseCommand = "az sql instance-failover-group set-primary";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allow-data-loss", settings.AllowDataLoss);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql instance-failover-group show".
        /// Gets a failover group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlInstanceFailoverGroup")]
        public static dynamic AzSqlInstanceFailoverGroupShow(this ICakeContext context, AzSqlInstanceFailoverGroupShowSettings settings) {
            var baseCommand = "az sql instance-failover-group show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql instance-failover-group update".
        /// Updates the instance failover group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlInstanceFailoverGroup")]
        public static dynamic AzSqlInstanceFailoverGroupUpdate(this ICakeContext context, AzSqlInstanceFailoverGroupUpdateSettings settings) {
            var baseCommand = "az sql instance-failover-group update";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--failover-policy", settings.FailoverPolicy);
            AppendIfNonNull(ref baseCommand, "--grace-period", settings.GracePeriod);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi create".
        /// Create a managed instance.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMi")]
        public static dynamic AzSqlMiCreate(this ICakeContext context, AzSqlMiCreateSettings settings) {
            var baseCommand = "az sql mi create";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--proxy-override", settings.ProxyOverride);
            AppendIfNonNull(ref baseCommand, "--public-data-endpoint-enabled", settings.PublicDataEndpointEnabled);
            AppendIfNonNull(ref baseCommand, "--storage", settings.Storage);
            AppendIfNonNull(ref baseCommand, "--timezone-id", settings.TimezoneId);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi delete".
        /// Delete a managed instance.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMi")]
        public static dynamic AzSqlMiDelete(this ICakeContext context, AzSqlMiDeleteSettings settings) {
            var baseCommand = "az sql mi delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi list".
        /// List available managed instances.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMi")]
        public static dynamic AzSqlMiList(this ICakeContext context, AzSqlMiListSettings settings) {
            var baseCommand = "az sql mi list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi show".
        /// Get the details for a managed instance.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMi")]
        public static dynamic AzSqlMiShow(this ICakeContext context, AzSqlMiShowSettings settings) {
            var baseCommand = "az sql mi show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi update".
        /// Update a managed instance.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMi")]
        public static dynamic AzSqlMiUpdate(this ICakeContext context, AzSqlMiUpdateSettings settings) {
            var baseCommand = "az sql mi update";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--proxy-override", settings.ProxyOverride);
            AppendIfNonNull(ref baseCommand, "--public-data-endpoint-enabled", settings.PublicDataEndpointEnabled);
            AppendIfNonNull(ref baseCommand, "--storage", settings.Storage);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi ad-admin create".
        /// Creates a new managed instance Active Directory administrator.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiAdAdmin")]
        public static dynamic AzSqlMiAdAdminCreate(this ICakeContext context, AzSqlMiAdAdminCreateSettings settings) {
            var baseCommand = "az sql mi ad-admin create";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi ad-admin delete".
        /// Deletes an existing managed instance Active Directory Administrator.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiAdAdmin")]
        public static dynamic AzSqlMiAdAdminDelete(this ICakeContext context, AzSqlMiAdAdminDeleteSettings settings) {
            var baseCommand = "az sql mi ad-admin delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi ad-admin list".
        /// Returns a list of managed instance Active Directory Administrators.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiAdAdmin")]
        public static dynamic AzSqlMiAdAdminList(this ICakeContext context, AzSqlMiAdAdminListSettings settings) {
            var baseCommand = "az sql mi ad-admin list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi ad-admin update".
        /// Updates an existing managed instance Active Directory administrator.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiAdAdmin")]
        public static dynamic AzSqlMiAdAdminUpdate(this ICakeContext context, AzSqlMiAdAdminUpdateSettings settings) {
            var baseCommand = "az sql mi ad-admin update";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi key create".
        /// Creates a SQL Instance key.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiKey")]
        public static dynamic AzSqlMiKeyCreate(this ICakeContext context, AzSqlMiKeyCreateSettings settings) {
            var baseCommand = "az sql mi key create";
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi key delete".
        /// Deletes a SQL Instance key.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiKey")]
        public static dynamic AzSqlMiKeyDelete(this ICakeContext context, AzSqlMiKeyDeleteSettings settings) {
            var baseCommand = "az sql mi key delete";
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi key list".
        /// Gets a list of managed instance keys.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiKey")]
        public static dynamic AzSqlMiKeyList(this ICakeContext context, AzSqlMiKeyListSettings settings) {
            var baseCommand = "az sql mi key list";
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi key show".
        /// Shows a SQL Instance key.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiKey")]
        public static dynamic AzSqlMiKeyShow(this ICakeContext context, AzSqlMiKeyShowSettings settings) {
            var baseCommand = "az sql mi key show";
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi tde-key set".
        /// Sets the SQL Instance's encryption protector.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiTdeKey")]
        public static dynamic AzSqlMiTdeKeySet(this ICakeContext context, AzSqlMiTdeKeySetSettings settings) {
            var baseCommand = "az sql mi tde-key set";
            AppendIfNonNull(ref baseCommand, "--server-key-type", settings.ServerKeyType);
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql mi tde-key show".
        /// Gets a managed instance encryption protector.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiTdeKey")]
        public static dynamic AzSqlMiTdeKeyShow(this ICakeContext context, AzSqlMiTdeKeyShowSettings settings) {
            var baseCommand = "az sql mi tde-key show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql midb create".
        /// Create a managed database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMidb")]
        public static dynamic AzSqlMidbCreate(this ICakeContext context, AzSqlMidbCreateSettings settings) {
            var baseCommand = "az sql midb create";
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql midb delete".
        /// Delete a managed database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMidb")]
        public static dynamic AzSqlMidbDelete(this ICakeContext context, AzSqlMidbDeleteSettings settings) {
            var baseCommand = "az sql midb delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql midb list".
        /// List managed databases on a managed instance.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMidb")]
        public static dynamic AzSqlMidbList(this ICakeContext context, AzSqlMidbListSettings settings) {
            var baseCommand = "az sql midb list";
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql midb restore".
        /// Restore a managed database.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMidb")]
        public static dynamic AzSqlMidbRestore(this ICakeContext context, AzSqlMidbRestoreSettings settings) {
            var baseCommand = "az sql midb restore";
            AppendIfNonNull(ref baseCommand, "--dest-name", settings.DestName);
            AppendIfNonNull(ref baseCommand, "--dest-mi", settings.DestMi);
            AppendIfNonNull(ref baseCommand, "--dest-resource-group", settings.DestResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--time", settings.Time);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql midb show".
        /// Get the details for a managed database.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMidb")]
        public static dynamic AzSqlMidbShow(this ICakeContext context, AzSqlMidbShowSettings settings) {
            var baseCommand = "az sql midb show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server create".
        /// Create a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public static dynamic AzSqlServerCreate(this ICakeContext context, AzSqlServerCreateSettings settings) {
            var baseCommand = "az sql server create";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server delete".
        /// Deletes a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public static dynamic AzSqlServerDelete(this ICakeContext context, AzSqlServerDeleteSettings settings) {
            var baseCommand = "az sql server delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server list".
        /// List available servers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public static dynamic AzSqlServerList(this ICakeContext context, AzSqlServerListSettings settings) {
            var baseCommand = "az sql server list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server list-usages".
        /// Returns server usages.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public static dynamic AzSqlServerListUsages(this ICakeContext context, AzSqlServerListUsagesSettings settings) {
            var baseCommand = "az sql server list-usages";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server show".
        /// Gets a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public static dynamic AzSqlServerShow(this ICakeContext context, AzSqlServerShowSettings settings) {
            var baseCommand = "az sql server show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server update".
        /// Update a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public static dynamic AzSqlServerUpdate(this ICakeContext context, AzSqlServerUpdateSettings settings) {
            var baseCommand = "az sql server update";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--assign_identity", settings.Assign_Identity);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server wait".
        /// Place the CLI in a waiting state until a condition of the SQL server is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public static dynamic AzSqlServerWait(this ICakeContext context, AzSqlServerWaitSettings settings) {
            var baseCommand = "az sql server wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server ad-admin create".
        /// Create a new server Active Directory administrator.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerAdAdmin")]
        public static dynamic AzSqlServerAdAdminCreate(this ICakeContext context, AzSqlServerAdAdminCreateSettings settings) {
            var baseCommand = "az sql server ad-admin create";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server ad-admin delete".
        /// Deletes an existing server Active Directory Administrator.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerAdAdmin")]
        public static dynamic AzSqlServerAdAdminDelete(this ICakeContext context, AzSqlServerAdAdminDeleteSettings settings) {
            var baseCommand = "az sql server ad-admin delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server ad-admin list".
        /// Returns a list of server Administrators.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerAdAdmin")]
        public static dynamic AzSqlServerAdAdminList(this ICakeContext context, AzSqlServerAdAdminListSettings settings) {
            var baseCommand = "az sql server ad-admin list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server ad-admin update".
        /// Update an existing server Active Directory administrator.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerAdAdmin")]
        public static dynamic AzSqlServerAdAdminUpdate(this ICakeContext context, AzSqlServerAdAdminUpdateSettings settings) {
            var baseCommand = "az sql server ad-admin update";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server conn-policy show".
        /// Gets a server's secure connection policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerConnPolicy")]
        public static dynamic AzSqlServerConnPolicyShow(this ICakeContext context, AzSqlServerConnPolicyShowSettings settings) {
            var baseCommand = "az sql server conn-policy show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server conn-policy update".
        /// Updates a server's secure connection policy.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerConnPolicy")]
        public static dynamic AzSqlServerConnPolicyUpdate(this ICakeContext context, AzSqlServerConnPolicyUpdateSettings settings) {
            var baseCommand = "az sql server conn-policy update";
            AppendIfNonNull(ref baseCommand, "--connection-type", settings.ConnectionType);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server dns-alias create".
        /// Creates a server dns alias.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerDnsAlias")]
        public static dynamic AzSqlServerDnsAliasCreate(this ICakeContext context, AzSqlServerDnsAliasCreateSettings settings) {
            var baseCommand = "az sql server dns-alias create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server dns-alias delete".
        /// Deletes the server DNS alias with the given name.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerDnsAlias")]
        public static dynamic AzSqlServerDnsAliasDelete(this ICakeContext context, AzSqlServerDnsAliasDeleteSettings settings) {
            var baseCommand = "az sql server dns-alias delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server dns-alias list".
        /// Gets a list of server DNS aliases for a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerDnsAlias")]
        public static dynamic AzSqlServerDnsAliasList(this ICakeContext context, AzSqlServerDnsAliasListSettings settings) {
            var baseCommand = "az sql server dns-alias list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server dns-alias set".
        /// Sets a server to which DNS alias should point.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerDnsAlias")]
        public static dynamic AzSqlServerDnsAliasSet(this ICakeContext context, AzSqlServerDnsAliasSetSettings settings) {
            var baseCommand = "az sql server dns-alias set";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--original-server", settings.OriginalServer);
            AppendIfNonNull(ref baseCommand, "--original-resource-group", settings.OriginalResourceGroup);
            AppendIfNonNull(ref baseCommand, "--original-subscription-id", settings.OriginalSubscriptionId);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server dns-alias show".
        /// Gets a server DNS alias.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerDnsAlias")]
        public static dynamic AzSqlServerDnsAliasShow(this ICakeContext context, AzSqlServerDnsAliasShowSettings settings) {
            var baseCommand = "az sql server dns-alias show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server firewall-rule create".
        /// Create a firewall rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerFirewallRule")]
        public static dynamic AzSqlServerFirewallRuleCreate(this ICakeContext context, AzSqlServerFirewallRuleCreateSettings settings) {
            var baseCommand = "az sql server firewall-rule create";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server firewall-rule delete".
        /// Deletes a firewall rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerFirewallRule")]
        public static dynamic AzSqlServerFirewallRuleDelete(this ICakeContext context, AzSqlServerFirewallRuleDeleteSettings settings) {
            var baseCommand = "az sql server firewall-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server firewall-rule list".
        /// List a server's firewall rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerFirewallRule")]
        public static dynamic AzSqlServerFirewallRuleList(this ICakeContext context, AzSqlServerFirewallRuleListSettings settings) {
            var baseCommand = "az sql server firewall-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server firewall-rule show".
        /// Shows the details for a firewall rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerFirewallRule")]
        public static dynamic AzSqlServerFirewallRuleShow(this ICakeContext context, AzSqlServerFirewallRuleShowSettings settings) {
            var baseCommand = "az sql server firewall-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server firewall-rule update".
        /// Update a firewall rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerFirewallRule")]
        public static dynamic AzSqlServerFirewallRuleUpdate(this ICakeContext context, AzSqlServerFirewallRuleUpdateSettings settings) {
            var baseCommand = "az sql server firewall-rule update";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server key create".
        /// Creates a server key.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerKey")]
        public static dynamic AzSqlServerKeyCreate(this ICakeContext context, AzSqlServerKeyCreateSettings settings) {
            var baseCommand = "az sql server key create";
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server key delete".
        /// Deletes a server key.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerKey")]
        public static dynamic AzSqlServerKeyDelete(this ICakeContext context, AzSqlServerKeyDeleteSettings settings) {
            var baseCommand = "az sql server key delete";
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server key list".
        /// Gets a list of server keys.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerKey")]
        public static dynamic AzSqlServerKeyList(this ICakeContext context, AzSqlServerKeyListSettings settings) {
            var baseCommand = "az sql server key list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server key show".
        /// Shows a server key.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerKey")]
        public static dynamic AzSqlServerKeyShow(this ICakeContext context, AzSqlServerKeyShowSettings settings) {
            var baseCommand = "az sql server key show";
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server tde-key set".
        /// Sets the server's encryption protector.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerTdeKey")]
        public static dynamic AzSqlServerTdeKeySet(this ICakeContext context, AzSqlServerTdeKeySetSettings settings) {
            var baseCommand = "az sql server tde-key set";
            AppendIfNonNull(ref baseCommand, "--server-key-type", settings.ServerKeyType);
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server tde-key show".
        /// Gets a server encryption protector.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerTdeKey")]
        public static dynamic AzSqlServerTdeKeyShow(this ICakeContext context, AzSqlServerTdeKeyShowSettings settings) {
            var baseCommand = "az sql server tde-key show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server vnet-rule create".
        /// Create a virtual network rule to allows access to an Azure SQL server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerVnetRule")]
        public static dynamic AzSqlServerVnetRuleCreate(this ICakeContext context, AzSqlServerVnetRuleCreateSettings settings) {
            var baseCommand = "az sql server vnet-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server vnet-rule delete".
        /// Deletes the virtual network rule with the given name.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerVnetRule")]
        public static dynamic AzSqlServerVnetRuleDelete(this ICakeContext context, AzSqlServerVnetRuleDeleteSettings settings) {
            var baseCommand = "az sql server vnet-rule delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server vnet-rule list".
        /// Gets a list of virtual network rules in a server.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerVnetRule")]
        public static dynamic AzSqlServerVnetRuleList(this ICakeContext context, AzSqlServerVnetRuleListSettings settings) {
            var baseCommand = "az sql server vnet-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server vnet-rule show".
        /// Gets a virtual network rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerVnetRule")]
        public static dynamic AzSqlServerVnetRuleShow(this ICakeContext context, AzSqlServerVnetRuleShowSettings settings) {
            var baseCommand = "az sql server vnet-rule show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql server vnet-rule update".
        /// Update a virtual network rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerVnetRule")]
        public static dynamic AzSqlServerVnetRuleUpdate(this ICakeContext context, AzSqlServerVnetRuleUpdateSettings settings) {
            var baseCommand = "az sql server vnet-rule update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql virtual-cluster delete".
        /// Delete a virtual cluster.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVirtualCluster")]
        public static dynamic AzSqlVirtualClusterDelete(this ICakeContext context, AzSqlVirtualClusterDeleteSettings settings) {
            var baseCommand = "az sql virtual-cluster delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql virtual-cluster list".
        /// List available virtual clusters.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVirtualCluster")]
        public static dynamic AzSqlVirtualClusterList(this ICakeContext context, AzSqlVirtualClusterListSettings settings) {
            var baseCommand = "az sql virtual-cluster list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql virtual-cluster show".
        /// Get the details for a virtual cluster.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVirtualCluster")]
        public static dynamic AzSqlVirtualClusterShow(this ICakeContext context, AzSqlVirtualClusterShowSettings settings) {
            var baseCommand = "az sql virtual-cluster show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm add-to-group".
        /// Adds SQL virtual machine to a SQL virtual machine group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public static dynamic AzSqlVmAddToGroup(this ICakeContext context, AzSqlVmAddToGroupSettings settings) {
            var baseCommand = "az sql vm add-to-group";
            AppendIfNonNull(ref baseCommand, "--sqlvm-group", settings.SqlvmGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--bootstrap-acc-pwd", settings.BootstrapAccPwd);
            AppendIfNonNull(ref baseCommand, "--operator-acc-pwd", settings.OperatorAccPwd);
            AppendIfNonNull(ref baseCommand, "--service-acc-pwd", settings.ServiceAccPwd);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm create".
        /// Creates a SQL virtual machine.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public static dynamic AzSqlVmCreate(this ICakeContext context, AzSqlVmCreateSettings settings) {
            var baseCommand = "az sql vm create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--sql-mgmt-type", settings.SqlMgmtType);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--enable-r-services", settings.EnableRServices);
            AppendIfNonNull(ref baseCommand, "--backup-pwd", settings.BackupPwd);
            AppendIfNonNull(ref baseCommand, "--backup-schedule-type", settings.BackupScheduleType);
            AppendIfNonNull(ref baseCommand, "--backup-system-dbs", settings.BackupSystemDbs);
            AppendIfNonNull(ref baseCommand, "--enable-auto-backup", settings.EnableAutoBackup);
            AppendIfNonNull(ref baseCommand, "--enable-encryption", settings.EnableEncryption);
            AppendIfNonNull(ref baseCommand, "--full-backup-duration", settings.FullBackupDuration);
            AppendIfNonNull(ref baseCommand, "--full-backup-frequency", settings.FullBackupFrequency);
            AppendIfNonNull(ref baseCommand, "--full-backup-start-hour", settings.FullBackupStartHour);
            AppendIfNonNull(ref baseCommand, "--log-backup-frequency", settings.LogBackupFrequency);
            AppendIfNonNull(ref baseCommand, "--retention-period", settings.RetentionPeriod);
            AppendIfNonNull(ref baseCommand, "--sa-key", settings.SaKey);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--day-of-week", settings.DayOfWeek);
            AppendIfNonNull(ref baseCommand, "--enable-auto-patching", settings.EnableAutoPatching);
            AppendIfNonNull(ref baseCommand, "--maintenance-window-duration", settings.MaintenanceWindowDuration);
            AppendIfNonNull(ref baseCommand, "--maintenance-window-start-hour", settings.MaintenanceWindowStartHour);
            AppendIfNonNull(ref baseCommand, "--credential-name", settings.CredentialName);
            AppendIfNonNull(ref baseCommand, "--enable-key-vault-credential", settings.EnableKeyVaultCredential);
            AppendIfNonNull(ref baseCommand, "--key-vault", settings.KeyVault);
            AppendIfNonNull(ref baseCommand, "--sp-name", settings.SpName);
            AppendIfNonNull(ref baseCommand, "--sp-secret", settings.SpSecret);
            AppendIfNonNull(ref baseCommand, "--connectivity-type", settings.ConnectivityType);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--sql-auth-update-pwd", settings.SqlAuthUpdatePwd);
            AppendIfNonNull(ref baseCommand, "--sql-auth-update-username", settings.SqlAuthUpdateUsername);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--image-offer", settings.ImageOffer);
            AppendIfNonNull(ref baseCommand, "--image-sku", settings.ImageSku);
            AppendIfNonNull(ref baseCommand, "--sql-workload-type", settings.SqlWorkloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm delete".
        /// Deletes a SQL virtual machine.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public static dynamic AzSqlVmDelete(this ICakeContext context, AzSqlVmDeleteSettings settings) {
            var baseCommand = "az sql vm delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm list".
        /// Lists all SQL virtual machines in a resource group or subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public static dynamic AzSqlVmList(this ICakeContext context, AzSqlVmListSettings settings) {
            var baseCommand = "az sql vm list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm remove-from-group".
        /// Remove SQL virtual machine from its current SQL virtual machine group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public static dynamic AzSqlVmRemoveFromGroup(this ICakeContext context, AzSqlVmRemoveFromGroupSettings settings) {
            var baseCommand = "az sql vm remove-from-group";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm show".
        /// Gets a SQL virtual machine.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public static dynamic AzSqlVmShow(this ICakeContext context, AzSqlVmShowSettings settings) {
            var baseCommand = "az sql vm show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm update".
        /// Updates the properties of a SQL virtual machine.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public static dynamic AzSqlVmUpdate(this ICakeContext context, AzSqlVmUpdateSettings settings) {
            var baseCommand = "az sql vm update";
            AppendIfNonNull(ref baseCommand, "--sql-mgmt-type", settings.SqlMgmtType);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--enable-r-services", settings.EnableRServices);
            AppendIfNonNull(ref baseCommand, "--backup-pwd", settings.BackupPwd);
            AppendIfNonNull(ref baseCommand, "--backup-schedule-type", settings.BackupScheduleType);
            AppendIfNonNull(ref baseCommand, "--backup-system-dbs", settings.BackupSystemDbs);
            AppendIfNonNull(ref baseCommand, "--enable-auto-backup", settings.EnableAutoBackup);
            AppendIfNonNull(ref baseCommand, "--enable-encryption", settings.EnableEncryption);
            AppendIfNonNull(ref baseCommand, "--full-backup-duration", settings.FullBackupDuration);
            AppendIfNonNull(ref baseCommand, "--full-backup-frequency", settings.FullBackupFrequency);
            AppendIfNonNull(ref baseCommand, "--full-backup-start-hour", settings.FullBackupStartHour);
            AppendIfNonNull(ref baseCommand, "--log-backup-frequency", settings.LogBackupFrequency);
            AppendIfNonNull(ref baseCommand, "--retention-period", settings.RetentionPeriod);
            AppendIfNonNull(ref baseCommand, "--sa-key", settings.SaKey);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--day-of-week", settings.DayOfWeek);
            AppendIfNonNull(ref baseCommand, "--enable-auto-patching", settings.EnableAutoPatching);
            AppendIfNonNull(ref baseCommand, "--maintenance-window-duration", settings.MaintenanceWindowDuration);
            AppendIfNonNull(ref baseCommand, "--maintenance-window-start-hour", settings.MaintenanceWindowStartHour);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--credential-name", settings.CredentialName);
            AppendIfNonNull(ref baseCommand, "--enable-key-vault-credential", settings.EnableKeyVaultCredential);
            AppendIfNonNull(ref baseCommand, "--key-vault", settings.KeyVault);
            AppendIfNonNull(ref baseCommand, "--sp-name", settings.SpName);
            AppendIfNonNull(ref baseCommand, "--sp-secret", settings.SpSecret);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--connectivity-type", settings.ConnectivityType);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--image-sku", settings.ImageSku);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--sql-workload-type", settings.SqlWorkloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm group create".
        /// Creates a SQL virtual machine group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroup")]
        public static dynamic AzSqlVmGroupCreate(this ICakeContext context, AzSqlVmGroupCreateSettings settings) {
            var baseCommand = "az sql vm group create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--image-offer", settings.ImageOffer);
            AppendIfNonNull(ref baseCommand, "--image-sku", settings.ImageSku);
            AppendIfNonNull(ref baseCommand, "--domain-fqdn", settings.DomainFqdn);
            AppendIfNonNull(ref baseCommand, "--operator-acc", settings.OperatorAcc);
            AppendIfNonNull(ref baseCommand, "--service-acc", settings.ServiceAcc);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--bootstrap-acc", settings.BootstrapAcc);
            AppendIfNonNull(ref baseCommand, "--fsw-path", settings.FswPath);
            AppendIfNonNull(ref baseCommand, "--ou-path", settings.OuPath);
            AppendIfNonNull(ref baseCommand, "--sa-key", settings.SaKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm group delete".
        /// Deletes a SQL virtual machine group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroup")]
        public static dynamic AzSqlVmGroupDelete(this ICakeContext context, AzSqlVmGroupDeleteSettings settings) {
            var baseCommand = "az sql vm group delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm group list".
        /// Lists all SQL virtual machine groups in a resource group or subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroup")]
        public static dynamic AzSqlVmGroupList(this ICakeContext context, AzSqlVmGroupListSettings settings) {
            var baseCommand = "az sql vm group list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm group show".
        /// Gets a SQL virtual machine group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroup")]
        public static dynamic AzSqlVmGroupShow(this ICakeContext context, AzSqlVmGroupShowSettings settings) {
            var baseCommand = "az sql vm group show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm group update".
        /// Updates a SQL virtual machine group if there are not SQL virtual machines attached to the group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroup")]
        public static dynamic AzSqlVmGroupUpdate(this ICakeContext context, AzSqlVmGroupUpdateSettings settings) {
            var baseCommand = "az sql vm group update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--bootstrap-acc", settings.BootstrapAcc);
            AppendIfNonNull(ref baseCommand, "--domain-fqdn", settings.DomainFqdn);
            AppendIfNonNull(ref baseCommand, "--fsw-path", settings.FswPath);
            AppendIfNonNull(ref baseCommand, "--operator-acc", settings.OperatorAcc);
            AppendIfNonNull(ref baseCommand, "--ou-path", settings.OuPath);
            AppendIfNonNull(ref baseCommand, "--sa-key", settings.SaKey);
            AppendIfNonNull(ref baseCommand, "--service-acc", settings.ServiceAcc);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm group ag-listener create".
        /// Creates an availability group listener.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroupAgListener")]
        public static dynamic AzSqlVmGroupAgListenerCreate(this ICakeContext context, AzSqlVmGroupAgListenerCreateSettings settings) {
            var baseCommand = "az sql vm group ag-listener create";
            AppendIfNonNull(ref baseCommand, "--ag-name", settings.AgName);
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--load-balancer", settings.LoadBalancer);
            AppendIfNonNull(ref baseCommand, "--probe-port", settings.ProbePort);
            AppendIfNonNull(ref baseCommand, "--sqlvms", settings.Sqlvms);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--public-ip", settings.PublicIp);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm group ag-listener delete".
        /// Deletes an availability group listener.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroupAgListener")]
        public static dynamic AzSqlVmGroupAgListenerDelete(this ICakeContext context, AzSqlVmGroupAgListenerDeleteSettings settings) {
            var baseCommand = "az sql vm group ag-listener delete";
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm group ag-listener list".
        /// Lists all availability group listeners in a SQL virtual machine group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroupAgListener")]
        public static dynamic AzSqlVmGroupAgListenerList(this ICakeContext context, AzSqlVmGroupAgListenerListSettings settings) {
            var baseCommand = "az sql vm group ag-listener list";
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm group ag-listener show".
        /// Gets an availability group listener.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroupAgListener")]
        public static dynamic AzSqlVmGroupAgListenerShow(this ICakeContext context, AzSqlVmGroupAgListenerShowSettings settings) {
            var baseCommand = "az sql vm group ag-listener show";
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az sql vm group ag-listener update".
        /// Updates an availability group listener.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroupAgListener")]
        public static dynamic AzSqlVmGroupAgListenerUpdate(this ICakeContext context, AzSqlVmGroupAgListenerUpdateSettings settings) {
            var baseCommand = "az sql vm group ag-listener update";
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--sqlvms", settings.Sqlvms);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage copy".
        /// Copy files or directories to or from Azure storage.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorage")]
        public static dynamic AzStorageCopy(this ICakeContext context, AzStorageCopySettings settings) {
            var baseCommand = "az storage copy";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--blob-type", settings.BlobType);
            AppendIfNonNull(ref baseCommand, "--preserve-s2s-access-tier", settings.PreserveS2sAccessTier);
            AppendIfNonNull(ref baseCommand, "--put-md5", settings.PutMd5);
            AppendIfNonNull(ref baseCommand, "--recursive", settings.Recursive);
            AppendIfNonNull(ref baseCommand, "--destination-account-name", settings.DestinationAccountName);
            AppendIfNonNull(ref baseCommand, "--destination-blob", settings.DestinationBlob);
            AppendIfNonNull(ref baseCommand, "--destination-container", settings.DestinationContainer);
            AppendIfNonNull(ref baseCommand, "--destination-file-path", settings.DestinationFilePath);
            AppendIfNonNull(ref baseCommand, "--destination-local-path", settings.DestinationLocalPath);
            AppendIfNonNull(ref baseCommand, "--destination-share", settings.DestinationShare);
            AppendIfNonNull(ref baseCommand, "--source-account-name", settings.SourceAccountName);
            AppendIfNonNull(ref baseCommand, "--source-blob", settings.SourceBlob);
            AppendIfNonNull(ref baseCommand, "--source-container", settings.SourceContainer);
            AppendIfNonNull(ref baseCommand, "--source-file-path", settings.SourceFilePath);
            AppendIfNonNull(ref baseCommand, "--source-local-path", settings.SourceLocalPath);
            AppendIfNonNull(ref baseCommand, "--source-share", settings.SourceShare);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage remove".
        /// Delete blobs or files from Azure Storage.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorage")]
        public static dynamic AzStorageRemove(this ICakeContext context, AzStorageRemoveSettings settings) {
            var baseCommand = "az storage remove";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--exclude", settings.Exclude);
            AppendIfNonNull(ref baseCommand, "--include", settings.Include);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--recursive", settings.Recursive);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account check-name".
        /// Checks that the storage account name is valid and is not already in use.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public static dynamic AzStorageAccountCheckName(this ICakeContext context, AzStorageAccountCheckNameSettings settings) {
            var baseCommand = "az storage account check-name";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account create".
        /// Create a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public static dynamic AzStorageAccountCreate(this ICakeContext context, AzStorageAccountCreateSettings settings) {
            var baseCommand = "az storage account create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--access-tier", settings.AccessTier);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--custom-domain", settings.CustomDomain);
            AppendIfNonNull(ref baseCommand, "--enable-files-aadds", settings.EnableFilesAadds);
            AppendIfNonNull(ref baseCommand, "--enable-files-adds", settings.EnableFilesAdds);
            AppendIfNonNull(ref baseCommand, "--enable-hierarchical-namespace", settings.EnableHierarchicalNamespace);
            AppendIfNonNull(ref baseCommand, "--enable-large-file-share", settings.EnableLargeFileShare);
            AppendIfNonNull(ref baseCommand, "--encryption-services", settings.EncryptionServices);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--kind", settings.Kind);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--azure-storage-sid", settings.AzureStorageSid);
            AppendIfNonNull(ref baseCommand, "--domain-guid", settings.DomainGuid);
            AppendIfNonNull(ref baseCommand, "--domain-name", settings.DomainName);
            AppendIfNonNull(ref baseCommand, "--domain-sid", settings.DomainSid);
            AppendIfNonNull(ref baseCommand, "--forest-name", settings.ForestName);
            AppendIfNonNull(ref baseCommand, "--net-bios-domain-name", settings.NetBiosDomainName);
            AppendIfNonNull(ref baseCommand, "--bypass", settings.Bypass);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account delete".
        /// Delete a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public static dynamic AzStorageAccountDelete(this ICakeContext context, AzStorageAccountDeleteSettings settings) {
            var baseCommand = "az storage account delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account generate-sas".
        /// Generates a shared access signature for the account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public static dynamic AzStorageAccountGenerateSas(this ICakeContext context, AzStorageAccountGenerateSasSettings settings) {
            var baseCommand = "az storage account generate-sas";
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--resource-types", settings.ResourceTypes);
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account list".
        /// List storage accounts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public static dynamic AzStorageAccountList(this ICakeContext context, AzStorageAccountListSettings settings) {
            var baseCommand = "az storage account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account revoke-delegation-keys".
        /// Revoke all user delegation keys for a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public static dynamic AzStorageAccountRevokeDelegationKeys(this ICakeContext context, AzStorageAccountRevokeDelegationKeysSettings settings) {
            var baseCommand = "az storage account revoke-delegation-keys";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account show".
        /// Show storage account properties.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public static dynamic AzStorageAccountShow(this ICakeContext context, AzStorageAccountShowSettings settings) {
            var baseCommand = "az storage account show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account show-connection-string".
        /// Get the connection string for a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public static dynamic AzStorageAccountShowConnectionString(this ICakeContext context, AzStorageAccountShowConnectionStringSettings settings) {
            var baseCommand = "az storage account show-connection-string";
            AppendIfNonNull(ref baseCommand, "--blob-endpoint", settings.BlobEndpoint);
            AppendIfNonNull(ref baseCommand, "--file-endpoint", settings.FileEndpoint);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--queue-endpoint", settings.QueueEndpoint);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--table-endpoint", settings.TableEndpoint);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account show-usage".
        /// Show the current count and limit of the storage accounts under the subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public static dynamic AzStorageAccountShowUsage(this ICakeContext context, AzStorageAccountShowUsageSettings settings) {
            var baseCommand = "az storage account show-usage";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account update".
        /// Update the properties of a storage account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public static dynamic AzStorageAccountUpdate(this ICakeContext context, AzStorageAccountUpdateSettings settings) {
            var baseCommand = "az storage account update";
            AppendIfNonNull(ref baseCommand, "--access-tier", settings.AccessTier);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--custom-domain", settings.CustomDomain);
            AppendIfNonNull(ref baseCommand, "--enable-files-aadds", settings.EnableFilesAadds);
            AppendIfNonNull(ref baseCommand, "--enable-files-adds", settings.EnableFilesAdds);
            AppendIfNonNull(ref baseCommand, "--enable-large-file-share", settings.EnableLargeFileShare);
            AppendIfNonNull(ref baseCommand, "--encryption-services", settings.EncryptionServices);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--use-subdomain", settings.UseSubdomain);
            AppendIfNonNull(ref baseCommand, "--azure-storage-sid", settings.AzureStorageSid);
            AppendIfNonNull(ref baseCommand, "--domain-guid", settings.DomainGuid);
            AppendIfNonNull(ref baseCommand, "--domain-name", settings.DomainName);
            AppendIfNonNull(ref baseCommand, "--domain-sid", settings.DomainSid);
            AppendIfNonNull(ref baseCommand, "--forest-name", settings.ForestName);
            AppendIfNonNull(ref baseCommand, "--net-bios-domain-name", settings.NetBiosDomainName);
            AppendIfNonNull(ref baseCommand, "--encryption-key-name", settings.EncryptionKeyName);
            AppendIfNonNull(ref baseCommand, "--encryption-key-source", settings.EncryptionKeySource);
            AppendIfNonNull(ref baseCommand, "--encryption-key-vault", settings.EncryptionKeyVault);
            AppendIfNonNull(ref baseCommand, "--encryption-key-version", settings.EncryptionKeyVersion);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--bypass", settings.Bypass);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account keys list".
        /// List the access keys or Kerberos keys (if active directory enabled) for a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountKeys")]
        public static dynamic AzStorageAccountKeysList(this ICakeContext context, AzStorageAccountKeysListSettings settings) {
            var baseCommand = "az storage account keys list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand-key-type", settings.ExpandKeyType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account keys renew".
        /// Regenerate one of the access keys or Kerberos keys (if active directory enabled) for a storage account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountKeys")]
        public static dynamic AzStorageAccountKeysRenew(this ICakeContext context, AzStorageAccountKeysRenewSettings settings) {
            var baseCommand = "az storage account keys renew";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-type", settings.KeyType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account management-policy create".
        /// Creates the data policy rules associated with the specified storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountManagementPolicy")]
        public static dynamic AzStorageAccountManagementPolicyCreate(this ICakeContext context, AzStorageAccountManagementPolicyCreateSettings settings) {
            var baseCommand = "az storage account management-policy create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account management-policy delete".
        /// Deletes the managementpolicy associated with the specified storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountManagementPolicy")]
        public static dynamic AzStorageAccountManagementPolicyDelete(this ICakeContext context, AzStorageAccountManagementPolicyDeleteSettings settings) {
            var baseCommand = "az storage account management-policy delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account management-policy show".
        /// Gets the managementpolicy associated with the specified storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountManagementPolicy")]
        public static dynamic AzStorageAccountManagementPolicyShow(this ICakeContext context, AzStorageAccountManagementPolicyShowSettings settings) {
            var baseCommand = "az storage account management-policy show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account management-policy update".
        /// Updates the data policy rules associated with the specified storage account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountManagementPolicy")]
        public static dynamic AzStorageAccountManagementPolicyUpdate(this ICakeContext context, AzStorageAccountManagementPolicyUpdateSettings settings) {
            var baseCommand = "az storage account management-policy update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account network-rule add".
        /// Add a network rule.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountNetworkRule")]
        public static dynamic AzStorageAccountNetworkRuleAdd(this ICakeContext context, AzStorageAccountNetworkRuleAddSettings settings) {
            var baseCommand = "az storage account network-rule add";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account network-rule list".
        /// List network rules.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountNetworkRule")]
        public static dynamic AzStorageAccountNetworkRuleList(this ICakeContext context, AzStorageAccountNetworkRuleListSettings settings) {
            var baseCommand = "az storage account network-rule list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage account network-rule remove".
        /// Remove a network rule.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountNetworkRule")]
        public static dynamic AzStorageAccountNetworkRuleRemove(this ICakeContext context, AzStorageAccountNetworkRuleRemoveSettings settings) {
            var baseCommand = "az storage account network-rule remove";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob delete".
        /// Mark a blob or snapshot for deletion.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobDelete(this ICakeContext context, AzStorageBlobDeleteSettings settings) {
            var baseCommand = "az storage blob delete";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--delete-snapshots", settings.DeleteSnapshots);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob delete-batch".
        /// Delete blobs from a blob container recursively.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobDeleteBatch(this ICakeContext context, AzStorageBlobDeleteBatchSettings settings) {
            var baseCommand = "az storage blob delete-batch";
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--delete-snapshots", settings.DeleteSnapshots);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob download".
        /// Downloads a blob to a file path, with automatic chunking and progress notifications.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobDownload(this ICakeContext context, AzStorageBlobDownloadSettings settings) {
            var baseCommand = "az storage blob download";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--end-range", settings.EndRange);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--open-mode", settings.OpenMode);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--socket-timeout", settings.SocketTimeout);
            AppendIfNonNull(ref baseCommand, "--start-range", settings.StartRange);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob download-batch".
        /// Download blobs from a blob container recursively.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobDownloadBatch(this ICakeContext context, AzStorageBlobDownloadBatchSettings settings) {
            var baseCommand = "az storage blob download-batch";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--socket-timeout", settings.SocketTimeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob exists".
        /// Check for the existence of a blob in a container.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobExists(this ICakeContext context, AzStorageBlobExistsSettings settings) {
            var baseCommand = "az storage blob exists";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob generate-sas".
        /// Generates a shared access signature for the blob.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobGenerateSas(this ICakeContext context, AzStorageBlobGenerateSasSettings settings) {
            var baseCommand = "az storage blob generate-sas";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--as-user", settings.AsUser);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--cache-control", settings.CacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--full-uri", settings.FullUri);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob list".
        /// List blobs in a given container.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobList(this ICakeContext context, AzStorageBlobListSettings settings) {
            var baseCommand = "az storage blob list";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--delimiter", settings.Delimiter);
            AppendIfNonNull(ref baseCommand, "--include", settings.Include);
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob set-tier".
        /// Set the block or page tiers on the blob.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobSetTier(this ICakeContext context, AzStorageBlobSetTierSettings settings) {
            var baseCommand = "az storage blob set-tier";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob show".
        /// Get the details of a blob.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobShow(this ICakeContext context, AzStorageBlobShowSettings settings) {
            var baseCommand = "az storage blob show";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob snapshot".
        /// Creates a read-only snapshot of a blob.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobSnapshot(this ICakeContext context, AzStorageBlobSnapshotSettings settings) {
            var baseCommand = "az storage blob snapshot";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob sync".
        /// Sync blobs recursively to a storage blob container.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobSync(this ICakeContext context, AzStorageBlobSyncSettings settings) {
            var baseCommand = "az storage blob sync";
            AppendIfNonNull(ref baseCommand, "--container", settings.Container);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob undelete".
        /// The undelete Blob operation restores the contents and metadata of soft deleted blob or snapshot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobUndelete(this ICakeContext context, AzStorageBlobUndeleteSettings settings) {
            var baseCommand = "az storage blob undelete";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob update".
        /// Sets system properties on the blob.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobUpdate(this ICakeContext context, AzStorageBlobUpdateSettings settings) {
            var baseCommand = "az storage blob update";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--clear-content-settings", settings.ClearContentSettings);
            AppendIfNonNull(ref baseCommand, "--content-cache-control", settings.ContentCacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-md5", settings.ContentMd5);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob upload".
        /// Upload a file to a storage blob.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobUpload(this ICakeContext context, AzStorageBlobUploadSettings settings) {
            var baseCommand = "az storage blob upload";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--content-cache-control", settings.ContentCacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-md5", settings.ContentMd5);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--maxsize-condition", settings.MaxsizeCondition);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--socket-timeout", settings.SocketTimeout);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob upload-batch".
        /// Upload files from a local directory to a blob container.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobUploadBatch(this ICakeContext context, AzStorageBlobUploadBatchSettings settings) {
            var baseCommand = "az storage blob upload-batch";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--socket-timeout", settings.SocketTimeout);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--content-cache-control", settings.ContentCacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-md5", settings.ContentMd5);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--maxsize-condition", settings.MaxsizeCondition);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob url".
        /// Create the url to access a blob.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public static dynamic AzStorageBlobUrl(this ICakeContext context, AzStorageBlobUrlSettings settings) {
            var baseCommand = "az storage blob url";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob copy cancel".
        /// Aborts a pending copy_blob operation, and leaves a destination blob with zero length and full metadata.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobCopy")]
        public static dynamic AzStorageBlobCopyCancel(this ICakeContext context, AzStorageBlobCopyCancelSettings settings) {
            var baseCommand = "az storage blob copy cancel";
            AppendIfNonNull(ref baseCommand, "--copy-id", settings.CopyId);
            AppendIfNonNull(ref baseCommand, "--destination-blob", settings.DestinationBlob);
            AppendIfNonNull(ref baseCommand, "--destination-container", settings.DestinationContainer);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob copy start".
        /// Copies a blob asynchronously. Use `az storage blob show` to check the status of the blobs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobCopy")]
        public static dynamic AzStorageBlobCopyStart(this ICakeContext context, AzStorageBlobCopyStartSettings settings) {
            var baseCommand = "az storage blob copy start";
            AppendIfNonNull(ref baseCommand, "--destination-blob", settings.DestinationBlob);
            AppendIfNonNull(ref baseCommand, "--destination-container", settings.DestinationContainer);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--destination-lease-id", settings.DestinationLeaseId);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--requires-sync", settings.RequiresSync);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--source-account-key", settings.SourceAccountKey);
            AppendIfNonNull(ref baseCommand, "--source-account-name", settings.SourceAccountName);
            AppendIfNonNull(ref baseCommand, "--source-blob", settings.SourceBlob);
            AppendIfNonNull(ref baseCommand, "--source-container", settings.SourceContainer);
            AppendIfNonNull(ref baseCommand, "--source-lease-id", settings.SourceLeaseId);
            AppendIfNonNull(ref baseCommand, "--source-path", settings.SourcePath);
            AppendIfNonNull(ref baseCommand, "--source-sas", settings.SourceSas);
            AppendIfNonNull(ref baseCommand, "--source-share", settings.SourceShare);
            AppendIfNonNull(ref baseCommand, "--source-snapshot", settings.SourceSnapshot);
            AppendIfNonNull(ref baseCommand, "--source-uri", settings.SourceUri);
            AppendIfNonNull(ref baseCommand, "--destination-if-match", settings.DestinationIfMatch);
            AppendIfNonNull(ref baseCommand, "--destination-if-modified-since", settings.DestinationIfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--destination-if-none-match", settings.DestinationIfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--destination-if-unmodified-since", settings.DestinationIfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--source-if-match", settings.SourceIfMatch);
            AppendIfNonNull(ref baseCommand, "--source-if-modified-since", settings.SourceIfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--source-if-none-match", settings.SourceIfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--source-if-unmodified-since", settings.SourceIfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob copy start-batch".
        /// Copy multiple blobs or files to a blob container. Use `az storage blob show` to check the status of the blobs.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobCopy")]
        public static dynamic AzStorageBlobCopyStartBatch(this ICakeContext context, AzStorageBlobCopyStartBatchSettings settings) {
            var baseCommand = "az storage blob copy start-batch";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--destination-container", settings.DestinationContainer);
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--source-account-key", settings.SourceAccountKey);
            AppendIfNonNull(ref baseCommand, "--source-account-name", settings.SourceAccountName);
            AppendIfNonNull(ref baseCommand, "--source-container", settings.SourceContainer);
            AppendIfNonNull(ref baseCommand, "--source-sas", settings.SourceSas);
            AppendIfNonNull(ref baseCommand, "--source-share", settings.SourceShare);
            AppendIfNonNull(ref baseCommand, "--source-uri", settings.SourceUri);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob incremental-copy cancel".
        /// Aborts a pending copy_blob operation, and leaves a destination blob with zero length and full metadata.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobIncrementalCopy")]
        public static dynamic AzStorageBlobIncrementalCopyCancel(this ICakeContext context, AzStorageBlobIncrementalCopyCancelSettings settings) {
            var baseCommand = "az storage blob incremental-copy cancel";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--copy-id", settings.CopyId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob incremental-copy start".
        /// Copies an incremental copy of a blob asynchronously.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobIncrementalCopy")]
        public static dynamic AzStorageBlobIncrementalCopyStart(this ICakeContext context, AzStorageBlobIncrementalCopyStartSettings settings) {
            var baseCommand = "az storage blob incremental-copy start";
            AppendIfNonNull(ref baseCommand, "--destination-blob", settings.DestinationBlob);
            AppendIfNonNull(ref baseCommand, "--destination-container", settings.DestinationContainer);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--destination-lease-id", settings.DestinationLeaseId);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--source-account-key", settings.SourceAccountKey);
            AppendIfNonNull(ref baseCommand, "--source-account-name", settings.SourceAccountName);
            AppendIfNonNull(ref baseCommand, "--source-blob", settings.SourceBlob);
            AppendIfNonNull(ref baseCommand, "--source-container", settings.SourceContainer);
            AppendIfNonNull(ref baseCommand, "--source-lease-id", settings.SourceLeaseId);
            AppendIfNonNull(ref baseCommand, "--source-sas", settings.SourceSas);
            AppendIfNonNull(ref baseCommand, "--source-snapshot", settings.SourceSnapshot);
            AppendIfNonNull(ref baseCommand, "--source-uri", settings.SourceUri);
            AppendIfNonNull(ref baseCommand, "--destination-if-match", settings.DestinationIfMatch);
            AppendIfNonNull(ref baseCommand, "--destination-if-modified-since", settings.DestinationIfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--destination-if-none-match", settings.DestinationIfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--destination-if-unmodified-since", settings.DestinationIfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob lease acquire".
        /// Requests a new lease.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobLease")]
        public static dynamic AzStorageBlobLeaseAcquire(this ICakeContext context, AzStorageBlobLeaseAcquireSettings settings) {
            var baseCommand = "az storage blob lease acquire";
            AppendIfNonNull(ref baseCommand, "--blob-name", settings.BlobName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-duration", settings.LeaseDuration);
            AppendIfNonNull(ref baseCommand, "--proposed-lease-id", settings.ProposedLeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob lease break".
        /// Breaks the lease, if the blob has an active lease.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobLease")]
        public static dynamic AzStorageBlobLeaseBreak(this ICakeContext context, AzStorageBlobLeaseBreakSettings settings) {
            var baseCommand = "az storage blob lease break";
            AppendIfNonNull(ref baseCommand, "--blob-name", settings.BlobName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-break-period", settings.LeaseBreakPeriod);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob lease change".
        /// Changes the lease ID of an active lease.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobLease")]
        public static dynamic AzStorageBlobLeaseChange(this ICakeContext context, AzStorageBlobLeaseChangeSettings settings) {
            var baseCommand = "az storage blob lease change";
            AppendIfNonNull(ref baseCommand, "--blob-name", settings.BlobName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--proposed-lease-id", settings.ProposedLeaseId);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob lease release".
        /// Releases the lease.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobLease")]
        public static dynamic AzStorageBlobLeaseRelease(this ICakeContext context, AzStorageBlobLeaseReleaseSettings settings) {
            var baseCommand = "az storage blob lease release";
            AppendIfNonNull(ref baseCommand, "--blob-name", settings.BlobName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob lease renew".
        /// Renews the lease.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobLease")]
        public static dynamic AzStorageBlobLeaseRenew(this ICakeContext context, AzStorageBlobLeaseRenewSettings settings) {
            var baseCommand = "az storage blob lease renew";
            AppendIfNonNull(ref baseCommand, "--blob-name", settings.BlobName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob metadata show".
        /// Returns all user-defined metadata for the specified blob or snapshot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobMetadata")]
        public static dynamic AzStorageBlobMetadataShow(this ICakeContext context, AzStorageBlobMetadataShowSettings settings) {
            var baseCommand = "az storage blob metadata show";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob metadata update".
        /// Sets user-defined metadata for the specified blob as one or more name-value pairs.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobMetadata")]
        public static dynamic AzStorageBlobMetadataUpdate(this ICakeContext context, AzStorageBlobMetadataUpdateSettings settings) {
            var baseCommand = "az storage blob metadata update";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob service-properties show".
        /// Gets the properties of a storage account's Blob service, including Azure Storage Analytics.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobServiceProperties")]
        public static dynamic AzStorageBlobServicePropertiesShow(this ICakeContext context, AzStorageBlobServicePropertiesShowSettings settings) {
            var baseCommand = "az storage blob service-properties show";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob service-properties update".
        /// Update storage blob service properties.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobServiceProperties")]
        public static dynamic AzStorageBlobServicePropertiesUpdate(this ICakeContext context, AzStorageBlobServicePropertiesUpdateSettings settings) {
            var baseCommand = "az storage blob service-properties update";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--delete-retention", settings.DeleteRetention);
            AppendIfNonNull(ref baseCommand, "--delete-retention-period", settings.DeleteRetentionPeriod);
            AppendIfNonNull(ref baseCommand, "--404-document", settings.A404Document);
            AppendIfNonNull(ref baseCommand, "--index-document", settings.IndexDocument);
            AppendIfNonNull(ref baseCommand, "--static-website", settings.StaticWebsite);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob service-properties delete-policy show".
        /// Show the storage blob delete-policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobServicePropertiesDeletePolicy")]
        public static dynamic AzStorageBlobServicePropertiesDeletePolicyShow(this ICakeContext context, AzStorageBlobServicePropertiesDeletePolicyShowSettings settings) {
            var baseCommand = "az storage blob service-properties delete-policy show";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage blob service-properties delete-policy update".
        /// Update the storage blob delete-policy.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobServicePropertiesDeletePolicy")]
        public static dynamic AzStorageBlobServicePropertiesDeletePolicyUpdate(this ICakeContext context, AzStorageBlobServicePropertiesDeletePolicyUpdateSettings settings) {
            var baseCommand = "az storage blob service-properties delete-policy update";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--days-retained", settings.DaysRetained);
            AppendIfNonNull(ref baseCommand, "--enable", settings.Enable);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container create".
        /// Create a container in a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public static dynamic AzStorageContainerCreate(this ICakeContext context, AzStorageContainerCreateSettings settings) {
            var baseCommand = "az storage container create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--fail-on-exist", settings.FailOnExist);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--public-access", settings.PublicAccess);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container delete".
        /// Marks the specified container for deletion.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public static dynamic AzStorageContainerDelete(this ICakeContext context, AzStorageContainerDeleteSettings settings) {
            var baseCommand = "az storage container delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--bypass-immutability-policy", settings.BypassImmutabilityPolicy);
            AppendIfNonNull(ref baseCommand, "--fail-not-exist", settings.FailNotExist);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container exists".
        /// Check for the existence of a storage container.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public static dynamic AzStorageContainerExists(this ICakeContext context, AzStorageContainerExistsSettings settings) {
            var baseCommand = "az storage container exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container generate-sas".
        /// Generate a SAS token for a storage container.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public static dynamic AzStorageContainerGenerateSas(this ICakeContext context, AzStorageContainerGenerateSasSettings settings) {
            var baseCommand = "az storage container generate-sas";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--as-user", settings.AsUser);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--cache-control", settings.CacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container list".
        /// List containers in a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public static dynamic AzStorageContainerList(this ICakeContext context, AzStorageContainerListSettings settings) {
            var baseCommand = "az storage container list";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--include-metadata", settings.IncludeMetadata);
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container set-permission".
        /// Sets the permissions for the specified container or stored access policies that may be used with Shared Access Signatures.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public static dynamic AzStorageContainerSetPermission(this ICakeContext context, AzStorageContainerSetPermissionSettings settings) {
            var baseCommand = "az storage container set-permission";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--public-access", settings.PublicAccess);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container show".
        /// Returns all user-defined metadata and system properties for the specified container.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public static dynamic AzStorageContainerShow(this ICakeContext context, AzStorageContainerShowSettings settings) {
            var baseCommand = "az storage container show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container show-permission".
        /// Gets the permissions for the specified container.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public static dynamic AzStorageContainerShowPermission(this ICakeContext context, AzStorageContainerShowPermissionSettings settings) {
            var baseCommand = "az storage container show-permission";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container immutability-policy create".
        /// Creates or updates an unlocked immutability policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerImmutabilityPolicy")]
        public static dynamic AzStorageContainerImmutabilityPolicyCreate(this ICakeContext context, AzStorageContainerImmutabilityPolicyCreateSettings settings) {
            var baseCommand = "az storage container immutability-policy create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--period", settings.Period);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container immutability-policy delete".
        /// Aborts an unlocked immutability policy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerImmutabilityPolicy")]
        public static dynamic AzStorageContainerImmutabilityPolicyDelete(this ICakeContext context, AzStorageContainerImmutabilityPolicyDeleteSettings settings) {
            var baseCommand = "az storage container immutability-policy delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container immutability-policy extend".
        /// Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerImmutabilityPolicy")]
        public static dynamic AzStorageContainerImmutabilityPolicyExtend(this ICakeContext context, AzStorageContainerImmutabilityPolicyExtendSettings settings) {
            var baseCommand = "az storage container immutability-policy extend";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--period", settings.Period);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container immutability-policy lock".
        /// Sets the ImmutabilityPolicy to Locked state.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerImmutabilityPolicy")]
        public static dynamic AzStorageContainerImmutabilityPolicyLock(this ICakeContext context, AzStorageContainerImmutabilityPolicyLockSettings settings) {
            var baseCommand = "az storage container immutability-policy lock";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container immutability-policy show".
        /// Gets the existing immutability policy along with the corresponding ETag in response headers and body.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerImmutabilityPolicy")]
        public static dynamic AzStorageContainerImmutabilityPolicyShow(this ICakeContext context, AzStorageContainerImmutabilityPolicyShowSettings settings) {
            var baseCommand = "az storage container immutability-policy show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container lease acquire".
        /// Requests a new lease.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLease")]
        public static dynamic AzStorageContainerLeaseAcquire(this ICakeContext context, AzStorageContainerLeaseAcquireSettings settings) {
            var baseCommand = "az storage container lease acquire";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-duration", settings.LeaseDuration);
            AppendIfNonNull(ref baseCommand, "--proposed-lease-id", settings.ProposedLeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container lease break".
        /// Break the lease, if the container has an active lease.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLease")]
        public static dynamic AzStorageContainerLeaseBreak(this ICakeContext context, AzStorageContainerLeaseBreakSettings settings) {
            var baseCommand = "az storage container lease break";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-break-period", settings.LeaseBreakPeriod);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container lease change".
        /// Change the lease ID of an active lease.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLease")]
        public static dynamic AzStorageContainerLeaseChange(this ICakeContext context, AzStorageContainerLeaseChangeSettings settings) {
            var baseCommand = "az storage container lease change";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--proposed-lease-id", settings.ProposedLeaseId);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container lease release".
        /// Release the lease.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLease")]
        public static dynamic AzStorageContainerLeaseRelease(this ICakeContext context, AzStorageContainerLeaseReleaseSettings settings) {
            var baseCommand = "az storage container lease release";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container lease renew".
        /// Renews the lease.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLease")]
        public static dynamic AzStorageContainerLeaseRenew(this ICakeContext context, AzStorageContainerLeaseRenewSettings settings) {
            var baseCommand = "az storage container lease renew";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container legal-hold clear".
        /// Clears legal hold tags.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLegalHold")]
        public static dynamic AzStorageContainerLegalHoldClear(this ICakeContext context, AzStorageContainerLegalHoldClearSettings settings) {
            var baseCommand = "az storage container legal-hold clear";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container legal-hold set".
        /// Sets legal hold tags.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLegalHold")]
        public static dynamic AzStorageContainerLegalHoldSet(this ICakeContext context, AzStorageContainerLegalHoldSetSettings settings) {
            var baseCommand = "az storage container legal-hold set";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container legal-hold show".
        /// Get the legal hold properties of a container.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLegalHold")]
        public static dynamic AzStorageContainerLegalHoldShow(this ICakeContext context, AzStorageContainerLegalHoldShowSettings settings) {
            var baseCommand = "az storage container legal-hold show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container metadata show".
        /// Returns all user-defined metadata for the specified container.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerMetadata")]
        public static dynamic AzStorageContainerMetadataShow(this ICakeContext context, AzStorageContainerMetadataShowSettings settings) {
            var baseCommand = "az storage container metadata show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container metadata update".
        /// Sets one or more user-defined name-value pairs for the specified container.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerMetadata")]
        public static dynamic AzStorageContainerMetadataUpdate(this ICakeContext context, AzStorageContainerMetadataUpdateSettings settings) {
            var baseCommand = "az storage container metadata update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container policy create".
        /// Create a stored access policy on the containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerPolicy")]
        public static dynamic AzStorageContainerPolicyCreate(this ICakeContext context, AzStorageContainerPolicyCreateSettings settings) {
            var baseCommand = "az storage container policy create";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container policy delete".
        /// Delete a stored access policy on a containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerPolicy")]
        public static dynamic AzStorageContainerPolicyDelete(this ICakeContext context, AzStorageContainerPolicyDeleteSettings settings) {
            var baseCommand = "az storage container policy delete";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container policy list".
        /// List stored access policies on a containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerPolicy")]
        public static dynamic AzStorageContainerPolicyList(this ICakeContext context, AzStorageContainerPolicyListSettings settings) {
            var baseCommand = "az storage container policy list";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container policy show".
        /// Show a stored access policy on a containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerPolicy")]
        public static dynamic AzStorageContainerPolicyShow(this ICakeContext context, AzStorageContainerPolicyShowSettings settings) {
            var baseCommand = "az storage container policy show";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage container policy update".
        /// Set a stored access policy on a containing object.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerPolicy")]
        public static dynamic AzStorageContainerPolicyUpdate(this ICakeContext context, AzStorageContainerPolicyUpdateSettings settings) {
            var baseCommand = "az storage container policy update";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage cors add".
        /// Add a CORS rule to a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageCors")]
        public static dynamic AzStorageCorsAdd(this ICakeContext context, AzStorageCorsAddSettings settings) {
            var baseCommand = "az storage cors add";
            AppendIfNonNull(ref baseCommand, "--methods", settings.Methods);
            AppendIfNonNull(ref baseCommand, "--origins", settings.Origins);
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--allowed-headers", settings.AllowedHeaders);
            AppendIfNonNull(ref baseCommand, "--exposed-headers", settings.ExposedHeaders);
            AppendIfNonNull(ref baseCommand, "--max-age", settings.MaxAge);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage cors clear".
        /// Remove all CORS rules from a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageCors")]
        public static dynamic AzStorageCorsClear(this ICakeContext context, AzStorageCorsClearSettings settings) {
            var baseCommand = "az storage cors clear";
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage cors list".
        /// List all CORS rules for a storage account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageCors")]
        public static dynamic AzStorageCorsList(this ICakeContext context, AzStorageCorsListSettings settings) {
            var baseCommand = "az storage cors list";
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage directory create".
        /// Creates a new directory under the specified share or parent directory.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectory")]
        public static dynamic AzStorageDirectoryCreate(this ICakeContext context, AzStorageDirectoryCreateSettings settings) {
            var baseCommand = "az storage directory create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--fail-on-exist", settings.FailOnExist);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage directory delete".
        /// Deletes the specified empty directory.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectory")]
        public static dynamic AzStorageDirectoryDelete(this ICakeContext context, AzStorageDirectoryDeleteSettings settings) {
            var baseCommand = "az storage directory delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--fail-not-exist", settings.FailNotExist);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage directory exists".
        /// Check for the existence of a storage directory.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectory")]
        public static dynamic AzStorageDirectoryExists(this ICakeContext context, AzStorageDirectoryExistsSettings settings) {
            var baseCommand = "az storage directory exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage directory list".
        /// List directories in a share.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectory")]
        public static dynamic AzStorageDirectoryList(this ICakeContext context, AzStorageDirectoryListSettings settings) {
            var baseCommand = "az storage directory list";
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage directory show".
        /// Returns all user-defined metadata and system properties for the specified directory.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectory")]
        public static dynamic AzStorageDirectoryShow(this ICakeContext context, AzStorageDirectoryShowSettings settings) {
            var baseCommand = "az storage directory show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage directory metadata show".
        /// Returns all user-defined metadata for the specified directory.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectoryMetadata")]
        public static dynamic AzStorageDirectoryMetadataShow(this ICakeContext context, AzStorageDirectoryMetadataShowSettings settings) {
            var baseCommand = "az storage directory metadata show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage directory metadata update".
        /// Sets one or more user-defined name-value pairs for the specified directory.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectoryMetadata")]
        public static dynamic AzStorageDirectoryMetadataUpdate(this ICakeContext context, AzStorageDirectoryMetadataUpdateSettings settings) {
            var baseCommand = "az storage directory metadata update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage entity delete".
        /// Deletes an existing entity in a table.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageEntity")]
        public static dynamic AzStorageEntityDelete(this ICakeContext context, AzStorageEntityDeleteSettings settings) {
            var baseCommand = "az storage entity delete";
            AppendIfNonNull(ref baseCommand, "--partition-key", settings.PartitionKey);
            AppendIfNonNull(ref baseCommand, "--row-key", settings.RowKey);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage entity insert".
        /// Insert an entity into a table.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageEntity")]
        public static dynamic AzStorageEntityInsert(this ICakeContext context, AzStorageEntityInsertSettings settings) {
            var baseCommand = "az storage entity insert";
            AppendIfNonNull(ref baseCommand, "--entity", settings.Entity);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--if-exists", settings.IfExists);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage entity merge".
        /// Updates an existing entity by merging the entity's properties.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageEntity")]
        public static dynamic AzStorageEntityMerge(this ICakeContext context, AzStorageEntityMergeSettings settings) {
            var baseCommand = "az storage entity merge";
            AppendIfNonNull(ref baseCommand, "--entity", settings.Entity);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage entity query".
        /// List entities which satisfy a query.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageEntity")]
        public static dynamic AzStorageEntityQuery(this ICakeContext context, AzStorageEntityQuerySettings settings) {
            var baseCommand = "az storage entity query";
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--accept", settings.Accept);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage entity replace".
        /// Updates an existing entity in a table.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageEntity")]
        public static dynamic AzStorageEntityReplace(this ICakeContext context, AzStorageEntityReplaceSettings settings) {
            var baseCommand = "az storage entity replace";
            AppendIfNonNull(ref baseCommand, "--entity", settings.Entity);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage entity show".
        /// Get an entity from the specified table.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageEntity")]
        public static dynamic AzStorageEntityShow(this ICakeContext context, AzStorageEntityShowSettings settings) {
            var baseCommand = "az storage entity show";
            AppendIfNonNull(ref baseCommand, "--partition-key", settings.PartitionKey);
            AppendIfNonNull(ref baseCommand, "--row-key", settings.RowKey);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--accept", settings.Accept);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file delete".
        /// Marks the specified file for deletion.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileDelete(this ICakeContext context, AzStorageFileDeleteSettings settings) {
            var baseCommand = "az storage file delete";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file delete-batch".
        /// Delete files from an Azure Storage File Share.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileDeleteBatch(this ICakeContext context, AzStorageFileDeleteBatchSettings settings) {
            var baseCommand = "az storage file delete-batch";
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file download".
        /// Downloads a file to a file path, with automatic chunking and progress notifications.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileDownload(this ICakeContext context, AzStorageFileDownloadSettings settings) {
            var baseCommand = "az storage file download";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--dest", settings.Dest);
            AppendIfNonNull(ref baseCommand, "--end-range", settings.EndRange);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--open-mode", settings.OpenMode);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--start-range", settings.StartRange);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file download-batch".
        /// Download files from an Azure Storage File Share to a local directory in a batch operation.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileDownloadBatch(this ICakeContext context, AzStorageFileDownloadBatchSettings settings) {
            var baseCommand = "az storage file download-batch";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file exists".
        /// Check for the existence of a file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileExists(this ICakeContext context, AzStorageFileExistsSettings settings) {
            var baseCommand = "az storage file exists";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file generate-sas".
        /// Generates a shared access signature for the file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileGenerateSas(this ICakeContext context, AzStorageFileGenerateSasSettings settings) {
            var baseCommand = "az storage file generate-sas";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--cache-control", settings.CacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file list".
        /// List files and directories in a share.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileList(this ICakeContext context, AzStorageFileListSettings settings) {
            var baseCommand = "az storage file list";
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--exclude-dir", settings.ExcludeDir);
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file resize".
        /// Resizes a file to the specified size.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileResize(this ICakeContext context, AzStorageFileResizeSettings settings) {
            var baseCommand = "az storage file resize";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file show".
        /// Returns all user-defined metadata, standard HTTP properties, and system properties for the file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileShow(this ICakeContext context, AzStorageFileShowSettings settings) {
            var baseCommand = "az storage file show";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file update".
        /// Sets system properties on the file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileUpdate(this ICakeContext context, AzStorageFileUpdateSettings settings) {
            var baseCommand = "az storage file update";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--clear-content-settings", settings.ClearContentSettings);
            AppendIfNonNull(ref baseCommand, "--content-cache-control", settings.ContentCacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-md5", settings.ContentMd5);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file upload".
        /// Upload a file to a share that uses the SMB 3.0 protocol.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileUpload(this ICakeContext context, AzStorageFileUploadSettings settings) {
            var baseCommand = "az storage file upload";
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--content-cache-control", settings.ContentCacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-md5", settings.ContentMd5);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file upload-batch".
        /// Upload files from a local directory to an Azure Storage File Share in a batch operation.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileUploadBatch(this ICakeContext context, AzStorageFileUploadBatchSettings settings) {
            var baseCommand = "az storage file upload-batch";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--content-cache-control", settings.ContentCacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-md5", settings.ContentMd5);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file url".
        /// Create the url to access a file.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public static dynamic AzStorageFileUrl(this ICakeContext context, AzStorageFileUrlSettings settings) {
            var baseCommand = "az storage file url";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file copy cancel".
        /// Aborts a pending copy_file operation, and leaves a destination file  with zero length and full metadata.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFileCopy")]
        public static dynamic AzStorageFileCopyCancel(this ICakeContext context, AzStorageFileCopyCancelSettings settings) {
            var baseCommand = "az storage file copy cancel";
            AppendIfNonNull(ref baseCommand, "--copy-id", settings.CopyId);
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--destination-share", settings.DestinationShare);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file copy start".
        /// Copies a file asynchronously.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFileCopy")]
        public static dynamic AzStorageFileCopyStart(this ICakeContext context, AzStorageFileCopyStartSettings settings) {
            var baseCommand = "az storage file copy start";
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--destination-share", settings.DestinationShare);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--file-snapshot", settings.FileSnapshot);
            AppendIfNonNull(ref baseCommand, "--source-account-key", settings.SourceAccountKey);
            AppendIfNonNull(ref baseCommand, "--source-account-name", settings.SourceAccountName);
            AppendIfNonNull(ref baseCommand, "--source-blob", settings.SourceBlob);
            AppendIfNonNull(ref baseCommand, "--source-container", settings.SourceContainer);
            AppendIfNonNull(ref baseCommand, "--source-path", settings.SourcePath);
            AppendIfNonNull(ref baseCommand, "--source-sas", settings.SourceSas);
            AppendIfNonNull(ref baseCommand, "--source-share", settings.SourceShare);
            AppendIfNonNull(ref baseCommand, "--source-snapshot", settings.SourceSnapshot);
            AppendIfNonNull(ref baseCommand, "--source-uri", settings.SourceUri);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file copy start-batch".
        /// Copy multiple files or blobs to a file share.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFileCopy")]
        public static dynamic AzStorageFileCopyStartBatch(this ICakeContext context, AzStorageFileCopyStartBatchSettings settings) {
            var baseCommand = "az storage file copy start-batch";
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--destination-share", settings.DestinationShare);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--source-account-key", settings.SourceAccountKey);
            AppendIfNonNull(ref baseCommand, "--source-account-name", settings.SourceAccountName);
            AppendIfNonNull(ref baseCommand, "--source-container", settings.SourceContainer);
            AppendIfNonNull(ref baseCommand, "--source-sas", settings.SourceSas);
            AppendIfNonNull(ref baseCommand, "--source-share", settings.SourceShare);
            AppendIfNonNull(ref baseCommand, "--source-uri", settings.SourceUri);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file metadata show".
        /// Returns all user-defined metadata for the specified file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFileMetadata")]
        public static dynamic AzStorageFileMetadataShow(this ICakeContext context, AzStorageFileMetadataShowSettings settings) {
            var baseCommand = "az storage file metadata show";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage file metadata update".
        /// Sets user-defined metadata for the specified file as one or more name-value pairs.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFileMetadata")]
        public static dynamic AzStorageFileMetadataUpdate(this ICakeContext context, AzStorageFileMetadataUpdateSettings settings) {
            var baseCommand = "az storage file metadata update";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage logging show".
        /// Show logging settings for a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageLogging")]
        public static dynamic AzStorageLoggingShow(this ICakeContext context, AzStorageLoggingShowSettings settings) {
            var baseCommand = "az storage logging show";
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage logging update".
        /// Update logging settings for a storage account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageLogging")]
        public static dynamic AzStorageLoggingUpdate(this ICakeContext context, AzStorageLoggingUpdateSettings settings) {
            var baseCommand = "az storage logging update";
            AppendIfNonNull(ref baseCommand, "--log", settings.Log);
            AppendIfNonNull(ref baseCommand, "--retention", settings.Retention);
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage message clear".
        /// Deletes all messages from the specified queue.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMessage")]
        public static dynamic AzStorageMessageClear(this ICakeContext context, AzStorageMessageClearSettings settings) {
            var baseCommand = "az storage message clear";
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage message delete".
        /// Deletes the specified message.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMessage")]
        public static dynamic AzStorageMessageDelete(this ICakeContext context, AzStorageMessageDeleteSettings settings) {
            var baseCommand = "az storage message delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--pop-receipt", settings.PopReceipt);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage message get".
        /// Retrieves one or more messages from the front of the queue.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMessage")]
        public static dynamic AzStorageMessageGet(this ICakeContext context, AzStorageMessageGetSettings settings) {
            var baseCommand = "az storage message get";
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--num-messages", settings.NumMessages);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--visibility-timeout", settings.VisibilityTimeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage message peek".
        /// Retrieves one or more messages from the front of the queue, but does not alter the visibility of the message.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMessage")]
        public static dynamic AzStorageMessagePeek(this ICakeContext context, AzStorageMessagePeekSettings settings) {
            var baseCommand = "az storage message peek";
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--num-messages", settings.NumMessages);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage message put".
        /// Adds a new message to the back of the message queue.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMessage")]
        public static dynamic AzStorageMessagePut(this ICakeContext context, AzStorageMessagePutSettings settings) {
            var baseCommand = "az storage message put";
            AppendIfNonNull(ref baseCommand, "--content", settings.Content);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--time-to-live", settings.TimeToLive);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--visibility-timeout", settings.VisibilityTimeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage message update".
        /// Updates the visibility timeout of a message.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMessage")]
        public static dynamic AzStorageMessageUpdate(this ICakeContext context, AzStorageMessageUpdateSettings settings) {
            var baseCommand = "az storage message update";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--pop-receipt", settings.PopReceipt);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--visibility-timeout", settings.VisibilityTimeout);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--content", settings.Content);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage metrics show".
        /// Show metrics settings for a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMetrics")]
        public static dynamic AzStorageMetricsShow(this ICakeContext context, AzStorageMetricsShowSettings settings) {
            var baseCommand = "az storage metrics show";
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage metrics update".
        /// Update metrics settings for a storage account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMetrics")]
        public static dynamic AzStorageMetricsUpdate(this ICakeContext context, AzStorageMetricsUpdateSettings settings) {
            var baseCommand = "az storage metrics update";
            AppendIfNonNull(ref baseCommand, "--retention", settings.Retention);
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--api", settings.Api);
            AppendIfNonNull(ref baseCommand, "--hour", settings.Hour);
            AppendIfNonNull(ref baseCommand, "--minute", settings.Minute);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue create".
        /// Creates a queue under the given account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueue")]
        public static dynamic AzStorageQueueCreate(this ICakeContext context, AzStorageQueueCreateSettings settings) {
            var baseCommand = "az storage queue create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--fail-on-exist", settings.FailOnExist);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue delete".
        /// Deletes the specified queue and any messages it contains.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueue")]
        public static dynamic AzStorageQueueDelete(this ICakeContext context, AzStorageQueueDeleteSettings settings) {
            var baseCommand = "az storage queue delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--fail-not-exist", settings.FailNotExist);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue exists".
        /// Returns a boolean indicating whether the queue exists.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueue")]
        public static dynamic AzStorageQueueExists(this ICakeContext context, AzStorageQueueExistsSettings settings) {
            var baseCommand = "az storage queue exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue generate-sas".
        /// Generates a shared access signature for the queue.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueue")]
        public static dynamic AzStorageQueueGenerateSas(this ICakeContext context, AzStorageQueueGenerateSasSettings settings) {
            var baseCommand = "az storage queue generate-sas";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue list".
        /// List queues in a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueue")]
        public static dynamic AzStorageQueueList(this ICakeContext context, AzStorageQueueListSettings settings) {
            var baseCommand = "az storage queue list";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--include-metadata", settings.IncludeMetadata);
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue stats".
        /// Retrieves statistics related to replication for the Queue service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueue")]
        public static dynamic AzStorageQueueStats(this ICakeContext context, AzStorageQueueStatsSettings settings) {
            var baseCommand = "az storage queue stats";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue metadata show".
        /// Retrieves user-defined metadata and queue properties on the specified queue.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueueMetadata")]
        public static dynamic AzStorageQueueMetadataShow(this ICakeContext context, AzStorageQueueMetadataShowSettings settings) {
            var baseCommand = "az storage queue metadata show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue metadata update".
        /// Sets user-defined metadata on the specified queue.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueueMetadata")]
        public static dynamic AzStorageQueueMetadataUpdate(this ICakeContext context, AzStorageQueueMetadataUpdateSettings settings) {
            var baseCommand = "az storage queue metadata update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue policy create".
        /// Create a stored access policy on the containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueuePolicy")]
        public static dynamic AzStorageQueuePolicyCreate(this ICakeContext context, AzStorageQueuePolicyCreateSettings settings) {
            var baseCommand = "az storage queue policy create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue policy delete".
        /// Delete a stored access policy on a containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueuePolicy")]
        public static dynamic AzStorageQueuePolicyDelete(this ICakeContext context, AzStorageQueuePolicyDeleteSettings settings) {
            var baseCommand = "az storage queue policy delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue policy list".
        /// List stored access policies on a containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueuePolicy")]
        public static dynamic AzStorageQueuePolicyList(this ICakeContext context, AzStorageQueuePolicyListSettings settings) {
            var baseCommand = "az storage queue policy list";
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue policy show".
        /// Show a stored access policy on a containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueuePolicy")]
        public static dynamic AzStorageQueuePolicyShow(this ICakeContext context, AzStorageQueuePolicyShowSettings settings) {
            var baseCommand = "az storage queue policy show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage queue policy update".
        /// Set a stored access policy on a containing object.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueuePolicy")]
        public static dynamic AzStorageQueuePolicyUpdate(this ICakeContext context, AzStorageQueuePolicyUpdateSettings settings) {
            var baseCommand = "az storage queue policy update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share create".
        /// Creates a new share under the specified account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public static dynamic AzStorageShareCreate(this ICakeContext context, AzStorageShareCreateSettings settings) {
            var baseCommand = "az storage share create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--fail-on-exist", settings.FailOnExist);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--quota", settings.Quota);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share delete".
        /// Marks the specified share for deletion.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public static dynamic AzStorageShareDelete(this ICakeContext context, AzStorageShareDeleteSettings settings) {
            var baseCommand = "az storage share delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--delete-snapshots", settings.DeleteSnapshots);
            AppendIfNonNull(ref baseCommand, "--fail-not-exist", settings.FailNotExist);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share exists".
        /// Check for the existence of a file share.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public static dynamic AzStorageShareExists(this ICakeContext context, AzStorageShareExistsSettings settings) {
            var baseCommand = "az storage share exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share generate-sas".
        /// Generates a shared access signature for the share.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public static dynamic AzStorageShareGenerateSas(this ICakeContext context, AzStorageShareGenerateSasSettings settings) {
            var baseCommand = "az storage share generate-sas";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--cache-control", settings.CacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share list".
        /// List the file shares in a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public static dynamic AzStorageShareList(this ICakeContext context, AzStorageShareListSettings settings) {
            var baseCommand = "az storage share list";
            AppendIfNonNull(ref baseCommand, "--include-metadata", settings.IncludeMetadata);
            AppendIfNonNull(ref baseCommand, "--include-snapshots", settings.IncludeSnapshots);
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share show".
        /// Returns all user-defined metadata and system properties for the specified share.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public static dynamic AzStorageShareShow(this ICakeContext context, AzStorageShareShowSettings settings) {
            var baseCommand = "az storage share show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share snapshot".
        /// Creates a snapshot of an existing share under the specified account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public static dynamic AzStorageShareSnapshot(this ICakeContext context, AzStorageShareSnapshotSettings settings) {
            var baseCommand = "az storage share snapshot";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--quota", settings.Quota);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share stats".
        /// Gets the approximate size of the data stored on the share, rounded up to the nearest gigabyte.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public static dynamic AzStorageShareStats(this ICakeContext context, AzStorageShareStatsSettings settings) {
            var baseCommand = "az storage share stats";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share update".
        /// Sets service-defined properties for the specified share.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public static dynamic AzStorageShareUpdate(this ICakeContext context, AzStorageShareUpdateSettings settings) {
            var baseCommand = "az storage share update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--quota", settings.Quota);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share url".
        /// Create a URI to access a file share.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public static dynamic AzStorageShareUrl(this ICakeContext context, AzStorageShareUrlSettings settings) {
            var baseCommand = "az storage share url";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--unc", settings.Unc);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share metadata show".
        /// Returns all user-defined metadata for the specified share.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShareMetadata")]
        public static dynamic AzStorageShareMetadataShow(this ICakeContext context, AzStorageShareMetadataShowSettings settings) {
            var baseCommand = "az storage share metadata show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share metadata update".
        /// Sets one or more user-defined name-value pairs for the specified share.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShareMetadata")]
        public static dynamic AzStorageShareMetadataUpdate(this ICakeContext context, AzStorageShareMetadataUpdateSettings settings) {
            var baseCommand = "az storage share metadata update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share policy create".
        /// Create a stored access policy on the containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageSharePolicy")]
        public static dynamic AzStorageSharePolicyCreate(this ICakeContext context, AzStorageSharePolicyCreateSettings settings) {
            var baseCommand = "az storage share policy create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share policy delete".
        /// Delete a stored access policy on a containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageSharePolicy")]
        public static dynamic AzStorageSharePolicyDelete(this ICakeContext context, AzStorageSharePolicyDeleteSettings settings) {
            var baseCommand = "az storage share policy delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share policy list".
        /// List stored access policies on a containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageSharePolicy")]
        public static dynamic AzStorageSharePolicyList(this ICakeContext context, AzStorageSharePolicyListSettings settings) {
            var baseCommand = "az storage share policy list";
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share policy show".
        /// Show a stored access policy on a containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageSharePolicy")]
        public static dynamic AzStorageSharePolicyShow(this ICakeContext context, AzStorageSharePolicyShowSettings settings) {
            var baseCommand = "az storage share policy show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage share policy update".
        /// Set a stored access policy on a containing object.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageSharePolicy")]
        public static dynamic AzStorageSharePolicyUpdate(this ICakeContext context, AzStorageSharePolicyUpdateSettings settings) {
            var baseCommand = "az storage share policy update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage table create".
        /// Creates a new table in the storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTable")]
        public static dynamic AzStorageTableCreate(this ICakeContext context, AzStorageTableCreateSettings settings) {
            var baseCommand = "az storage table create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--fail-on-exist", settings.FailOnExist);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage table delete".
        /// Deletes the specified table and any data it contains.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTable")]
        public static dynamic AzStorageTableDelete(this ICakeContext context, AzStorageTableDeleteSettings settings) {
            var baseCommand = "az storage table delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--fail-not-exist", settings.FailNotExist);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage table exists".
        /// Returns a boolean indicating whether the table exists.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTable")]
        public static dynamic AzStorageTableExists(this ICakeContext context, AzStorageTableExistsSettings settings) {
            var baseCommand = "az storage table exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage table generate-sas".
        /// Generates a shared access signature for the table.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTable")]
        public static dynamic AzStorageTableGenerateSas(this ICakeContext context, AzStorageTableGenerateSasSettings settings) {
            var baseCommand = "az storage table generate-sas";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--end-pk", settings.EndPk);
            AppendIfNonNull(ref baseCommand, "--end-rk", settings.EndRk);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--start-pk", settings.StartPk);
            AppendIfNonNull(ref baseCommand, "--start-rk", settings.StartRk);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage table list".
        /// List tables in a storage account.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTable")]
        public static dynamic AzStorageTableList(this ICakeContext context, AzStorageTableListSettings settings) {
            var baseCommand = "az storage table list";
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage table stats".
        /// Retrieves statistics related to replication for the Table service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTable")]
        public static dynamic AzStorageTableStats(this ICakeContext context, AzStorageTableStatsSettings settings) {
            var baseCommand = "az storage table stats";
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage table policy create".
        /// Create a stored access policy on the containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTablePolicy")]
        public static dynamic AzStorageTablePolicyCreate(this ICakeContext context, AzStorageTablePolicyCreateSettings settings) {
            var baseCommand = "az storage table policy create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage table policy delete".
        /// Delete a stored access policy on a containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTablePolicy")]
        public static dynamic AzStorageTablePolicyDelete(this ICakeContext context, AzStorageTablePolicyDeleteSettings settings) {
            var baseCommand = "az storage table policy delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage table policy list".
        /// List stored access policies on a containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTablePolicy")]
        public static dynamic AzStorageTablePolicyList(this ICakeContext context, AzStorageTablePolicyListSettings settings) {
            var baseCommand = "az storage table policy list";
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage table policy show".
        /// Show a stored access policy on a containing object.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTablePolicy")]
        public static dynamic AzStorageTablePolicyShow(this ICakeContext context, AzStorageTablePolicyShowSettings settings) {
            var baseCommand = "az storage table policy show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az storage table policy update".
        /// Set a stored access policy on a containing object.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTablePolicy")]
        public static dynamic AzStorageTablePolicyUpdate(this ICakeContext context, AzStorageTablePolicyUpdateSettings settings) {
            var baseCommand = "az storage table policy update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az tag add-value".
        /// Creates a tag value.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzTag")]
        public static dynamic AzTagAddValue(this ICakeContext context, AzTagAddValueSettings settings) {
            var baseCommand = "az tag add-value";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az tag create".
        /// Creates a tag in the subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzTag")]
        public static dynamic AzTagCreate(this ICakeContext context, AzTagCreateSettings settings) {
            var baseCommand = "az tag create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az tag delete".
        /// Deletes a tag from the subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzTag")]
        public static dynamic AzTagDelete(this ICakeContext context, AzTagDeleteSettings settings) {
            var baseCommand = "az tag delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az tag list".
        /// Gets the names and values of all resource tags that are defined in a subscription.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzTag")]
        public static dynamic AzTagList(this ICakeContext context, AzTagListSettings settings) {
            var baseCommand = "az tag list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az tag remove-value".
        /// Deletes a tag value.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzTag")]
        public static dynamic AzTagRemoveValue(this ICakeContext context, AzTagRemoveValueSettings settings) {
            var baseCommand = "az tag remove-value";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm capture".
        /// Capture information for a stopped VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmCapture(this ICakeContext context, AzVmCaptureSettings settings) {
            var baseCommand = "az vm capture";
            AppendIfNonNull(ref baseCommand, "--vhd-name-prefix", settings.VhdNamePrefix);
            AppendIfNonNull(ref baseCommand, "--overwrite", settings.Overwrite);
            AppendIfNonNull(ref baseCommand, "--storage-container", settings.StorageContainer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm convert".
        /// Convert a VM with unmanaged disks to use managed disks.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmConvert(this ICakeContext context, AzVmConvertSettings settings) {
            var baseCommand = "az vm convert";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm create".
        /// Create an Azure Virtual Machine.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmCreate(this ICakeContext context, AzVmCreateSettings settings) {
            var baseCommand = "az vm create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--availability-set", settings.AvailabilitySet);
            AppendIfNonNull(ref baseCommand, "--boot-diagnostics-storage", settings.BootDiagnosticsStorage);
            AppendIfNonNull(ref baseCommand, "--computer-name", settings.ComputerName);
            AppendIfNonNull(ref baseCommand, "--custom-data", settings.CustomData);
            AppendIfNonNull(ref baseCommand, "--enable-agent", settings.EnableAgent);
            AppendIfNonNull(ref baseCommand, "--eviction-policy", settings.EvictionPolicy);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--max-price", settings.MaxPrice);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ppg", settings.Ppg);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--secrets", settings.Secrets);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--validate", settings.Validate);
            AppendIfNonNull(ref baseCommand, "--vmss", settings.Vmss);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-username", settings.AdminUsername);
            AppendIfNonNull(ref baseCommand, "--authentication-type", settings.AuthenticationType);
            AppendIfNonNull(ref baseCommand, "--generate-ssh-keys", settings.GenerateSshKeys);
            AppendIfNonNull(ref baseCommand, "--ssh-dest-key-path", settings.SshDestKeyPath);
            AppendIfNonNull(ref baseCommand, "--ssh-key-values", settings.SshKeyValues);
            AppendIfNonNull(ref baseCommand, "--host", settings.Host);
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--plan-name", settings.PlanName);
            AppendIfNonNull(ref baseCommand, "--plan-product", settings.PlanProduct);
            AppendIfNonNull(ref baseCommand, "--plan-promotion-code", settings.PlanPromotionCode);
            AppendIfNonNull(ref baseCommand, "--plan-publisher", settings.PlanPublisher);
            AppendIfNonNull(ref baseCommand, "--workspace", settings.Workspace);
            AppendIfNonNull(ref baseCommand, "--accelerated-networking", settings.AcceleratedNetworking);
            AppendIfNonNull(ref baseCommand, "--asgs", settings.Asgs);
            AppendIfNonNull(ref baseCommand, "--nics", settings.Nics);
            AppendIfNonNull(ref baseCommand, "--nsg", settings.Nsg);
            AppendIfNonNull(ref baseCommand, "--nsg-rule", settings.NsgRule);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address-allocation", settings.PublicIpAddressAllocation);
            AppendIfNonNull(ref baseCommand, "--public-ip-address-dns-name", settings.PublicIpAddressDnsName);
            AppendIfNonNull(ref baseCommand, "--public-ip-sku", settings.PublicIpSku);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--subnet-address-prefix", settings.SubnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-address-prefix", settings.VnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--attach-data-disks", settings.AttachDataDisks);
            AppendIfNonNull(ref baseCommand, "--attach-os-disk", settings.AttachOsDisk);
            AppendIfNonNull(ref baseCommand, "--data-disk-caching", settings.DataDiskCaching);
            AppendIfNonNull(ref baseCommand, "--data-disk-sizes-gb", settings.DataDiskSizesGb);
            AppendIfNonNull(ref baseCommand, "--ephemeral-os-disk", settings.EphemeralOsDisk);
            AppendIfNonNull(ref baseCommand, "--os-disk-caching", settings.OsDiskCaching);
            AppendIfNonNull(ref baseCommand, "--os-disk-name", settings.OsDiskName);
            AppendIfNonNull(ref baseCommand, "--os-disk-size-gb", settings.OsDiskSizeGb);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--storage-container-name", settings.StorageContainerName);
            AppendIfNonNull(ref baseCommand, "--storage-sku", settings.StorageSku);
            AppendIfNonNull(ref baseCommand, "--ultra-ssd-enabled", settings.UltraSsdEnabled);
            AppendIfNonNull(ref baseCommand, "--use-unmanaged-disk", settings.UseUnmanagedDisk);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm deallocate".
        /// Deallocate a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmDeallocate(this ICakeContext context, AzVmDeallocateSettings settings) {
            var baseCommand = "az vm deallocate";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm delete".
        /// Delete a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmDelete(this ICakeContext context, AzVmDeleteSettings settings) {
            var baseCommand = "az vm delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm generalize".
        /// Mark a VM as generalized, allowing it to be imaged for multiple deployments.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmGeneralize(this ICakeContext context, AzVmGeneralizeSettings settings) {
            var baseCommand = "az vm generalize";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm get-instance-view".
        /// Get instance information about a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmGetInstanceView(this ICakeContext context, AzVmGetInstanceViewSettings settings) {
            var baseCommand = "az vm get-instance-view";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm list".
        /// List details of Virtual Machines.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmList(this ICakeContext context, AzVmListSettings settings) {
            var baseCommand = "az vm list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--show-details", settings.ShowDetails);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm list-ip-addresses".
        /// List IP addresses associated with a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmListIpAddresses(this ICakeContext context, AzVmListIpAddressesSettings settings) {
            var baseCommand = "az vm list-ip-addresses";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm list-sizes".
        /// List available sizes for VMs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmListSizes(this ICakeContext context, AzVmListSizesSettings settings) {
            var baseCommand = "az vm list-sizes";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm list-skus".
        /// Get details for compute-related resource SKUs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmListSkus(this ICakeContext context, AzVmListSkusSettings settings) {
            var baseCommand = "az vm list-skus";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm list-usage".
        /// List available usage resources for VMs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmListUsage(this ICakeContext context, AzVmListUsageSettings settings) {
            var baseCommand = "az vm list-usage";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm list-vm-resize-options".
        /// List available resizing options for VMs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmListVmResizeOptions(this ICakeContext context, AzVmListVmResizeOptionsSettings settings) {
            var baseCommand = "az vm list-vm-resize-options";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm open-port".
        /// Opens a VM to inbound traffic on specified ports.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmOpenPort(this ICakeContext context, AzVmOpenPortSettings settings) {
            var baseCommand = "az vm open-port";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--apply-to-subnet", settings.ApplyToSubnet);
            AppendIfNonNull(ref baseCommand, "--nsg-name", settings.NsgName);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm perform-maintenance".
        /// The operation to perform maintenance on a virtual machine.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmPerformMaintenance(this ICakeContext context, AzVmPerformMaintenanceSettings settings) {
            var baseCommand = "az vm perform-maintenance";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm redeploy".
        /// Redeploy an existing VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmRedeploy(this ICakeContext context, AzVmRedeploySettings settings) {
            var baseCommand = "az vm redeploy";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm resize".
        /// Update a VM's size.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmResize(this ICakeContext context, AzVmResizeSettings settings) {
            var baseCommand = "az vm resize";
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm restart".
        /// Restart VMs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmRestart(this ICakeContext context, AzVmRestartSettings settings) {
            var baseCommand = "az vm restart";
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm show".
        /// Get the details of a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmShow(this ICakeContext context, AzVmShowSettings settings) {
            var baseCommand = "az vm show";
            AppendIfNonNull(ref baseCommand, "--show-details", settings.ShowDetails);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm start".
        /// Start a stopped VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmStart(this ICakeContext context, AzVmStartSettings settings) {
            var baseCommand = "az vm start";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm stop".
        /// Power off (stop) a running VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmStop(this ICakeContext context, AzVmStopSettings settings) {
            var baseCommand = "az vm stop";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--skip-shutdown", settings.SkipShutdown);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm update".
        /// Update the properties of a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmUpdate(this ICakeContext context, AzVmUpdateSettings settings) {
            var baseCommand = "az vm update";
            AppendIfNonNull(ref baseCommand, "--disk-caching", settings.DiskCaching);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--os-disk", settings.OsDisk);
            AppendIfNonNull(ref baseCommand, "--ultra-ssd-enabled", settings.UltraSsdEnabled);
            AppendIfNonNull(ref baseCommand, "--write-accelerator", settings.WriteAccelerator);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm wait".
        /// Place the CLI in a waiting state until a condition of the VM is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public static dynamic AzVmWait(this ICakeContext context, AzVmWaitSettings settings) {
            var baseCommand = "az vm wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm availability-set convert".
        /// Convert an Azure Availability Set to contain VMs with managed disks.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public static dynamic AzVmAvailabilitySetConvert(this ICakeContext context, AzVmAvailabilitySetConvertSettings settings) {
            var baseCommand = "az vm availability-set convert";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm availability-set create".
        /// Create an Azure Availability Set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public static dynamic AzVmAvailabilitySetCreate(this ICakeContext context, AzVmAvailabilitySetCreateSettings settings) {
            var baseCommand = "az vm availability-set create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--platform-fault-domain-count", settings.PlatformFaultDomainCount);
            AppendIfNonNull(ref baseCommand, "--platform-update-domain-count", settings.PlatformUpdateDomainCount);
            AppendIfNonNull(ref baseCommand, "--ppg", settings.Ppg);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--unmanaged", settings.Unmanaged);
            AppendIfNonNull(ref baseCommand, "--validate", settings.Validate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm availability-set delete".
        /// Delete an availability set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public static dynamic AzVmAvailabilitySetDelete(this ICakeContext context, AzVmAvailabilitySetDeleteSettings settings) {
            var baseCommand = "az vm availability-set delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm availability-set list".
        /// List availability sets.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public static dynamic AzVmAvailabilitySetList(this ICakeContext context, AzVmAvailabilitySetListSettings settings) {
            var baseCommand = "az vm availability-set list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm availability-set list-sizes".
        /// List VM sizes for an availability set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public static dynamic AzVmAvailabilitySetListSizes(this ICakeContext context, AzVmAvailabilitySetListSizesSettings settings) {
            var baseCommand = "az vm availability-set list-sizes";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm availability-set show".
        /// Get information for an availability set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public static dynamic AzVmAvailabilitySetShow(this ICakeContext context, AzVmAvailabilitySetShowSettings settings) {
            var baseCommand = "az vm availability-set show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm availability-set update".
        /// Update an Azure Availability Set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public static dynamic AzVmAvailabilitySetUpdate(this ICakeContext context, AzVmAvailabilitySetUpdateSettings settings) {
            var baseCommand = "az vm availability-set update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm boot-diagnostics disable".
        /// Disable the boot diagnostics on a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmBootDiagnostics")]
        public static dynamic AzVmBootDiagnosticsDisable(this ICakeContext context, AzVmBootDiagnosticsDisableSettings settings) {
            var baseCommand = "az vm boot-diagnostics disable";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm boot-diagnostics enable".
        /// Enable the boot diagnostics on a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmBootDiagnostics")]
        public static dynamic AzVmBootDiagnosticsEnable(this ICakeContext context, AzVmBootDiagnosticsEnableSettings settings) {
            var baseCommand = "az vm boot-diagnostics enable";
            AppendIfNonNull(ref baseCommand, "--storage", settings.Storage);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm boot-diagnostics get-boot-log".
        /// Get the boot diagnostics log from a VM.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmBootDiagnostics")]
        public static dynamic AzVmBootDiagnosticsGetBootLog(this ICakeContext context, AzVmBootDiagnosticsGetBootLogSettings settings) {
            var baseCommand = "az vm boot-diagnostics get-boot-log";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm diagnostics get-default-config".
        /// Get the default configuration settings for a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmDiagnostics")]
        public static dynamic AzVmDiagnosticsGetDefaultConfig(this ICakeContext context, AzVmDiagnosticsGetDefaultConfigSettings settings) {
            var baseCommand = "az vm diagnostics get-default-config";
            AppendIfNonNull(ref baseCommand, "--is-windows-os", settings.IsWindowsOs);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm diagnostics set".
        /// Configure the Azure VM diagnostics extension.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmDiagnostics")]
        public static dynamic AzVmDiagnosticsSet(this ICakeContext context, AzVmDiagnosticsSetSettings settings) {
            var baseCommand = "az vm diagnostics set";
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--no-auto-upgrade", settings.NoAutoUpgrade);
            AppendIfNonNull(ref baseCommand, "--protected-settings", settings.ProtectedSettings);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm disk attach".
        /// Attach a managed persistent disk to a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmDisk")]
        public static dynamic AzVmDiskAttach(this ICakeContext context, AzVmDiskAttachSettings settings) {
            var baseCommand = "az vm disk attach";
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--caching", settings.Caching);
            AppendIfNonNull(ref baseCommand, "--enable-write-accelerator", settings.EnableWriteAccelerator);
            AppendIfNonNull(ref baseCommand, "--lun", settings.Lun);
            AppendIfNonNull(ref baseCommand, "--new", settings.New);
            AppendIfNonNull(ref baseCommand, "--size-gb", settings.SizeGb);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm disk detach".
        /// Detach a managed disk from a VM.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmDisk")]
        public static dynamic AzVmDiskDetach(this ICakeContext context, AzVmDiskDetachSettings settings) {
            var baseCommand = "az vm disk detach";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm encryption disable".
        /// Disable disk encryption on the OS disk and/or data disks. Decrypt mounted disks.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmEncryption")]
        public static dynamic AzVmEncryptionDisable(this ICakeContext context, AzVmEncryptionDisableSettings settings) {
            var baseCommand = "az vm encryption disable";
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--volume-type", settings.VolumeType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm encryption enable".
        /// Enable disk encryption on the OS disk and/or data disks. Encrypt mounted disks.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmEncryption")]
        public static dynamic AzVmEncryptionEnable(this ICakeContext context, AzVmEncryptionEnableSettings settings) {
            var baseCommand = "az vm encryption enable";
            AppendIfNonNull(ref baseCommand, "--disk-encryption-keyvault", settings.DiskEncryptionKeyvault);
            AppendIfNonNull(ref baseCommand, "--encrypt-format-all", settings.EncryptFormatAll);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--key-encryption-algorithm", settings.KeyEncryptionAlgorithm);
            AppendIfNonNull(ref baseCommand, "--key-encryption-key", settings.KeyEncryptionKey);
            AppendIfNonNull(ref baseCommand, "--key-encryption-keyvault", settings.KeyEncryptionKeyvault);
            AppendIfNonNull(ref baseCommand, "--volume-type", settings.VolumeType);
            AppendIfNonNull(ref baseCommand, "--aad-client-cert-thumbprint", settings.AadClientCertThumbprint);
            AppendIfNonNull(ref baseCommand, "--aad-client-id", settings.AadClientId);
            AppendIfNonNull(ref baseCommand, "--aad-client-secret", settings.AadClientSecret);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm encryption show".
        /// Show encryption status.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmEncryption")]
        public static dynamic AzVmEncryptionShow(this ICakeContext context, AzVmEncryptionShowSettings settings) {
            var baseCommand = "az vm encryption show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm extension delete".
        /// Remove an extension attached to a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtension")]
        public static dynamic AzVmExtensionDelete(this ICakeContext context, AzVmExtensionDeleteSettings settings) {
            var baseCommand = "az vm extension delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm extension list".
        /// List the extensions attached to a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtension")]
        public static dynamic AzVmExtensionList(this ICakeContext context, AzVmExtensionListSettings settings) {
            var baseCommand = "az vm extension list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm extension set".
        /// Set extensions for a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtension")]
        public static dynamic AzVmExtensionSet(this ICakeContext context, AzVmExtensionSetSettings settings) {
            var baseCommand = "az vm extension set";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--extension-instance-name", settings.ExtensionInstanceName);
            AppendIfNonNull(ref baseCommand, "--force-update", settings.ForceUpdate);
            AppendIfNonNull(ref baseCommand, "--no-auto-upgrade", settings.NoAutoUpgrade);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--protected-settings", settings.ProtectedSettings);
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm extension show".
        /// Display information about extensions attached to a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtension")]
        public static dynamic AzVmExtensionShow(this ICakeContext context, AzVmExtensionShowSettings settings) {
            var baseCommand = "az vm extension show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm extension wait".
        /// Place the CLI in a waiting state until a condition of a virtual machine extension is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtension")]
        public static dynamic AzVmExtensionWait(this ICakeContext context, AzVmExtensionWaitSettings settings) {
            var baseCommand = "az vm extension wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm extension image list".
        /// List the information on available extensions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtensionImage")]
        public static dynamic AzVmExtensionImageList(this ICakeContext context, AzVmExtensionImageListSettings settings) {
            var baseCommand = "az vm extension image list";
            AppendIfNonNull(ref baseCommand, "--latest", settings.Latest);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm extension image list-names".
        /// List the names of available extensions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtensionImage")]
        public static dynamic AzVmExtensionImageListNames(this ICakeContext context, AzVmExtensionImageListNamesSettings settings) {
            var baseCommand = "az vm extension image list-names";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm extension image list-versions".
        /// List the versions for available extensions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtensionImage")]
        public static dynamic AzVmExtensionImageListVersions(this ICakeContext context, AzVmExtensionImageListVersionsSettings settings) {
            var baseCommand = "az vm extension image list-versions";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm extension image show".
        /// Display information for an extension.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtensionImage")]
        public static dynamic AzVmExtensionImageShow(this ICakeContext context, AzVmExtensionImageShowSettings settings) {
            var baseCommand = "az vm extension image show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm host create".
        /// Create a dedicated host.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHost")]
        public static dynamic AzVmHostCreate(this ICakeContext context, AzVmHostCreateSettings settings) {
            var baseCommand = "az vm host create";
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--auto-replace", settings.AutoReplace);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--platform-fault-domain", settings.PlatformFaultDomain);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm host delete".
        /// Delete a dedicated host.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHost")]
        public static dynamic AzVmHostDelete(this ICakeContext context, AzVmHostDeleteSettings settings) {
            var baseCommand = "az vm host delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm host get-instance-view".
        /// Get instance information about a dedicated host.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHost")]
        public static dynamic AzVmHostGetInstanceView(this ICakeContext context, AzVmHostGetInstanceViewSettings settings) {
            var baseCommand = "az vm host get-instance-view";
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm host list".
        /// List dedicated hosts.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHost")]
        public static dynamic AzVmHostList(this ICakeContext context, AzVmHostListSettings settings) {
            var baseCommand = "az vm host list";
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm host show".
        /// Get the details of a dedicated host.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHost")]
        public static dynamic AzVmHostShow(this ICakeContext context, AzVmHostShowSettings settings) {
            var baseCommand = "az vm host show";
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm host update".
        /// Update a dedicated host.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHost")]
        public static dynamic AzVmHostUpdate(this ICakeContext context, AzVmHostUpdateSettings settings) {
            var baseCommand = "az vm host update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm host group create".
        /// Create a dedicated host group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHostGroup")]
        public static dynamic AzVmHostGroupCreate(this ICakeContext context, AzVmHostGroupCreateSettings settings) {
            var baseCommand = "az vm host group create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--platform-fault-domain-count", settings.PlatformFaultDomainCount);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm host group delete".
        /// Delete a dedicated host group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHostGroup")]
        public static dynamic AzVmHostGroupDelete(this ICakeContext context, AzVmHostGroupDeleteSettings settings) {
            var baseCommand = "az vm host group delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm host group list".
        /// List dedicated host groups.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHostGroup")]
        public static dynamic AzVmHostGroupList(this ICakeContext context, AzVmHostGroupListSettings settings) {
            var baseCommand = "az vm host group list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm host group show".
        /// Get the details of a dedicated host group.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHostGroup")]
        public static dynamic AzVmHostGroupShow(this ICakeContext context, AzVmHostGroupShowSettings settings) {
            var baseCommand = "az vm host group show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm host group update".
        /// Update a dedicated host group.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHostGroup")]
        public static dynamic AzVmHostGroupUpdate(this ICakeContext context, AzVmHostGroupUpdateSettings settings) {
            var baseCommand = "az vm host group update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm identity assign".
        /// Enable managed service identity on a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmIdentity")]
        public static dynamic AzVmIdentityAssign(this ICakeContext context, AzVmIdentityAssignSettings settings) {
            var baseCommand = "az vm identity assign";
            AppendIfNonNull(ref baseCommand, "--identities", settings.Identities);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm identity remove".
        /// Remove managed service identities from a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmIdentity")]
        public static dynamic AzVmIdentityRemove(this ICakeContext context, AzVmIdentityRemoveSettings settings) {
            var baseCommand = "az vm identity remove";
            AppendIfNonNull(ref baseCommand, "--identities", settings.Identities);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm identity show".
        /// Display VM's managed identity info.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmIdentity")]
        public static dynamic AzVmIdentityShow(this ICakeContext context, AzVmIdentityShowSettings settings) {
            var baseCommand = "az vm identity show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm image accept-terms".
        /// Accept Azure Marketplace term so that the image can be used to create VMs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImage")]
        public static dynamic AzVmImageAcceptTerms(this ICakeContext context, AzVmImageAcceptTermsSettings settings) {
            var baseCommand = "az vm image accept-terms";
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--urn", settings.Urn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm image list".
        /// List the VM/VMSS images available in the Azure Marketplace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImage")]
        public static dynamic AzVmImageList(this ICakeContext context, AzVmImageListSettings settings) {
            var baseCommand = "az vm image list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm image list-offers".
        /// List the VM image offers available in the Azure Marketplace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImage")]
        public static dynamic AzVmImageListOffers(this ICakeContext context, AzVmImageListOffersSettings settings) {
            var baseCommand = "az vm image list-offers";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm image list-publishers".
        /// List the VM image publishers available in the Azure Marketplace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImage")]
        public static dynamic AzVmImageListPublishers(this ICakeContext context, AzVmImageListPublishersSettings settings) {
            var baseCommand = "az vm image list-publishers";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm image list-skus".
        /// List the VM image SKUs available in the Azure Marketplace.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImage")]
        public static dynamic AzVmImageListSkus(this ICakeContext context, AzVmImageListSkusSettings settings) {
            var baseCommand = "az vm image list-skus";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm image show".
        /// Get the details for a VM image available in the Azure Marketplace.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImage")]
        public static dynamic AzVmImageShow(this ICakeContext context, AzVmImageShowSettings settings) {
            var baseCommand = "az vm image show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--urn", settings.Urn);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm image terms accept".
        /// Accept Azure Marketplace image terms so that the image can be used to create VMs.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImageTerms")]
        public static dynamic AzVmImageTermsAccept(this ICakeContext context, AzVmImageTermsAcceptSettings settings) {
            var baseCommand = "az vm image terms accept";
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--urn", settings.Urn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm image terms cancel".
        /// Cancel Azure Marketplace image terms.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImageTerms")]
        public static dynamic AzVmImageTermsCancel(this ICakeContext context, AzVmImageTermsCancelSettings settings) {
            var baseCommand = "az vm image terms cancel";
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--urn", settings.Urn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm image terms show".
        /// Get the details of Azure Marketplace image terms.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImageTerms")]
        public static dynamic AzVmImageTermsShow(this ICakeContext context, AzVmImageTermsShowSettings settings) {
            var baseCommand = "az vm image terms show";
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--urn", settings.Urn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm monitor log show".
        /// Executes a query against the Log Analytics workspace linked with a vm.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmMonitorLog")]
        public static dynamic AzVmMonitorLogShow(this ICakeContext context, AzVmMonitorLogShowSettings settings) {
            var baseCommand = "az vm monitor log show";
            AppendIfNonNull(ref baseCommand, "--analytics-query", settings.AnalyticsQuery);
            AppendIfNonNull(ref baseCommand, "--timespan", settings.Timespan);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm nic add".
        /// Add existing NICs to a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmNic")]
        public static dynamic AzVmNicAdd(this ICakeContext context, AzVmNicAddSettings settings) {
            var baseCommand = "az vm nic add";
            AppendIfNonNull(ref baseCommand, "--nics", settings.Nics);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--primary-nic", settings.PrimaryNic);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm nic list".
        /// List the NICs available on a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmNic")]
        public static dynamic AzVmNicList(this ICakeContext context, AzVmNicListSettings settings) {
            var baseCommand = "az vm nic list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm nic remove".
        /// Remove NICs from a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmNic")]
        public static dynamic AzVmNicRemove(this ICakeContext context, AzVmNicRemoveSettings settings) {
            var baseCommand = "az vm nic remove";
            AppendIfNonNull(ref baseCommand, "--nics", settings.Nics);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--primary-nic", settings.PrimaryNic);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm nic set".
        /// Configure settings of a NIC attached to a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmNic")]
        public static dynamic AzVmNicSet(this ICakeContext context, AzVmNicSetSettings settings) {
            var baseCommand = "az vm nic set";
            AppendIfNonNull(ref baseCommand, "--nics", settings.Nics);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--primary-nic", settings.PrimaryNic);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm nic show".
        /// Display information for a NIC attached to a VM.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmNic")]
        public static dynamic AzVmNicShow(this ICakeContext context, AzVmNicShowSettings settings) {
            var baseCommand = "az vm nic show";
            AppendIfNonNull(ref baseCommand, "--nic", settings.Nic);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm run-command invoke".
        /// Execute a specific run command on a vm.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmRunCommand")]
        public static dynamic AzVmRunCommandInvoke(this ICakeContext context, AzVmRunCommandInvokeSettings settings) {
            var baseCommand = "az vm run-command invoke";
            AppendIfNonNull(ref baseCommand, "--command-id", settings.CommandId);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--scripts", settings.Scripts);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm run-command list".
        /// Lists all available run commands for a subscription in a location.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmRunCommand")]
        public static dynamic AzVmRunCommandList(this ICakeContext context, AzVmRunCommandListSettings settings) {
            var baseCommand = "az vm run-command list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm run-command show".
        /// Gets specific run command for a subscription in a location.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmRunCommand")]
        public static dynamic AzVmRunCommandShow(this ICakeContext context, AzVmRunCommandShowSettings settings) {
            var baseCommand = "az vm run-command show";
            AppendIfNonNull(ref baseCommand, "--command-id", settings.CommandId);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm secret add".
        /// Add a secret to a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmSecret")]
        public static dynamic AzVmSecretAdd(this ICakeContext context, AzVmSecretAddSettings settings) {
            var baseCommand = "az vm secret add";
            AppendIfNonNull(ref baseCommand, "--certificate", settings.Certificate);
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--certificate-store", settings.CertificateStore);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm secret format".
        /// Transform secrets into a form that can be used by VMs and VMSSes.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmSecret")]
        public static dynamic AzVmSecretFormat(this ICakeContext context, AzVmSecretFormatSettings settings) {
            var baseCommand = "az vm secret format";
            AppendIfNonNull(ref baseCommand, "--secrets", settings.Secrets);
            AppendIfNonNull(ref baseCommand, "--certificate-store", settings.CertificateStore);
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm secret list".
        /// List secrets on a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmSecret")]
        public static dynamic AzVmSecretList(this ICakeContext context, AzVmSecretListSettings settings) {
            var baseCommand = "az vm secret list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm secret remove".
        /// Remove a secret from a VM.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmSecret")]
        public static dynamic AzVmSecretRemove(this ICakeContext context, AzVmSecretRemoveSettings settings) {
            var baseCommand = "az vm secret remove";
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--certificate", settings.Certificate);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm unmanaged-disk attach".
        /// Attach an unmanaged persistent disk to a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmUnmanagedDisk")]
        public static dynamic AzVmUnmanagedDiskAttach(this ICakeContext context, AzVmUnmanagedDiskAttachSettings settings) {
            var baseCommand = "az vm unmanaged-disk attach";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--caching", settings.Caching);
            AppendIfNonNull(ref baseCommand, "--lun", settings.Lun);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--new", settings.New);
            AppendIfNonNull(ref baseCommand, "--size-gb", settings.SizeGb);
            AppendIfNonNull(ref baseCommand, "--vhd-uri", settings.VhdUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm unmanaged-disk detach".
        /// Detach an unmanaged disk from a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmUnmanagedDisk")]
        public static dynamic AzVmUnmanagedDiskDetach(this ICakeContext context, AzVmUnmanagedDiskDetachSettings settings) {
            var baseCommand = "az vm unmanaged-disk detach";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm unmanaged-disk list".
        /// List unmanaged disks of a VM.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmUnmanagedDisk")]
        public static dynamic AzVmUnmanagedDiskList(this ICakeContext context, AzVmUnmanagedDiskListSettings settings) {
            var baseCommand = "az vm unmanaged-disk list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm user delete".
        /// Delete a user account from a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmUser")]
        public static dynamic AzVmUserDelete(this ICakeContext context, AzVmUserDeleteSettings settings) {
            var baseCommand = "az vm user delete";
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm user reset-ssh".
        /// Reset the SSH configuration on a VM.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmUser")]
        public static dynamic AzVmUserResetSsh(this ICakeContext context, AzVmUserResetSshSettings settings) {
            var baseCommand = "az vm user reset-ssh";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vm user update".
        /// Update a user account.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmUser")]
        public static dynamic AzVmUserUpdate(this ICakeContext context, AzVmUserUpdateSettings settings) {
            var baseCommand = "az vm user update";
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--ssh-key-value", settings.SshKeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss create".
        /// Create an Azure Virtual Machine Scale Set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssCreate(this ICakeContext context, AzVmssCreateSettings settings) {
            var baseCommand = "az vmss create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--computer-name-prefix", settings.ComputerNamePrefix);
            AppendIfNonNull(ref baseCommand, "--custom-data", settings.CustomData);
            AppendIfNonNull(ref baseCommand, "--disable-overprovision", settings.DisableOverprovision);
            AppendIfNonNull(ref baseCommand, "--eviction-policy", settings.EvictionPolicy);
            AppendIfNonNull(ref baseCommand, "--health-probe", settings.HealthProbe);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--instance-count", settings.InstanceCount);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--max-price", settings.MaxPrice);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--orchestration-mode", settings.OrchestrationMode);
            AppendIfNonNull(ref baseCommand, "--platform-fault-domain-count", settings.PlatformFaultDomainCount);
            AppendIfNonNull(ref baseCommand, "--ppg", settings.Ppg);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--secrets", settings.Secrets);
            AppendIfNonNull(ref baseCommand, "--single-placement-group", settings.SinglePlacementGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--terminate-notification-time", settings.TerminateNotificationTime);
            AppendIfNonNull(ref baseCommand, "--upgrade-policy-mode", settings.UpgradePolicyMode);
            AppendIfNonNull(ref baseCommand, "--validate", settings.Validate);
            AppendIfNonNull(ref baseCommand, "--vm-sku", settings.VmSku);
            AppendIfNonNull(ref baseCommand, "--zones", settings.Zones);
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-username", settings.AdminUsername);
            AppendIfNonNull(ref baseCommand, "--authentication-type", settings.AuthenticationType);
            AppendIfNonNull(ref baseCommand, "--generate-ssh-keys", settings.GenerateSshKeys);
            AppendIfNonNull(ref baseCommand, "--ssh-dest-key-path", settings.SshDestKeyPath);
            AppendIfNonNull(ref baseCommand, "--ssh-key-values", settings.SshKeyValues);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--plan-name", settings.PlanName);
            AppendIfNonNull(ref baseCommand, "--plan-product", settings.PlanProduct);
            AppendIfNonNull(ref baseCommand, "--plan-promotion-code", settings.PlanPromotionCode);
            AppendIfNonNull(ref baseCommand, "--plan-publisher", settings.PlanPublisher);
            AppendIfNonNull(ref baseCommand, "--accelerated-networking", settings.AcceleratedNetworking);
            AppendIfNonNull(ref baseCommand, "--asgs", settings.Asgs);
            AppendIfNonNull(ref baseCommand, "--dns-servers", settings.DnsServers);
            AppendIfNonNull(ref baseCommand, "--nsg", settings.Nsg);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address-allocation", settings.PublicIpAddressAllocation);
            AppendIfNonNull(ref baseCommand, "--public-ip-address-dns-name", settings.PublicIpAddressDnsName);
            AppendIfNonNull(ref baseCommand, "--public-ip-per-vm", settings.PublicIpPerVm);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--subnet-address-prefix", settings.SubnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vm-domain-name", settings.VmDomainName);
            AppendIfNonNull(ref baseCommand, "--vnet-address-prefix", settings.VnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--app-gateway", settings.AppGateway);
            AppendIfNonNull(ref baseCommand, "--app-gateway-capacity", settings.AppGatewayCapacity);
            AppendIfNonNull(ref baseCommand, "--app-gateway-sku", settings.AppGatewaySku);
            AppendIfNonNull(ref baseCommand, "--app-gateway-subnet-address-prefix", settings.AppGatewaySubnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--backend-pool-name", settings.BackendPoolName);
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--lb", settings.Lb);
            AppendIfNonNull(ref baseCommand, "--lb-nat-pool-name", settings.LbNatPoolName);
            AppendIfNonNull(ref baseCommand, "--lb-sku", settings.LbSku);
            AppendIfNonNull(ref baseCommand, "--data-disk-caching", settings.DataDiskCaching);
            AppendIfNonNull(ref baseCommand, "--data-disk-sizes-gb", settings.DataDiskSizesGb);
            AppendIfNonNull(ref baseCommand, "--ephemeral-os-disk", settings.EphemeralOsDisk);
            AppendIfNonNull(ref baseCommand, "--os-disk-caching", settings.OsDiskCaching);
            AppendIfNonNull(ref baseCommand, "--os-disk-name", settings.OsDiskName);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--storage-container-name", settings.StorageContainerName);
            AppendIfNonNull(ref baseCommand, "--storage-sku", settings.StorageSku);
            AppendIfNonNull(ref baseCommand, "--ultra-ssd-enabled", settings.UltraSsdEnabled);
            AppendIfNonNull(ref baseCommand, "--use-unmanaged-disk", settings.UseUnmanagedDisk);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss deallocate".
        /// Deallocate VMs within a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssDeallocate(this ICakeContext context, AzVmssDeallocateSettings settings) {
            var baseCommand = "az vmss deallocate";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss delete".
        /// Deletes a VM scale set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssDelete(this ICakeContext context, AzVmssDeleteSettings settings) {
            var baseCommand = "az vmss delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss delete-instances".
        /// Delete VMs within a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssDeleteInstances(this ICakeContext context, AzVmssDeleteInstancesSettings settings) {
            var baseCommand = "az vmss delete-instances";
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss get-instance-view".
        /// View an instance of a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssGetInstanceView(this ICakeContext context, AzVmssGetInstanceViewSettings settings) {
            var baseCommand = "az vmss get-instance-view";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss get-os-upgrade-history".
        /// Gets list of OS upgrades on a VM scale set instance.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssGetOsUpgradeHistory(this ICakeContext context, AzVmssGetOsUpgradeHistorySettings settings) {
            var baseCommand = "az vmss get-os-upgrade-history";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss list".
        /// List VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssList(this ICakeContext context, AzVmssListSettings settings) {
            var baseCommand = "az vmss list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss list-instance-connection-info".
        /// Get the IP address and port number used to connect to individual VM instances within a set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssListInstanceConnectionInfo(this ICakeContext context, AzVmssListInstanceConnectionInfoSettings settings) {
            var baseCommand = "az vmss list-instance-connection-info";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss list-instance-public-ips".
        /// List public IP addresses of VM instances within a set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssListInstancePublicIps(this ICakeContext context, AzVmssListInstancePublicIpsSettings settings) {
            var baseCommand = "az vmss list-instance-public-ips";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss list-instances".
        /// Gets a list of all virtual machines in a VM scale sets.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssListInstances(this ICakeContext context, AzVmssListInstancesSettings settings) {
            var baseCommand = "az vmss list-instances";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss list-skus".
        /// Gets a list of SKUs available for your VM scale set, including the minimum and maximum VM instances allowed for each SKU.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssListSkus(this ICakeContext context, AzVmssListSkusSettings settings) {
            var baseCommand = "az vmss list-skus";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss perform-maintenance".
        /// Perform maintenance on one or more virtual machines in a VM scale set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssPerformMaintenance(this ICakeContext context, AzVmssPerformMaintenanceSettings settings) {
            var baseCommand = "az vmss perform-maintenance";
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss reimage".
        /// Reimage VMs within a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssReimage(this ICakeContext context, AzVmssReimageSettings settings) {
            var baseCommand = "az vmss reimage";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss restart".
        /// Restart VMs within a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssRestart(this ICakeContext context, AzVmssRestartSettings settings) {
            var baseCommand = "az vmss restart";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss scale".
        /// Change the number of VMs within a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssScale(this ICakeContext context, AzVmssScaleSettings settings) {
            var baseCommand = "az vmss scale";
            AppendIfNonNull(ref baseCommand, "--new-capacity", settings.NewCapacity);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss show".
        /// Get details on VMs within a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssShow(this ICakeContext context, AzVmssShowSettings settings) {
            var baseCommand = "az vmss show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss start".
        /// Start VMs within a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssStart(this ICakeContext context, AzVmssStartSettings settings) {
            var baseCommand = "az vmss start";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss stop".
        /// Power off (stop) VMs within a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssStop(this ICakeContext context, AzVmssStopSettings settings) {
            var baseCommand = "az vmss stop";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--skip-shutdown", settings.SkipShutdown);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss update".
        /// Update a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssUpdate(this ICakeContext context, AzVmssUpdateSettings settings) {
            var baseCommand = "az vmss update";
            AppendIfNonNull(ref baseCommand, "--enable-terminate-notification", settings.EnableTerminateNotification);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--terminate-notification-time", settings.TerminateNotificationTime);
            AppendIfNonNull(ref baseCommand, "--ultra-ssd-enabled", settings.UltraSsdEnabled);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--protect-from-scale-in", settings.ProtectFromScaleIn);
            AppendIfNonNull(ref baseCommand, "--protect-from-scale-set-actions", settings.ProtectFromScaleSetActions);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss update-instances".
        /// Upgrade VMs within a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssUpdateInstances(this ICakeContext context, AzVmssUpdateInstancesSettings settings) {
            var baseCommand = "az vmss update-instances";
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss wait".
        /// Place the CLI in a waiting state until a condition of a scale set is met.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public static dynamic AzVmssWait(this ICakeContext context, AzVmssWaitSettings settings) {
            var baseCommand = "az vmss wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss diagnostics get-default-config".
        /// Show the default config file which defines data to be collected.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssDiagnostics")]
        public static dynamic AzVmssDiagnosticsGetDefaultConfig(this ICakeContext context, AzVmssDiagnosticsGetDefaultConfigSettings settings) {
            var baseCommand = "az vmss diagnostics get-default-config";
            AppendIfNonNull(ref baseCommand, "--is-windows-os", settings.IsWindowsOs);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss diagnostics set".
        /// Enable diagnostics on a VMSS.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssDiagnostics")]
        public static dynamic AzVmssDiagnosticsSet(this ICakeContext context, AzVmssDiagnosticsSetSettings settings) {
            var baseCommand = "az vmss diagnostics set";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--no-auto-upgrade", settings.NoAutoUpgrade);
            AppendIfNonNull(ref baseCommand, "--protected-settings", settings.ProtectedSettings);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss disk attach".
        /// Attach managed data disks to a scale set or its instances.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssDisk")]
        public static dynamic AzVmssDiskAttach(this ICakeContext context, AzVmssDiskAttachSettings settings) {
            var baseCommand = "az vmss disk attach";
            AppendIfNonNull(ref baseCommand, "--caching", settings.Caching);
            AppendIfNonNull(ref baseCommand, "--disk", settings.Disk);
            AppendIfNonNull(ref baseCommand, "--lun", settings.Lun);
            AppendIfNonNull(ref baseCommand, "--size-gb", settings.SizeGb);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss disk detach".
        /// Detach managed data disks from a scale set or its instances.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssDisk")]
        public static dynamic AzVmssDiskDetach(this ICakeContext context, AzVmssDiskDetachSettings settings) {
            var baseCommand = "az vmss disk detach";
            AppendIfNonNull(ref baseCommand, "--lun", settings.Lun);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss encryption disable".
        /// Disable the encryption on a VMSS with managed disks.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssEncryption")]
        public static dynamic AzVmssEncryptionDisable(this ICakeContext context, AzVmssEncryptionDisableSettings settings) {
            var baseCommand = "az vmss encryption disable";
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--volume-type", settings.VolumeType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss encryption enable".
        /// Encrypt a VMSS with managed disks.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssEncryption")]
        public static dynamic AzVmssEncryptionEnable(this ICakeContext context, AzVmssEncryptionEnableSettings settings) {
            var baseCommand = "az vmss encryption enable";
            AppendIfNonNull(ref baseCommand, "--disk-encryption-keyvault", settings.DiskEncryptionKeyvault);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--key-encryption-algorithm", settings.KeyEncryptionAlgorithm);
            AppendIfNonNull(ref baseCommand, "--key-encryption-key", settings.KeyEncryptionKey);
            AppendIfNonNull(ref baseCommand, "--key-encryption-keyvault", settings.KeyEncryptionKeyvault);
            AppendIfNonNull(ref baseCommand, "--volume-type", settings.VolumeType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss encryption show".
        /// Show encryption status.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssEncryption")]
        public static dynamic AzVmssEncryptionShow(this ICakeContext context, AzVmssEncryptionShowSettings settings) {
            var baseCommand = "az vmss encryption show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss extension delete".
        /// Delete an extension from a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtension")]
        public static dynamic AzVmssExtensionDelete(this ICakeContext context, AzVmssExtensionDeleteSettings settings) {
            var baseCommand = "az vmss extension delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss extension list".
        /// List extensions associated with a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtension")]
        public static dynamic AzVmssExtensionList(this ICakeContext context, AzVmssExtensionListSettings settings) {
            var baseCommand = "az vmss extension list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss extension set".
        /// Add an extension to a VMSS or update an existing extension.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtension")]
        public static dynamic AzVmssExtensionSet(this ICakeContext context, AzVmssExtensionSetSettings settings) {
            var baseCommand = "az vmss extension set";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--extension-instance-name", settings.ExtensionInstanceName);
            AppendIfNonNull(ref baseCommand, "--force-update", settings.ForceUpdate);
            AppendIfNonNull(ref baseCommand, "--no-auto-upgrade", settings.NoAutoUpgrade);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--protected-settings", settings.ProtectedSettings);
            AppendIfNonNull(ref baseCommand, "--provision-after-extensions", settings.ProvisionAfterExtensions);
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss extension show".
        /// Show details on a VMSS extension.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtension")]
        public static dynamic AzVmssExtensionShow(this ICakeContext context, AzVmssExtensionShowSettings settings) {
            var baseCommand = "az vmss extension show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss extension image list".
        /// List the information on available extensions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtensionImage")]
        public static dynamic AzVmssExtensionImageList(this ICakeContext context, AzVmssExtensionImageListSettings settings) {
            var baseCommand = "az vmss extension image list";
            AppendIfNonNull(ref baseCommand, "--latest", settings.Latest);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss extension image list-names".
        /// Gets a list of virtual machine extension image types.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtensionImage")]
        public static dynamic AzVmssExtensionImageListNames(this ICakeContext context, AzVmssExtensionImageListNamesSettings settings) {
            var baseCommand = "az vmss extension image list-names";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss extension image list-versions".
        /// Gets a list of virtual machine extension image versions.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtensionImage")]
        public static dynamic AzVmssExtensionImageListVersions(this ICakeContext context, AzVmssExtensionImageListVersionsSettings settings) {
            var baseCommand = "az vmss extension image list-versions";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss extension image show".
        /// Gets a virtual machine extension image.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtensionImage")]
        public static dynamic AzVmssExtensionImageShow(this ICakeContext context, AzVmssExtensionImageShowSettings settings) {
            var baseCommand = "az vmss extension image show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss identity assign".
        /// Enable managed service identity on a VMSS.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssIdentity")]
        public static dynamic AzVmssIdentityAssign(this ICakeContext context, AzVmssIdentityAssignSettings settings) {
            var baseCommand = "az vmss identity assign";
            AppendIfNonNull(ref baseCommand, "--identities", settings.Identities);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss identity remove".
        /// Remove user assigned identities from a VM scaleset.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssIdentity")]
        public static dynamic AzVmssIdentityRemove(this ICakeContext context, AzVmssIdentityRemoveSettings settings) {
            var baseCommand = "az vmss identity remove";
            AppendIfNonNull(ref baseCommand, "--identities", settings.Identities);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss identity show".
        /// Display VM scaleset's managed identity info.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssIdentity")]
        public static dynamic AzVmssIdentityShow(this ICakeContext context, AzVmssIdentityShowSettings settings) {
            var baseCommand = "az vmss identity show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss nic list".
        /// Gets all network interfaces in a virtual machine scale set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssNic")]
        public static dynamic AzVmssNicList(this ICakeContext context, AzVmssNicListSettings settings) {
            var baseCommand = "az vmss nic list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss nic list-vm-nics".
        /// Gets information about all network interfaces in a virtual machine in a virtual machine scale set.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssNic")]
        public static dynamic AzVmssNicListVmNics(this ICakeContext context, AzVmssNicListVmNicsSettings settings) {
            var baseCommand = "az vmss nic list-vm-nics";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss nic show".
        /// Get the specified network interface in a virtual machine scale set.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssNic")]
        public static dynamic AzVmssNicShow(this ICakeContext context, AzVmssNicShowSettings settings) {
            var baseCommand = "az vmss nic show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss rolling-upgrade cancel".
        /// Cancels the current virtual machine scale set rolling upgrade.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssRollingUpgrade")]
        public static dynamic AzVmssRollingUpgradeCancel(this ICakeContext context, AzVmssRollingUpgradeCancelSettings settings) {
            var baseCommand = "az vmss rolling-upgrade cancel";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss rolling-upgrade get-latest".
        /// Gets the status of the latest virtual machine scale set rolling upgrade.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssRollingUpgrade")]
        public static dynamic AzVmssRollingUpgradeGetLatest(this ICakeContext context, AzVmssRollingUpgradeGetLatestSettings settings) {
            var baseCommand = "az vmss rolling-upgrade get-latest";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss rolling-upgrade start".
        /// Starts a rolling upgrade to move all virtual machine scale set instances to the latest available Platform Image OS version.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssRollingUpgrade")]
        public static dynamic AzVmssRollingUpgradeStart(this ICakeContext context, AzVmssRollingUpgradeStartSettings settings) {
            var baseCommand = "az vmss rolling-upgrade start";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss run-command invoke".
        /// Execute a specific run command on a Virtual Machine Scale Set instance.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssRunCommand")]
        public static dynamic AzVmssRunCommandInvoke(this ICakeContext context, AzVmssRunCommandInvokeSettings settings) {
            var baseCommand = "az vmss run-command invoke";
            AppendIfNonNull(ref baseCommand, "--command-id", settings.CommandId);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--scripts", settings.Scripts);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss run-command list".
        /// Lists all available run commands for a subscription in a location.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssRunCommand")]
        public static dynamic AzVmssRunCommandList(this ICakeContext context, AzVmssRunCommandListSettings settings) {
            var baseCommand = "az vmss run-command list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az vmss run-command show".
        /// Gets specific run command for a subscription in a location.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssRunCommand")]
        public static dynamic AzVmssRunCommandShow(this ICakeContext context, AzVmssRunCommandShowSettings settings) {
            var baseCommand = "az vmss run-command show";
            AppendIfNonNull(ref baseCommand, "--command-id", settings.CommandId);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp browse".
        /// Open a web app in a browser.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappBrowse(this ICakeContext context, AzWebappBrowseSettings settings) {
            var baseCommand = "az webapp browse";
            AppendIfNonNull(ref baseCommand, "--logs", settings.Logs);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp create".
        /// Create a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappCreate(this ICakeContext context, AzWebappCreateSettings settings) {
            var baseCommand = "az webapp create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--deployment-container-image-name", settings.DeploymentContainerImageName);
            AppendIfNonNull(ref baseCommand, "--deployment-local-git", settings.DeploymentLocalGit);
            AppendIfNonNull(ref baseCommand, "--deployment-source-branch", settings.DeploymentSourceBranch);
            AppendIfNonNull(ref baseCommand, "--deployment-source-url", settings.DeploymentSourceUrl);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-password", settings.DockerRegistryServerPassword);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-user", settings.DockerRegistryServerUser);
            AppendIfNonNull(ref baseCommand, "--multicontainer-config-file", settings.MulticontainerConfigFile);
            AppendIfNonNull(ref baseCommand, "--multicontainer-config-type", settings.MulticontainerConfigType);
            AppendIfNonNull(ref baseCommand, "--runtime", settings.Runtime);
            AppendIfNonNull(ref baseCommand, "--startup-file", settings.StartupFile);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp create-remote-connection".
        /// Creates a remote connection using a tcp tunnel to your web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappCreateRemoteConnection(this ICakeContext context, AzWebappCreateRemoteConnectionSettings settings) {
            var baseCommand = "az webapp create-remote-connection";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp delete".
        /// Delete a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappDelete(this ICakeContext context, AzWebappDeleteSettings settings) {
            var baseCommand = "az webapp delete";
            AppendIfNonNull(ref baseCommand, "--keep-dns-registration", settings.KeepDnsRegistration);
            AppendIfNonNull(ref baseCommand, "--keep-empty-plan", settings.KeepEmptyPlan);
            AppendIfNonNull(ref baseCommand, "--keep-metrics", settings.KeepMetrics);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp list".
        /// List web apps.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappList(this ICakeContext context, AzWebappListSettings settings) {
            var baseCommand = "az webapp list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp list-runtimes".
        /// List available built-in stacks which can be used for web apps.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappListRuntimes(this ICakeContext context, AzWebappListRuntimesSettings settings) {
            var baseCommand = "az webapp list-runtimes";
            AppendIfNonNull(ref baseCommand, "--linux", settings.Linux);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp restart".
        /// Restart a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappRestart(this ICakeContext context, AzWebappRestartSettings settings) {
            var baseCommand = "az webapp restart";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp show".
        /// Get the details of a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappShow(this ICakeContext context, AzWebappShowSettings settings) {
            var baseCommand = "az webapp show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp ssh".
        /// SSH command establishes a ssh session to the web container and developer would get a shell terminal remotely.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappSsh(this ICakeContext context, AzWebappSshSettings settings) {
            var baseCommand = "az webapp ssh";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp start".
        /// Start a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappStart(this ICakeContext context, AzWebappStartSettings settings) {
            var baseCommand = "az webapp start";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp stop".
        /// Stop a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappStop(this ICakeContext context, AzWebappStopSettings settings) {
            var baseCommand = "az webapp stop";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp up".
        /// Create a webapp and deploy code from a local workspace to the app. The command is required to run from the folder where the code is present. Current support includes Node, Python, .NET Core and ASP.NET. Node, Python apps are created as Linux apps. .Net Core, ASP.NET apps are created as Windows apps.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappUp(this ICakeContext context, AzWebappUpSettings settings) {
            var baseCommand = "az webapp up";
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--launch-browser", settings.LaunchBrowser);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--logs", settings.Logs);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp update".
        /// Update a web app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public static dynamic AzWebappUpdate(this ICakeContext context, AzWebappUpdateSettings settings) {
            var baseCommand = "az webapp update";
            AppendIfNonNull(ref baseCommand, "--client-affinity-enabled", settings.ClientAffinityEnabled);
            AppendIfNonNull(ref baseCommand, "--force-dns-registration", settings.ForceDnsRegistration);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--skip-custom-domain-verification", settings.SkipCustomDomainVerification);
            AppendIfNonNull(ref baseCommand, "--skip-dns-registration", settings.SkipDnsRegistration);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ttl-in-seconds", settings.TtlInSeconds);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp auth show".
        /// Show the authentification settings for the webapp.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappAuth")]
        public static dynamic AzWebappAuthShow(this ICakeContext context, AzWebappAuthShowSettings settings) {
            var baseCommand = "az webapp auth show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp auth update".
        /// Update the authentication settings for the webapp.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappAuth")]
        public static dynamic AzWebappAuthUpdate(this ICakeContext context, AzWebappAuthUpdateSettings settings) {
            var baseCommand = "az webapp auth update";
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--allowed-external-redirect-urls", settings.AllowedExternalRedirectUrls);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--token-refresh-extension-hours", settings.TokenRefreshExtensionHours);
            AppendIfNonNull(ref baseCommand, "--token-store", settings.TokenStore);
            AppendIfNonNull(ref baseCommand, "--aad-allowed-token-audiences", settings.AadAllowedTokenAudiences);
            AppendIfNonNull(ref baseCommand, "--aad-client-id", settings.AadClientId);
            AppendIfNonNull(ref baseCommand, "--aad-client-secret", settings.AadClientSecret);
            AppendIfNonNull(ref baseCommand, "--aad-token-issuer-url", settings.AadTokenIssuerUrl);
            AppendIfNonNull(ref baseCommand, "--facebook-app-id", settings.FacebookAppId);
            AppendIfNonNull(ref baseCommand, "--facebook-app-secret", settings.FacebookAppSecret);
            AppendIfNonNull(ref baseCommand, "--facebook-oauth-scopes", settings.FacebookOauthScopes);
            AppendIfNonNull(ref baseCommand, "--google-client-id", settings.GoogleClientId);
            AppendIfNonNull(ref baseCommand, "--google-client-secret", settings.GoogleClientSecret);
            AppendIfNonNull(ref baseCommand, "--google-oauth-scopes", settings.GoogleOauthScopes);
            AppendIfNonNull(ref baseCommand, "--microsoft-account-client-id", settings.MicrosoftAccountClientId);
            AppendIfNonNull(ref baseCommand, "--microsoft-account-client-secret", settings.MicrosoftAccountClientSecret);
            AppendIfNonNull(ref baseCommand, "--microsoft-account-oauth-scopes", settings.MicrosoftAccountOauthScopes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--twitter-consumer-key", settings.TwitterConsumerKey);
            AppendIfNonNull(ref baseCommand, "--twitter-consumer-secret", settings.TwitterConsumerSecret);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config set".
        /// Set a web app's configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfig")]
        public static dynamic AzWebappConfigSet(this ICakeContext context, AzWebappConfigSetSettings settings) {
            var baseCommand = "az webapp config set";
            AppendIfNonNull(ref baseCommand, "--always-on", settings.AlwaysOn);
            AppendIfNonNull(ref baseCommand, "--auto-heal-enabled", settings.AutoHealEnabled);
            AppendIfNonNull(ref baseCommand, "--ftps-state", settings.FtpsState);
            AppendIfNonNull(ref baseCommand, "--generic-configurations", settings.GenericConfigurations);
            AppendIfNonNull(ref baseCommand, "--http20-enabled", settings.Http20Enabled);
            AppendIfNonNull(ref baseCommand, "--java-container", settings.JavaContainer);
            AppendIfNonNull(ref baseCommand, "--java-container-version", settings.JavaContainerVersion);
            AppendIfNonNull(ref baseCommand, "--java-version", settings.JavaVersion);
            AppendIfNonNull(ref baseCommand, "--linux-fx-version", settings.LinuxFxVersion);
            AppendIfNonNull(ref baseCommand, "--min-tls-version", settings.MinTlsVersion);
            AppendIfNonNull(ref baseCommand, "--net-framework-version", settings.NetFrameworkVersion);
            AppendIfNonNull(ref baseCommand, "--number-of-workers", settings.NumberOfWorkers);
            AppendIfNonNull(ref baseCommand, "--php-version", settings.PhpVersion);
            AppendIfNonNull(ref baseCommand, "--python-version", settings.PythonVersion);
            AppendIfNonNull(ref baseCommand, "--remote-debugging-enabled", settings.RemoteDebuggingEnabled);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--startup-file", settings.StartupFile);
            AppendIfNonNull(ref baseCommand, "--use-32bit-worker-process", settings.Use32BitWorkerProcess);
            AppendIfNonNull(ref baseCommand, "--web-sockets-enabled", settings.WebSocketsEnabled);
            AppendIfNonNull(ref baseCommand, "--windows-fx-version", settings.WindowsFxVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config show".
        /// Get the details of a web app's configuration.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfig")]
        public static dynamic AzWebappConfigShow(this ICakeContext context, AzWebappConfigShowSettings settings) {
            var baseCommand = "az webapp config show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config access-restriction add".
        /// Adds an Access Restriction to the webapp, or updates if the Action of the Ip-Address or Subnet already exists.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAccessRestriction")]
        public static dynamic AzWebappConfigAccessRestrictionAdd(this ICakeContext context, AzWebappConfigAccessRestrictionAddSettings settings) {
            var baseCommand = "az webapp config access-restriction add";
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--scm-site", settings.ScmSite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config access-restriction remove".
        /// Removes an Access Restriction from the webapp.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAccessRestriction")]
        public static dynamic AzWebappConfigAccessRestrictionRemove(this ICakeContext context, AzWebappConfigAccessRestrictionRemoveSettings settings) {
            var baseCommand = "az webapp config access-restriction remove";
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--scm-site", settings.ScmSite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config access-restriction set".
        /// Sets if SCM site is using the same restrictions as the main site.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAccessRestriction")]
        public static dynamic AzWebappConfigAccessRestrictionSet(this ICakeContext context, AzWebappConfigAccessRestrictionSetSettings settings) {
            var baseCommand = "az webapp config access-restriction set";
            AppendIfNonNull(ref baseCommand, "--use-same-restrictions-for-scm-site", settings.UseSameRestrictionsForScmSite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config access-restriction show".
        /// Show Access Restriction settings for webapp.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAccessRestriction")]
        public static dynamic AzWebappConfigAccessRestrictionShow(this ICakeContext context, AzWebappConfigAccessRestrictionShowSettings settings) {
            var baseCommand = "az webapp config access-restriction show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config appsettings delete".
        /// Delete web app settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAppsettings")]
        public static dynamic AzWebappConfigAppsettingsDelete(this ICakeContext context, AzWebappConfigAppsettingsDeleteSettings settings) {
            var baseCommand = "az webapp config appsettings delete";
            AppendIfNonNull(ref baseCommand, "--setting-names", settings.SettingNames);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config appsettings list".
        /// Get the details of a web app's settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAppsettings")]
        public static dynamic AzWebappConfigAppsettingsList(this ICakeContext context, AzWebappConfigAppsettingsListSettings settings) {
            var baseCommand = "az webapp config appsettings list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config appsettings set".
        /// Set a web app's settings.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAppsettings")]
        public static dynamic AzWebappConfigAppsettingsSet(this ICakeContext context, AzWebappConfigAppsettingsSetSettings settings) {
            var baseCommand = "az webapp config appsettings set";
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--slot-settings", settings.SlotSettings);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config backup create".
        /// Create a backup of a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigBackup")]
        public static dynamic AzWebappConfigBackupCreate(this ICakeContext context, AzWebappConfigBackupCreateSettings settings) {
            var baseCommand = "az webapp config backup create";
            AppendIfNonNull(ref baseCommand, "--container-url", settings.ContainerUrl);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--backup-name", settings.BackupName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--db-connection-string", settings.DbConnectionString);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--db-type", settings.DbType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config backup list".
        /// List backups of a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigBackup")]
        public static dynamic AzWebappConfigBackupList(this ICakeContext context, AzWebappConfigBackupListSettings settings) {
            var baseCommand = "az webapp config backup list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config backup restore".
        /// Restore a web app from a backup.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigBackup")]
        public static dynamic AzWebappConfigBackupRestore(this ICakeContext context, AzWebappConfigBackupRestoreSettings settings) {
            var baseCommand = "az webapp config backup restore";
            AppendIfNonNull(ref baseCommand, "--backup-name", settings.BackupName);
            AppendIfNonNull(ref baseCommand, "--container-url", settings.ContainerUrl);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--ignore-hostname-conflict", settings.IgnoreHostnameConflict);
            AppendIfNonNull(ref baseCommand, "--overwrite", settings.Overwrite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--target-name", settings.TargetName);
            AppendIfNonNull(ref baseCommand, "--db-connection-string", settings.DbConnectionString);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--db-type", settings.DbType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config backup show".
        /// Show the backup schedule for a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigBackup")]
        public static dynamic AzWebappConfigBackupShow(this ICakeContext context, AzWebappConfigBackupShowSettings settings) {
            var baseCommand = "az webapp config backup show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config backup update".
        /// Configure a new backup schedule for a web app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigBackup")]
        public static dynamic AzWebappConfigBackupUpdate(this ICakeContext context, AzWebappConfigBackupUpdateSettings settings) {
            var baseCommand = "az webapp config backup update";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--backup-name", settings.BackupName);
            AppendIfNonNull(ref baseCommand, "--container-url", settings.ContainerUrl);
            AppendIfNonNull(ref baseCommand, "--frequency", settings.Frequency);
            AppendIfNonNull(ref baseCommand, "--retain-one", settings.RetainOne);
            AppendIfNonNull(ref baseCommand, "--retention", settings.Retention);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--db-connection-string", settings.DbConnectionString);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--db-type", settings.DbType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config connection-string delete".
        /// Delete a web app's connection strings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigConnectionString")]
        public static dynamic AzWebappConfigConnectionStringDelete(this ICakeContext context, AzWebappConfigConnectionStringDeleteSettings settings) {
            var baseCommand = "az webapp config connection-string delete";
            AppendIfNonNull(ref baseCommand, "--setting-names", settings.SettingNames);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config connection-string list".
        /// Get a web app's connection strings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigConnectionString")]
        public static dynamic AzWebappConfigConnectionStringList(this ICakeContext context, AzWebappConfigConnectionStringListSettings settings) {
            var baseCommand = "az webapp config connection-string list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config connection-string set".
        /// Update a web app's connection strings.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigConnectionString")]
        public static dynamic AzWebappConfigConnectionStringSet(this ICakeContext context, AzWebappConfigConnectionStringSetSettings settings) {
            var baseCommand = "az webapp config connection-string set";
            AppendIfNonNull(ref baseCommand, "--connection-string-type", settings.ConnectionStringType);
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--slot-settings", settings.SlotSettings);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config container delete".
        /// Delete a web app container's settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigContainer")]
        public static dynamic AzWebappConfigContainerDelete(this ICakeContext context, AzWebappConfigContainerDeleteSettings settings) {
            var baseCommand = "az webapp config container delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config container set".
        /// Set a web app container's settings.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigContainer")]
        public static dynamic AzWebappConfigContainerSet(this ICakeContext context, AzWebappConfigContainerSetSettings settings) {
            var baseCommand = "az webapp config container set";
            AppendIfNonNull(ref baseCommand, "--docker-custom-image-name", settings.DockerCustomImageName);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-password", settings.DockerRegistryServerPassword);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-url", settings.DockerRegistryServerUrl);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-user", settings.DockerRegistryServerUser);
            AppendIfNonNull(ref baseCommand, "--enable-app-service-storage", settings.EnableAppServiceStorage);
            AppendIfNonNull(ref baseCommand, "--multicontainer-config-file", settings.MulticontainerConfigFile);
            AppendIfNonNull(ref baseCommand, "--multicontainer-config-type", settings.MulticontainerConfigType);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config container show".
        /// Get details of a web app container's settings.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigContainer")]
        public static dynamic AzWebappConfigContainerShow(this ICakeContext context, AzWebappConfigContainerShowSettings settings) {
            var baseCommand = "az webapp config container show";
            AppendIfNonNull(ref baseCommand, "--show-multicontainer-config", settings.ShowMulticontainerConfig);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config hostname add".
        /// Bind a hostname to a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigHostname")]
        public static dynamic AzWebappConfigHostnameAdd(this ICakeContext context, AzWebappConfigHostnameAddSettings settings) {
            var baseCommand = "az webapp config hostname add";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--hostname", settings.Hostname);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config hostname delete".
        /// Unbind a hostname from a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigHostname")]
        public static dynamic AzWebappConfigHostnameDelete(this ICakeContext context, AzWebappConfigHostnameDeleteSettings settings) {
            var baseCommand = "az webapp config hostname delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--hostname", settings.Hostname);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config hostname get-external-ip".
        /// Get the external-facing IP address for a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigHostname")]
        public static dynamic AzWebappConfigHostnameGetExternalIp(this ICakeContext context, AzWebappConfigHostnameGetExternalIpSettings settings) {
            var baseCommand = "az webapp config hostname get-external-ip";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config hostname list".
        /// List all hostname bindings for a web app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigHostname")]
        public static dynamic AzWebappConfigHostnameList(this ICakeContext context, AzWebappConfigHostnameListSettings settings) {
            var baseCommand = "az webapp config hostname list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config snapshot list".
        /// List the restorable snapshots for a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSnapshot")]
        public static dynamic AzWebappConfigSnapshotList(this ICakeContext context, AzWebappConfigSnapshotListSettings settings) {
            var baseCommand = "az webapp config snapshot list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config snapshot restore".
        /// Restore a web app snapshot.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSnapshot")]
        public static dynamic AzWebappConfigSnapshotRestore(this ICakeContext context, AzWebappConfigSnapshotRestoreSettings settings) {
            var baseCommand = "az webapp config snapshot restore";
            AppendIfNonNull(ref baseCommand, "--time", settings.Time);
            AppendIfNonNull(ref baseCommand, "--restore-content-only", settings.RestoreContentOnly);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--source-name", settings.SourceName);
            AppendIfNonNull(ref baseCommand, "--source-resource-group", settings.SourceResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-slot", settings.SourceSlot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config ssl bind".
        /// Bind an SSL certificate to a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSsl")]
        public static dynamic AzWebappConfigSslBind(this ICakeContext context, AzWebappConfigSslBindSettings settings) {
            var baseCommand = "az webapp config ssl bind";
            AppendIfNonNull(ref baseCommand, "--certificate-thumbprint", settings.CertificateThumbprint);
            AppendIfNonNull(ref baseCommand, "--ssl-type", settings.SslType);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config ssl delete".
        /// Delete an SSL certificate from a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSsl")]
        public static dynamic AzWebappConfigSslDelete(this ICakeContext context, AzWebappConfigSslDeleteSettings settings) {
            var baseCommand = "az webapp config ssl delete";
            AppendIfNonNull(ref baseCommand, "--certificate-thumbprint", settings.CertificateThumbprint);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config ssl list".
        /// List SSL certificates for a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSsl")]
        public static dynamic AzWebappConfigSslList(this ICakeContext context, AzWebappConfigSslListSettings settings) {
            var baseCommand = "az webapp config ssl list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config ssl unbind".
        /// Unbind an SSL certificate from a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSsl")]
        public static dynamic AzWebappConfigSslUnbind(this ICakeContext context, AzWebappConfigSslUnbindSettings settings) {
            var baseCommand = "az webapp config ssl unbind";
            AppendIfNonNull(ref baseCommand, "--certificate-thumbprint", settings.CertificateThumbprint);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config ssl upload".
        /// Upload an SSL certificate to a web app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSsl")]
        public static dynamic AzWebappConfigSslUpload(this ICakeContext context, AzWebappConfigSslUploadSettings settings) {
            var baseCommand = "az webapp config ssl upload";
            AppendIfNonNull(ref baseCommand, "--certificate-file", settings.CertificateFile);
            AppendIfNonNull(ref baseCommand, "--certificate-password", settings.CertificatePassword);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config storage-account add".
        /// Add an Azure storage account configuration to a web app. (Linux Web Apps and Windows Containers Web Apps Only).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigStorageAccount")]
        public static dynamic AzWebappConfigStorageAccountAdd(this ICakeContext context, AzWebappConfigStorageAccountAddSettings settings) {
            var baseCommand = "az webapp config storage-account add";
            AppendIfNonNull(ref baseCommand, "--access-key", settings.AccessKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--custom-id", settings.CustomId);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--storage-type", settings.StorageType);
            AppendIfNonNull(ref baseCommand, "--mount-path", settings.MountPath);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--slot-setting", settings.SlotSetting);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config storage-account delete".
        /// Delete a web app's Azure storage account configuration. (Linux Web Apps and Windows Containers Web Apps Only).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigStorageAccount")]
        public static dynamic AzWebappConfigStorageAccountDelete(this ICakeContext context, AzWebappConfigStorageAccountDeleteSettings settings) {
            var baseCommand = "az webapp config storage-account delete";
            AppendIfNonNull(ref baseCommand, "--custom-id", settings.CustomId);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config storage-account list".
        /// Get a web app's Azure storage account configurations. (Linux Web Apps and Windows Containers Web Apps Only).
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigStorageAccount")]
        public static dynamic AzWebappConfigStorageAccountList(this ICakeContext context, AzWebappConfigStorageAccountListSettings settings) {
            var baseCommand = "az webapp config storage-account list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp config storage-account update".
        /// Update an existing Azure storage account configuration on a web app. (Linux Web Apps and Windows Containers Web Apps Only).  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigStorageAccount")]
        public static dynamic AzWebappConfigStorageAccountUpdate(this ICakeContext context, AzWebappConfigStorageAccountUpdateSettings settings) {
            var baseCommand = "az webapp config storage-account update";
            AppendIfNonNull(ref baseCommand, "--custom-id", settings.CustomId);
            AppendIfNonNull(ref baseCommand, "--access-key", settings.AccessKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--mount-path", settings.MountPath);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--slot-setting", settings.SlotSetting);
            AppendIfNonNull(ref baseCommand, "--storage-type", settings.StorageType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp cors add".
        /// Add allowed origins.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappCors")]
        public static dynamic AzWebappCorsAdd(this ICakeContext context, AzWebappCorsAddSettings settings) {
            var baseCommand = "az webapp cors add";
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp cors remove".
        /// Remove allowed origins.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappCors")]
        public static dynamic AzWebappCorsRemove(this ICakeContext context, AzWebappCorsRemoveSettings settings) {
            var baseCommand = "az webapp cors remove";
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp cors show".
        /// Show allowed origins.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappCors")]
        public static dynamic AzWebappCorsShow(this ICakeContext context, AzWebappCorsShowSettings settings) {
            var baseCommand = "az webapp cors show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deleted list".
        /// List web apps that have been deleted.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeleted")]
        public static dynamic AzWebappDeletedList(this ICakeContext context, AzWebappDeletedListSettings settings) {
            var baseCommand = "az webapp deleted list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deleted restore".
        /// Restore a deleted web app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeleted")]
        public static dynamic AzWebappDeletedRestore(this ICakeContext context, AzWebappDeletedRestoreSettings settings) {
            var baseCommand = "az webapp deleted restore";
            AppendIfNonNull(ref baseCommand, "--deleted-id", settings.DeletedId);
            AppendIfNonNull(ref baseCommand, "--restore-content-only", settings.RestoreContentOnly);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment list-publishing-credentials".
        /// Get the details for available web app publishing credentials.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeployment")]
        public static dynamic AzWebappDeploymentListPublishingCredentials(this ICakeContext context, AzWebappDeploymentListPublishingCredentialsSettings settings) {
            var baseCommand = "az webapp deployment list-publishing-credentials";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment list-publishing-profiles".
        /// Get the details for available web app deployment profiles.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeployment")]
        public static dynamic AzWebappDeploymentListPublishingProfiles(this ICakeContext context, AzWebappDeploymentListPublishingProfilesSettings settings) {
            var baseCommand = "az webapp deployment list-publishing-profiles";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment container config".
        /// Configure continuous deployment via containers.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentContainer")]
        public static dynamic AzWebappDeploymentContainerConfig(this ICakeContext context, AzWebappDeploymentContainerConfigSettings settings) {
            var baseCommand = "az webapp deployment container config";
            AppendIfNonNull(ref baseCommand, "--enable-cd", settings.EnableCd);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment container show-cd-url".
        /// Get the URL which can be used to configure webhooks for continuous deployment.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentContainer")]
        public static dynamic AzWebappDeploymentContainerShowCdUrl(this ICakeContext context, AzWebappDeploymentContainerShowCdUrlSettings settings) {
            var baseCommand = "az webapp deployment container show-cd-url";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment slot auto-swap".
        /// Configure deployment slot auto swap.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSlot")]
        public static dynamic AzWebappDeploymentSlotAutoSwap(this ICakeContext context, AzWebappDeploymentSlotAutoSwapSettings settings) {
            var baseCommand = "az webapp deployment slot auto-swap";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--auto-swap-slot", settings.AutoSwapSlot);
            AppendIfNonNull(ref baseCommand, "--disable", settings.Disable);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment slot create".
        /// Create a deployment slot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSlot")]
        public static dynamic AzWebappDeploymentSlotCreate(this ICakeContext context, AzWebappDeploymentSlotCreateSettings settings) {
            var baseCommand = "az webapp deployment slot create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--configuration-source", settings.ConfigurationSource);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment slot delete".
        /// Delete a deployment slot.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSlot")]
        public static dynamic AzWebappDeploymentSlotDelete(this ICakeContext context, AzWebappDeploymentSlotDeleteSettings settings) {
            var baseCommand = "az webapp deployment slot delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment slot list".
        /// List all deployment slots.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSlot")]
        public static dynamic AzWebappDeploymentSlotList(this ICakeContext context, AzWebappDeploymentSlotListSettings settings) {
            var baseCommand = "az webapp deployment slot list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment slot swap".
        /// Change deployment slots for a web app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSlot")]
        public static dynamic AzWebappDeploymentSlotSwap(this ICakeContext context, AzWebappDeploymentSlotSwapSettings settings) {
            var baseCommand = "az webapp deployment slot swap";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--target-slot", settings.TargetSlot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment source config".
        /// Manage deployment from git or Mercurial repositories.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public static dynamic AzWebappDeploymentSourceConfig(this ICakeContext context, AzWebappDeploymentSourceConfigSettings settings) {
            var baseCommand = "az webapp deployment source config";
            AppendIfNonNull(ref baseCommand, "--repo-url", settings.RepoUrl);
            AppendIfNonNull(ref baseCommand, "--branch", settings.Branch);
            AppendIfNonNull(ref baseCommand, "--git-token", settings.GitToken);
            AppendIfNonNull(ref baseCommand, "--manual-integration", settings.ManualIntegration);
            AppendIfNonNull(ref baseCommand, "--repository-type", settings.RepositoryType);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--app-working-dir", settings.AppWorkingDir);
            AppendIfNonNull(ref baseCommand, "--cd-account-create", settings.CdAccountCreate);
            AppendIfNonNull(ref baseCommand, "--cd-app-type", settings.CdAppType);
            AppendIfNonNull(ref baseCommand, "--cd-project-url", settings.CdProjectUrl);
            AppendIfNonNull(ref baseCommand, "--nodejs-task-runner", settings.NodejsTaskRunner);
            AppendIfNonNull(ref baseCommand, "--private-repo-password", settings.PrivateRepoPassword);
            AppendIfNonNull(ref baseCommand, "--private-repo-username", settings.PrivateRepoUsername);
            AppendIfNonNull(ref baseCommand, "--python-framework", settings.PythonFramework);
            AppendIfNonNull(ref baseCommand, "--python-version", settings.PythonVersion);
            AppendIfNonNull(ref baseCommand, "--slot-swap", settings.SlotSwap);
            AppendIfNonNull(ref baseCommand, "--test", settings.Test);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment source config-local-git".
        /// Get a URL for a git repository endpoint to clone and push to for web app deployment.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public static dynamic AzWebappDeploymentSourceConfigLocalGit(this ICakeContext context, AzWebappDeploymentSourceConfigLocalGitSettings settings) {
            var baseCommand = "az webapp deployment source config-local-git";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment source config-zip".
        /// Perform deployment using the kudu zip push deployment for a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public static dynamic AzWebappDeploymentSourceConfigZip(this ICakeContext context, AzWebappDeploymentSourceConfigZipSettings settings) {
            var baseCommand = "az webapp deployment source config-zip";
            AppendIfNonNull(ref baseCommand, "--src", settings.Src);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment source delete".
        /// Delete a source control deployment configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public static dynamic AzWebappDeploymentSourceDelete(this ICakeContext context, AzWebappDeploymentSourceDeleteSettings settings) {
            var baseCommand = "az webapp deployment source delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment source show".
        /// Get the details of a source control deployment configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public static dynamic AzWebappDeploymentSourceShow(this ICakeContext context, AzWebappDeploymentSourceShowSettings settings) {
            var baseCommand = "az webapp deployment source show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment source sync".
        /// Synchronize from the repository. Only needed under manual integration mode.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public static dynamic AzWebappDeploymentSourceSync(this ICakeContext context, AzWebappDeploymentSourceSyncSettings settings) {
            var baseCommand = "az webapp deployment source sync";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment source update-token".
        /// Update source control token cached in Azure app service.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public static dynamic AzWebappDeploymentSourceUpdateToken(this ICakeContext context, AzWebappDeploymentSourceUpdateTokenSettings settings) {
            var baseCommand = "az webapp deployment source update-token";
            AppendIfNonNull(ref baseCommand, "--git-token", settings.GitToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment user set".
        /// Update deployment credentials.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentUser")]
        public static dynamic AzWebappDeploymentUserSet(this ICakeContext context, AzWebappDeploymentUserSetSettings settings) {
            var baseCommand = "az webapp deployment user set";
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp deployment user show".
        /// Gets publishing user.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentUser")]
        public static dynamic AzWebappDeploymentUserShow(this ICakeContext context, AzWebappDeploymentUserShowSettings settings) {
            var baseCommand = "az webapp deployment user show";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp hybrid-connection add".
        /// Add a hybrid-connection to a webapp.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappHybridConnection")]
        public static dynamic AzWebappHybridConnectionAdd(this ICakeContext context, AzWebappHybridConnectionAddSettings settings) {
            var baseCommand = "az webapp hybrid-connection add";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection", settings.HybridConnection);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp hybrid-connection list".
        /// List the hybrid-connections on a webapp.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappHybridConnection")]
        public static dynamic AzWebappHybridConnectionList(this ICakeContext context, AzWebappHybridConnectionListSettings settings) {
            var baseCommand = "az webapp hybrid-connection list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp hybrid-connection remove".
        /// Remove a hybrid-connection from a webapp.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappHybridConnection")]
        public static dynamic AzWebappHybridConnectionRemove(this ICakeContext context, AzWebappHybridConnectionRemoveSettings settings) {
            var baseCommand = "az webapp hybrid-connection remove";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection", settings.HybridConnection);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp identity assign".
        /// Assign or disable managed service identity to the web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappIdentity")]
        public static dynamic AzWebappIdentityAssign(this ICakeContext context, AzWebappIdentityAssignSettings settings) {
            var baseCommand = "az webapp identity assign";
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp identity remove".
        /// Disable web app's managed service identity.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappIdentity")]
        public static dynamic AzWebappIdentityRemove(this ICakeContext context, AzWebappIdentityRemoveSettings settings) {
            var baseCommand = "az webapp identity remove";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp identity show".
        /// Display web app's managed service identity.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappIdentity")]
        public static dynamic AzWebappIdentityShow(this ICakeContext context, AzWebappIdentityShowSettings settings) {
            var baseCommand = "az webapp identity show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp log config".
        /// Configure logging for a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappLog")]
        public static dynamic AzWebappLogConfig(this ICakeContext context, AzWebappLogConfigSettings settings) {
            var baseCommand = "az webapp log config";
            AppendIfNonNull(ref baseCommand, "--application-logging", settings.ApplicationLogging);
            AppendIfNonNull(ref baseCommand, "--detailed-error-messages", settings.DetailedErrorMessages);
            AppendIfNonNull(ref baseCommand, "--docker-container-logging", settings.DockerContainerLogging);
            AppendIfNonNull(ref baseCommand, "--failed-request-tracing", settings.FailedRequestTracing);
            AppendIfNonNull(ref baseCommand, "--level", settings.Level);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--web-server-logging", settings.WebServerLogging);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp log download".
        /// Download a web app's log history as a zip file.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappLog")]
        public static dynamic AzWebappLogDownload(this ICakeContext context, AzWebappLogDownloadSettings settings) {
            var baseCommand = "az webapp log download";
            AppendIfNonNull(ref baseCommand, "--log-file", settings.LogFile);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp log show".
        /// Get the details of a web app's logging configuration.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappLog")]
        public static dynamic AzWebappLogShow(this ICakeContext context, AzWebappLogShowSettings settings) {
            var baseCommand = "az webapp log show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp log tail".
        /// Start live log tracing for a web app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappLog")]
        public static dynamic AzWebappLogTail(this ICakeContext context, AzWebappLogTailSettings settings) {
            var baseCommand = "az webapp log tail";
            AppendIfNonNull(ref baseCommand, "--provider", settings.Provider);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp traffic-routing clear".
        /// Clear the routing rules and send all traffic to production.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappTrafficRouting")]
        public static dynamic AzWebappTrafficRoutingClear(this ICakeContext context, AzWebappTrafficRoutingClearSettings settings) {
            var baseCommand = "az webapp traffic-routing clear";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp traffic-routing set".
        /// Configure routing traffic to deployment slots.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappTrafficRouting")]
        public static dynamic AzWebappTrafficRoutingSet(this ICakeContext context, AzWebappTrafficRoutingSetSettings settings) {
            var baseCommand = "az webapp traffic-routing set";
            AppendIfNonNull(ref baseCommand, "--distribution", settings.Distribution);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp traffic-routing show".
        /// Display the current distribution of traffic across slots.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappTrafficRouting")]
        public static dynamic AzWebappTrafficRoutingShow(this ICakeContext context, AzWebappTrafficRoutingShowSettings settings) {
            var baseCommand = "az webapp traffic-routing show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp vnet-integration add".
        /// Add a regional virtual network integration to a webapp.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappVnetIntegration")]
        public static dynamic AzWebappVnetIntegrationAdd(this ICakeContext context, AzWebappVnetIntegrationAddSettings settings) {
            var baseCommand = "az webapp vnet-integration add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp vnet-integration list".
        /// List the virtual network integrations on a webapp.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappVnetIntegration")]
        public static dynamic AzWebappVnetIntegrationList(this ICakeContext context, AzWebappVnetIntegrationListSettings settings) {
            var baseCommand = "az webapp vnet-integration list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp vnet-integration remove".
        /// Remove a regional virtual network integration from webapp.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappVnetIntegration")]
        public static dynamic AzWebappVnetIntegrationRemove(this ICakeContext context, AzWebappVnetIntegrationRemoveSettings settings) {
            var baseCommand = "az webapp vnet-integration remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp webjob continuous list".
        /// List all continuous webjobs on a selected web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobContinuous")]
        public static dynamic AzWebappWebjobContinuousList(this ICakeContext context, AzWebappWebjobContinuousListSettings settings) {
            var baseCommand = "az webapp webjob continuous list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp webjob continuous remove".
        /// Delete a specific continuous webjob.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobContinuous")]
        public static dynamic AzWebappWebjobContinuousRemove(this ICakeContext context, AzWebappWebjobContinuousRemoveSettings settings) {
            var baseCommand = "az webapp webjob continuous remove";
            AppendIfNonNull(ref baseCommand, "--webjob-name", settings.WebjobName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp webjob continuous start".
        /// Start a specific continuous webjob on a selected web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobContinuous")]
        public static dynamic AzWebappWebjobContinuousStart(this ICakeContext context, AzWebappWebjobContinuousStartSettings settings) {
            var baseCommand = "az webapp webjob continuous start";
            AppendIfNonNull(ref baseCommand, "--webjob-name", settings.WebjobName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp webjob continuous stop".
        /// Stop a specific continuous webjob.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobContinuous")]
        public static dynamic AzWebappWebjobContinuousStop(this ICakeContext context, AzWebappWebjobContinuousStopSettings settings) {
            var baseCommand = "az webapp webjob continuous stop";
            AppendIfNonNull(ref baseCommand, "--webjob-name", settings.WebjobName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp webjob triggered list".
        /// List all triggered webjobs hosted on a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobTriggered")]
        public static dynamic AzWebappWebjobTriggeredList(this ICakeContext context, AzWebappWebjobTriggeredListSettings settings) {
            var baseCommand = "az webapp webjob triggered list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp webjob triggered log".
        /// Get history of a specific triggered webjob hosted on a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobTriggered")]
        public static dynamic AzWebappWebjobTriggeredLog(this ICakeContext context, AzWebappWebjobTriggeredLogSettings settings) {
            var baseCommand = "az webapp webjob triggered log";
            AppendIfNonNull(ref baseCommand, "--webjob-name", settings.WebjobName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp webjob triggered remove".
        /// Delete a specific triggered webjob hosted on a web app.
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobTriggered")]
        public static dynamic AzWebappWebjobTriggeredRemove(this ICakeContext context, AzWebappWebjobTriggeredRemoveSettings settings) {
            var baseCommand = "az webapp webjob triggered remove";
            AppendIfNonNull(ref baseCommand, "--webjob-name", settings.WebjobName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

        /// <summary>
        /// "az webapp webjob triggered run".
        /// Run a specific triggered webjob hosted on a web app.  
        /// </summary>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobTriggered")]
        public static dynamic AzWebappWebjobTriggeredRun(this ICakeContext context, AzWebappWebjobTriggeredRunSettings settings) {
            var baseCommand = "az webapp webjob triggered run";
            AppendIfNonNull(ref baseCommand, "--webjob-name", settings.WebjobName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings, context);
        }

    }
}

