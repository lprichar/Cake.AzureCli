<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51" #>
<#@ assembly name="$(SolutionDir)\Cake.AzCliCore\bin\Debug\netstandard2.0\Cake.AzCliCore.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Cake.AzCliCore" #>
<#@ output extension=".cs" #>

using Cake.Core;
using Cake.Core.Annotations;
using Cake.Core.IO;

namespace Cake.AzureCli
{
    [CakeAliasCategory("Az")]
    public static class AzAliases
    {
        private static void AppendArguments(ref string baseCommand, ProcessArgumentBuilder arguments)
        {
            if (arguments != null)
            {
                baseCommand += " " + arguments.Render().TrimEnd();
            }
        }

        private static void AppendIfNonNull(ref string baseCommand, string paramName, string setting)
        {
            if (!string.IsNullOrEmpty(setting))
            {
                baseCommand += $" {paramName}={setting}";
            }
        }

<# 
        var cliProgram = GetAzCliHelpOutputJson();
        var allCliCommands = CommandFinder.GetAllCliCommands(cliProgram);

        PushIndent("        ");
        foreach (var cliCommand in allCliCommands) {
            WriteLine("/// <summary>");
            WriteLine($"/// {cliCommand.Parents} {cliCommand.Name}");
            WriteLine("/// </summary>");
            WriteLine("/// <returns></returns>");
            WriteLine("[CakeMethodAlias]");
            WriteLine($"public static void {CommandNameMaker.MakeName(cliCommand)}(this ICakeContext context) {{");
            WriteLine($"}}");
            WriteLine("");
        }
        PopIndent();
        #>
    }
}

<#+ 
private CommandNameMaker CommandNameMaker = new CommandNameMaker();
private CommandFinder CommandFinder = new CommandFinder();

private CliProgram GetAzCliHelpOutputJson() {
    var templateFile = new FileInfo(Host.TemplateFile);
    var currentFolder = templateFile.Directory.FullName;
    var azCliHelpOutputFileLocation = Path.Combine(currentFolder, "AzCliHelpOutput.json");
    var azCliHelpOutputJson = File.ReadAllText(azCliHelpOutputFileLocation);
    var cliProgram = JsonConvert.DeserializeObject<CliProgram>(azCliHelpOutputJson);
    return cliProgram;
}

#>