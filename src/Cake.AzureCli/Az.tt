<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51" #>
<#@ assembly name="$(SolutionDir)\Cake.AzCliCore\bin\Debug\netstandard2.0\Cake.AzCli.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Cake.AzCli.Core.Models" #>
<#@ import namespace="Cake.AzCli.Core.Helpers" #>
<#@ output extension=".cs" #>

using Cake.Core;
using Cake.Core.Annotations;
using Cake.Core.IO;

namespace Cake.AzureCli
{
    public class Az
    {
        private readonly ICakeContext _context;

        public Az(ICakeContext context) 
        {
            _context = context;
        }
        
        private void AppendArguments(ref string baseCommand, ProcessArgumentBuilder arguments)
        {
            if (arguments != null)
            {
                baseCommand += " " + arguments.Render().TrimEnd();
            }
        }

        private void AppendIfNonNull(ref string baseCommand, string paramName, string setting)
        {
            if (!string.IsNullOrEmpty(setting))
            {
                baseCommand += $" {paramName}={setting}";
            }
        }

        private dynamic Execute(string baseCommand, AzSettingsBase settings)
        {
            AppendArguments(ref baseCommand, settings.Arguments);
            var commandExecutor = new CommandExecutor(_context);
            return commandExecutor.ExecuteCommand(baseCommand);
        }

<# 
        var cliProgram = GetAzCliHelpOutputJson();
        var allCliCommands = CommandFinder.GetAllCliCommands(cliProgram);

        PushIndent("        ");
        foreach (var cliCommand in allCliCommands) {
            var cliCommandName = CommandNameMaker.MakeName(cliCommand);
            var category = CommandNameMaker.MakeCategory(cliCommand);

            WriteLine("/// <summary>");
            WriteLine($"/// \"{cliCommand.Parents} {cliCommand.Name}\".");
            WriteLine($"/// {cliCommand.ShortDescription}");
            //foreach (var example in cliCommand.Examples) {
            //    WriteLine($"/// {example.Description}");
            //    WriteLine($"/// `{example.Example}`");
            //    WriteLine("///");
            //}
            WriteLine("/// </summary>");
            WriteLine("/// <param name=\"context\">The context.</param>");
            WriteLine("/// <param name=\"settings\">The settings.</param>");
            WriteLine("[CakeMethodAlias]");
            WriteLine($"[CakeAliasCategory(\"{category}\")]");
            WriteLine($"public dynamic {cliCommandName}({cliCommandName}Settings settings) {{");
            PushIndent("    ");
            WriteLine($"var baseCommand = \"{cliCommand.Parents} {cliCommand.Name}\";");
            foreach (var argument in cliCommand.Arguments) {
                var argName = CommandNameMaker.MakeName(argument);
                WriteLine($"AppendIfNonNull(ref baseCommand, \"{argument.Name}\", settings.{argName});");
            }
            WriteLine("return Execute(baseCommand, settings);");
            PopIndent();
            WriteLine($"}}");
            WriteLine("");
        }
        PopIndent();
        #>
    }
}

<#+ 
private CommandNameMaker CommandNameMaker = new CommandNameMaker();
private CommandFinder CommandFinder = new CommandFinder();

private CliProgram GetAzCliHelpOutputJson() {
    var templateFile = new FileInfo(Host.TemplateFile);
    var currentFolder = templateFile.Directory.FullName;
    var azCliHelpOutputFileLocation = Path.Combine(currentFolder, "AzCliHelpOutput.json");
    var azCliHelpOutputJson = File.ReadAllText(azCliHelpOutputFileLocation);
    var cliProgram = JsonConvert.DeserializeObject<CliProgram>(azCliHelpOutputJson);
    return cliProgram;
}

#>