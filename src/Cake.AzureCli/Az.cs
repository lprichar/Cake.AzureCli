
using Cake.Core;
using Cake.Core.Annotations;
using Cake.Core.IO;

namespace Cake.AzureCli
{
    public class Az
    {
        private readonly ICakeContext _context;

        public Az(ICakeContext context) 
        {
            _context = context;
        }
        
        private void AppendArguments(ref string baseCommand, ProcessArgumentBuilder arguments)
        {
            if (arguments != null)
            {
                baseCommand += " " + arguments.Render().TrimEnd();
            }
        }

        private void AppendIfNonNull(ref string baseCommand, string paramName, string setting)
        {
            if (!string.IsNullOrEmpty(setting))
            {
                baseCommand += $" {paramName}={setting}";
            }
        }

        private dynamic Execute(string baseCommand, AzSettingsBase settings)
        {
            AppendArguments(ref baseCommand, settings.Arguments);
            var commandExecutor = new CommandExecutor(_context);
            return commandExecutor.ExecuteCommand(baseCommand);
        }

        /// <summary>
        /// "az configure".
        /// Manage Azure CLI configuration. This command is interactive.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public dynamic Configure(ConfigureSettings settings) {
            var baseCommand = "az configure";
            AppendIfNonNull(ref baseCommand, "--defaults", settings.Defaults);
            AppendIfNonNull(ref baseCommand, "--list-defaults", settings.ListDefaults);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az feedback".
        /// Send feedback to the Azure CLI Team!
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public dynamic Feedback(FeedbackSettings settings) {
            var baseCommand = "az feedback";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az find".
        /// I'm an AI robot, my advice is based on our Azure documentation as well as the usage patterns of Azure CLI and Azure ARM users. Using me improves Azure products and documentation.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public dynamic Find(FindSettings settings) {
            var baseCommand = "az find";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az interactive".
        /// Start interactive mode. Installs the Interactive extension if not installed already.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public dynamic Interactive(InteractiveSettings settings) {
            var baseCommand = "az interactive";
            AppendIfNonNull(ref baseCommand, "--style", settings.Style);
            AppendIfNonNull(ref baseCommand, "--update", settings.Update);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az login".
        /// Log in to Azure.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public dynamic Login(LoginSettings settings) {
            var baseCommand = "az login";
            AppendIfNonNull(ref baseCommand, "--allow-no-subscriptions", settings.AllowNoSubscriptions);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--service-principal", settings.ServicePrincipal);
            AppendIfNonNull(ref baseCommand, "--tenant", settings.Tenant);
            AppendIfNonNull(ref baseCommand, "--use-cert-sn-issuer", settings.UseCertSnIssuer);
            AppendIfNonNull(ref baseCommand, "--use-device-code", settings.UseDeviceCode);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--identity", settings.Identity);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az logout".
        /// Log out to remove access to Azure subscriptions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public dynamic Logout(LogoutSettings settings) {
            var baseCommand = "az logout";
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az rest".
        /// Invoke a custom request.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("Az")]
        public dynamic Rest(RestSettings settings) {
            var baseCommand = "az rest";
            AppendIfNonNull(ref baseCommand, "--method", settings.Method);
            AppendIfNonNull(ref baseCommand, "--uri", settings.Uri);
            AppendIfNonNull(ref baseCommand, "--body", settings.Body);
            AppendIfNonNull(ref baseCommand, "--headers", settings.Headers);
            AppendIfNonNull(ref baseCommand, "--output-file", settings.OutputFile);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--skip-authorization-header", settings.SkipAuthorizationHeader);
            AppendIfNonNull(ref baseCommand, "--uri-parameters", settings.UriParameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account clear".
        /// Clear all subscriptions from the CLI's local cache.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccount")]
        public dynamic AccountClear(AccountClearSettings settings) {
            var baseCommand = "az account clear";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account get-access-token".
        /// Get a token for utilities to access Azure.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccount")]
        public dynamic AccountGetAccessToken(AccountGetAccessTokenSettings settings) {
            var baseCommand = "az account get-access-token";
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account list".
        /// Get a list of subscriptions for the logged in account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccount")]
        public dynamic AccountList(AccountListSettings settings) {
            var baseCommand = "az account list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--refresh", settings.Refresh);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account list-locations".
        /// List supported regions for the current subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccount")]
        public dynamic AccountListLocations(AccountListLocationsSettings settings) {
            var baseCommand = "az account list-locations";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account set".
        /// Set a subscription to be the current active subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccount")]
        public dynamic AccountSet(AccountSetSettings settings) {
            var baseCommand = "az account set";
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account show".
        /// Get the details of a subscription.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccount")]
        public dynamic AccountShow(AccountShowSettings settings) {
            var baseCommand = "az account show";
            AppendIfNonNull(ref baseCommand, "--sdk-auth", settings.SdkAuth);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account lock create".
        /// Create a subscription lock.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountLock")]
        public dynamic AccountLockCreate(AccountLockCreateSettings settings) {
            var baseCommand = "az account lock create";
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account lock delete".
        /// Delete a subscription lock.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountLock")]
        public dynamic AccountLockDelete(AccountLockDeleteSettings settings) {
            var baseCommand = "az account lock delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account lock list".
        /// List lock information in the subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountLock")]
        public dynamic AccountLockList(AccountLockListSettings settings) {
            var baseCommand = "az account lock list";
            AppendIfNonNull(ref baseCommand, "--filter-string", settings.FilterString);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account lock show".
        /// Show the details of a subscription lock.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountLock")]
        public dynamic AccountLockShow(AccountLockShowSettings settings) {
            var baseCommand = "az account lock show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account lock update".
        /// Update a subscription lock.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountLock")]
        public dynamic AccountLockUpdate(AccountLockUpdateSettings settings) {
            var baseCommand = "az account lock update";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account management-group create".
        /// Create a new management group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroup")]
        public dynamic AccountManagementGroupCreate(AccountManagementGroupCreateSettings settings) {
            var baseCommand = "az account management-group create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account management-group delete".
        /// Delete an existing management group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroup")]
        public dynamic AccountManagementGroupDelete(AccountManagementGroupDeleteSettings settings) {
            var baseCommand = "az account management-group delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account management-group list".
        /// List all management groups.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroup")]
        public dynamic AccountManagementGroupList(AccountManagementGroupListSettings settings) {
            var baseCommand = "az account management-group list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account management-group show".
        /// Get a specific management group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroup")]
        public dynamic AccountManagementGroupShow(AccountManagementGroupShowSettings settings) {
            var baseCommand = "az account management-group show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--recurse", settings.Recurse);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account management-group update".
        /// Update an existing management group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroup")]
        public dynamic AccountManagementGroupUpdate(AccountManagementGroupUpdateSettings settings) {
            var baseCommand = "az account management-group update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account management-group subscription add".
        /// Add a subscription to a management group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroupSubscription")]
        public dynamic AccountManagementGroupSubscriptionAdd(AccountManagementGroupSubscriptionAddSettings settings) {
            var baseCommand = "az account management-group subscription add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az account management-group subscription remove".
        /// Remove an existing subscription from a management group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAccountManagementGroupSubscription")]
        public dynamic AccountManagementGroupSubscriptionRemove(AccountManagementGroupSubscriptionRemoveSettings settings) {
            var baseCommand = "az account management-group subscription remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr build".
        /// Queues a quick build, providing streaming logs for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public dynamic AcrBuild(AcrBuildSettings settings) {
            var baseCommand = "az acr build";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--build-arg", settings.BuildArg);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--no-format", settings.NoFormat);
            AppendIfNonNull(ref baseCommand, "--no-logs", settings.NoLogs);
            AppendIfNonNull(ref baseCommand, "--no-push", settings.NoPush);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--platform", settings.Platform);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--secret-build-arg", settings.SecretBuildArg);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr check-health".
        /// Gets health information on the environment and optionally a target registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public dynamic AcrCheckHealth(AcrCheckHealthSettings settings) {
            var baseCommand = "az acr check-health";
            AppendIfNonNull(ref baseCommand, "--ignore-errors", settings.IgnoreErrors);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr check-name".
        /// Checks if an Azure Container Registry name is valid and available for use.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public dynamic AcrCheckName(AcrCheckNameSettings settings) {
            var baseCommand = "az acr check-name";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr create".
        /// Creates an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public dynamic AcrCreate(AcrCreateSettings settings) {
            var baseCommand = "az acr create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--admin-enabled", settings.AdminEnabled);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--workspace", settings.Workspace);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr delete".
        /// Deletes an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public dynamic AcrDelete(AcrDeleteSettings settings) {
            var baseCommand = "az acr delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr import".
        /// Imports an image to an Azure Container Registry from another Container Registry. Import removes the need to docker pull, docker tag, docker push.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public dynamic AcrImport(AcrImportSettings settings) {
            var baseCommand = "az acr import";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr list".
        /// Lists all the container registries under the current subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public dynamic AcrList(AcrListSettings settings) {
            var baseCommand = "az acr list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr login".
        /// Log in to an Azure Container Registry through the Docker CLI.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public dynamic AcrLogin(AcrLoginSettings settings) {
            var baseCommand = "az acr login";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr run".
        /// Queues a quick run providing streamed logs for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public dynamic AcrRun(AcrRunSettings settings) {
            var baseCommand = "az acr run";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--cmd", settings.Cmd);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--no-format", settings.NoFormat);
            AppendIfNonNull(ref baseCommand, "--no-logs", settings.NoLogs);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--platform", settings.Platform);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--set-secret", settings.SetSecret);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--values", settings.Values);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr show".
        /// Get the details of an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public dynamic AcrShow(AcrShowSettings settings) {
            var baseCommand = "az acr show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr show-usage".
        /// Get the storage usage for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public dynamic AcrShowUsage(AcrShowUsageSettings settings) {
            var baseCommand = "az acr show-usage";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr update".
        /// Update an Azure Container Registry.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcr")]
        public dynamic AcrUpdate(AcrUpdateSettings settings) {
            var baseCommand = "az acr update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--admin-enabled", settings.AdminEnabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr config content-trust show".
        /// Show the configured content-trust policy for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrConfigContentTrust")]
        public dynamic AcrConfigContentTrustShow(AcrConfigContentTrustShowSettings settings) {
            var baseCommand = "az acr config content-trust show";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr config content-trust update".
        /// Update content-trust policy for an Azure Container Registry.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrConfigContentTrust")]
        public dynamic AcrConfigContentTrustUpdate(AcrConfigContentTrustUpdateSettings settings) {
            var baseCommand = "az acr config content-trust update";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr config retention show".
        /// Show the configured retention policy for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrConfigRetention")]
        public dynamic AcrConfigRetentionShow(AcrConfigRetentionShowSettings settings) {
            var baseCommand = "az acr config retention show";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr config retention update".
        /// Update retention policy for an Azure Container Registry.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrConfigRetention")]
        public dynamic AcrConfigRetentionUpdate(AcrConfigRetentionUpdateSettings settings) {
            var baseCommand = "az acr config retention update";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--days", settings.Days);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr credential renew".
        /// Regenerate login credentials for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrCredential")]
        public dynamic AcrCredentialRenew(AcrCredentialRenewSettings settings) {
            var baseCommand = "az acr credential renew";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password-name", settings.PasswordName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr credential show".
        /// Get the login credentials for an Azure Container Registry.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrCredential")]
        public dynamic AcrCredentialShow(AcrCredentialShowSettings settings) {
            var baseCommand = "az acr credential show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr helm delete".
        /// Delete a helm chart version in an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrHelm")]
        public dynamic AcrHelmDelete(AcrHelmDeleteSettings settings) {
            var baseCommand = "az acr helm delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--prov", settings.Prov);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr helm list".
        /// List all helm charts in an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrHelm")]
        public dynamic AcrHelmList(AcrHelmListSettings settings) {
            var baseCommand = "az acr helm list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr helm push".
        /// Push a helm chart package to an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrHelm")]
        public dynamic AcrHelmPush(AcrHelmPushSettings settings) {
            var baseCommand = "az acr helm push";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr helm show".
        /// Describe a helm chart in an Azure Container Registry.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrHelm")]
        public dynamic AcrHelmShow(AcrHelmShowSettings settings) {
            var baseCommand = "az acr helm show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr helm repo add".
        /// Add a helm chart repository from an Azure Container Registry through the Helm CLI.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrHelmRepo")]
        public dynamic AcrHelmRepoAdd(AcrHelmRepoAddSettings settings) {
            var baseCommand = "az acr helm repo add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr network-rule add".
        /// Add a network rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrNetworkRule")]
        public dynamic AcrNetworkRuleAdd(AcrNetworkRuleAddSettings settings) {
            var baseCommand = "az acr network-rule add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr network-rule list".
        /// List network rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrNetworkRule")]
        public dynamic AcrNetworkRuleList(AcrNetworkRuleListSettings settings) {
            var baseCommand = "az acr network-rule list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr network-rule remove".
        /// Remove a network rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrNetworkRule")]
        public dynamic AcrNetworkRuleRemove(AcrNetworkRuleRemoveSettings settings) {
            var baseCommand = "az acr network-rule remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr pack build".
        /// Queues a quick build task that builds an app and pushes it into an Azure Container Registry.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrPack")]
        public dynamic AcrPackBuild(AcrPackBuildSettings settings) {
            var baseCommand = "az acr pack build";
            AppendIfNonNull(ref baseCommand, "--builder", settings.Builder);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--no-format", settings.NoFormat);
            AppendIfNonNull(ref baseCommand, "--no-logs", settings.NoLogs);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--pack-image-tag", settings.PackImageTag);
            AppendIfNonNull(ref baseCommand, "--platform", settings.Platform);
            AppendIfNonNull(ref baseCommand, "--pull", settings.Pull);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr replication create".
        /// Create a replicated region for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrReplication")]
        public dynamic AcrReplicationCreate(AcrReplicationCreateSettings settings) {
            var baseCommand = "az acr replication create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr replication delete".
        /// Delete a replicated region from an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrReplication")]
        public dynamic AcrReplicationDelete(AcrReplicationDeleteSettings settings) {
            var baseCommand = "az acr replication delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr replication list".
        /// List all of the regions for a geo-replicated Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrReplication")]
        public dynamic AcrReplicationList(AcrReplicationListSettings settings) {
            var baseCommand = "az acr replication list";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr replication show".
        /// Get the details of a replicated region.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrReplication")]
        public dynamic AcrReplicationShow(AcrReplicationShowSettings settings) {
            var baseCommand = "az acr replication show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr replication update".
        /// Updates a replication.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrReplication")]
        public dynamic AcrReplicationUpdate(AcrReplicationUpdateSettings settings) {
            var baseCommand = "az acr replication update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr repository delete".
        /// Delete a repository or image in an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public dynamic AcrRepositoryDelete(AcrRepositoryDeleteSettings settings) {
            var baseCommand = "az acr repository delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr repository list".
        /// List repositories in an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public dynamic AcrRepositoryList(AcrRepositoryListSettings settings) {
            var baseCommand = "az acr repository list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr repository show".
        /// Get the attributes of a repository or image in an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public dynamic AcrRepositoryShow(AcrRepositoryShowSettings settings) {
            var baseCommand = "az acr repository show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr repository show-manifests".
        /// Show manifests of a repository in an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public dynamic AcrRepositoryShowManifests(AcrRepositoryShowManifestsSettings settings) {
            var baseCommand = "az acr repository show-manifests";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--detail", settings.Detail);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr repository show-tags".
        /// Show tags for a repository in an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public dynamic AcrRepositoryShowTags(AcrRepositoryShowTagsSettings settings) {
            var baseCommand = "az acr repository show-tags";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--detail", settings.Detail);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr repository untag".
        /// Untag an image in an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public dynamic AcrRepositoryUntag(AcrRepositoryUntagSettings settings) {
            var baseCommand = "az acr repository untag";
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr repository update".
        /// Update the attributes of a repository or image in an Azure Container Registry.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrRepository")]
        public dynamic AcrRepositoryUpdate(AcrRepositoryUpdateSettings settings) {
            var baseCommand = "az acr repository update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--delete-enabled", settings.DeleteEnabled);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--list-enabled", settings.ListEnabled);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--read-enabled", settings.ReadEnabled);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--write-enabled", settings.WriteEnabled);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr scope-map create".
        /// Create a scope map for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrScopeMap")]
        public dynamic AcrScopeMapCreate(AcrScopeMapCreateSettings settings) {
            var baseCommand = "az acr scope-map create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr scope-map delete".
        /// Delete a scope map for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrScopeMap")]
        public dynamic AcrScopeMapDelete(AcrScopeMapDeleteSettings settings) {
            var baseCommand = "az acr scope-map delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr scope-map list".
        /// List all scope maps for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrScopeMap")]
        public dynamic AcrScopeMapList(AcrScopeMapListSettings settings) {
            var baseCommand = "az acr scope-map list";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr scope-map show".
        /// Show details and attributes of a scope map for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrScopeMap")]
        public dynamic AcrScopeMapShow(AcrScopeMapShowSettings settings) {
            var baseCommand = "az acr scope-map show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr scope-map update".
        /// Update a scope map for an Azure Container Registry.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrScopeMap")]
        public dynamic AcrScopeMapUpdate(AcrScopeMapUpdateSettings settings) {
            var baseCommand = "az acr scope-map update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task cancel-run".
        /// Cancel a specified run of an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public dynamic AcrTaskCancelRun(AcrTaskCancelRunSettings settings) {
            var baseCommand = "az acr task cancel-run";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--run-id", settings.RunId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task create".
        /// Creates a series of steps for building, testing and OS & Framework patching containers. Tasks support triggers from git commits and base image updates.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public dynamic AcrTaskCreate(AcrTaskCreateSettings settings) {
            var baseCommand = "az acr task create";
            AppendIfNonNull(ref baseCommand, "--context", settings.Context);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--arg", settings.Arg);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--cmd", settings.Cmd);
            AppendIfNonNull(ref baseCommand, "--cpu", settings.Cpu);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--no-cache", settings.NoCache);
            AppendIfNonNull(ref baseCommand, "--no-push", settings.NoPush);
            AppendIfNonNull(ref baseCommand, "--platform", settings.Platform);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--secret-arg", settings.SecretArg);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--set-secret", settings.SetSecret);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--values", settings.Values);
            AppendIfNonNull(ref baseCommand, "--base-image-trigger-enabled", settings.BaseImageTriggerEnabled);
            AppendIfNonNull(ref baseCommand, "--base-image-trigger-name", settings.BaseImageTriggerName);
            AppendIfNonNull(ref baseCommand, "--base-image-trigger-type", settings.BaseImageTriggerType);
            AppendIfNonNull(ref baseCommand, "--commit-trigger-enabled", settings.CommitTriggerEnabled);
            AppendIfNonNull(ref baseCommand, "--git-access-token", settings.GitAccessToken);
            AppendIfNonNull(ref baseCommand, "--pull-request-trigger-enabled", settings.PullRequestTriggerEnabled);
            AppendIfNonNull(ref baseCommand, "--schedule", settings.Schedule);
            AppendIfNonNull(ref baseCommand, "--source-trigger-name", settings.SourceTriggerName);
            AppendIfNonNull(ref baseCommand, "--update-trigger-endpoint", settings.UpdateTriggerEndpoint);
            AppendIfNonNull(ref baseCommand, "--update-trigger-payload-type", settings.UpdateTriggerPayloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task delete".
        /// Delete a task from an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public dynamic AcrTaskDelete(AcrTaskDeleteSettings settings) {
            var baseCommand = "az acr task delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task list".
        /// List the tasks for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public dynamic AcrTaskList(AcrTaskListSettings settings) {
            var baseCommand = "az acr task list";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task list-runs".
        /// List all of the executed runs for an Azure Container Registry, with the ability to filter by a specific Task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public dynamic AcrTaskListRuns(AcrTaskListRunsSettings settings) {
            var baseCommand = "az acr task list-runs";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--run-status", settings.RunStatus);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task logs".
        /// Show logs for a particular run. If no run-id is supplied, show logs for the last created run.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public dynamic AcrTaskLogs(AcrTaskLogsSettings settings) {
            var baseCommand = "az acr task logs";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--run-id", settings.RunId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task run".
        /// Manually trigger a task that might otherwise be waiting for git commits or base image update triggers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public dynamic AcrTaskRun(AcrTaskRunSettings settings) {
            var baseCommand = "az acr task run";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--arg", settings.Arg);
            AppendIfNonNull(ref baseCommand, "--context", settings.Context);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--no-logs", settings.NoLogs);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--secret-arg", settings.SecretArg);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--set-secret", settings.SetSecret);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--update-trigger-token", settings.UpdateTriggerToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task show".
        /// Get the properties of a named task for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public dynamic AcrTaskShow(AcrTaskShowSettings settings) {
            var baseCommand = "az acr task show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secure-properties", settings.WithSecureProperties);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task show-run".
        /// Get the properties of a specified run of an Azure Container Registry Task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public dynamic AcrTaskShowRun(AcrTaskShowRunSettings settings) {
            var baseCommand = "az acr task show-run";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--run-id", settings.RunId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task update".
        /// Update a task for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public dynamic AcrTaskUpdate(AcrTaskUpdateSettings settings) {
            var baseCommand = "az acr task update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--arg", settings.Arg);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--context", settings.Context);
            AppendIfNonNull(ref baseCommand, "--cpu", settings.Cpu);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--no-cache", settings.NoCache);
            AppendIfNonNull(ref baseCommand, "--no-push", settings.NoPush);
            AppendIfNonNull(ref baseCommand, "--platform", settings.Platform);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--secret-arg", settings.SecretArg);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--set-secret", settings.SetSecret);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--values", settings.Values);
            AppendIfNonNull(ref baseCommand, "--base-image-trigger-enabled", settings.BaseImageTriggerEnabled);
            AppendIfNonNull(ref baseCommand, "--base-image-trigger-type", settings.BaseImageTriggerType);
            AppendIfNonNull(ref baseCommand, "--commit-trigger-enabled", settings.CommitTriggerEnabled);
            AppendIfNonNull(ref baseCommand, "--git-access-token", settings.GitAccessToken);
            AppendIfNonNull(ref baseCommand, "--pull-request-trigger-enabled", settings.PullRequestTriggerEnabled);
            AppendIfNonNull(ref baseCommand, "--update-trigger-endpoint", settings.UpdateTriggerEndpoint);
            AppendIfNonNull(ref baseCommand, "--update-trigger-payload-type", settings.UpdateTriggerPayloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task update-run".
        /// Patch the run properties of an Azure Container Registry Task.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTask")]
        public dynamic AcrTaskUpdateRun(AcrTaskUpdateRunSettings settings) {
            var baseCommand = "az acr task update-run";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--run-id", settings.RunId);
            AppendIfNonNull(ref baseCommand, "--no-archive", settings.NoArchive);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task credential add".
        /// Add a custom registry login credential to the task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskCredential")]
        public dynamic AcrTaskCredentialAdd(AcrTaskCredentialAddSettings settings) {
            var baseCommand = "az acr task credential add";
            AppendIfNonNull(ref baseCommand, "--login-server", settings.LoginServer);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--use-identity", settings.UseIdentity);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task credential list".
        /// List all the custom registry credentials for task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskCredential")]
        public dynamic AcrTaskCredentialList(AcrTaskCredentialListSettings settings) {
            var baseCommand = "az acr task credential list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task credential remove".
        /// Remove credential for a task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskCredential")]
        public dynamic AcrTaskCredentialRemove(AcrTaskCredentialRemoveSettings settings) {
            var baseCommand = "az acr task credential remove";
            AppendIfNonNull(ref baseCommand, "--login-server", settings.LoginServer);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task credential update".
        /// Update the registry login credential for a task.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskCredential")]
        public dynamic AcrTaskCredentialUpdate(AcrTaskCredentialUpdateSettings settings) {
            var baseCommand = "az acr task credential update";
            AppendIfNonNull(ref baseCommand, "--login-server", settings.LoginServer);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--use-identity", settings.UseIdentity);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task identity assign".
        /// Update the managed identity for a task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskIdentity")]
        public dynamic AcrTaskIdentityAssign(AcrTaskIdentityAssignSettings settings) {
            var baseCommand = "az acr task identity assign";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--identities", settings.Identities);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task identity remove".
        /// Remove managed identities for a task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskIdentity")]
        public dynamic AcrTaskIdentityRemove(AcrTaskIdentityRemoveSettings settings) {
            var baseCommand = "az acr task identity remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--identities", settings.Identities);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task identity show".
        /// Display the managed identities for task.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskIdentity")]
        public dynamic AcrTaskIdentityShow(AcrTaskIdentityShowSettings settings) {
            var baseCommand = "az acr task identity show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task timer add".
        /// Add a timer trigger to a task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskTimer")]
        public dynamic AcrTaskTimerAdd(AcrTaskTimerAddSettings settings) {
            var baseCommand = "az acr task timer add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--schedule", settings.Schedule);
            AppendIfNonNull(ref baseCommand, "--timer-name", settings.TimerName);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task timer list".
        /// List all timer triggers for a task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskTimer")]
        public dynamic AcrTaskTimerList(AcrTaskTimerListSettings settings) {
            var baseCommand = "az acr task timer list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task timer remove".
        /// Remove a timer trigger from a task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskTimer")]
        public dynamic AcrTaskTimerRemove(AcrTaskTimerRemoveSettings settings) {
            var baseCommand = "az acr task timer remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--timer-name", settings.TimerName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr task timer update".
        /// Update the timer trigger for a task.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTaskTimer")]
        public dynamic AcrTaskTimerUpdate(AcrTaskTimerUpdateSettings settings) {
            var baseCommand = "az acr task timer update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--timer-name", settings.TimerName);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--schedule", settings.Schedule);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr token create".
        /// Create a token associated with a scope map for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrToken")]
        public dynamic AcrTokenCreate(AcrTokenCreateSettings settings) {
            var baseCommand = "az acr token create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--no-passwords", settings.NoPasswords);
            AppendIfNonNull(ref baseCommand, "--repository", settings.Repository);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope-map", settings.ScopeMap);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr token delete".
        /// Delete a token for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrToken")]
        public dynamic AcrTokenDelete(AcrTokenDeleteSettings settings) {
            var baseCommand = "az acr token delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr token list".
        /// List all tokens for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrToken")]
        public dynamic AcrTokenList(AcrTokenListSettings settings) {
            var baseCommand = "az acr token list";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr token show".
        /// Show details and attributes of a token for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrToken")]
        public dynamic AcrTokenShow(AcrTokenShowSettings settings) {
            var baseCommand = "az acr token show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr token update".
        /// Update a token (replace associated scope map) for an Azure Container Registry.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrToken")]
        public dynamic AcrTokenUpdate(AcrTokenUpdateSettings settings) {
            var baseCommand = "az acr token update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope-map", settings.ScopeMap);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr token credential delete".
        /// Delete a token credential.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTokenCredential")]
        public dynamic AcrTokenCredentialDelete(AcrTokenCredentialDeleteSettings settings) {
            var baseCommand = "az acr token credential delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--password1", settings.Password1);
            AppendIfNonNull(ref baseCommand, "--password2", settings.Password2);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr token credential generate".
        /// Generate or replace one or both passwords of a token for an Azure Container Registry. For using token and password to access a container registry, see https://aka.ms/acr/repo-permissions.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrTokenCredential")]
        public dynamic AcrTokenCredentialGenerate(AcrTokenCredentialGenerateSettings settings) {
            var baseCommand = "az acr token credential generate";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--days", settings.Days);
            AppendIfNonNull(ref baseCommand, "--password1", settings.Password1);
            AppendIfNonNull(ref baseCommand, "--password2", settings.Password2);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr webhook create".
        /// Create a webhook for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public dynamic AcrWebhookCreate(AcrWebhookCreateSettings settings) {
            var baseCommand = "az acr webhook create";
            AppendIfNonNull(ref baseCommand, "--actions", settings.Actions);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--uri", settings.Uri);
            AppendIfNonNull(ref baseCommand, "--headers", settings.Headers);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr webhook delete".
        /// Delete a webhook from an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public dynamic AcrWebhookDelete(AcrWebhookDeleteSettings settings) {
            var baseCommand = "az acr webhook delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr webhook get-config".
        /// Get the service URI and custom headers for the webhook.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public dynamic AcrWebhookGetConfig(AcrWebhookGetConfigSettings settings) {
            var baseCommand = "az acr webhook get-config";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr webhook list".
        /// List all of the webhooks for an Azure Container Registry.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public dynamic AcrWebhookList(AcrWebhookListSettings settings) {
            var baseCommand = "az acr webhook list";
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr webhook list-events".
        /// List recent events for a webhook.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public dynamic AcrWebhookListEvents(AcrWebhookListEventsSettings settings) {
            var baseCommand = "az acr webhook list-events";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr webhook ping".
        /// Trigger a ping event for a webhook.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public dynamic AcrWebhookPing(AcrWebhookPingSettings settings) {
            var baseCommand = "az acr webhook ping";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr webhook show".
        /// Get the details of a webhook.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public dynamic AcrWebhookShow(AcrWebhookShowSettings settings) {
            var baseCommand = "az acr webhook show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az acr webhook update".
        /// Update a webhook.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAcrWebhook")]
        public dynamic AcrWebhookUpdate(AcrWebhookUpdateSettings settings) {
            var baseCommand = "az acr webhook update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registry", settings.Registry);
            AppendIfNonNull(ref baseCommand, "--actions", settings.Actions);
            AppendIfNonNull(ref baseCommand, "--headers", settings.Headers);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--uri", settings.Uri);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app create".
        /// Create a web application, web API or native application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdApp")]
        public dynamic AdAppCreate(AdAppCreateSettings settings) {
            var baseCommand = "az ad app create";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--app-roles", settings.AppRoles);
            AppendIfNonNull(ref baseCommand, "--available-to-other-tenants", settings.AvailableToOtherTenants);
            AppendIfNonNull(ref baseCommand, "--credential-description", settings.CredentialDescription);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--homepage", settings.Homepage);
            AppendIfNonNull(ref baseCommand, "--identifier-uris", settings.IdentifierUris);
            AppendIfNonNull(ref baseCommand, "--key-type", settings.KeyType);
            AppendIfNonNull(ref baseCommand, "--key-usage", settings.KeyUsage);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--native-app", settings.NativeApp);
            AppendIfNonNull(ref baseCommand, "--oauth2-allow-implicit-flow", settings.Oauth2AllowImplicitFlow);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--reply-urls", settings.ReplyUrls);
            AppendIfNonNull(ref baseCommand, "--required-resource-accesses", settings.RequiredResourceAccesses);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app delete".
        /// Delete an application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdApp")]
        public dynamic AdAppDelete(AdAppDeleteSettings settings) {
            var baseCommand = "az ad app delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app list".
        /// List applications.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdApp")]
        public dynamic AdAppList(AdAppListSettings settings) {
            var baseCommand = "az ad app list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--app-id", settings.AppId);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--identifier-uri", settings.IdentifierUri);
            AppendIfNonNull(ref baseCommand, "--show-mine", settings.ShowMine);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app show".
        /// Get the details of an application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdApp")]
        public dynamic AdAppShow(AdAppShowSettings settings) {
            var baseCommand = "az ad app show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app update".
        /// Update an application.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdApp")]
        public dynamic AdAppUpdate(AdAppUpdateSettings settings) {
            var baseCommand = "az ad app update";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--app-roles", settings.AppRoles);
            AppendIfNonNull(ref baseCommand, "--available-to-other-tenants", settings.AvailableToOtherTenants);
            AppendIfNonNull(ref baseCommand, "--credential-description", settings.CredentialDescription);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--homepage", settings.Homepage);
            AppendIfNonNull(ref baseCommand, "--identifier-uris", settings.IdentifierUris);
            AppendIfNonNull(ref baseCommand, "--key-type", settings.KeyType);
            AppendIfNonNull(ref baseCommand, "--key-usage", settings.KeyUsage);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--oauth2-allow-implicit-flow", settings.Oauth2AllowImplicitFlow);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--reply-urls", settings.ReplyUrls);
            AppendIfNonNull(ref baseCommand, "--required-resource-accesses", settings.RequiredResourceAccesses);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app credential delete".
        /// Delete an application's password or certificate credentials.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppCredential")]
        public dynamic AdAppCredentialDelete(AdAppCredentialDeleteSettings settings) {
            var baseCommand = "az ad app credential delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--key-id", settings.KeyId);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app credential list".
        /// List an application's password or certificate credentials.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppCredential")]
        public dynamic AdAppCredentialList(AdAppCredentialListSettings settings) {
            var baseCommand = "az ad app credential list";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app credential reset".
        /// Append or overwrite an application's password or certificate credentials.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppCredential")]
        public dynamic AdAppCredentialReset(AdAppCredentialResetSettings settings) {
            var baseCommand = "az ad app credential reset";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--append", settings.Append);
            AppendIfNonNull(ref baseCommand, "--credential-description", settings.CredentialDescription);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--create-cert", settings.CreateCert);
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--years", settings.Years);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app owner add".
        /// Add an application owner.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppOwner")]
        public dynamic AdAppOwnerAdd(AdAppOwnerAddSettings settings) {
            var baseCommand = "az ad app owner add";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--owner-object-id", settings.OwnerObjectId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app owner list".
        /// List application owners.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppOwner")]
        public dynamic AdAppOwnerList(AdAppOwnerListSettings settings) {
            var baseCommand = "az ad app owner list";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app owner remove".
        /// Remove an application owner.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppOwner")]
        public dynamic AdAppOwnerRemove(AdAppOwnerRemoveSettings settings) {
            var baseCommand = "az ad app owner remove";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--owner-object-id", settings.OwnerObjectId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app permission add".
        /// Add an API permission.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppPermission")]
        public dynamic AdAppPermissionAdd(AdAppPermissionAddSettings settings) {
            var baseCommand = "az ad app permission add";
            AppendIfNonNull(ref baseCommand, "--api", settings.Api);
            AppendIfNonNull(ref baseCommand, "--api-permissions", settings.ApiPermissions);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app permission admin-consent".
        /// Grant Application & Delegated permissions through admin-consent.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppPermission")]
        public dynamic AdAppPermissionAdminConsent(AdAppPermissionAdminConsentSettings settings) {
            var baseCommand = "az ad app permission admin-consent";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app permission delete".
        /// Remove an API permission.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppPermission")]
        public dynamic AdAppPermissionDelete(AdAppPermissionDeleteSettings settings) {
            var baseCommand = "az ad app permission delete";
            AppendIfNonNull(ref baseCommand, "--api", settings.Api);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app permission grant".
        /// Grant the app an API Delegated permissions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppPermission")]
        public dynamic AdAppPermissionGrant(AdAppPermissionGrantSettings settings) {
            var baseCommand = "az ad app permission grant";
            AppendIfNonNull(ref baseCommand, "--api", settings.Api);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--consent-type", settings.ConsentType);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--principal-id", settings.PrincipalId);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app permission list".
        /// List API permissions the application has requested.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppPermission")]
        public dynamic AdAppPermissionList(AdAppPermissionListSettings settings) {
            var baseCommand = "az ad app permission list";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad app permission list-grants".
        /// List Oauth2 permission grants.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdAppPermission")]
        public dynamic AdAppPermissionListGrants(AdAppPermissionListGrantsSettings settings) {
            var baseCommand = "az ad app permission list-grants";
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--show-resource-name", settings.ShowResourceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad group create".
        /// Create a group in the directory.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroup")]
        public dynamic AdGroupCreate(AdGroupCreateSettings settings) {
            var baseCommand = "az ad group create";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--mail-nickname", settings.MailNickname);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad group delete".
        /// Delete a group from the directory.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroup")]
        public dynamic AdGroupDelete(AdGroupDeleteSettings settings) {
            var baseCommand = "az ad group delete";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad group get-member-groups".
        /// Gets a collection of object IDs of groups of which the specified group is a member.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroup")]
        public dynamic AdGroupGetMemberGroups(AdGroupGetMemberGroupsSettings settings) {
            var baseCommand = "az ad group get-member-groups";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--additional-properties", settings.AdditionalProperties);
            AppendIfNonNull(ref baseCommand, "--security-enabled-only", settings.SecurityEnabledOnly);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad group list".
        /// List groups in the directory.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroup")]
        public dynamic AdGroupList(AdGroupListSettings settings) {
            var baseCommand = "az ad group list";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad group show".
        /// Gets group information from the directory.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroup")]
        public dynamic AdGroupShow(AdGroupShowSettings settings) {
            var baseCommand = "az ad group show";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad group member add".
        /// Add a member to a group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupMember")]
        public dynamic AdGroupMemberAdd(AdGroupMemberAddSettings settings) {
            var baseCommand = "az ad group member add";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--member-id", settings.MemberId);
            AppendIfNonNull(ref baseCommand, "--additional-properties", settings.AdditionalProperties);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad group member check".
        /// Check if a member is in a group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupMember")]
        public dynamic AdGroupMemberCheck(AdGroupMemberCheckSettings settings) {
            var baseCommand = "az ad group member check";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--member-id", settings.MemberId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad group member list".
        /// Gets the members of a group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupMember")]
        public dynamic AdGroupMemberList(AdGroupMemberListSettings settings) {
            var baseCommand = "az ad group member list";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad group member remove".
        /// Remove a member from a group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupMember")]
        public dynamic AdGroupMemberRemove(AdGroupMemberRemoveSettings settings) {
            var baseCommand = "az ad group member remove";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--member-id", settings.MemberId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad group owner add".
        /// Add a group owner.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupOwner")]
        public dynamic AdGroupOwnerAdd(AdGroupOwnerAddSettings settings) {
            var baseCommand = "az ad group owner add";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--owner-object-id", settings.OwnerObjectId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad group owner list".
        /// List group owners.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupOwner")]
        public dynamic AdGroupOwnerList(AdGroupOwnerListSettings settings) {
            var baseCommand = "az ad group owner list";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad group owner remove".
        /// Remove a group owner.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdGroupOwner")]
        public dynamic AdGroupOwnerRemove(AdGroupOwnerRemoveSettings settings) {
            var baseCommand = "az ad group owner remove";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--owner-object-id", settings.OwnerObjectId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad signed-in-user list-owned-objects".
        /// Get the list of directory objects that are owned by the user.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSignedInUser")]
        public dynamic AdSignedInUserListOwnedObjects(AdSignedInUserListOwnedObjectsSettings settings) {
            var baseCommand = "az ad signed-in-user list-owned-objects";
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad signed-in-user show".
        /// Gets the details for the currently logged-in user.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSignedInUser")]
        public dynamic AdSignedInUserShow(AdSignedInUserShowSettings settings) {
            var baseCommand = "az ad signed-in-user show";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad sp create".
        /// Create a service principal.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSp")]
        public dynamic AdSpCreate(AdSpCreateSettings settings) {
            var baseCommand = "az ad sp create";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad sp create-for-rbac".
        /// Create a service principal and configure its access to Azure resources.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSp")]
        public dynamic AdSpCreateForRbac(AdSpCreateForRbacSettings settings) {
            var baseCommand = "az ad sp create-for-rbac";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scopes", settings.Scopes);
            AppendIfNonNull(ref baseCommand, "--sdk-auth", settings.SdkAuth);
            AppendIfNonNull(ref baseCommand, "--skip-assignment", settings.SkipAssignment);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--create-cert", settings.CreateCert);
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--years", settings.Years);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad sp delete".
        /// Delete a service principal and its role assignments.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSp")]
        public dynamic AdSpDelete(AdSpDeleteSettings settings) {
            var baseCommand = "az ad sp delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad sp list".
        /// List service principals.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSp")]
        public dynamic AdSpList(AdSpListSettings settings) {
            var baseCommand = "az ad sp list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--show-mine", settings.ShowMine);
            AppendIfNonNull(ref baseCommand, "--spn", settings.Spn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad sp show".
        /// Get the details of a service principal.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSp")]
        public dynamic AdSpShow(AdSpShowSettings settings) {
            var baseCommand = "az ad sp show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad sp update".
        /// Update a service principal.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSp")]
        public dynamic AdSpUpdate(AdSpUpdateSettings settings) {
            var baseCommand = "az ad sp update";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad sp credential delete".
        /// Delete a service principal's credential.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSpCredential")]
        public dynamic AdSpCredentialDelete(AdSpCredentialDeleteSettings settings) {
            var baseCommand = "az ad sp credential delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--key-id", settings.KeyId);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad sp credential list".
        /// List a service principal's credentials.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSpCredential")]
        public dynamic AdSpCredentialList(AdSpCredentialListSettings settings) {
            var baseCommand = "az ad sp credential list";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad sp credential reset".
        /// Reset a service principal credential.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSpCredential")]
        public dynamic AdSpCredentialReset(AdSpCredentialResetSettings settings) {
            var baseCommand = "az ad sp credential reset";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--append", settings.Append);
            AppendIfNonNull(ref baseCommand, "--cert", settings.Cert);
            AppendIfNonNull(ref baseCommand, "--create-cert", settings.CreateCert);
            AppendIfNonNull(ref baseCommand, "--credential-description", settings.CredentialDescription);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--years", settings.Years);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad sp owner list".
        /// List service principal owners.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdSpOwner")]
        public dynamic AdSpOwnerList(AdSpOwnerListSettings settings) {
            var baseCommand = "az ad sp owner list";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad user create".
        /// Create an Azure Active Directory user.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdUser")]
        public dynamic AdUserCreate(AdUserCreateSettings settings) {
            var baseCommand = "az ad user create";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--user-principal-name", settings.UserPrincipalName);
            AppendIfNonNull(ref baseCommand, "--force-change-password-next-login", settings.ForceChangePasswordNextLogin);
            AppendIfNonNull(ref baseCommand, "--immutable-id", settings.ImmutableId);
            AppendIfNonNull(ref baseCommand, "--mail-nickname", settings.MailNickname);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad user delete".
        /// Delete a user.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdUser")]
        public dynamic AdUserDelete(AdUserDeleteSettings settings) {
            var baseCommand = "az ad user delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad user get-member-groups".
        /// Get groups of which the user is a member.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdUser")]
        public dynamic AdUserGetMemberGroups(AdUserGetMemberGroupsSettings settings) {
            var baseCommand = "az ad user get-member-groups";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--security-enabled-only", settings.SecurityEnabledOnly);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad user list".
        /// List Azure Active Directory users.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdUser")]
        public dynamic AdUserList(AdUserListSettings settings) {
            var baseCommand = "az ad user list";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--upn", settings.Upn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad user show".
        /// Gets user information from the directory.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdUser")]
        public dynamic AdUserShow(AdUserShowSettings settings) {
            var baseCommand = "az ad user show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ad user update".
        /// Update Azure Active Directory users.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdUser")]
        public dynamic AdUserUpdate(AdUserUpdateSettings settings) {
            var baseCommand = "az ad user update";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--account-enabled", settings.AccountEnabled);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--force-change-password-next-login", settings.ForceChangePasswordNextLogin);
            AppendIfNonNull(ref baseCommand, "--mail-nickname", settings.MailNickname);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az advisor configuration list".
        /// List Azure Advisor configuration for the entire subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdvisorConfiguration")]
        public dynamic AdvisorConfigurationList(AdvisorConfigurationListSettings settings) {
            var baseCommand = "az advisor configuration list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az advisor configuration show".
        /// Show Azure Advisor configuration for the given subscription or resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdvisorConfiguration")]
        public dynamic AdvisorConfigurationShow(AdvisorConfigurationShowSettings settings) {
            var baseCommand = "az advisor configuration show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az advisor configuration update".
        /// Update Azure Advisor configuration.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdvisorConfiguration")]
        public dynamic AdvisorConfigurationUpdate(AdvisorConfigurationUpdateSettings settings) {
            var baseCommand = "az advisor configuration update";
            AppendIfNonNull(ref baseCommand, "--exclude", settings.Exclude);
            AppendIfNonNull(ref baseCommand, "--include", settings.Include);
            AppendIfNonNull(ref baseCommand, "--low-cpu-threshold", settings.LowCpuThreshold);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az advisor recommendation disable".
        /// Disable Azure Advisor recommendations.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdvisorRecommendation")]
        public dynamic AdvisorRecommendationDisable(AdvisorRecommendationDisableSettings settings) {
            var baseCommand = "az advisor recommendation disable";
            AppendIfNonNull(ref baseCommand, "--days", settings.Days);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az advisor recommendation enable".
        /// Enable Azure Advisor recommendations.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdvisorRecommendation")]
        public dynamic AdvisorRecommendationEnable(AdvisorRecommendationEnableSettings settings) {
            var baseCommand = "az advisor recommendation enable";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az advisor recommendation list".
        /// List Azure Advisor recommendations.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAdvisorRecommendation")]
        public dynamic AdvisorRecommendationList(AdvisorRecommendationListSettings settings) {
            var baseCommand = "az advisor recommendation list";
            AppendIfNonNull(ref baseCommand, "--category", settings.Category);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--refresh", settings.Refresh);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks browse".
        /// Show the dashboard for a Kubernetes cluster in a web browser.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksBrowse(AksBrowseSettings settings) {
            var baseCommand = "az aks browse";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--disable-browser", settings.DisableBrowser);
            AppendIfNonNull(ref baseCommand, "--listen-address", settings.ListenAddress);
            AppendIfNonNull(ref baseCommand, "--listen-port", settings.ListenPort);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks create".
        /// Create a new managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksCreate(AksCreateSettings settings) {
            var baseCommand = "az aks create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--aad-client-app-id", settings.AadClientAppId);
            AppendIfNonNull(ref baseCommand, "--aad-server-app-id", settings.AadServerAppId);
            AppendIfNonNull(ref baseCommand, "--aad-server-app-secret", settings.AadServerAppSecret);
            AppendIfNonNull(ref baseCommand, "--aad-tenant-id", settings.AadTenantId);
            AppendIfNonNull(ref baseCommand, "--admin-username", settings.AdminUsername);
            AppendIfNonNull(ref baseCommand, "--api-server-authorized-ip-ranges", settings.ApiServerAuthorizedIpRanges);
            AppendIfNonNull(ref baseCommand, "--attach-acr", settings.AttachAcr);
            AppendIfNonNull(ref baseCommand, "--client-secret", settings.ClientSecret);
            AppendIfNonNull(ref baseCommand, "--disable-rbac", settings.DisableRbac);
            AppendIfNonNull(ref baseCommand, "--dns-name-prefix", settings.DnsNamePrefix);
            AppendIfNonNull(ref baseCommand, "--dns-service-ip", settings.DnsServiceIp);
            AppendIfNonNull(ref baseCommand, "--docker-bridge-address", settings.DockerBridgeAddress);
            AppendIfNonNull(ref baseCommand, "--enable-addons", settings.EnableAddons);
            AppendIfNonNull(ref baseCommand, "--enable-cluster-autoscaler", settings.EnableClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--generate-ssh-keys", settings.GenerateSshKeys);
            AppendIfNonNull(ref baseCommand, "--kubernetes-version", settings.KubernetesVersion);
            AppendIfNonNull(ref baseCommand, "--load-balancer-managed-outbound-ip-count", settings.LoadBalancerManagedOutboundIpCount);
            AppendIfNonNull(ref baseCommand, "--load-balancer-outbound-ip-prefixes", settings.LoadBalancerOutboundIpPrefixes);
            AppendIfNonNull(ref baseCommand, "--load-balancer-outbound-ips", settings.LoadBalancerOutboundIps);
            AppendIfNonNull(ref baseCommand, "--load-balancer-sku", settings.LoadBalancerSku);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--max-pods", settings.MaxPods);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--network-plugin", settings.NetworkPlugin);
            AppendIfNonNull(ref baseCommand, "--network-policy", settings.NetworkPolicy);
            AppendIfNonNull(ref baseCommand, "--no-ssh-key", settings.NoSshKey);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--node-count", settings.NodeCount);
            AppendIfNonNull(ref baseCommand, "--node-osdisk-size", settings.NodeOsdiskSize);
            AppendIfNonNull(ref baseCommand, "--node-vm-size", settings.NodeVmSize);
            AppendIfNonNull(ref baseCommand, "--nodepool-name", settings.NodepoolName);
            AppendIfNonNull(ref baseCommand, "--pod-cidr", settings.PodCidr);
            AppendIfNonNull(ref baseCommand, "--service-cidr", settings.ServiceCidr);
            AppendIfNonNull(ref baseCommand, "--service-principal", settings.ServicePrincipal);
            AppendIfNonNull(ref baseCommand, "--skip-subnet-role-assignment", settings.SkipSubnetRoleAssignment);
            AppendIfNonNull(ref baseCommand, "--ssh-key-value", settings.SshKeyValue);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vm-set-type", settings.VmSetType);
            AppendIfNonNull(ref baseCommand, "--vnet-subnet-id", settings.VnetSubnetId);
            AppendIfNonNull(ref baseCommand, "--workspace-resource-id", settings.WorkspaceResourceId);
            AppendIfNonNull(ref baseCommand, "--zones", settings.Zones);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks delete".
        /// Delete a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksDelete(AksDeleteSettings settings) {
            var baseCommand = "az aks delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks disable-addons".
        /// Disable Kubernetes addons.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksDisableAddons(AksDisableAddonsSettings settings) {
            var baseCommand = "az aks disable-addons";
            AppendIfNonNull(ref baseCommand, "--addons", settings.Addons);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks enable-addons".
        /// Enable Kubernetes addons.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksEnableAddons(AksEnableAddonsSettings settings) {
            var baseCommand = "az aks enable-addons";
            AppendIfNonNull(ref baseCommand, "--addons", settings.Addons);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--subnet-name", settings.SubnetName);
            AppendIfNonNull(ref baseCommand, "--workspace-resource-id", settings.WorkspaceResourceId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks get-credentials".
        /// Get access credentials for a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksGetCredentials(AksGetCredentialsSettings settings) {
            var baseCommand = "az aks get-credentials";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--admin", settings.Admin);
            AppendIfNonNull(ref baseCommand, "--context", settings.Context);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--overwrite-existing", settings.OverwriteExisting);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks get-upgrades".
        /// Get the upgrade versions available for a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksGetUpgrades(AksGetUpgradesSettings settings) {
            var baseCommand = "az aks get-upgrades";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks get-versions".
        /// Get the versions available for creating a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksGetVersions(AksGetVersionsSettings settings) {
            var baseCommand = "az aks get-versions";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks install-cli".
        /// Download and install kubectl, the Kubernetes command-line tool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksInstallCli(AksInstallCliSettings settings) {
            var baseCommand = "az aks install-cli";
            AppendIfNonNull(ref baseCommand, "--client-version", settings.ClientVersion);
            AppendIfNonNull(ref baseCommand, "--install-location", settings.InstallLocation);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks install-connector".
        /// Install the ACI Connector on a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksInstallConnector(AksInstallConnectorSettings settings) {
            var baseCommand = "az aks install-connector";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--aci-resource-group", settings.AciResourceGroup);
            AppendIfNonNull(ref baseCommand, "--chart-url", settings.ChartUrl);
            AppendIfNonNull(ref baseCommand, "--client-secret", settings.ClientSecret);
            AppendIfNonNull(ref baseCommand, "--connector-name", settings.ConnectorName);
            AppendIfNonNull(ref baseCommand, "--image-tag", settings.ImageTag);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--service-principal", settings.ServicePrincipal);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks list".
        /// List managed Kubernetes clusters.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksList(AksListSettings settings) {
            var baseCommand = "az aks list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks remove-connector".
        /// Remove the ACI Connector from a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksRemoveConnector(AksRemoveConnectorSettings settings) {
            var baseCommand = "az aks remove-connector";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--connector-name", settings.ConnectorName);
            AppendIfNonNull(ref baseCommand, "--graceful", settings.Graceful);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks remove-dev-spaces".
        /// Remove Azure Dev Spaces from a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksRemoveDevSpaces(AksRemoveDevSpacesSettings settings) {
            var baseCommand = "az aks remove-dev-spaces";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks rotate-certs".
        /// Rotate certificates and keys on a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksRotateCerts(AksRotateCertsSettings settings) {
            var baseCommand = "az aks rotate-certs";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks scale".
        /// Scale the node pool in a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksScale(AksScaleSettings settings) {
            var baseCommand = "az aks scale";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--node-count", settings.NodeCount);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--nodepool-name", settings.NodepoolName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks show".
        /// Show the details for a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksShow(AksShowSettings settings) {
            var baseCommand = "az aks show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks update".
        /// Update a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksUpdate(AksUpdateSettings settings) {
            var baseCommand = "az aks update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--api-server-authorized-ip-ranges", settings.ApiServerAuthorizedIpRanges);
            AppendIfNonNull(ref baseCommand, "--attach-acr", settings.AttachAcr);
            AppendIfNonNull(ref baseCommand, "--detach-acr", settings.DetachAcr);
            AppendIfNonNull(ref baseCommand, "--disable-cluster-autoscaler", settings.DisableClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--enable-cluster-autoscaler", settings.EnableClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--load-balancer-managed-outbound-ip-count", settings.LoadBalancerManagedOutboundIpCount);
            AppendIfNonNull(ref baseCommand, "--load-balancer-outbound-ip-prefixes", settings.LoadBalancerOutboundIpPrefixes);
            AppendIfNonNull(ref baseCommand, "--load-balancer-outbound-ips", settings.LoadBalancerOutboundIps);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--update-cluster-autoscaler", settings.UpdateClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks update-credentials".
        /// Update credentials for a managed Kubernetes cluster, like service principal.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksUpdateCredentials(AksUpdateCredentialsSettings settings) {
            var baseCommand = "az aks update-credentials";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--aad-client-app-id", settings.AadClientAppId);
            AppendIfNonNull(ref baseCommand, "--aad-server-app-id", settings.AadServerAppId);
            AppendIfNonNull(ref baseCommand, "--aad-server-app-secret", settings.AadServerAppSecret);
            AppendIfNonNull(ref baseCommand, "--aad-tenant-id", settings.AadTenantId);
            AppendIfNonNull(ref baseCommand, "--reset-aad", settings.ResetAad);
            AppendIfNonNull(ref baseCommand, "--client-secret", settings.ClientSecret);
            AppendIfNonNull(ref baseCommand, "--reset-service-principal", settings.ResetServicePrincipal);
            AppendIfNonNull(ref baseCommand, "--service-principal", settings.ServicePrincipal);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks upgrade".
        /// Upgrade a managed Kubernetes cluster to a newer version.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksUpgrade(AksUpgradeSettings settings) {
            var baseCommand = "az aks upgrade";
            AppendIfNonNull(ref baseCommand, "--kubernetes-version", settings.KubernetesVersion);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--control-plane-only", settings.ControlPlaneOnly);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks upgrade-connector".
        /// Upgrade the ACI Connector on a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksUpgradeConnector(AksUpgradeConnectorSettings settings) {
            var baseCommand = "az aks upgrade-connector";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--aci-resource-group", settings.AciResourceGroup);
            AppendIfNonNull(ref baseCommand, "--chart-url", settings.ChartUrl);
            AppendIfNonNull(ref baseCommand, "--client-secret", settings.ClientSecret);
            AppendIfNonNull(ref baseCommand, "--connector-name", settings.ConnectorName);
            AppendIfNonNull(ref baseCommand, "--image-tag", settings.ImageTag);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--service-principal", settings.ServicePrincipal);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks use-dev-spaces".
        /// Use Azure Dev Spaces with a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksUseDevSpaces(AksUseDevSpacesSettings settings) {
            var baseCommand = "az aks use-dev-spaces";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--space", settings.Space);
            AppendIfNonNull(ref baseCommand, "--update", settings.Update);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks wait".
        /// Wait for a managed Kubernetes cluster to reach a desired state.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAks")]
        public dynamic AksWait(AksWaitSettings settings) {
            var baseCommand = "az aks wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks nodepool add".
        /// Add a node pool to the managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public dynamic AksNodepoolAdd(AksNodepoolAddSettings settings) {
            var baseCommand = "az aks nodepool add";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--enable-cluster-autoscaler", settings.EnableClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--kubernetes-version", settings.KubernetesVersion);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--max-pods", settings.MaxPods);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--node-count", settings.NodeCount);
            AppendIfNonNull(ref baseCommand, "--node-osdisk-size", settings.NodeOsdiskSize);
            AppendIfNonNull(ref baseCommand, "--node-taints", settings.NodeTaints);
            AppendIfNonNull(ref baseCommand, "--node-vm-size", settings.NodeVmSize);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--vnet-subnet-id", settings.VnetSubnetId);
            AppendIfNonNull(ref baseCommand, "--zones", settings.Zones);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks nodepool delete".
        /// Delete the agent pool in the managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public dynamic AksNodepoolDelete(AksNodepoolDeleteSettings settings) {
            var baseCommand = "az aks nodepool delete";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks nodepool list".
        /// List node pools in the managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public dynamic AksNodepoolList(AksNodepoolListSettings settings) {
            var baseCommand = "az aks nodepool list";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks nodepool scale".
        /// Scale the node pool in a managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public dynamic AksNodepoolScale(AksNodepoolScaleSettings settings) {
            var baseCommand = "az aks nodepool scale";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--node-count", settings.NodeCount);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks nodepool show".
        /// Show the details for a node pool in the managed Kubernetes cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public dynamic AksNodepoolShow(AksNodepoolShowSettings settings) {
            var baseCommand = "az aks nodepool show";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks nodepool update".
        /// Update a node pool to enable/disable cluster-autoscaler or change min-count or max- count.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public dynamic AksNodepoolUpdate(AksNodepoolUpdateSettings settings) {
            var baseCommand = "az aks nodepool update";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--disable-cluster-autoscaler", settings.DisableClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--enable-cluster-autoscaler", settings.EnableClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--update-cluster-autoscaler", settings.UpdateClusterAutoscaler);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az aks nodepool upgrade".
        /// Upgrade the node pool in a managed Kubernetes cluster.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAksNodepool")]
        public dynamic AksNodepoolUpgrade(AksNodepoolUpgradeSettings settings) {
            var baseCommand = "az aks nodepool upgrade";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--kubernetes-version", settings.KubernetesVersion);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account check-name".
        /// Checks whether the Media Service resource name is available.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccount")]
        public dynamic AmsAccountCheckName(AmsAccountCheckNameSettings settings) {
            var baseCommand = "az ams account check-name";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account create".
        /// Create an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccount")]
        public dynamic AmsAccountCreate(AmsAccountCreateSettings settings) {
            var baseCommand = "az ams account create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account delete".
        /// Delete an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccount")]
        public dynamic AmsAccountDelete(AmsAccountDeleteSettings settings) {
            var baseCommand = "az ams account delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account list".
        /// List Azure Media Services accounts for the entire subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccount")]
        public dynamic AmsAccountList(AmsAccountListSettings settings) {
            var baseCommand = "az ams account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account show".
        /// Show the details of an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccount")]
        public dynamic AmsAccountShow(AmsAccountShowSettings settings) {
            var baseCommand = "az ams account show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account update".
        /// Update the details of an Azure Media Services account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccount")]
        public dynamic AmsAccountUpdate(AmsAccountUpdateSettings settings) {
            var baseCommand = "az ams account update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account mru set".
        /// Set the type and number of media reserved units for an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountMru")]
        public dynamic AmsAccountMruSet(AmsAccountMruSetSettings settings) {
            var baseCommand = "az ams account mru set";
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account mru show".
        /// Show the details of media reserved units for an Azure Media Services account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountMru")]
        public dynamic AmsAccountMruShow(AmsAccountMruShowSettings settings) {
            var baseCommand = "az ams account mru show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account sp create".
        /// Create a service principal and configure its access to an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountSp")]
        public dynamic AmsAccountSpCreate(AmsAccountSpCreateSettings settings) {
            var baseCommand = "az ams account sp create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--xml", settings.Xml);
            AppendIfNonNull(ref baseCommand, "--years", settings.Years);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account sp reset-credentials".
        /// Generate a new client secret for a service principal configured for an Azure Media Services account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountSp")]
        public dynamic AmsAccountSpResetCredentials(AmsAccountSpResetCredentialsSettings settings) {
            var baseCommand = "az ams account sp reset-credentials";
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--xml", settings.Xml);
            AppendIfNonNull(ref baseCommand, "--years", settings.Years);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account storage add".
        /// Attach a secondary storage to an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountStorage")]
        public dynamic AmsAccountStorageAdd(AmsAccountStorageAddSettings settings) {
            var baseCommand = "az ams account storage add";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account storage remove".
        /// Detach a secondary storage from an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountStorage")]
        public dynamic AmsAccountStorageRemove(AmsAccountStorageRemoveSettings settings) {
            var baseCommand = "az ams account storage remove";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account storage sync-storage-keys".
        /// Synchronize storage account keys for a storage account associated with an Azure Media Services account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountStorage")]
        public dynamic AmsAccountStorageSyncStorageKeys(AmsAccountStorageSyncStorageKeysSettings settings) {
            var baseCommand = "az ams account storage sync-storage-keys";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account-filter create".
        /// Create an account filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountFilter")]
        public dynamic AmsAccountFilterCreate(AmsAccountFilterCreateSettings settings) {
            var baseCommand = "az ams account-filter create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--first-quality", settings.FirstQuality);
            AppendIfNonNull(ref baseCommand, "--tracks", settings.Tracks);
            AppendIfNonNull(ref baseCommand, "--end-timestamp", settings.EndTimestamp);
            AppendIfNonNull(ref baseCommand, "--force-end-timestamp", settings.ForceEndTimestamp);
            AppendIfNonNull(ref baseCommand, "--live-backoff-duration", settings.LiveBackoffDuration);
            AppendIfNonNull(ref baseCommand, "--presentation-window-duration", settings.PresentationWindowDuration);
            AppendIfNonNull(ref baseCommand, "--start-timestamp", settings.StartTimestamp);
            AppendIfNonNull(ref baseCommand, "--timescale", settings.Timescale);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account-filter delete".
        /// Delete an account filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountFilter")]
        public dynamic AmsAccountFilterDelete(AmsAccountFilterDeleteSettings settings) {
            var baseCommand = "az ams account-filter delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account-filter list".
        /// List all the account filters of an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountFilter")]
        public dynamic AmsAccountFilterList(AmsAccountFilterListSettings settings) {
            var baseCommand = "az ams account-filter list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account-filter show".
        /// Show the details of an account filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountFilter")]
        public dynamic AmsAccountFilterShow(AmsAccountFilterShowSettings settings) {
            var baseCommand = "az ams account-filter show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams account-filter update".
        /// Update the details of an account filter.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAccountFilter")]
        public dynamic AmsAccountFilterUpdate(AmsAccountFilterUpdateSettings settings) {
            var baseCommand = "az ams account-filter update";
            AppendIfNonNull(ref baseCommand, "--first-quality", settings.FirstQuality);
            AppendIfNonNull(ref baseCommand, "--tracks", settings.Tracks);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--end-timestamp", settings.EndTimestamp);
            AppendIfNonNull(ref baseCommand, "--force-end-timestamp", settings.ForceEndTimestamp);
            AppendIfNonNull(ref baseCommand, "--live-backoff-duration", settings.LiveBackoffDuration);
            AppendIfNonNull(ref baseCommand, "--presentation-window-duration", settings.PresentationWindowDuration);
            AppendIfNonNull(ref baseCommand, "--start-timestamp", settings.StartTimestamp);
            AppendIfNonNull(ref baseCommand, "--timescale", settings.Timescale);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset create".
        /// Create an asset.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public dynamic AmsAssetCreate(AmsAssetCreateSettings settings) {
            var baseCommand = "az ams asset create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--alternate-id", settings.AlternateId);
            AppendIfNonNull(ref baseCommand, "--container", settings.Container);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset delete".
        /// Delete an asset.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public dynamic AmsAssetDelete(AmsAssetDeleteSettings settings) {
            var baseCommand = "az ams asset delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset get-encryption-key".
        /// Get the asset storage encryption keys used to decrypt content created by version 2 of the Media Services API.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public dynamic AmsAssetGetEncryptionKey(AmsAssetGetEncryptionKeySettings settings) {
            var baseCommand = "az ams asset get-encryption-key";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset get-sas-urls".
        /// Lists storage container URLs with shared access signatures (SAS) for uploading and downloading Asset content. The signatures are derived from the storage account keys.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public dynamic AmsAssetGetSasUrls(AmsAssetGetSasUrlsSettings settings) {
            var baseCommand = "az ams asset get-sas-urls";
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset list".
        /// List all the assets of an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public dynamic AmsAssetList(AmsAssetListSettings settings) {
            var baseCommand = "az ams asset list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset list-streaming-locators".
        /// List streaming locators which are associated with this asset.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public dynamic AmsAssetListStreamingLocators(AmsAssetListStreamingLocatorsSettings settings) {
            var baseCommand = "az ams asset list-streaming-locators";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset show".
        /// Show the details of an asset.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public dynamic AmsAssetShow(AmsAssetShowSettings settings) {
            var baseCommand = "az ams asset show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset update".
        /// Update the details of an asset.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAsset")]
        public dynamic AmsAssetUpdate(AmsAssetUpdateSettings settings) {
            var baseCommand = "az ams asset update";
            AppendIfNonNull(ref baseCommand, "--alternate-id", settings.AlternateId);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset-filter create".
        /// Create an asset filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAssetFilter")]
        public dynamic AmsAssetFilterCreate(AmsAssetFilterCreateSettings settings) {
            var baseCommand = "az ams asset-filter create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--first-quality", settings.FirstQuality);
            AppendIfNonNull(ref baseCommand, "--tracks", settings.Tracks);
            AppendIfNonNull(ref baseCommand, "--end-timestamp", settings.EndTimestamp);
            AppendIfNonNull(ref baseCommand, "--force-end-timestamp", settings.ForceEndTimestamp);
            AppendIfNonNull(ref baseCommand, "--live-backoff-duration", settings.LiveBackoffDuration);
            AppendIfNonNull(ref baseCommand, "--presentation-window-duration", settings.PresentationWindowDuration);
            AppendIfNonNull(ref baseCommand, "--start-timestamp", settings.StartTimestamp);
            AppendIfNonNull(ref baseCommand, "--timescale", settings.Timescale);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset-filter delete".
        /// Delete an asset filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAssetFilter")]
        public dynamic AmsAssetFilterDelete(AmsAssetFilterDeleteSettings settings) {
            var baseCommand = "az ams asset-filter delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset-filter list".
        /// List all the asset filters of an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAssetFilter")]
        public dynamic AmsAssetFilterList(AmsAssetFilterListSettings settings) {
            var baseCommand = "az ams asset-filter list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset-filter show".
        /// Show the details of an asset filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAssetFilter")]
        public dynamic AmsAssetFilterShow(AmsAssetFilterShowSettings settings) {
            var baseCommand = "az ams asset-filter show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams asset-filter update".
        /// Update the details of an asset filter.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsAssetFilter")]
        public dynamic AmsAssetFilterUpdate(AmsAssetFilterUpdateSettings settings) {
            var baseCommand = "az ams asset-filter update";
            AppendIfNonNull(ref baseCommand, "--first-quality", settings.FirstQuality);
            AppendIfNonNull(ref baseCommand, "--tracks", settings.Tracks);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--end-timestamp", settings.EndTimestamp);
            AppendIfNonNull(ref baseCommand, "--force-end-timestamp", settings.ForceEndTimestamp);
            AppendIfNonNull(ref baseCommand, "--live-backoff-duration", settings.LiveBackoffDuration);
            AppendIfNonNull(ref baseCommand, "--presentation-window-duration", settings.PresentationWindowDuration);
            AppendIfNonNull(ref baseCommand, "--start-timestamp", settings.StartTimestamp);
            AppendIfNonNull(ref baseCommand, "--timescale", settings.Timescale);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams content-key-policy create".
        /// Create a new content key policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicy")]
        public dynamic AmsContentKeyPolicyCreate(AmsContentKeyPolicyCreateSettings settings) {
            var baseCommand = "az ams content-key-policy create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-option-name", settings.PolicyOptionName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--clear-key-configuration", settings.ClearKeyConfiguration);
            AppendIfNonNull(ref baseCommand, "--ask", settings.Ask);
            AppendIfNonNull(ref baseCommand, "--fair-play-pfx", settings.FairPlayPfx);
            AppendIfNonNull(ref baseCommand, "--fair-play-pfx-password", settings.FairPlayPfxPassword);
            AppendIfNonNull(ref baseCommand, "--rental-and-lease-key-type", settings.RentalAndLeaseKeyType);
            AppendIfNonNull(ref baseCommand, "--rental-duration", settings.RentalDuration);
            AppendIfNonNull(ref baseCommand, "--open-restriction", settings.OpenRestriction);
            AppendIfNonNull(ref baseCommand, "--play-ready-template", settings.PlayReadyTemplate);
            AppendIfNonNull(ref baseCommand, "--alt-rsa-token-keys", settings.AltRsaTokenKeys);
            AppendIfNonNull(ref baseCommand, "--alt-symmetric-token-keys", settings.AltSymmetricTokenKeys);
            AppendIfNonNull(ref baseCommand, "--alt-x509-token-keys", settings.AltX509TokenKeys);
            AppendIfNonNull(ref baseCommand, "--audience", settings.Audience);
            AppendIfNonNull(ref baseCommand, "--issuer", settings.Issuer);
            AppendIfNonNull(ref baseCommand, "--open-id-connect-discovery-document", settings.OpenIdConnectDiscoveryDocument);
            AppendIfNonNull(ref baseCommand, "--token-claims", settings.TokenClaims);
            AppendIfNonNull(ref baseCommand, "--token-key", settings.TokenKey);
            AppendIfNonNull(ref baseCommand, "--token-key-type", settings.TokenKeyType);
            AppendIfNonNull(ref baseCommand, "--token-type", settings.TokenType);
            AppendIfNonNull(ref baseCommand, "--widevine-template", settings.WidevineTemplate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams content-key-policy delete".
        /// Delete a content key policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicy")]
        public dynamic AmsContentKeyPolicyDelete(AmsContentKeyPolicyDeleteSettings settings) {
            var baseCommand = "az ams content-key-policy delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams content-key-policy list".
        /// List all the content key policies within an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicy")]
        public dynamic AmsContentKeyPolicyList(AmsContentKeyPolicyListSettings settings) {
            var baseCommand = "az ams content-key-policy list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams content-key-policy show".
        /// Show an existing content key policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicy")]
        public dynamic AmsContentKeyPolicyShow(AmsContentKeyPolicyShowSettings settings) {
            var baseCommand = "az ams content-key-policy show";
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams content-key-policy update".
        /// Update an existing content key policy.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicy")]
        public dynamic AmsContentKeyPolicyUpdate(AmsContentKeyPolicyUpdateSettings settings) {
            var baseCommand = "az ams content-key-policy update";
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams content-key-policy option add".
        /// Add a new option to an existing content key policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicyOption")]
        public dynamic AmsContentKeyPolicyOptionAdd(AmsContentKeyPolicyOptionAddSettings settings) {
            var baseCommand = "az ams content-key-policy option add";
            AppendIfNonNull(ref baseCommand, "--policy-option-name", settings.PolicyOptionName);
            AppendIfNonNull(ref baseCommand, "--clear-key-configuration", settings.ClearKeyConfiguration);
            AppendIfNonNull(ref baseCommand, "--ask", settings.Ask);
            AppendIfNonNull(ref baseCommand, "--fair-play-pfx", settings.FairPlayPfx);
            AppendIfNonNull(ref baseCommand, "--fair-play-pfx-password", settings.FairPlayPfxPassword);
            AppendIfNonNull(ref baseCommand, "--rental-and-lease-key-type", settings.RentalAndLeaseKeyType);
            AppendIfNonNull(ref baseCommand, "--rental-duration", settings.RentalDuration);
            AppendIfNonNull(ref baseCommand, "--open-restriction", settings.OpenRestriction);
            AppendIfNonNull(ref baseCommand, "--play-ready-template", settings.PlayReadyTemplate);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--alt-rsa-token-keys", settings.AltRsaTokenKeys);
            AppendIfNonNull(ref baseCommand, "--alt-symmetric-token-keys", settings.AltSymmetricTokenKeys);
            AppendIfNonNull(ref baseCommand, "--alt-x509-token-keys", settings.AltX509TokenKeys);
            AppendIfNonNull(ref baseCommand, "--audience", settings.Audience);
            AppendIfNonNull(ref baseCommand, "--issuer", settings.Issuer);
            AppendIfNonNull(ref baseCommand, "--open-id-connect-discovery-document", settings.OpenIdConnectDiscoveryDocument);
            AppendIfNonNull(ref baseCommand, "--token-claims", settings.TokenClaims);
            AppendIfNonNull(ref baseCommand, "--token-key", settings.TokenKey);
            AppendIfNonNull(ref baseCommand, "--token-key-type", settings.TokenKeyType);
            AppendIfNonNull(ref baseCommand, "--token-type", settings.TokenType);
            AppendIfNonNull(ref baseCommand, "--widevine-template", settings.WidevineTemplate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams content-key-policy option remove".
        /// Remove an option from an existing content key policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicyOption")]
        public dynamic AmsContentKeyPolicyOptionRemove(AmsContentKeyPolicyOptionRemoveSettings settings) {
            var baseCommand = "az ams content-key-policy option remove";
            AppendIfNonNull(ref baseCommand, "--policy-option-id", settings.PolicyOptionId);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams content-key-policy option update".
        /// Update an option from an existing content key policy.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsContentKeyPolicyOption")]
        public dynamic AmsContentKeyPolicyOptionUpdate(AmsContentKeyPolicyOptionUpdateSettings settings) {
            var baseCommand = "az ams content-key-policy option update";
            AppendIfNonNull(ref baseCommand, "--policy-option-id", settings.PolicyOptionId);
            AppendIfNonNull(ref baseCommand, "--policy-option-name", settings.PolicyOptionName);
            AppendIfNonNull(ref baseCommand, "--ask", settings.Ask);
            AppendIfNonNull(ref baseCommand, "--fair-play-pfx", settings.FairPlayPfx);
            AppendIfNonNull(ref baseCommand, "--fair-play-pfx-password", settings.FairPlayPfxPassword);
            AppendIfNonNull(ref baseCommand, "--rental-and-lease-key-type", settings.RentalAndLeaseKeyType);
            AppendIfNonNull(ref baseCommand, "--rental-duration", settings.RentalDuration);
            AppendIfNonNull(ref baseCommand, "--play-ready-template", settings.PlayReadyTemplate);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--add-alt-token-key", settings.AddAltTokenKey);
            AppendIfNonNull(ref baseCommand, "--add-alt-token-key-type", settings.AddAltTokenKeyType);
            AppendIfNonNull(ref baseCommand, "--audience", settings.Audience);
            AppendIfNonNull(ref baseCommand, "--issuer", settings.Issuer);
            AppendIfNonNull(ref baseCommand, "--open-id-connect-discovery-document", settings.OpenIdConnectDiscoveryDocument);
            AppendIfNonNull(ref baseCommand, "--token-claims", settings.TokenClaims);
            AppendIfNonNull(ref baseCommand, "--token-key", settings.TokenKey);
            AppendIfNonNull(ref baseCommand, "--token-key-type", settings.TokenKeyType);
            AppendIfNonNull(ref baseCommand, "--token-type", settings.TokenType);
            AppendIfNonNull(ref baseCommand, "--widevine-template", settings.WidevineTemplate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams job cancel".
        /// Cancel a job.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsJob")]
        public dynamic AmsJobCancel(AmsJobCancelSettings settings) {
            var baseCommand = "az ams job cancel";
            AppendIfNonNull(ref baseCommand, "--delete", settings.Delete);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--transform-name", settings.TransformName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams job create".
        /// Create and start a job.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsJob")]
        public dynamic AmsJobCreate(AmsJobCreateSettings settings) {
            var baseCommand = "az ams job create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--output-assets", settings.OutputAssets);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--transform-name", settings.TransformName);
            AppendIfNonNull(ref baseCommand, "--correlation-data", settings.CorrelationData);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--files", settings.Files);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--input-asset-name", settings.InputAssetName);
            AppendIfNonNull(ref baseCommand, "--base-uri", settings.BaseUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams job delete".
        /// Delete a job.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsJob")]
        public dynamic AmsJobDelete(AmsJobDeleteSettings settings) {
            var baseCommand = "az ams job delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--transform-name", settings.TransformName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams job list".
        /// List all the jobs of a transform within an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsJob")]
        public dynamic AmsJobList(AmsJobListSettings settings) {
            var baseCommand = "az ams job list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--transform-name", settings.TransformName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams job show".
        /// Show the details of a job.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsJob")]
        public dynamic AmsJobShow(AmsJobShowSettings settings) {
            var baseCommand = "az ams job show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--transform-name", settings.TransformName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams job update".
        /// Update an existing job.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsJob")]
        public dynamic AmsJobUpdate(AmsJobUpdateSettings settings) {
            var baseCommand = "az ams job update";
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--transform-name", settings.TransformName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-event create".
        /// Create a live event.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public dynamic AmsLiveEventCreate(AmsLiveEventCreateSettings settings) {
            var baseCommand = "az ams live-event create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--auto-start", settings.AutoStart);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--stream-options", settings.StreamOptions);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vanity-url", settings.VanityUrl);
            AppendIfNonNull(ref baseCommand, "--client-access-policy", settings.ClientAccessPolicy);
            AppendIfNonNull(ref baseCommand, "--cross-domain-policy", settings.CrossDomainPolicy);
            AppendIfNonNull(ref baseCommand, "--encoding-type", settings.EncodingType);
            AppendIfNonNull(ref baseCommand, "--preset-name", settings.PresetName);
            AppendIfNonNull(ref baseCommand, "--ips", settings.Ips);
            AppendIfNonNull(ref baseCommand, "--streaming-protocol", settings.StreamingProtocol);
            AppendIfNonNull(ref baseCommand, "--access-token", settings.AccessToken);
            AppendIfNonNull(ref baseCommand, "--key-frame-interval-duration", settings.KeyFrameIntervalDuration);
            AppendIfNonNull(ref baseCommand, "--alternative-media-id", settings.AlternativeMediaId);
            AppendIfNonNull(ref baseCommand, "--preview-ips", settings.PreviewIps);
            AppendIfNonNull(ref baseCommand, "--preview-locator", settings.PreviewLocator);
            AppendIfNonNull(ref baseCommand, "--streaming-policy-name", settings.StreamingPolicyName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-event delete".
        /// Delete a live event.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public dynamic AmsLiveEventDelete(AmsLiveEventDeleteSettings settings) {
            var baseCommand = "az ams live-event delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-event list".
        /// List all the live events of an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public dynamic AmsLiveEventList(AmsLiveEventListSettings settings) {
            var baseCommand = "az ams live-event list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-event reset".
        /// Reset a live event.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public dynamic AmsLiveEventReset(AmsLiveEventResetSettings settings) {
            var baseCommand = "az ams live-event reset";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-event show".
        /// Show the details of a live event.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public dynamic AmsLiveEventShow(AmsLiveEventShowSettings settings) {
            var baseCommand = "az ams live-event show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-event start".
        /// Start a live event.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public dynamic AmsLiveEventStart(AmsLiveEventStartSettings settings) {
            var baseCommand = "az ams live-event start";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-event stop".
        /// Stop a live event.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public dynamic AmsLiveEventStop(AmsLiveEventStopSettings settings) {
            var baseCommand = "az ams live-event stop";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--remove-outputs-on-stop", settings.RemoveOutputsOnStop);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-event update".
        /// Update the details of a live event.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public dynamic AmsLiveEventUpdate(AmsLiveEventUpdateSettings settings) {
            var baseCommand = "az ams live-event update";
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--client-access-policy", settings.ClientAccessPolicy);
            AppendIfNonNull(ref baseCommand, "--cross-domain-policy", settings.CrossDomainPolicy);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ips", settings.Ips);
            AppendIfNonNull(ref baseCommand, "--key-frame-interval-duration", settings.KeyFrameIntervalDuration);
            AppendIfNonNull(ref baseCommand, "--preview-ips", settings.PreviewIps);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-event wait".
        /// Place the CLI in a waiting state until a condition of the live event is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveEvent")]
        public dynamic AmsLiveEventWait(AmsLiveEventWaitSettings settings) {
            var baseCommand = "az ams live-event wait";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-output create".
        /// Create a live output.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveOutput")]
        public dynamic AmsLiveOutputCreate(AmsLiveOutputCreateSettings settings) {
            var baseCommand = "az ams live-output create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--archive-window-length", settings.ArchiveWindowLength);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--live-event-name", settings.LiveEventName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--fragments-per-ts-segment", settings.FragmentsPerTsSegment);
            AppendIfNonNull(ref baseCommand, "--manifest-name", settings.ManifestName);
            AppendIfNonNull(ref baseCommand, "--output-snap-time", settings.OutputSnapTime);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-output delete".
        /// Delete a live output.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveOutput")]
        public dynamic AmsLiveOutputDelete(AmsLiveOutputDeleteSettings settings) {
            var baseCommand = "az ams live-output delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--live-event-name", settings.LiveEventName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-output list".
        /// List all the live outputs in a live event.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveOutput")]
        public dynamic AmsLiveOutputList(AmsLiveOutputListSettings settings) {
            var baseCommand = "az ams live-output list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--live-event-name", settings.LiveEventName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams live-output show".
        /// Show the details of a live output.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsLiveOutput")]
        public dynamic AmsLiveOutputShow(AmsLiveOutputShowSettings settings) {
            var baseCommand = "az ams live-output show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--live-event-name", settings.LiveEventName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-endpoint create".
        /// Create a streaming endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public dynamic AmsStreamingEndpointCreate(AmsStreamingEndpointCreateSettings settings) {
            var baseCommand = "az ams streaming-endpoint create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scale-units", settings.ScaleUnits);
            AppendIfNonNull(ref baseCommand, "--auto-start", settings.AutoStart);
            AppendIfNonNull(ref baseCommand, "--availability-set-name", settings.AvailabilitySetName);
            AppendIfNonNull(ref baseCommand, "--custom-host-names", settings.CustomHostNames);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--max-cache-age", settings.MaxCacheAge);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--ips", settings.Ips);
            AppendIfNonNull(ref baseCommand, "--cdn-profile", settings.CdnProfile);
            AppendIfNonNull(ref baseCommand, "--cdn-provider", settings.CdnProvider);
            AppendIfNonNull(ref baseCommand, "--client-access-policy", settings.ClientAccessPolicy);
            AppendIfNonNull(ref baseCommand, "--cross-domain-policy", settings.CrossDomainPolicy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-endpoint delete".
        /// Delete a streaming endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public dynamic AmsStreamingEndpointDelete(AmsStreamingEndpointDeleteSettings settings) {
            var baseCommand = "az ams streaming-endpoint delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-endpoint list".
        /// List all the streaming endpoints within an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public dynamic AmsStreamingEndpointList(AmsStreamingEndpointListSettings settings) {
            var baseCommand = "az ams streaming-endpoint list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-endpoint scale".
        /// Set the scale of a streaming endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public dynamic AmsStreamingEndpointScale(AmsStreamingEndpointScaleSettings settings) {
            var baseCommand = "az ams streaming-endpoint scale";
            AppendIfNonNull(ref baseCommand, "--scale-units", settings.ScaleUnits);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-endpoint show".
        /// Show the details of a streaming endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public dynamic AmsStreamingEndpointShow(AmsStreamingEndpointShowSettings settings) {
            var baseCommand = "az ams streaming-endpoint show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-endpoint start".
        /// Start a streaming endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public dynamic AmsStreamingEndpointStart(AmsStreamingEndpointStartSettings settings) {
            var baseCommand = "az ams streaming-endpoint start";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-endpoint stop".
        /// Stop a streaming endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public dynamic AmsStreamingEndpointStop(AmsStreamingEndpointStopSettings settings) {
            var baseCommand = "az ams streaming-endpoint stop";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-endpoint update".
        /// Update the details of a streaming endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public dynamic AmsStreamingEndpointUpdate(AmsStreamingEndpointUpdateSettings settings) {
            var baseCommand = "az ams streaming-endpoint update";
            AppendIfNonNull(ref baseCommand, "--custom-host-names", settings.CustomHostNames);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--max-cache-age", settings.MaxCacheAge);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--ips", settings.Ips);
            AppendIfNonNull(ref baseCommand, "--cdn-profile", settings.CdnProfile);
            AppendIfNonNull(ref baseCommand, "--cdn-provider", settings.CdnProvider);
            AppendIfNonNull(ref baseCommand, "--disable-cdn", settings.DisableCdn);
            AppendIfNonNull(ref baseCommand, "--client-access-policy", settings.ClientAccessPolicy);
            AppendIfNonNull(ref baseCommand, "--cross-domain-policy", settings.CrossDomainPolicy);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-endpoint wait".
        /// Place the CLI in a waiting state until a condition of the streaming endpoint is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpoint")]
        public dynamic AmsStreamingEndpointWait(AmsStreamingEndpointWaitSettings settings) {
            var baseCommand = "az ams streaming-endpoint wait";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-endpoint akamai add".
        /// Add an AkamaiAccessControl to an existing streaming endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpointAkamai")]
        public dynamic AmsStreamingEndpointAkamaiAdd(AmsStreamingEndpointAkamaiAddSettings settings) {
            var baseCommand = "az ams streaming-endpoint akamai add";
            AppendIfNonNull(ref baseCommand, "--base64-key", settings.Base64Key);
            AppendIfNonNull(ref baseCommand, "--expiration", settings.Expiration);
            AppendIfNonNull(ref baseCommand, "--identifier", settings.Identifier);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-endpoint akamai remove".
        /// Remove an AkamaiAccessControl from an existing streaming endpoint.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingEndpointAkamai")]
        public dynamic AmsStreamingEndpointAkamaiRemove(AmsStreamingEndpointAkamaiRemoveSettings settings) {
            var baseCommand = "az ams streaming-endpoint akamai remove";
            AppendIfNonNull(ref baseCommand, "--identifier", settings.Identifier);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-locator create".
        /// Create a streaming locator.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingLocator")]
        public dynamic AmsStreamingLocatorCreate(AmsStreamingLocatorCreateSettings settings) {
            var baseCommand = "az ams streaming-locator create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--asset-name", settings.AssetName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--streaming-policy-name", settings.StreamingPolicyName);
            AppendIfNonNull(ref baseCommand, "--alternative-media-id", settings.AlternativeMediaId);
            AppendIfNonNull(ref baseCommand, "--content-key-policy-name", settings.ContentKeyPolicyName);
            AppendIfNonNull(ref baseCommand, "--content-keys", settings.ContentKeys);
            AppendIfNonNull(ref baseCommand, "--end-time", settings.EndTime);
            AppendIfNonNull(ref baseCommand, "--filters", settings.Filters);
            AppendIfNonNull(ref baseCommand, "--start-time", settings.StartTime);
            AppendIfNonNull(ref baseCommand, "--streaming-locator-id", settings.StreamingLocatorId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-locator delete".
        /// Delete a Streaming Locator.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingLocator")]
        public dynamic AmsStreamingLocatorDelete(AmsStreamingLocatorDeleteSettings settings) {
            var baseCommand = "az ams streaming-locator delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-locator get-paths".
        /// List paths supported by a streaming locator.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingLocator")]
        public dynamic AmsStreamingLocatorGetPaths(AmsStreamingLocatorGetPathsSettings settings) {
            var baseCommand = "az ams streaming-locator get-paths";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-locator list".
        /// List all the streaming locators within an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingLocator")]
        public dynamic AmsStreamingLocatorList(AmsStreamingLocatorListSettings settings) {
            var baseCommand = "az ams streaming-locator list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-locator list-content-keys".
        /// List content keys used by a streaming locator.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingLocator")]
        public dynamic AmsStreamingLocatorListContentKeys(AmsStreamingLocatorListContentKeysSettings settings) {
            var baseCommand = "az ams streaming-locator list-content-keys";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-locator show".
        /// Show the details of a streaming locator.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingLocator")]
        public dynamic AmsStreamingLocatorShow(AmsStreamingLocatorShowSettings settings) {
            var baseCommand = "az ams streaming-locator show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-policy create".
        /// Create a streaming policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingPolicy")]
        public dynamic AmsStreamingPolicyCreate(AmsStreamingPolicyCreateSettings settings) {
            var baseCommand = "az ams streaming-policy create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--default-content-key-policy-name", settings.DefaultContentKeyPolicyName);
            AppendIfNonNull(ref baseCommand, "--no-encryption-protocols", settings.NoEncryptionProtocols);
            AppendIfNonNull(ref baseCommand, "--cbcs-clear-tracks", settings.CbcsClearTracks);
            AppendIfNonNull(ref baseCommand, "--cbcs-default-key-label", settings.CbcsDefaultKeyLabel);
            AppendIfNonNull(ref baseCommand, "--cbcs-default-key-policy-name", settings.CbcsDefaultKeyPolicyName);
            AppendIfNonNull(ref baseCommand, "--cbcs-fair-play-allow-persistent-license", settings.CbcsFairPlayAllowPersistentLicense);
            AppendIfNonNull(ref baseCommand, "--cbcs-fair-play-template", settings.CbcsFairPlayTemplate);
            AppendIfNonNull(ref baseCommand, "--cbcs-key-to-track-mappings", settings.CbcsKeyToTrackMappings);
            AppendIfNonNull(ref baseCommand, "--cbcs-protocols", settings.CbcsProtocols);
            AppendIfNonNull(ref baseCommand, "--cenc-clear-tracks", settings.CencClearTracks);
            AppendIfNonNull(ref baseCommand, "--cenc-default-key-label", settings.CencDefaultKeyLabel);
            AppendIfNonNull(ref baseCommand, "--cenc-default-key-policy-name", settings.CencDefaultKeyPolicyName);
            AppendIfNonNull(ref baseCommand, "--cenc-disable-play-ready", settings.CencDisablePlayReady);
            AppendIfNonNull(ref baseCommand, "--cenc-disable-widevine", settings.CencDisableWidevine);
            AppendIfNonNull(ref baseCommand, "--cenc-key-to-track-mappings", settings.CencKeyToTrackMappings);
            AppendIfNonNull(ref baseCommand, "--cenc-play-ready-attributes", settings.CencPlayReadyAttributes);
            AppendIfNonNull(ref baseCommand, "--cenc-play-ready-template", settings.CencPlayReadyTemplate);
            AppendIfNonNull(ref baseCommand, "--cenc-protocols", settings.CencProtocols);
            AppendIfNonNull(ref baseCommand, "--cenc-widevine-template", settings.CencWidevineTemplate);
            AppendIfNonNull(ref baseCommand, "--envelope-clear-tracks", settings.EnvelopeClearTracks);
            AppendIfNonNull(ref baseCommand, "--envelope-default-key-label", settings.EnvelopeDefaultKeyLabel);
            AppendIfNonNull(ref baseCommand, "--envelope-default-key-policy-name", settings.EnvelopeDefaultKeyPolicyName);
            AppendIfNonNull(ref baseCommand, "--envelope-key-to-track-mappings", settings.EnvelopeKeyToTrackMappings);
            AppendIfNonNull(ref baseCommand, "--envelope-protocols", settings.EnvelopeProtocols);
            AppendIfNonNull(ref baseCommand, "--envelope-template", settings.EnvelopeTemplate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-policy delete".
        /// Delete a Streaming Policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingPolicy")]
        public dynamic AmsStreamingPolicyDelete(AmsStreamingPolicyDeleteSettings settings) {
            var baseCommand = "az ams streaming-policy delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-policy list".
        /// List all the streaming policies within an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingPolicy")]
        public dynamic AmsStreamingPolicyList(AmsStreamingPolicyListSettings settings) {
            var baseCommand = "az ams streaming-policy list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams streaming-policy show".
        /// Show the details of a streaming policy.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsStreamingPolicy")]
        public dynamic AmsStreamingPolicyShow(AmsStreamingPolicyShowSettings settings) {
            var baseCommand = "az ams streaming-policy show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams transform create".
        /// Create a transform.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransform")]
        public dynamic AmsTransformCreate(AmsTransformCreateSettings settings) {
            var baseCommand = "az ams transform create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--preset", settings.Preset);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--on-error", settings.OnError);
            AppendIfNonNull(ref baseCommand, "--relative-priority", settings.RelativePriority);
            AppendIfNonNull(ref baseCommand, "--audio-language", settings.AudioLanguage);
            AppendIfNonNull(ref baseCommand, "--insights-to-extract", settings.InsightsToExtract);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams transform delete".
        /// Delete a transform.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransform")]
        public dynamic AmsTransformDelete(AmsTransformDeleteSettings settings) {
            var baseCommand = "az ams transform delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams transform list".
        /// List all the transforms of an Azure Media Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransform")]
        public dynamic AmsTransformList(AmsTransformListSettings settings) {
            var baseCommand = "az ams transform list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams transform show".
        /// Show the details of a transform.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransform")]
        public dynamic AmsTransformShow(AmsTransformShowSettings settings) {
            var baseCommand = "az ams transform show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams transform update".
        /// Update the details of a transform.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransform")]
        public dynamic AmsTransformUpdate(AmsTransformUpdateSettings settings) {
            var baseCommand = "az ams transform update";
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams transform output add".
        /// Add an output to an existing transform.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransformOutput")]
        public dynamic AmsTransformOutputAdd(AmsTransformOutputAddSettings settings) {
            var baseCommand = "az ams transform output add";
            AppendIfNonNull(ref baseCommand, "--preset", settings.Preset);
            AppendIfNonNull(ref baseCommand, "--on-error", settings.OnError);
            AppendIfNonNull(ref baseCommand, "--relative-priority", settings.RelativePriority);
            AppendIfNonNull(ref baseCommand, "--audio-language", settings.AudioLanguage);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--insights-to-extract", settings.InsightsToExtract);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ams transform output remove".
        /// Remove an output from an existing transform.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAmsTransformOutput")]
        public dynamic AmsTransformOutputRemove(AmsTransformOutputRemoveSettings settings) {
            var baseCommand = "az ams transform output remove";
            AppendIfNonNull(ref baseCommand, "--output-index", settings.OutputIndex);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig create".
        /// Create an App Configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfig")]
        public dynamic AppconfigCreate(AppconfigCreateSettings settings) {
            var baseCommand = "az appconfig create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig delete".
        /// Delete an App Configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfig")]
        public dynamic AppconfigDelete(AppconfigDeleteSettings settings) {
            var baseCommand = "az appconfig delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig list".
        /// Lists all App Configurations under the current subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfig")]
        public dynamic AppconfigList(AppconfigListSettings settings) {
            var baseCommand = "az appconfig list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig show".
        /// Show properties of an App Configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfig")]
        public dynamic AppconfigShow(AppconfigShowSettings settings) {
            var baseCommand = "az appconfig show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig update".
        /// Update an App Configuration.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfig")]
        public dynamic AppconfigUpdate(AppconfigUpdateSettings settings) {
            var baseCommand = "az appconfig update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig credential list".
        /// List access keys of an App Configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigCredential")]
        public dynamic AppconfigCredentialList(AppconfigCredentialListSettings settings) {
            var baseCommand = "az appconfig credential list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig credential regenerate".
        /// Regenerate an access key for an App Configuration.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigCredential")]
        public dynamic AppconfigCredentialRegenerate(AppconfigCredentialRegenerateSettings settings) {
            var baseCommand = "az appconfig credential regenerate";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig feature delete".
        /// Delete feature flag.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public dynamic AppconfigFeatureDelete(AppconfigFeatureDeleteSettings settings) {
            var baseCommand = "az appconfig feature delete";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig feature disable".
        /// Disable a feature flag to turn it OFF for use.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public dynamic AppconfigFeatureDisable(AppconfigFeatureDisableSettings settings) {
            var baseCommand = "az appconfig feature disable";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig feature enable".
        /// Enable a feature flag to turn it ON for use.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public dynamic AppconfigFeatureEnable(AppconfigFeatureEnableSettings settings) {
            var baseCommand = "az appconfig feature enable";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig feature list".
        /// List feature flags.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public dynamic AppconfigFeatureList(AppconfigFeatureListSettings settings) {
            var baseCommand = "az appconfig feature list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--fields", settings.Fields);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig feature lock".
        /// Lock a feature flag to prohibit write operations.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public dynamic AppconfigFeatureLock(AppconfigFeatureLockSettings settings) {
            var baseCommand = "az appconfig feature lock";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig feature set".
        /// Set a feature flag.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public dynamic AppconfigFeatureSet(AppconfigFeatureSetSettings settings) {
            var baseCommand = "az appconfig feature set";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig feature show".
        /// Show all attributes of a feature flag.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public dynamic AppconfigFeatureShow(AppconfigFeatureShowSettings settings) {
            var baseCommand = "az appconfig feature show";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--fields", settings.Fields);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig feature unlock".
        /// Unlock a feature to gain write operations.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeature")]
        public dynamic AppconfigFeatureUnlock(AppconfigFeatureUnlockSettings settings) {
            var baseCommand = "az appconfig feature unlock";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig feature filter add".
        /// Add a filter to a feature flag.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeatureFilter")]
        public dynamic AppconfigFeatureFilterAdd(AppconfigFeatureFilterAddSettings settings) {
            var baseCommand = "az appconfig feature filter add";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--filter-parameters", settings.FilterParameters);
            AppendIfNonNull(ref baseCommand, "--index", settings.Index);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig feature filter delete".
        /// Delete a filter from a feature flag.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeatureFilter")]
        public dynamic AppconfigFeatureFilterDelete(AppconfigFeatureFilterDeleteSettings settings) {
            var baseCommand = "az appconfig feature filter delete";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--index", settings.Index);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig feature filter list".
        /// List all filters for a feature flag.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeatureFilter")]
        public dynamic AppconfigFeatureFilterList(AppconfigFeatureFilterListSettings settings) {
            var baseCommand = "az appconfig feature filter list";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig feature filter show".
        /// Show filters of a feature flag.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigFeatureFilter")]
        public dynamic AppconfigFeatureFilterShow(AppconfigFeatureFilterShowSettings settings) {
            var baseCommand = "az appconfig feature filter show";
            AppendIfNonNull(ref baseCommand, "--feature", settings.Feature);
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--index", settings.Index);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig kv delete".
        /// Delete key-values.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public dynamic AppconfigKvDelete(AppconfigKvDeleteSettings settings) {
            var baseCommand = "az appconfig kv delete";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig kv export".
        /// Export configurations to another place from your App Configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public dynamic AppconfigKvExport(AppconfigKvExportSettings settings) {
            var baseCommand = "az appconfig kv export";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--dest-connection-string", settings.DestConnectionString);
            AppendIfNonNull(ref baseCommand, "--dest-label", settings.DestLabel);
            AppendIfNonNull(ref baseCommand, "--dest-name", settings.DestName);
            AppendIfNonNull(ref baseCommand, "--appservice-account", settings.AppserviceAccount);
            AppendIfNonNull(ref baseCommand, "--format", settings.Format);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--separator", settings.Separator);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig kv import".
        /// Import configurations into your App Configuration from another place.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public dynamic AppconfigKvImport(AppconfigKvImportSettings settings) {
            var baseCommand = "az appconfig kv import";
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--src-connection-string", settings.SrcConnectionString);
            AppendIfNonNull(ref baseCommand, "--src-key", settings.SrcKey);
            AppendIfNonNull(ref baseCommand, "--src-label", settings.SrcLabel);
            AppendIfNonNull(ref baseCommand, "--src-name", settings.SrcName);
            AppendIfNonNull(ref baseCommand, "--appservice-account", settings.AppserviceAccount);
            AppendIfNonNull(ref baseCommand, "--depth", settings.Depth);
            AppendIfNonNull(ref baseCommand, "--format", settings.Format);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--separator", settings.Separator);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig kv list".
        /// List key-values.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public dynamic AppconfigKvList(AppconfigKvListSettings settings) {
            var baseCommand = "az appconfig kv list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--datetime", settings.Datetime);
            AppendIfNonNull(ref baseCommand, "--fields", settings.Fields);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig kv lock".
        /// Lock a key-value to prohibit write operations.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public dynamic AppconfigKvLock(AppconfigKvLockSettings settings) {
            var baseCommand = "az appconfig kv lock";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig kv restore".
        /// Restore key-values.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public dynamic AppconfigKvRestore(AppconfigKvRestoreSettings settings) {
            var baseCommand = "az appconfig kv restore";
            AppendIfNonNull(ref baseCommand, "--datetime", settings.Datetime);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig kv set".
        /// Set a key-value.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public dynamic AppconfigKvSet(AppconfigKvSetSettings settings) {
            var baseCommand = "az appconfig kv set";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig kv show".
        /// Show all attributes of a key-value.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public dynamic AppconfigKvShow(AppconfigKvShowSettings settings) {
            var baseCommand = "az appconfig kv show";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--datetime", settings.Datetime);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig kv unlock".
        /// Unlock a key-value to gain write operations.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigKv")]
        public dynamic AppconfigKvUnlock(AppconfigKvUnlockSettings settings) {
            var baseCommand = "az appconfig kv unlock";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appconfig revision list".
        /// Lists revision history of key-values.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppconfigRevision")]
        public dynamic AppconfigRevisionList(AppconfigRevisionListSettings settings) {
            var baseCommand = "az appconfig revision list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--datetime", settings.Datetime);
            AppendIfNonNull(ref baseCommand, "--fields", settings.Fields);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice list-locations".
        /// List regions where a plan sku is available.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppservice")]
        public dynamic AppserviceListLocations(AppserviceListLocationsSettings settings) {
            var baseCommand = "az appservice list-locations";
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--linux-workers-enabled", settings.LinuxWorkersEnabled);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice ase create".
        /// Create app service environment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public dynamic AppserviceAseCreate(AppserviceAseCreateSettings settings) {
            var baseCommand = "az appservice ase create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--force-network-security-group", settings.ForceNetworkSecurityGroup);
            AppendIfNonNull(ref baseCommand, "--force-route-table", settings.ForceRouteTable);
            AppendIfNonNull(ref baseCommand, "--front-end-scale-factor", settings.FrontEndScaleFactor);
            AppendIfNonNull(ref baseCommand, "--front-end-sku", settings.FrontEndSku);
            AppendIfNonNull(ref baseCommand, "--ignore-network-security-group", settings.IgnoreNetworkSecurityGroup);
            AppendIfNonNull(ref baseCommand, "--ignore-route-table", settings.IgnoreRouteTable);
            AppendIfNonNull(ref baseCommand, "--ignore-subnet-size-validation", settings.IgnoreSubnetSizeValidation);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--virtual-ip-type", settings.VirtualIpType);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice ase delete".
        /// Delete app service environment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public dynamic AppserviceAseDelete(AppserviceAseDeleteSettings settings) {
            var baseCommand = "az appservice ase delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice ase list".
        /// List app service environments.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public dynamic AppserviceAseList(AppserviceAseListSettings settings) {
            var baseCommand = "az appservice ase list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice ase list-addresses".
        /// List VIPs associated with an app service environment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public dynamic AppserviceAseListAddresses(AppserviceAseListAddressesSettings settings) {
            var baseCommand = "az appservice ase list-addresses";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice ase list-plans".
        /// List app service plans associated with an app service environment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public dynamic AppserviceAseListPlans(AppserviceAseListPlansSettings settings) {
            var baseCommand = "az appservice ase list-plans";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice ase show".
        /// Show details of an app service environment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public dynamic AppserviceAseShow(AppserviceAseShowSettings settings) {
            var baseCommand = "az appservice ase show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice ase update".
        /// Update app service environment.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceAse")]
        public dynamic AppserviceAseUpdate(AppserviceAseUpdateSettings settings) {
            var baseCommand = "az appservice ase update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--front-end-scale-factor", settings.FrontEndScaleFactor);
            AppendIfNonNull(ref baseCommand, "--front-end-sku", settings.FrontEndSku);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice hybrid-connection set-key".
        /// Set the key that all apps in an appservice plan use to connect to the hybrid- connections in that appservice plan.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceHybridConnection")]
        public dynamic AppserviceHybridConnectionSetKey(AppserviceHybridConnectionSetKeySettings settings) {
            var baseCommand = "az appservice hybrid-connection set-key";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection", settings.HybridConnection);
            AppendIfNonNull(ref baseCommand, "--key-type", settings.KeyType);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice plan create".
        /// Create an app service plan.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppservicePlan")]
        public dynamic AppservicePlanCreate(AppservicePlanCreateSettings settings) {
            var baseCommand = "az appservice plan create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--app-service-environment", settings.AppServiceEnvironment);
            AppendIfNonNull(ref baseCommand, "--hyper-v", settings.HyperV);
            AppendIfNonNull(ref baseCommand, "--is-linux", settings.IsLinux);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--number-of-workers", settings.NumberOfWorkers);
            AppendIfNonNull(ref baseCommand, "--per-site-scaling", settings.PerSiteScaling);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice plan delete".
        /// Delete an app service plan.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppservicePlan")]
        public dynamic AppservicePlanDelete(AppservicePlanDeleteSettings settings) {
            var baseCommand = "az appservice plan delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice plan list".
        /// List app service plans.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppservicePlan")]
        public dynamic AppservicePlanList(AppservicePlanListSettings settings) {
            var baseCommand = "az appservice plan list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice plan show".
        /// Get the app service plans for a resource group or a set of resource groups.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppservicePlan")]
        public dynamic AppservicePlanShow(AppservicePlanShowSettings settings) {
            var baseCommand = "az appservice plan show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice plan update".
        /// Update an app service plan. See https://docs.microsoft.com/azure/app-service/app- service-plan-manage#move-an-app-to-another-app-service-plan to learn more.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppservicePlan")]
        public dynamic AppservicePlanUpdate(AppservicePlanUpdateSettings settings) {
            var baseCommand = "az appservice plan update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--number-of-workers", settings.NumberOfWorkers);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az appservice vnet-integration list".
        /// List the virtual network integrations used in an appservice plan.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzAppserviceVnetIntegration")]
        public dynamic AppserviceVnetIntegrationList(AppserviceVnetIntegrationListSettings settings) {
            var baseCommand = "az appservice vnet-integration list";
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup container list".
        /// List containers registered to a Recovery services vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupContainer")]
        public dynamic BackupContainerList(BackupContainerListSettings settings) {
            var baseCommand = "az backup container list";
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup container show".
        /// Show details of a container registered to a Recovery services vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupContainer")]
        public dynamic BackupContainerShow(BackupContainerShowSettings settings) {
            var baseCommand = "az backup container show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup container unregister".
        /// Unregister a Backup Container to make the underlying 'resource' be protected by another vault.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupContainer")]
        public dynamic BackupContainerUnregister(BackupContainerUnregisterSettings settings) {
            var baseCommand = "az backup container unregister";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup item list".
        /// List all backed up items within a container.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupItem")]
        public dynamic BackupItemList(BackupItemListSettings settings) {
            var baseCommand = "az backup item list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup item set-policy".
        /// Update the policy associated with this item. Use this to change policies of the backup item.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupItem")]
        public dynamic BackupItemSetPolicy(BackupItemSetPolicySettings settings) {
            var baseCommand = "az backup item set-policy";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup item show".
        /// Show details of a particular backed up item.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupItem")]
        public dynamic BackupItemShow(BackupItemShowSettings settings) {
            var baseCommand = "az backup item show";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup job list".
        /// List all backup jobs of a Recovery Services vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupJob")]
        public dynamic BackupJobList(BackupJobListSettings settings) {
            var baseCommand = "az backup job list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--operation", settings.Operation);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup job show".
        /// Show details of a particular job.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupJob")]
        public dynamic BackupJobShow(BackupJobShowSettings settings) {
            var baseCommand = "az backup job show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup job stop".
        /// Suspend or terminate a currently running job.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupJob")]
        public dynamic BackupJobStop(BackupJobStopSettings settings) {
            var baseCommand = "az backup job stop";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup job wait".
        /// Wait until either the job completes or the specified timeout value is reached.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupJob")]
        public dynamic BackupJobWait(BackupJobWaitSettings settings) {
            var baseCommand = "az backup job wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup policy create".
        /// Create a new policy for the given BackupManagementType and workloadType.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public dynamic BackupPolicyCreate(BackupPolicyCreateSettings settings) {
            var baseCommand = "az backup policy create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup policy delete".
        /// Delete a backup policy which doesn't have any associated backup items.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public dynamic BackupPolicyDelete(BackupPolicyDeleteSettings settings) {
            var baseCommand = "az backup policy delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup policy get-default-for-vm".
        /// Get the default policy with default values to backup a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public dynamic BackupPolicyGetDefaultForVm(BackupPolicyGetDefaultForVmSettings settings) {
            var baseCommand = "az backup policy get-default-for-vm";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup policy list".
        /// List all policies for a Recovery services vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public dynamic BackupPolicyList(BackupPolicyListSettings settings) {
            var baseCommand = "az backup policy list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup policy list-associated-items".
        /// List all items protected by a backup policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public dynamic BackupPolicyListAssociatedItems(BackupPolicyListAssociatedItemsSettings settings) {
            var baseCommand = "az backup policy list-associated-items";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup policy set".
        /// Update the existing policy with the provided details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public dynamic BackupPolicySet(BackupPolicySetSettings settings) {
            var baseCommand = "az backup policy set";
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup policy show".
        /// Show details of a particular policy.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupPolicy")]
        public dynamic BackupPolicyShow(BackupPolicyShowSettings settings) {
            var baseCommand = "az backup policy show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup protection backup-now".
        /// Perform an on-demand backup of a backed up item.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupProtection")]
        public dynamic BackupProtectionBackupNow(BackupProtectionBackupNowSettings settings) {
            var baseCommand = "az backup protection backup-now";
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--retain-until", settings.RetainUntil);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup protection check-vm".
        /// Find out whether the virtual machine is protected or not. If protected, it returns the recovery services vault ID, otherwise it returns empty.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupProtection")]
        public dynamic BackupProtectionCheckVm(BackupProtectionCheckVmSettings settings) {
            var baseCommand = "az backup protection check-vm";
            AppendIfNonNull(ref baseCommand, "--vm-id", settings.VmId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup protection disable".
        /// Stop protecting a backed up item. Can retain the backed up data forever or choose to delete it.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupProtection")]
        public dynamic BackupProtectionDisable(BackupProtectionDisableSettings settings) {
            var baseCommand = "az backup protection disable";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--delete-backup-data", settings.DeleteBackupData);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup protection enable-for-azurefileshare".
        /// Start protecting a previously unprotected Azure File share within an Azure Storage account as per the specified policy to a Recovery services vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupProtection")]
        public dynamic BackupProtectionEnableForAzurefileshare(BackupProtectionEnableForAzurefileshareSettings settings) {
            var baseCommand = "az backup protection enable-for-azurefileshare";
            AppendIfNonNull(ref baseCommand, "--azure-file-share", settings.AzureFileShare);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup protection enable-for-vm".
        /// Start protecting a previously unprotected Azure VM as per the specified policy to a Recovery services vault.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupProtection")]
        public dynamic BackupProtectionEnableForVm(BackupProtectionEnableForVmSettings settings) {
            var baseCommand = "az backup protection enable-for-vm";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--vm", settings.Vm);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup recoverypoint list".
        /// List all recovery points of a backed up item.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRecoverypoint")]
        public dynamic BackupRecoverypointList(BackupRecoverypointListSettings settings) {
            var baseCommand = "az backup recoverypoint list";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup recoverypoint show".
        /// Shows details of a particular recovery point.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRecoverypoint")]
        public dynamic BackupRecoverypointShow(BackupRecoverypointShowSettings settings) {
            var baseCommand = "az backup recoverypoint show";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--backup-management-type", settings.BackupManagementType);
            AppendIfNonNull(ref baseCommand, "--workload-type", settings.WorkloadType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup restore restore-azurefiles".
        /// Restore backed up Azure Workloads in a Recovery services vault to another registered container or to the same container.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRestore")]
        public dynamic BackupRestoreRestoreAzurefiles(BackupRestoreRestoreAzurefilesSettings settings) {
            var baseCommand = "az backup restore restore-azurefiles";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--resolve-conflict", settings.ResolveConflict);
            AppendIfNonNull(ref baseCommand, "--restore-mode", settings.RestoreMode);
            AppendIfNonNull(ref baseCommand, "--rp-name", settings.RpName);
            AppendIfNonNull(ref baseCommand, "--source-file-path", settings.SourceFilePath);
            AppendIfNonNull(ref baseCommand, "--source-file-type", settings.SourceFileType);
            AppendIfNonNull(ref baseCommand, "--target-file-share", settings.TargetFileShare);
            AppendIfNonNull(ref baseCommand, "--target-folder", settings.TargetFolder);
            AppendIfNonNull(ref baseCommand, "--target-storage-account", settings.TargetStorageAccount);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup restore restore-azurefileshare".
        /// Restore backed up Azure Workloads in a Recovery services vault to another registered container or to the same container.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRestore")]
        public dynamic BackupRestoreRestoreAzurefileshare(BackupRestoreRestoreAzurefileshareSettings settings) {
            var baseCommand = "az backup restore restore-azurefileshare";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--resolve-conflict", settings.ResolveConflict);
            AppendIfNonNull(ref baseCommand, "--restore-mode", settings.RestoreMode);
            AppendIfNonNull(ref baseCommand, "--rp-name", settings.RpName);
            AppendIfNonNull(ref baseCommand, "--target-file-share", settings.TargetFileShare);
            AppendIfNonNull(ref baseCommand, "--target-folder", settings.TargetFolder);
            AppendIfNonNull(ref baseCommand, "--target-storage-account", settings.TargetStorageAccount);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup restore restore-disks".
        /// Restore disks of the backed VM from the specified recovery point.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRestore")]
        public dynamic BackupRestoreRestoreDisks(BackupRestoreRestoreDisksSettings settings) {
            var baseCommand = "az backup restore restore-disks";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--rp-name", settings.RpName);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--restore-to-staging-storage-account", settings.RestoreToStagingStorageAccount);
            AppendIfNonNull(ref baseCommand, "--target-resource-group", settings.TargetResourceGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup restore files mount-rp".
        /// Download a script which mounts files of a recovery point.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRestoreFiles")]
        public dynamic BackupRestoreFilesMountRp(BackupRestoreFilesMountRpSettings settings) {
            var baseCommand = "az backup restore files mount-rp";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--rp-name", settings.RpName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup restore files unmount-rp".
        /// Close access to the recovery point.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupRestoreFiles")]
        public dynamic BackupRestoreFilesUnmountRp(BackupRestoreFilesUnmountRpSettings settings) {
            var baseCommand = "az backup restore files unmount-rp";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--item-name", settings.ItemName);
            AppendIfNonNull(ref baseCommand, "--rp-name", settings.RpName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup vault create".
        /// Create a new Recovery Services vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupVault")]
        public dynamic BackupVaultCreate(BackupVaultCreateSettings settings) {
            var baseCommand = "az backup vault create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup vault delete".
        /// Delete an existing Recovery services vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupVault")]
        public dynamic BackupVaultDelete(BackupVaultDeleteSettings settings) {
            var baseCommand = "az backup vault delete";
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup vault list".
        /// List Recovery service vaults within a subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupVault")]
        public dynamic BackupVaultList(BackupVaultListSettings settings) {
            var baseCommand = "az backup vault list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup vault show".
        /// Show details of a particular Recovery service vault.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupVault")]
        public dynamic BackupVaultShow(BackupVaultShowSettings settings) {
            var baseCommand = "az backup vault show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup vault backup-properties set".
        /// Sets backup related properties of the Recovery Services vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupVaultBackupProperties")]
        public dynamic BackupVaultBackupPropertiesSet(BackupVaultBackupPropertiesSetSettings settings) {
            var baseCommand = "az backup vault backup-properties set";
            AppendIfNonNull(ref baseCommand, "--backup-storage-redundancy", settings.BackupStorageRedundancy);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az backup vault backup-properties show".
        /// Gets backup related properties of the Recovery Services vault.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBackupVaultBackupProperties")]
        public dynamic BackupVaultBackupPropertiesShow(BackupVaultBackupPropertiesShowSettings settings) {
            var baseCommand = "az backup vault backup-properties show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch account create".
        /// Create a Batch account with the specified parameters.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccount")]
        public dynamic BatchAccountCreate(BatchAccountCreateSettings settings) {
            var baseCommand = "az batch account create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch account delete".
        /// Deletes the specified Batch account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccount")]
        public dynamic BatchAccountDelete(BatchAccountDeleteSettings settings) {
            var baseCommand = "az batch account delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch account list".
        /// List the Batch accounts associated with a subscription or resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccount")]
        public dynamic BatchAccountList(BatchAccountListSettings settings) {
            var baseCommand = "az batch account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch account login".
        /// Log in to a Batch account through Azure Active Directory or Shared Key authentication.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccount")]
        public dynamic BatchAccountLogin(BatchAccountLoginSettings settings) {
            var baseCommand = "az batch account login";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--shared-key-auth", settings.SharedKeyAuth);
            AppendIfNonNull(ref baseCommand, "--show", settings.Show);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch account set".
        /// Update properties for a Batch account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccount")]
        public dynamic BatchAccountSet(BatchAccountSetSettings settings) {
            var baseCommand = "az batch account set";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch account show".
        /// Get a specified Batch account or the currently set account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccount")]
        public dynamic BatchAccountShow(BatchAccountShowSettings settings) {
            var baseCommand = "az batch account show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch account autostorage-keys sync".
        /// Synchronizes access keys for the auto-storage account configured for the specified Batch account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccountAutostorageKeys")]
        public dynamic BatchAccountAutostorageKeysSync(BatchAccountAutostorageKeysSyncSettings settings) {
            var baseCommand = "az batch account autostorage-keys sync";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch account keys list".
        /// Gets the account keys for the specified Batch account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccountKeys")]
        public dynamic BatchAccountKeysList(BatchAccountKeysListSettings settings) {
            var baseCommand = "az batch account keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch account keys renew".
        /// Regenerates the specified account key for the Batch account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchAccountKeys")]
        public dynamic BatchAccountKeysRenew(BatchAccountKeysRenewSettings settings) {
            var baseCommand = "az batch account keys renew";
            AppendIfNonNull(ref baseCommand, "--key-name", settings.KeyName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch application create".
        /// Adds an application to the specified Batch account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplication")]
        public dynamic BatchApplicationCreate(BatchApplicationCreateSettings settings) {
            var baseCommand = "az batch application create";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch application delete".
        /// Deletes an application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplication")]
        public dynamic BatchApplicationDelete(BatchApplicationDeleteSettings settings) {
            var baseCommand = "az batch application delete";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch application list".
        /// Lists all of the applications in the specified account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplication")]
        public dynamic BatchApplicationList(BatchApplicationListSettings settings) {
            var baseCommand = "az batch application list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch application set".
        /// Update properties for a Batch application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplication")]
        public dynamic BatchApplicationSet(BatchApplicationSetSettings settings) {
            var baseCommand = "az batch application set";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allow-updates", settings.AllowUpdates);
            AppendIfNonNull(ref baseCommand, "--default-version", settings.DefaultVersion);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch application show".
        /// Gets information about the specified application.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplication")]
        public dynamic BatchApplicationShow(BatchApplicationShowSettings settings) {
            var baseCommand = "az batch application show";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch application package activate".
        /// Activates a Batch application package.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationPackage")]
        public dynamic BatchApplicationPackageActivate(BatchApplicationPackageActivateSettings settings) {
            var baseCommand = "az batch application package activate";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--format", settings.Format);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--version-name", settings.VersionName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch application package create".
        /// Create a Batch application package record and activate it.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationPackage")]
        public dynamic BatchApplicationPackageCreate(BatchApplicationPackageCreateSettings settings) {
            var baseCommand = "az batch application package create";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--package-file", settings.PackageFile);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--version-name", settings.VersionName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch application package delete".
        /// Deletes an application package record and its associated binary file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationPackage")]
        public dynamic BatchApplicationPackageDelete(BatchApplicationPackageDeleteSettings settings) {
            var baseCommand = "az batch application package delete";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--version-name", settings.VersionName);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch application package list".
        /// Lists all of the application packages in the specified application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationPackage")]
        public dynamic BatchApplicationPackageList(BatchApplicationPackageListSettings settings) {
            var baseCommand = "az batch application package list";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch application package show".
        /// Gets information about the specified application package.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationPackage")]
        public dynamic BatchApplicationPackageShow(BatchApplicationPackageShowSettings settings) {
            var baseCommand = "az batch application package show";
            AppendIfNonNull(ref baseCommand, "--application-name", settings.ApplicationName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--version-name", settings.VersionName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch application summary list".
        /// Lists all of the applications available in the specified account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationSummary")]
        public dynamic BatchApplicationSummaryList(BatchApplicationSummaryListSettings settings) {
            var baseCommand = "az batch application summary list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch application summary show".
        /// Gets information about the specified application.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchApplicationSummary")]
        public dynamic BatchApplicationSummaryShow(BatchApplicationSummaryShowSettings settings) {
            var baseCommand = "az batch application summary show";
            AppendIfNonNull(ref baseCommand, "--application-id", settings.ApplicationId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch certificate create".
        /// Add a certificate to a Batch account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchCertificate")]
        public dynamic BatchCertificateCreate(BatchCertificateCreateSettings settings) {
            var baseCommand = "az batch certificate create";
            AppendIfNonNull(ref baseCommand, "--certificate-file", settings.CertificateFile);
            AppendIfNonNull(ref baseCommand, "--thumbprint", settings.Thumbprint);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch certificate delete".
        /// Delete a certificate from a Batch account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchCertificate")]
        public dynamic BatchCertificateDelete(BatchCertificateDeleteSettings settings) {
            var baseCommand = "az batch certificate delete";
            AppendIfNonNull(ref baseCommand, "--thumbprint", settings.Thumbprint);
            AppendIfNonNull(ref baseCommand, "--abort", settings.Abort);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch certificate list".
        /// Lists all of the Certificates that have been added to the specified Account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchCertificate")]
        public dynamic BatchCertificateList(BatchCertificateListSettings settings) {
            var baseCommand = "az batch certificate list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch certificate show".
        /// Gets information about the specified Certificate.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchCertificate")]
        public dynamic BatchCertificateShow(BatchCertificateShowSettings settings) {
            var baseCommand = "az batch certificate show";
            AppendIfNonNull(ref baseCommand, "--thumbprint", settings.Thumbprint);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job create".
        /// Add a job to a Batch account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public dynamic BatchJobCreate(BatchJobCreateSettings settings) {
            var baseCommand = "az batch job create";
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--uses-task-dependencies", settings.UsesTaskDependencies);
            AppendIfNonNull(ref baseCommand, "--job-max-task-retry-count", settings.JobMaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--job-max-wall-clock-time", settings.JobMaxWallClockTime);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-command-line", settings.JobManagerTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-environment-settings", settings.JobManagerTaskEnvironmentSettings);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-id", settings.JobManagerTaskId);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-resource-files", settings.JobManagerTaskResourceFiles);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job delete".
        /// Deletes a Job.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public dynamic BatchJobDelete(BatchJobDeleteSettings settings) {
            var baseCommand = "az batch job delete";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job disable".
        /// Disables the specified Job, preventing new Tasks from running.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public dynamic BatchJobDisable(BatchJobDisableSettings settings) {
            var baseCommand = "az batch job disable";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--disable-tasks", settings.DisableTasks);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job enable".
        /// Enables the specified Job, allowing new Tasks to run.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public dynamic BatchJobEnable(BatchJobEnableSettings settings) {
            var baseCommand = "az batch job enable";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job list".
        /// List all of the jobs or job schedule in a Batch account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public dynamic BatchJobList(BatchJobListSettings settings) {
            var baseCommand = "az batch job list";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job reset".
        /// Update the properties of a Batch job. Unspecified properties which can be updated are reset to their defaults.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public dynamic BatchJobReset(BatchJobResetSettings settings) {
            var baseCommand = "az batch job reset";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--on-all-tasks-complete", settings.OnAllTasksComplete);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--job-max-task-retry-count", settings.JobMaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--job-max-wall-clock-time", settings.JobMaxWallClockTime);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job set".
        /// Update the properties of a Batch job. Updating a property in a subgroup will reset the unspecified properties of that group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public dynamic BatchJobSet(BatchJobSetSettings settings) {
            var baseCommand = "az batch job set";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--on-all-tasks-complete", settings.OnAllTasksComplete);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--job-max-task-retry-count", settings.JobMaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--job-max-wall-clock-time", settings.JobMaxWallClockTime);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job show".
        /// Gets information about the specified Job.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public dynamic BatchJobShow(BatchJobShowSettings settings) {
            var baseCommand = "az batch job show";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job stop".
        /// Terminates the specified Job, marking it as completed.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJob")]
        public dynamic BatchJobStop(BatchJobStopSettings settings) {
            var baseCommand = "az batch job stop";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--terminate-reason", settings.TerminateReason);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job all-statistics show".
        /// Get lifetime summary statistics for all of the jobs in a Batch account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobAllStatistics")]
        public dynamic BatchJobAllStatisticsShow(BatchJobAllStatisticsShowSettings settings) {
            var baseCommand = "az batch job all-statistics show";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job prep-release-status list".
        /// Lists the execution status of the Job Preparation and Job Release Task for the specified Job across the Compute Nodes where the Job has run.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobPrepReleaseStatus")]
        public dynamic BatchJobPrepReleaseStatusList(BatchJobPrepReleaseStatusListSettings settings) {
            var baseCommand = "az batch job prep-release-status list";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job task-counts show".
        /// Gets the Task counts for the specified Job.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobTaskCounts")]
        public dynamic BatchJobTaskCountsShow(BatchJobTaskCountsShowSettings settings) {
            var baseCommand = "az batch job task-counts show";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job-schedule create".
        /// Add a Batch job schedule to an account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public dynamic BatchJobScheduleCreate(BatchJobScheduleCreateSettings settings) {
            var baseCommand = "az batch job-schedule create";
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--on-all-tasks-complete", settings.OnAllTasksComplete);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--uses-task-dependencies", settings.UsesTaskDependencies);
            AppendIfNonNull(ref baseCommand, "--job-max-task-retry-count", settings.JobMaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--job-max-wall-clock-time", settings.JobMaxWallClockTime);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-command-line", settings.JobManagerTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-id", settings.JobManagerTaskId);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-resource-files", settings.JobManagerTaskResourceFiles);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--do-not-run-after", settings.DoNotRunAfter);
            AppendIfNonNull(ref baseCommand, "--do-not-run-until", settings.DoNotRunUntil);
            AppendIfNonNull(ref baseCommand, "--recurrence-interval", settings.RecurrenceInterval);
            AppendIfNonNull(ref baseCommand, "--start-window", settings.StartWindow);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job-schedule delete".
        /// Deletes a Job Schedule from the specified Account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public dynamic BatchJobScheduleDelete(BatchJobScheduleDeleteSettings settings) {
            var baseCommand = "az batch job-schedule delete";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job-schedule disable".
        /// Disables a Job Schedule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public dynamic BatchJobScheduleDisable(BatchJobScheduleDisableSettings settings) {
            var baseCommand = "az batch job-schedule disable";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job-schedule enable".
        /// Enables a Job Schedule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public dynamic BatchJobScheduleEnable(BatchJobScheduleEnableSettings settings) {
            var baseCommand = "az batch job-schedule enable";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job-schedule list".
        /// Lists all of the Job Schedules in the specified Account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public dynamic BatchJobScheduleList(BatchJobScheduleListSettings settings) {
            var baseCommand = "az batch job-schedule list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job-schedule reset".
        /// Reset the properties of a job schedule.  An updated job specification only applies to new jobs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public dynamic BatchJobScheduleReset(BatchJobScheduleResetSettings settings) {
            var baseCommand = "az batch job-schedule reset";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--job-metadata", settings.JobMetadata);
            AppendIfNonNull(ref baseCommand, "--on-all-tasks-complete", settings.OnAllTasksComplete);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--uses-task-dependencies", settings.UsesTaskDependencies);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-application-package-references", settings.JobManagerTaskApplicationPackageReferences);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-command-line", settings.JobManagerTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-environment-settings", settings.JobManagerTaskEnvironmentSettings);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-id", settings.JobManagerTaskId);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-resource-files", settings.JobManagerTaskResourceFiles);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--do-not-run-after", settings.DoNotRunAfter);
            AppendIfNonNull(ref baseCommand, "--do-not-run-until", settings.DoNotRunUntil);
            AppendIfNonNull(ref baseCommand, "--recurrence-interval", settings.RecurrenceInterval);
            AppendIfNonNull(ref baseCommand, "--start-window", settings.StartWindow);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job-schedule set".
        /// Update the properties of a job schedule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public dynamic BatchJobScheduleSet(BatchJobScheduleSetSettings settings) {
            var baseCommand = "az batch job-schedule set";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--job-metadata", settings.JobMetadata);
            AppendIfNonNull(ref baseCommand, "--on-all-tasks-complete", settings.OnAllTasksComplete);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--uses-task-dependencies", settings.UsesTaskDependencies);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-application-package-references", settings.JobManagerTaskApplicationPackageReferences);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-command-line", settings.JobManagerTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-environment-settings", settings.JobManagerTaskEnvironmentSettings);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-id", settings.JobManagerTaskId);
            AppendIfNonNull(ref baseCommand, "--job-manager-task-resource-files", settings.JobManagerTaskResourceFiles);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--do-not-run-after", settings.DoNotRunAfter);
            AppendIfNonNull(ref baseCommand, "--do-not-run-until", settings.DoNotRunUntil);
            AppendIfNonNull(ref baseCommand, "--recurrence-interval", settings.RecurrenceInterval);
            AppendIfNonNull(ref baseCommand, "--start-window", settings.StartWindow);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job-schedule show".
        /// Gets information about the specified Job Schedule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public dynamic BatchJobScheduleShow(BatchJobScheduleShowSettings settings) {
            var baseCommand = "az batch job-schedule show";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch job-schedule stop".
        /// Terminates a Job Schedule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchJobSchedule")]
        public dynamic BatchJobScheduleStop(BatchJobScheduleStopSettings settings) {
            var baseCommand = "az batch job-schedule stop";
            AppendIfNonNull(ref baseCommand, "--job-schedule-id", settings.JobScheduleId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch location quotas show".
        /// Gets the Batch service quotas for the specified subscription at the given location.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchLocationQuotas")]
        public dynamic BatchLocationQuotasShow(BatchLocationQuotasShowSettings settings) {
            var baseCommand = "az batch location quotas show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node delete".
        /// Removes Compute Nodes from the specified Pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNode")]
        public dynamic BatchNodeDelete(BatchNodeDeleteSettings settings) {
            var baseCommand = "az batch node delete";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--node-deallocation-option", settings.NodeDeallocationOption);
            AppendIfNonNull(ref baseCommand, "--node-list", settings.NodeList);
            AppendIfNonNull(ref baseCommand, "--resize-timeout", settings.ResizeTimeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node list".
        /// Lists the Compute Nodes in the specified Pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNode")]
        public dynamic BatchNodeList(BatchNodeListSettings settings) {
            var baseCommand = "az batch node list";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node reboot".
        /// Restarts the specified Compute Node.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNode")]
        public dynamic BatchNodeReboot(BatchNodeRebootSettings settings) {
            var baseCommand = "az batch node reboot";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--node-reboot-option", settings.NodeRebootOption);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node reimage".
        /// Reinstalls the operating system on the specified Compute Node.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNode")]
        public dynamic BatchNodeReimage(BatchNodeReimageSettings settings) {
            var baseCommand = "az batch node reimage";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--node-reimage-option", settings.NodeReimageOption);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node show".
        /// Gets information about the specified Compute Node.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNode")]
        public dynamic BatchNodeShow(BatchNodeShowSettings settings) {
            var baseCommand = "az batch node show";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node file delete".
        /// Deletes the specified file from the Compute Node.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeFile")]
        public dynamic BatchNodeFileDelete(BatchNodeFileDeleteSettings settings) {
            var baseCommand = "az batch node file delete";
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--recursive", settings.Recursive);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node file download".
        /// Download the content of the a node file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeFile")]
        public dynamic BatchNodeFileDownload(BatchNodeFileDownloadSettings settings) {
            var baseCommand = "az batch node file download";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--end-range", settings.EndRange);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--start-range", settings.StartRange);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node file list".
        /// Lists all of the files in Task directories on the specified Compute Node.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeFile")]
        public dynamic BatchNodeFileList(BatchNodeFileListSettings settings) {
            var baseCommand = "az batch node file list";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--recursive", settings.Recursive);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node file show".
        /// Gets the properties of the specified Compute Node file.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeFile")]
        public dynamic BatchNodeFileShow(BatchNodeFileShowSettings settings) {
            var baseCommand = "az batch node file show";
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node remote-desktop download".
        /// Gets the Remote Desktop Protocol file for the specified Compute Node.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeRemoteDesktop")]
        public dynamic BatchNodeRemoteDesktopDownload(BatchNodeRemoteDesktopDownloadSettings settings) {
            var baseCommand = "az batch node remote-desktop download";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node remote-login-settings show".
        /// Gets the settings required for remote login to a Compute Node.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeRemoteLoginSettings")]
        public dynamic BatchNodeRemoteLoginSettingsShow(BatchNodeRemoteLoginSettingsShowSettings settings) {
            var baseCommand = "az batch node remote-login-settings show";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node scheduling disable".
        /// Disables Task scheduling on the specified Compute Node.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeScheduling")]
        public dynamic BatchNodeSchedulingDisable(BatchNodeSchedulingDisableSettings settings) {
            var baseCommand = "az batch node scheduling disable";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--node-disable-scheduling-option", settings.NodeDisableSchedulingOption);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node scheduling enable".
        /// Enables Task scheduling on the specified Compute Node.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeScheduling")]
        public dynamic BatchNodeSchedulingEnable(BatchNodeSchedulingEnableSettings settings) {
            var baseCommand = "az batch node scheduling enable";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node service-logs upload".
        /// Upload Azure Batch service log files from the specified Compute Node to Azure Blob Storage.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeServiceLogs")]
        public dynamic BatchNodeServiceLogsUpload(BatchNodeServiceLogsUploadSettings settings) {
            var baseCommand = "az batch node service-logs upload";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-url", settings.ContainerUrl);
            AppendIfNonNull(ref baseCommand, "--end-time", settings.EndTime);
            AppendIfNonNull(ref baseCommand, "--start-time", settings.StartTime);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node user create".
        /// Add a user account to a Batch compute node.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeUser")]
        public dynamic BatchNodeUserCreate(BatchNodeUserCreateSettings settings) {
            var baseCommand = "az batch node user create";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expiry-time", settings.ExpiryTime);
            AppendIfNonNull(ref baseCommand, "--is-admin", settings.IsAdmin);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--ssh-public-key", settings.SshPublicKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node user delete".
        /// Deletes a user Account from the specified Compute Node.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeUser")]
        public dynamic BatchNodeUserDelete(BatchNodeUserDeleteSettings settings) {
            var baseCommand = "az batch node user delete";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch node user reset".
        /// Update the properties of a user account on a Batch compute node. Unspecified properties which can be updated are reset to their defaults.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchNodeUser")]
        public dynamic BatchNodeUserReset(BatchNodeUserResetSettings settings) {
            var baseCommand = "az batch node user reset";
            AppendIfNonNull(ref baseCommand, "--node-id", settings.NodeId);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expiry-time", settings.ExpiryTime);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--ssh-public-key", settings.SshPublicKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool create".
        /// Create a Batch pool in an account. When creating a pool, choose arguments from either Cloud Services Configuration or Virtual Machine Configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public dynamic BatchPoolCreate(BatchPoolCreateSettings settings) {
            var baseCommand = "az batch pool create";
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--application-licenses", settings.ApplicationLicenses);
            AppendIfNonNull(ref baseCommand, "--application-package-references", settings.ApplicationPackageReferences);
            AppendIfNonNull(ref baseCommand, "--auto-scale-formula", settings.AutoScaleFormula);
            AppendIfNonNull(ref baseCommand, "--certificate-references", settings.CertificateReferences);
            AppendIfNonNull(ref baseCommand, "--enable-inter-node-communication", settings.EnableInterNodeCommunication);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--max-tasks-per-node", settings.MaxTasksPerNode);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--resize-timeout", settings.ResizeTimeout);
            AppendIfNonNull(ref baseCommand, "--target-dedicated-nodes", settings.TargetDedicatedNodes);
            AppendIfNonNull(ref baseCommand, "--target-low-priority-nodes", settings.TargetLowPriorityNodes);
            AppendIfNonNull(ref baseCommand, "--vm-size", settings.VmSize);
            AppendIfNonNull(ref baseCommand, "--os-family", settings.OsFamily);
            AppendIfNonNull(ref baseCommand, "--os-version", settings.OsVersion);
            AppendIfNonNull(ref baseCommand, "--start-task-command-line", settings.StartTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--start-task-resource-files", settings.StartTaskResourceFiles);
            AppendIfNonNull(ref baseCommand, "--start-task-wait-for-success", settings.StartTaskWaitForSuccess);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--node-agent-sku-id", settings.NodeAgentSkuId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool delete".
        /// Deletes a Pool from the specified Account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public dynamic BatchPoolDelete(BatchPoolDeleteSettings settings) {
            var baseCommand = "az batch pool delete";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool list".
        /// Lists all of the Pools in the specified Account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public dynamic BatchPoolList(BatchPoolListSettings settings) {
            var baseCommand = "az batch pool list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool reset".
        /// Update the properties of a Batch pool. Unspecified properties which can be updated are reset to their defaults.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public dynamic BatchPoolReset(BatchPoolResetSettings settings) {
            var baseCommand = "az batch pool reset";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--application-package-references", settings.ApplicationPackageReferences);
            AppendIfNonNull(ref baseCommand, "--certificate-references", settings.CertificateReferences);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--start-task-command-line", settings.StartTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--start-task-environment-settings", settings.StartTaskEnvironmentSettings);
            AppendIfNonNull(ref baseCommand, "--start-task-max-task-retry-count", settings.StartTaskMaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--start-task-wait-for-success", settings.StartTaskWaitForSuccess);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool resize".
        /// Resize or stop resizing a Batch pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public dynamic BatchPoolResize(BatchPoolResizeSettings settings) {
            var baseCommand = "az batch pool resize";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--abort", settings.Abort);
            AppendIfNonNull(ref baseCommand, "--node-deallocation-option", settings.NodeDeallocationOption);
            AppendIfNonNull(ref baseCommand, "--resize-timeout", settings.ResizeTimeout);
            AppendIfNonNull(ref baseCommand, "--target-dedicated-nodes", settings.TargetDedicatedNodes);
            AppendIfNonNull(ref baseCommand, "--target-low-priority-nodes", settings.TargetLowPriorityNodes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool set".
        /// Update the properties of a Batch pool. Updating a property in a subgroup will reset the unspecified properties of that group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public dynamic BatchPoolSet(BatchPoolSetSettings settings) {
            var baseCommand = "az batch pool set";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--application-package-references", settings.ApplicationPackageReferences);
            AppendIfNonNull(ref baseCommand, "--certificate-references", settings.CertificateReferences);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--start-task-command-line", settings.StartTaskCommandLine);
            AppendIfNonNull(ref baseCommand, "--start-task-environment-settings", settings.StartTaskEnvironmentSettings);
            AppendIfNonNull(ref baseCommand, "--start-task-max-task-retry-count", settings.StartTaskMaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--start-task-resource-files", settings.StartTaskResourceFiles);
            AppendIfNonNull(ref baseCommand, "--start-task-wait-for-success", settings.StartTaskWaitForSuccess);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool show".
        /// Gets information about the specified Pool.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPool")]
        public dynamic BatchPoolShow(BatchPoolShowSettings settings) {
            var baseCommand = "az batch pool show";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool all-statistics show".
        /// Get lifetime summary statistics for all of the pools in a Batch account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolAllStatistics")]
        public dynamic BatchPoolAllStatisticsShow(BatchPoolAllStatisticsShowSettings settings) {
            var baseCommand = "az batch pool all-statistics show";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool autoscale disable".
        /// Disables automatic scaling for a Pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolAutoscale")]
        public dynamic BatchPoolAutoscaleDisable(BatchPoolAutoscaleDisableSettings settings) {
            var baseCommand = "az batch pool autoscale disable";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool autoscale enable".
        /// Enables automatic scaling for a Pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolAutoscale")]
        public dynamic BatchPoolAutoscaleEnable(BatchPoolAutoscaleEnableSettings settings) {
            var baseCommand = "az batch pool autoscale enable";
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--auto-scale-evaluation-interval", settings.AutoScaleEvaluationInterval);
            AppendIfNonNull(ref baseCommand, "--auto-scale-formula", settings.AutoScaleFormula);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool autoscale evaluate".
        /// Gets the result of evaluating an automatic scaling formula on the Pool.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolAutoscale")]
        public dynamic BatchPoolAutoscaleEvaluate(BatchPoolAutoscaleEvaluateSettings settings) {
            var baseCommand = "az batch pool autoscale evaluate";
            AppendIfNonNull(ref baseCommand, "--auto-scale-formula", settings.AutoScaleFormula);
            AppendIfNonNull(ref baseCommand, "--pool-id", settings.PoolId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool node-counts list".
        /// Gets the number of Compute Nodes in each state, grouped by Pool.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolNodeCounts")]
        public dynamic BatchPoolNodeCountsList(BatchPoolNodeCountsListSettings settings) {
            var baseCommand = "az batch pool node-counts list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool supported-images list".
        /// Lists all Virtual Machine Images supported by the Azure Batch service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolSupportedImages")]
        public dynamic BatchPoolSupportedImagesList(BatchPoolSupportedImagesListSettings settings) {
            var baseCommand = "az batch pool supported-images list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch pool usage-metrics list".
        /// Lists the usage metrics, aggregated by Pool across individual time intervals, for the specified Account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchPoolUsageMetrics")]
        public dynamic BatchPoolUsageMetricsList(BatchPoolUsageMetricsListSettings settings) {
            var baseCommand = "az batch pool usage-metrics list";
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--end-time", settings.EndTime);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--start-time", settings.StartTime);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch task create".
        /// Create Batch tasks.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public dynamic BatchTaskCreate(BatchTaskCreateSettings settings) {
            var baseCommand = "az batch task create";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--affinity-id", settings.AffinityId);
            AppendIfNonNull(ref baseCommand, "--application-package-references", settings.ApplicationPackageReferences);
            AppendIfNonNull(ref baseCommand, "--command-line", settings.CommandLine);
            AppendIfNonNull(ref baseCommand, "--environment-settings", settings.EnvironmentSettings);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--max-task-retry-count", settings.MaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--max-wall-clock-time", settings.MaxWallClockTime);
            AppendIfNonNull(ref baseCommand, "--resource-files", settings.ResourceFiles);
            AppendIfNonNull(ref baseCommand, "--retention-time", settings.RetentionTime);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch task delete".
        /// Deletes a Task from the specified Job.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public dynamic BatchTaskDelete(BatchTaskDeleteSettings settings) {
            var baseCommand = "az batch task delete";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch task list".
        /// Lists all of the Tasks that are associated with the specified Job.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public dynamic BatchTaskList(BatchTaskListSettings settings) {
            var baseCommand = "az batch task list";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch task reactivate".
        /// Reactivates a Task, allowing it to run again even if its retry count has been exhausted.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public dynamic BatchTaskReactivate(BatchTaskReactivateSettings settings) {
            var baseCommand = "az batch task reactivate";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch task reset".
        /// Reset the properties of a Batch task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public dynamic BatchTaskReset(BatchTaskResetSettings settings) {
            var baseCommand = "az batch task reset";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--json-file", settings.JsonFile);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--max-task-retry-count", settings.MaxTaskRetryCount);
            AppendIfNonNull(ref baseCommand, "--max-wall-clock-time", settings.MaxWallClockTime);
            AppendIfNonNull(ref baseCommand, "--retention-time", settings.RetentionTime);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch task show".
        /// Gets information about the specified Task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public dynamic BatchTaskShow(BatchTaskShowSettings settings) {
            var baseCommand = "az batch task show";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch task stop".
        /// Terminates the specified Task.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTask")]
        public dynamic BatchTaskStop(BatchTaskStopSettings settings) {
            var baseCommand = "az batch task stop";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch task file delete".
        /// Deletes the specified Task file from the Compute Node where the Task ran.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTaskFile")]
        public dynamic BatchTaskFileDelete(BatchTaskFileDeleteSettings settings) {
            var baseCommand = "az batch task file delete";
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--recursive", settings.Recursive);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch task file download".
        /// Download the content of a Batch task file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTaskFile")]
        public dynamic BatchTaskFileDownload(BatchTaskFileDownloadSettings settings) {
            var baseCommand = "az batch task file download";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--end-range", settings.EndRange);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--start-range", settings.StartRange);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch task file list".
        /// Lists the files in a Task's directory on its Compute Node.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTaskFile")]
        public dynamic BatchTaskFileList(BatchTaskFileListSettings settings) {
            var baseCommand = "az batch task file list";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--recursive", settings.Recursive);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch task file show".
        /// Gets the properties of the specified Task file.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTaskFile")]
        public dynamic BatchTaskFileShow(BatchTaskFileShowSettings settings) {
            var baseCommand = "az batch task file show";
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az batch task subtask list".
        /// Lists all of the subtasks that are associated with the specified multi-instance Task.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBatchTaskSubtask")]
        public dynamic BatchTaskSubtaskList(BatchTaskSubtaskListSettings settings) {
            var baseCommand = "az batch task subtask list";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--task-id", settings.TaskId);
            AppendIfNonNull(ref baseCommand, "--account-endpoint", settings.AccountEndpoint);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az billing enrollment-account list".
        /// Lists the enrollment accounts the caller has access to.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBillingEnrollmentAccount")]
        public dynamic BillingEnrollmentAccountList(BillingEnrollmentAccountListSettings settings) {
            var baseCommand = "az billing enrollment-account list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az billing enrollment-account show".
        /// Gets a enrollment account by name.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBillingEnrollmentAccount")]
        public dynamic BillingEnrollmentAccountShow(BillingEnrollmentAccountShowSettings settings) {
            var baseCommand = "az billing enrollment-account show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az billing invoice list".
        /// List all available invoices of the subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBillingInvoice")]
        public dynamic BillingInvoiceList(BillingInvoiceListSettings settings) {
            var baseCommand = "az billing invoice list";
            AppendIfNonNull(ref baseCommand, "--generate-download-url", settings.GenerateDownloadUrl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az billing invoice show".
        /// Retrieve invoice of specific name of the subscription.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBillingInvoice")]
        public dynamic BillingInvoiceShow(BillingInvoiceShowSettings settings) {
            var baseCommand = "az billing invoice show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az billing period list".
        /// Lists the available billing periods for a subscription in reverse chronological order.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBillingPeriod")]
        public dynamic BillingPeriodList(BillingPeriodListSettings settings) {
            var baseCommand = "az billing period list";
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--skiptoken", settings.Skiptoken);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az billing period show".
        /// Gets a named billing period.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBillingPeriod")]
        public dynamic BillingPeriodShow(BillingPeriodShowSettings settings) {
            var baseCommand = "az billing period show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot create".
        /// Create a new v4 SDK bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public dynamic BotCreate(BotCreateSettings settings) {
            var baseCommand = "az bot create";
            AppendIfNonNull(ref baseCommand, "--appid", settings.Appid);
            AppendIfNonNull(ref baseCommand, "--kind", settings.Kind);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--echo", settings.Echo);
            AppendIfNonNull(ref baseCommand, "--lang", settings.Lang);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot delete".
        /// Delete an existing bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public dynamic BotDelete(BotDeleteSettings settings) {
            var baseCommand = "az bot delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot download".
        /// Download an existing bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public dynamic BotDownload(BotDownloadSettings settings) {
            var baseCommand = "az bot download";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--save-path", settings.SavePath);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot prepare-deploy".
        /// Add scripts/config files for publishing with `az webapp deployment`.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public dynamic BotPrepareDeploy(BotPrepareDeploySettings settings) {
            var baseCommand = "az bot prepare-deploy";
            AppendIfNonNull(ref baseCommand, "--lang", settings.Lang);
            AppendIfNonNull(ref baseCommand, "--code-dir", settings.CodeDir);
            AppendIfNonNull(ref baseCommand, "--proj-file-path", settings.ProjFilePath);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot prepare-publish".
        /// (Maintenance mode) Add scripts to your local source code directory to be able to publish back using `az bot publish` for v3 SDK bots.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public dynamic BotPreparePublish(BotPreparePublishSettings settings) {
            var baseCommand = "az bot prepare-publish";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--proj-file-path", settings.ProjFilePath);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sln-name", settings.SlnName);
            AppendIfNonNull(ref baseCommand, "--code-dir", settings.CodeDir);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot publish".
        /// Publish to a bot's associated app service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public dynamic BotPublish(BotPublishSettings settings) {
            var baseCommand = "az bot publish";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--code-dir", settings.CodeDir);
            AppendIfNonNull(ref baseCommand, "--keep-node-modules", settings.KeepNodeModules);
            AppendIfNonNull(ref baseCommand, "--proj-file-path", settings.ProjFilePath);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot show".
        /// Get an existing bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public dynamic BotShow(BotShowSettings settings) {
            var baseCommand = "az bot show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--msbot", settings.Msbot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot update".
        /// Update an existing bot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBot")]
        public dynamic BotUpdate(BotUpdateSettings settings) {
            var baseCommand = "az bot update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--ai-api-key", settings.AiApiKey);
            AppendIfNonNull(ref baseCommand, "--ai-app-id", settings.AiAppId);
            AppendIfNonNull(ref baseCommand, "--ai-key", settings.AiKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot authsetting create".
        /// Create an OAuth connection setting on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotAuthsetting")]
        public dynamic BotAuthsettingCreate(BotAuthsettingCreateSettings settings) {
            var baseCommand = "az bot authsetting create";
            AppendIfNonNull(ref baseCommand, "--client-id", settings.ClientId);
            AppendIfNonNull(ref baseCommand, "--client-secret", settings.ClientSecret);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--provider-scope-string", settings.ProviderScopeString);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service", settings.Service);
            AppendIfNonNull(ref baseCommand, "--setting-name", settings.SettingName);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot authsetting delete".
        /// Delete an OAuth connection setting on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotAuthsetting")]
        public dynamic BotAuthsettingDelete(BotAuthsettingDeleteSettings settings) {
            var baseCommand = "az bot authsetting delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--setting-name", settings.SettingName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot authsetting list".
        /// Show all OAuth connection settings on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotAuthsetting")]
        public dynamic BotAuthsettingList(BotAuthsettingListSettings settings) {
            var baseCommand = "az bot authsetting list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot authsetting list-providers".
        /// List details for all service providers available for creating OAuth connection settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotAuthsetting")]
        public dynamic BotAuthsettingListProviders(BotAuthsettingListProvidersSettings settings) {
            var baseCommand = "az bot authsetting list-providers";
            AppendIfNonNull(ref baseCommand, "--provider-name", settings.ProviderName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot authsetting show".
        /// Show details of an OAuth connection setting on a bot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotAuthsetting")]
        public dynamic BotAuthsettingShow(BotAuthsettingShowSettings settings) {
            var baseCommand = "az bot authsetting show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--setting-name", settings.SettingName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot directline create".
        /// Create the DirectLine Channel on a bot with only v3 protocol enabled.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotDirectline")]
        public dynamic BotDirectlineCreate(BotDirectlineCreateSettings settings) {
            var baseCommand = "az bot directline create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--disablev1", settings.Disablev1);
            AppendIfNonNull(ref baseCommand, "--disablev3", settings.Disablev3);
            AppendIfNonNull(ref baseCommand, "--site-name", settings.SiteName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot directline delete".
        /// Delete the Directline Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotDirectline")]
        public dynamic BotDirectlineDelete(BotDirectlineDeleteSettings settings) {
            var baseCommand = "az bot directline delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot directline show".
        /// Get details of the Directline Channel on a bot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotDirectline")]
        public dynamic BotDirectlineShow(BotDirectlineShowSettings settings) {
            var baseCommand = "az bot directline show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot email create".
        /// Create the Email Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotEmail")]
        public dynamic BotEmailCreate(BotEmailCreateSettings settings) {
            var baseCommand = "az bot email create";
            AppendIfNonNull(ref baseCommand, "--email-address", settings.EmailAddress);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot email delete".
        /// Delete the email Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotEmail")]
        public dynamic BotEmailDelete(BotEmailDeleteSettings settings) {
            var baseCommand = "az bot email delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot email show".
        /// Get details of the email Channel on a bot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotEmail")]
        public dynamic BotEmailShow(BotEmailShowSettings settings) {
            var baseCommand = "az bot email show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot facebook create".
        /// Create the Facebook Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotFacebook")]
        public dynamic BotFacebookCreate(BotFacebookCreateSettings settings) {
            var baseCommand = "az bot facebook create";
            AppendIfNonNull(ref baseCommand, "--appid", settings.Appid);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--page-id", settings.PageId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--secret", settings.Secret);
            AppendIfNonNull(ref baseCommand, "--token", settings.Token);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot facebook delete".
        /// Delete the Facebook Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotFacebook")]
        public dynamic BotFacebookDelete(BotFacebookDeleteSettings settings) {
            var baseCommand = "az bot facebook delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot facebook show".
        /// Get details of the Facebook Channel on a bot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotFacebook")]
        public dynamic BotFacebookShow(BotFacebookShowSettings settings) {
            var baseCommand = "az bot facebook show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot kik create".
        /// Create the Kik Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotKik")]
        public dynamic BotKikCreate(BotKikCreateSettings settings) {
            var baseCommand = "az bot kik create";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--is-validated", settings.IsValidated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot kik delete".
        /// Delete the Kik Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotKik")]
        public dynamic BotKikDelete(BotKikDeleteSettings settings) {
            var baseCommand = "az bot kik delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot kik show".
        /// Get details of the Kik Channel on a bot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotKik")]
        public dynamic BotKikShow(BotKikShowSettings settings) {
            var baseCommand = "az bot kik show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot msteams create".
        /// Create the Microsoft Teams Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotMsteams")]
        public dynamic BotMsteamsCreate(BotMsteamsCreateSettings settings) {
            var baseCommand = "az bot msteams create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--calling-web-hook", settings.CallingWebHook);
            AppendIfNonNull(ref baseCommand, "--enable-calling", settings.EnableCalling);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot msteams delete".
        /// Delete the Microsoft Teams Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotMsteams")]
        public dynamic BotMsteamsDelete(BotMsteamsDeleteSettings settings) {
            var baseCommand = "az bot msteams delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot msteams show".
        /// Get details of the Microsoft Teams Channel on a bot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotMsteams")]
        public dynamic BotMsteamsShow(BotMsteamsShowSettings settings) {
            var baseCommand = "az bot msteams show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot skype create".
        /// Create the Skype Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSkype")]
        public dynamic BotSkypeCreate(BotSkypeCreateSettings settings) {
            var baseCommand = "az bot skype create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--calling-web-hook", settings.CallingWebHook);
            AppendIfNonNull(ref baseCommand, "--enable-calling", settings.EnableCalling);
            AppendIfNonNull(ref baseCommand, "--enable-groups", settings.EnableGroups);
            AppendIfNonNull(ref baseCommand, "--enable-media-cards", settings.EnableMediaCards);
            AppendIfNonNull(ref baseCommand, "--enable-messaging", settings.EnableMessaging);
            AppendIfNonNull(ref baseCommand, "--enable-screen-sharing", settings.EnableScreenSharing);
            AppendIfNonNull(ref baseCommand, "--enable-video", settings.EnableVideo);
            AppendIfNonNull(ref baseCommand, "--groups-mode", settings.GroupsMode);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot skype delete".
        /// Delete the Skype Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSkype")]
        public dynamic BotSkypeDelete(BotSkypeDeleteSettings settings) {
            var baseCommand = "az bot skype delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot skype show".
        /// Get details of the Skype Channel on a bot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSkype")]
        public dynamic BotSkypeShow(BotSkypeShowSettings settings) {
            var baseCommand = "az bot skype show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot slack create".
        /// Create the Slack Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSlack")]
        public dynamic BotSlackCreate(BotSlackCreateSettings settings) {
            var baseCommand = "az bot slack create";
            AppendIfNonNull(ref baseCommand, "--client-id", settings.ClientId);
            AppendIfNonNull(ref baseCommand, "--client-secret", settings.ClientSecret);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--verification-token", settings.VerificationToken);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--landing-page-url", settings.LandingPageUrl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot slack delete".
        /// Delete the Slack Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSlack")]
        public dynamic BotSlackDelete(BotSlackDeleteSettings settings) {
            var baseCommand = "az bot slack delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot slack show".
        /// Get details of the Slack Channel on a bot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSlack")]
        public dynamic BotSlackShow(BotSlackShowSettings settings) {
            var baseCommand = "az bot slack show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot sms create".
        /// Create the SMS Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSms")]
        public dynamic BotSmsCreate(BotSmsCreateSettings settings) {
            var baseCommand = "az bot sms create";
            AppendIfNonNull(ref baseCommand, "--account-sid", settings.AccountSid);
            AppendIfNonNull(ref baseCommand, "--auth-token", settings.AuthToken);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--phone", settings.Phone);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--is-validated", settings.IsValidated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot sms delete".
        /// Delete the SMS Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSms")]
        public dynamic BotSmsDelete(BotSmsDeleteSettings settings) {
            var baseCommand = "az bot sms delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot sms show".
        /// Get details of the SMS Channel on a bot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotSms")]
        public dynamic BotSmsShow(BotSmsShowSettings settings) {
            var baseCommand = "az bot sms show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot telegram create".
        /// Create the Telegram Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotTelegram")]
        public dynamic BotTelegramCreate(BotTelegramCreateSettings settings) {
            var baseCommand = "az bot telegram create";
            AppendIfNonNull(ref baseCommand, "--access-token", settings.AccessToken);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add-disabled", settings.AddDisabled);
            AppendIfNonNull(ref baseCommand, "--is-validated", settings.IsValidated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot telegram delete".
        /// Delete the Telegram Channel on a bot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotTelegram")]
        public dynamic BotTelegramDelete(BotTelegramDeleteSettings settings) {
            var baseCommand = "az bot telegram delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot telegram show".
        /// Get details of the Telegram Channel on a bot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotTelegram")]
        public dynamic BotTelegramShow(BotTelegramShowSettings settings) {
            var baseCommand = "az bot telegram show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az bot webchat show".
        /// Get details of the Webchat Channel on a bot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzBotWebchat")]
        public dynamic BotWebchatShow(BotWebchatShowSettings settings) {
            var baseCommand = "az bot webchat show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--with-secrets", settings.WithSecrets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cache delete".
        /// Delete an object from the cache.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCache")]
        public dynamic CacheDelete(CacheDeleteSettings settings) {
            var baseCommand = "az cache delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cache list".
        /// List the contents of the object cache.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCache")]
        public dynamic CacheList(CacheListSettings settings) {
            var baseCommand = "az cache list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cache purge".
        /// Clear the entire CLI object cache.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCache")]
        public dynamic CachePurge(CachePurgeSettings settings) {
            var baseCommand = "az cache purge";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cache show".
        /// Show the contents of a specific object in the cache.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCache")]
        public dynamic CacheShow(CacheShowSettings settings) {
            var baseCommand = "az cache show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn name-exists".
        /// Check the availability of a resource name.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdn")]
        public dynamic CdnNameExists(CdnNameExistsSettings settings) {
            var baseCommand = "az cdn name-exists";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn usage".
        /// Check the quota and actual usage of the CDN profiles under the given subscription.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdn")]
        public dynamic CdnUsage(CdnUsageSettings settings) {
            var baseCommand = "az cdn usage";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn custom-domain create".
        /// Create a new custom domain to provide a hostname for a CDN endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnCustomDomain")]
        public dynamic CdnCustomDomainCreate(CdnCustomDomainCreateSettings settings) {
            var baseCommand = "az cdn custom-domain create";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--hostname", settings.Hostname);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn custom-domain delete".
        /// Delete the custom domain of a CDN.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnCustomDomain")]
        public dynamic CdnCustomDomainDelete(CdnCustomDomainDeleteSettings settings) {
            var baseCommand = "az cdn custom-domain delete";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn custom-domain disable-https".
        /// Disable https delivery of the custom domain.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnCustomDomain")]
        public dynamic CdnCustomDomainDisableHttps(CdnCustomDomainDisableHttpsSettings settings) {
            var baseCommand = "az cdn custom-domain disable-https";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn custom-domain enable-https".
        /// Enable https delivery of the custom domain.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnCustomDomain")]
        public dynamic CdnCustomDomainEnableHttps(CdnCustomDomainEnableHttpsSettings settings) {
            var baseCommand = "az cdn custom-domain enable-https";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--custom-domain-https-parameters", settings.CustomDomainHttpsParameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn custom-domain list".
        /// Lists all of the existing custom domains within an endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnCustomDomain")]
        public dynamic CdnCustomDomainList(CdnCustomDomainListSettings settings) {
            var baseCommand = "az cdn custom-domain list";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn custom-domain show".
        /// Show details for the custom domain of a CDN.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnCustomDomain")]
        public dynamic CdnCustomDomainShow(CdnCustomDomainShowSettings settings) {
            var baseCommand = "az cdn custom-domain show";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn edge-node list".
        /// Edgenodes are the global Point of Presence (POP) locations used to deliver CDN content to end users.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEdgeNode")]
        public dynamic CdnEdgeNodeList(CdnEdgeNodeListSettings settings) {
            var baseCommand = "az cdn edge-node list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn endpoint create".
        /// Create a named endpoint to connect to a CDN.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public dynamic CdnEndpointCreate(CdnEndpointCreateSettings settings) {
            var baseCommand = "az cdn endpoint create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--origin", settings.Origin);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--content-types-to-compress", settings.ContentTypesToCompress);
            AppendIfNonNull(ref baseCommand, "--enable-compression", settings.EnableCompression);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-http", settings.NoHttp);
            AppendIfNonNull(ref baseCommand, "--no-https", settings.NoHttps);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--origin-host-header", settings.OriginHostHeader);
            AppendIfNonNull(ref baseCommand, "--origin-path", settings.OriginPath);
            AppendIfNonNull(ref baseCommand, "--query-string-caching", settings.QueryStringCaching);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn endpoint delete".
        /// Delete a CDN endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public dynamic CdnEndpointDelete(CdnEndpointDeleteSettings settings) {
            var baseCommand = "az cdn endpoint delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn endpoint list".
        /// List available endpoints for a CDN.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public dynamic CdnEndpointList(CdnEndpointListSettings settings) {
            var baseCommand = "az cdn endpoint list";
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn endpoint load".
        /// Pre-load content for a CDN endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public dynamic CdnEndpointLoad(CdnEndpointLoadSettings settings) {
            var baseCommand = "az cdn endpoint load";
            AppendIfNonNull(ref baseCommand, "--content-paths", settings.ContentPaths);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn endpoint purge".
        /// Purge pre-loaded content for a CDN endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public dynamic CdnEndpointPurge(CdnEndpointPurgeSettings settings) {
            var baseCommand = "az cdn endpoint purge";
            AppendIfNonNull(ref baseCommand, "--content-paths", settings.ContentPaths);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn endpoint show".
        /// Gets an existing CDN endpoint with the specified endpoint name under the specified subscription, resource group and profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public dynamic CdnEndpointShow(CdnEndpointShowSettings settings) {
            var baseCommand = "az cdn endpoint show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn endpoint start".
        /// Start a CDN endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public dynamic CdnEndpointStart(CdnEndpointStartSettings settings) {
            var baseCommand = "az cdn endpoint start";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn endpoint stop".
        /// Stop a CDN endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public dynamic CdnEndpointStop(CdnEndpointStopSettings settings) {
            var baseCommand = "az cdn endpoint stop";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn endpoint update".
        /// Update a CDN endpoint to manage how content is delivered.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public dynamic CdnEndpointUpdate(CdnEndpointUpdateSettings settings) {
            var baseCommand = "az cdn endpoint update";
            AppendIfNonNull(ref baseCommand, "--content-types-to-compress", settings.ContentTypesToCompress);
            AppendIfNonNull(ref baseCommand, "--enable-compression", settings.EnableCompression);
            AppendIfNonNull(ref baseCommand, "--no-http", settings.NoHttp);
            AppendIfNonNull(ref baseCommand, "--no-https", settings.NoHttps);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--origin-host-header", settings.OriginHostHeader);
            AppendIfNonNull(ref baseCommand, "--origin-path", settings.OriginPath);
            AppendIfNonNull(ref baseCommand, "--query-string-caching", settings.QueryStringCaching);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn endpoint validate-custom-domain".
        /// Validates the custom domain mapping to ensure it maps to the correct CDN endpoint in DNS.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnEndpoint")]
        public dynamic CdnEndpointValidateCustomDomain(CdnEndpointValidateCustomDomainSettings settings) {
            var baseCommand = "az cdn endpoint validate-custom-domain";
            AppendIfNonNull(ref baseCommand, "--host-name", settings.HostName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn origin list".
        /// Lists all of the existing origins within an endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnOrigin")]
        public dynamic CdnOriginList(CdnOriginListSettings settings) {
            var baseCommand = "az cdn origin list";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn origin show".
        /// Gets an existing origin within an endpoint.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnOrigin")]
        public dynamic CdnOriginShow(CdnOriginShowSettings settings) {
            var baseCommand = "az cdn origin show";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn profile create".
        /// Create a new CDN profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnProfile")]
        public dynamic CdnProfileCreate(CdnProfileCreateSettings settings) {
            var baseCommand = "az cdn profile create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn profile delete".
        /// Delete a CDN profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnProfile")]
        public dynamic CdnProfileDelete(CdnProfileDeleteSettings settings) {
            var baseCommand = "az cdn profile delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn profile list".
        /// List CDN profiles.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnProfile")]
        public dynamic CdnProfileList(CdnProfileListSettings settings) {
            var baseCommand = "az cdn profile list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn profile show".
        /// Gets a CDN profile with the specified profile name under the specified subscription and resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnProfile")]
        public dynamic CdnProfileShow(CdnProfileShowSettings settings) {
            var baseCommand = "az cdn profile show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn profile update".
        /// Update a CDN profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnProfile")]
        public dynamic CdnProfileUpdate(CdnProfileUpdateSettings settings) {
            var baseCommand = "az cdn profile update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cdn profile usage".
        /// Checks the quota and actual usage of endpoints under the given CDN profile.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCdnProfile")]
        public dynamic CdnProfileUsage(CdnProfileUsageSettings settings) {
            var baseCommand = "az cdn profile usage";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cloud list".
        /// List registered clouds.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public dynamic CloudList(CloudListSettings settings) {
            var baseCommand = "az cloud list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cloud list-profiles".
        /// List the supported profiles for a cloud.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public dynamic CloudListProfiles(CloudListProfilesSettings settings) {
            var baseCommand = "az cloud list-profiles";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--show-all", settings.ShowAll);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cloud register".
        /// Register a cloud.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public dynamic CloudRegister(CloudRegisterSettings settings) {
            var baseCommand = "az cloud register";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--cloud-config", settings.CloudConfig);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory", settings.EndpointActiveDirectory);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory-data-lake-resource-id", settings.EndpointActiveDirectoryDataLakeResourceId);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory-graph-resource-id", settings.EndpointActiveDirectoryGraphResourceId);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory-resource-id", settings.EndpointActiveDirectoryResourceId);
            AppendIfNonNull(ref baseCommand, "--endpoint-gallery", settings.EndpointGallery);
            AppendIfNonNull(ref baseCommand, "--endpoint-management", settings.EndpointManagement);
            AppendIfNonNull(ref baseCommand, "--endpoint-resource-manager", settings.EndpointResourceManager);
            AppendIfNonNull(ref baseCommand, "--endpoint-sql-management", settings.EndpointSqlManagement);
            AppendIfNonNull(ref baseCommand, "--endpoint-vm-image-alias-doc", settings.EndpointVmImageAliasDoc);
            AppendIfNonNull(ref baseCommand, "--profile", settings.Profile);
            AppendIfNonNull(ref baseCommand, "--suffix-acr-login-server-endpoint", settings.SuffixAcrLoginServerEndpoint);
            AppendIfNonNull(ref baseCommand, "--suffix-azure-datalake-analytics-catalog-and-job-endpoint", settings.SuffixAzureDatalakeAnalyticsCatalogAndJobEndpoint);
            AppendIfNonNull(ref baseCommand, "--suffix-azure-datalake-store-file-system-endpoint", settings.SuffixAzureDatalakeStoreFileSystemEndpoint);
            AppendIfNonNull(ref baseCommand, "--suffix-keyvault-dns", settings.SuffixKeyvaultDns);
            AppendIfNonNull(ref baseCommand, "--suffix-sql-server-hostname", settings.SuffixSqlServerHostname);
            AppendIfNonNull(ref baseCommand, "--suffix-storage-endpoint", settings.SuffixStorageEndpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cloud set".
        /// Set the active cloud.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public dynamic CloudSet(CloudSetSettings settings) {
            var baseCommand = "az cloud set";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile", settings.Profile);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cloud show".
        /// Get the details of a registered cloud.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public dynamic CloudShow(CloudShowSettings settings) {
            var baseCommand = "az cloud show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cloud unregister".
        /// Unregister a cloud.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public dynamic CloudUnregister(CloudUnregisterSettings settings) {
            var baseCommand = "az cloud unregister";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cloud update".
        /// Update the configuration of a cloud.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCloud")]
        public dynamic CloudUpdate(CloudUpdateSettings settings) {
            var baseCommand = "az cloud update";
            AppendIfNonNull(ref baseCommand, "--cloud-config", settings.CloudConfig);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory", settings.EndpointActiveDirectory);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory-data-lake-resource-id", settings.EndpointActiveDirectoryDataLakeResourceId);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory-graph-resource-id", settings.EndpointActiveDirectoryGraphResourceId);
            AppendIfNonNull(ref baseCommand, "--endpoint-active-directory-resource-id", settings.EndpointActiveDirectoryResourceId);
            AppendIfNonNull(ref baseCommand, "--endpoint-gallery", settings.EndpointGallery);
            AppendIfNonNull(ref baseCommand, "--endpoint-management", settings.EndpointManagement);
            AppendIfNonNull(ref baseCommand, "--endpoint-resource-manager", settings.EndpointResourceManager);
            AppendIfNonNull(ref baseCommand, "--endpoint-sql-management", settings.EndpointSqlManagement);
            AppendIfNonNull(ref baseCommand, "--endpoint-vm-image-alias-doc", settings.EndpointVmImageAliasDoc);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile", settings.Profile);
            AppendIfNonNull(ref baseCommand, "--suffix-acr-login-server-endpoint", settings.SuffixAcrLoginServerEndpoint);
            AppendIfNonNull(ref baseCommand, "--suffix-azure-datalake-analytics-catalog-and-job-endpoint", settings.SuffixAzureDatalakeAnalyticsCatalogAndJobEndpoint);
            AppendIfNonNull(ref baseCommand, "--suffix-azure-datalake-store-file-system-endpoint", settings.SuffixAzureDatalakeStoreFileSystemEndpoint);
            AppendIfNonNull(ref baseCommand, "--suffix-keyvault-dns", settings.SuffixKeyvaultDns);
            AppendIfNonNull(ref baseCommand, "--suffix-sql-server-hostname", settings.SuffixSqlServerHostname);
            AppendIfNonNull(ref baseCommand, "--suffix-storage-endpoint", settings.SuffixStorageEndpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account create".
        /// Manage Azure Cognitive Services accounts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public dynamic CognitiveservicesAccountCreate(CognitiveservicesAccountCreateSettings settings) {
            var baseCommand = "az cognitiveservices account create";
            AppendIfNonNull(ref baseCommand, "--kind", settings.Kind);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--api-properties", settings.ApiProperties);
            AppendIfNonNull(ref baseCommand, "--custom-domain", settings.CustomDomain);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account delete".
        /// Manage Azure Cognitive Services accounts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public dynamic CognitiveservicesAccountDelete(CognitiveservicesAccountDeleteSettings settings) {
            var baseCommand = "az cognitiveservices account delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account list".
        /// Manage Azure Cognitive Services accounts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public dynamic CognitiveservicesAccountList(CognitiveservicesAccountListSettings settings) {
            var baseCommand = "az cognitiveservices account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account list-kinds".
        /// List all valid kinds for Azure Cognitive Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public dynamic CognitiveservicesAccountListKinds(CognitiveservicesAccountListKindsSettings settings) {
            var baseCommand = "az cognitiveservices account list-kinds";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account list-skus".
        /// Manage Azure Cognitive Services accounts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public dynamic CognitiveservicesAccountListSkus(CognitiveservicesAccountListSkusSettings settings) {
            var baseCommand = "az cognitiveservices account list-skus";
            AppendIfNonNull(ref baseCommand, "--kind", settings.Kind);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account list-usage".
        /// List usages for Azure Cognitive Services account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public dynamic CognitiveservicesAccountListUsage(CognitiveservicesAccountListUsageSettings settings) {
            var baseCommand = "az cognitiveservices account list-usage";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account show".
        /// Manage Azure Cognitive Services accounts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public dynamic CognitiveservicesAccountShow(CognitiveservicesAccountShowSettings settings) {
            var baseCommand = "az cognitiveservices account show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account update".
        /// Manage Azure Cognitive Services accounts.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccount")]
        public dynamic CognitiveservicesAccountUpdate(CognitiveservicesAccountUpdateSettings settings) {
            var baseCommand = "az cognitiveservices account update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--api-properties", settings.ApiProperties);
            AppendIfNonNull(ref baseCommand, "--custom-domain", settings.CustomDomain);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account keys list".
        /// Manage Azure Cognitive Services accounts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccountKeys")]
        public dynamic CognitiveservicesAccountKeysList(CognitiveservicesAccountKeysListSettings settings) {
            var baseCommand = "az cognitiveservices account keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account keys regenerate".
        /// Manage Azure Cognitive Services accounts.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccountKeys")]
        public dynamic CognitiveservicesAccountKeysRegenerate(CognitiveservicesAccountKeysRegenerateSettings settings) {
            var baseCommand = "az cognitiveservices account keys regenerate";
            AppendIfNonNull(ref baseCommand, "--key-name", settings.KeyName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account network-rule add".
        /// Add a network rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccountNetworkRule")]
        public dynamic CognitiveservicesAccountNetworkRuleAdd(CognitiveservicesAccountNetworkRuleAddSettings settings) {
            var baseCommand = "az cognitiveservices account network-rule add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account network-rule list".
        /// List network rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccountNetworkRule")]
        public dynamic CognitiveservicesAccountNetworkRuleList(CognitiveservicesAccountNetworkRuleListSettings settings) {
            var baseCommand = "az cognitiveservices account network-rule list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cognitiveservices account network-rule remove".
        /// Remove a network rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCognitiveservicesAccountNetworkRule")]
        public dynamic CognitiveservicesAccountNetworkRuleRemove(CognitiveservicesAccountNetworkRuleRemoveSettings settings) {
            var baseCommand = "az cognitiveservices account network-rule remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az consumption budget create".
        /// Create a budget for an Azure subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionBudget")]
        public dynamic ConsumptionBudgetCreate(ConsumptionBudgetCreateSettings settings) {
            var baseCommand = "az consumption budget create";
            AppendIfNonNull(ref baseCommand, "--amount", settings.Amount);
            AppendIfNonNull(ref baseCommand, "--budget-name", settings.BudgetName);
            AppendIfNonNull(ref baseCommand, "--category", settings.Category);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--time-grain", settings.TimeGrain);
            AppendIfNonNull(ref baseCommand, "--meter-filter", settings.MeterFilter);
            AppendIfNonNull(ref baseCommand, "--resource-filter", settings.ResourceFilter);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group-filter", settings.ResourceGroupFilter);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az consumption budget delete".
        /// Delete a budget for an Azure subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionBudget")]
        public dynamic ConsumptionBudgetDelete(ConsumptionBudgetDeleteSettings settings) {
            var baseCommand = "az consumption budget delete";
            AppendIfNonNull(ref baseCommand, "--budget-name", settings.BudgetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az consumption budget list".
        /// List budgets for an Azure subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionBudget")]
        public dynamic ConsumptionBudgetList(ConsumptionBudgetListSettings settings) {
            var baseCommand = "az consumption budget list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az consumption budget show".
        /// Show budget for an Azure subscription.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionBudget")]
        public dynamic ConsumptionBudgetShow(ConsumptionBudgetShowSettings settings) {
            var baseCommand = "az consumption budget show";
            AppendIfNonNull(ref baseCommand, "--budget-name", settings.BudgetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az consumption marketplace list".
        /// List the marketplace for an Azure subscription within a billing period.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionMarketplace")]
        public dynamic ConsumptionMarketplaceList(ConsumptionMarketplaceListSettings settings) {
            var baseCommand = "az consumption marketplace list";
            AppendIfNonNull(ref baseCommand, "--billing-period-name", settings.BillingPeriodName);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az consumption pricesheet show".
        /// Show the price sheet for an Azure subscription within a billing period.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionPricesheet")]
        public dynamic ConsumptionPricesheetShow(ConsumptionPricesheetShowSettings settings) {
            var baseCommand = "az consumption pricesheet show";
            AppendIfNonNull(ref baseCommand, "--billing-period-name", settings.BillingPeriodName);
            AppendIfNonNull(ref baseCommand, "--include-meter-details", settings.IncludeMeterDetails);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az consumption reservation detail list".
        /// List the details of a reservation by order id or reservation id.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionReservationDetail")]
        public dynamic ConsumptionReservationDetailList(ConsumptionReservationDetailListSettings settings) {
            var baseCommand = "az consumption reservation detail list";
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--reservation-id", settings.ReservationId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az consumption reservation summary list".
        /// List reservation summaries for daily or monthly by order Id or reservation id.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionReservationSummary")]
        public dynamic ConsumptionReservationSummaryList(ConsumptionReservationSummaryListSettings settings) {
            var baseCommand = "az consumption reservation summary list";
            AppendIfNonNull(ref baseCommand, "--grain", settings.Grain);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--reservation-id", settings.ReservationId);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az consumption usage list".
        /// List the details of Azure resource consumption, either as an invoice or within a billing period.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzConsumptionUsage")]
        public dynamic ConsumptionUsageList(ConsumptionUsageListSettings settings) {
            var baseCommand = "az consumption usage list";
            AppendIfNonNull(ref baseCommand, "--billing-period-name", settings.BillingPeriodName);
            AppendIfNonNull(ref baseCommand, "--end-date", settings.EndDate);
            AppendIfNonNull(ref baseCommand, "--include-additional-properties", settings.IncludeAdditionalProperties);
            AppendIfNonNull(ref baseCommand, "--include-meter-details", settings.IncludeMeterDetails);
            AppendIfNonNull(ref baseCommand, "--start-date", settings.StartDate);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az container attach".
        /// Attach local standard output and error streams to a container in a container group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public dynamic ContainerAttach(ContainerAttachSettings settings) {
            var baseCommand = "az container attach";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az container create".
        /// Create a container group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public dynamic ContainerCreate(ContainerCreateSettings settings) {
            var baseCommand = "az container create";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--command-line", settings.CommandLine);
            AppendIfNonNull(ref baseCommand, "--cpu", settings.Cpu);
            AppendIfNonNull(ref baseCommand, "--dns-name-label", settings.DnsNameLabel);
            AppendIfNonNull(ref baseCommand, "--environment-variables", settings.EnvironmentVariables);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--memory", settings.Memory);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--ports", settings.Ports);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--restart-policy", settings.RestartPolicy);
            AppendIfNonNull(ref baseCommand, "--secrets", settings.Secrets);
            AppendIfNonNull(ref baseCommand, "--secrets-mount-path", settings.SecretsMountPath);
            AppendIfNonNull(ref baseCommand, "--secure-environment-variables", settings.SecureEnvironmentVariables);
            AppendIfNonNull(ref baseCommand, "--azure-file-volume-account-key", settings.AzureFileVolumeAccountKey);
            AppendIfNonNull(ref baseCommand, "--azure-file-volume-account-name", settings.AzureFileVolumeAccountName);
            AppendIfNonNull(ref baseCommand, "--azure-file-volume-mount-path", settings.AzureFileVolumeMountPath);
            AppendIfNonNull(ref baseCommand, "--azure-file-volume-share-name", settings.AzureFileVolumeShareName);
            AppendIfNonNull(ref baseCommand, "--gitrepo-dir", settings.GitrepoDir);
            AppendIfNonNull(ref baseCommand, "--gitrepo-mount-path", settings.GitrepoMountPath);
            AppendIfNonNull(ref baseCommand, "--gitrepo-revision", settings.GitrepoRevision);
            AppendIfNonNull(ref baseCommand, "--gitrepo-url", settings.GitrepoUrl);
            AppendIfNonNull(ref baseCommand, "--registry-login-server", settings.RegistryLoginServer);
            AppendIfNonNull(ref baseCommand, "--registry-password", settings.RegistryPassword);
            AppendIfNonNull(ref baseCommand, "--registry-username", settings.RegistryUsername);
            AppendIfNonNull(ref baseCommand, "--log-analytics-workspace", settings.LogAnalyticsWorkspace);
            AppendIfNonNull(ref baseCommand, "--log-analytics-workspace-key", settings.LogAnalyticsWorkspaceKey);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--network-profile", settings.NetworkProfile);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--subnet-address-prefix", settings.SubnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--vnet-address-prefix", settings.VnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az container delete".
        /// Delete a container group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public dynamic ContainerDelete(ContainerDeleteSettings settings) {
            var baseCommand = "az container delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az container exec".
        /// Execute a command from within a running container of a container group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public dynamic ContainerExec(ContainerExecSettings settings) {
            var baseCommand = "az container exec";
            AppendIfNonNull(ref baseCommand, "--exec-command", settings.ExecCommand);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--terminal-col-size", settings.TerminalColSize);
            AppendIfNonNull(ref baseCommand, "--terminal-row-size", settings.TerminalRowSize);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az container export".
        /// Export a container group in yaml format.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public dynamic ContainerExport(ContainerExportSettings settings) {
            var baseCommand = "az container export";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az container list".
        /// List container groups.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public dynamic ContainerList(ContainerListSettings settings) {
            var baseCommand = "az container list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az container logs".
        /// Examine the logs for a container in a container group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public dynamic ContainerLogs(ContainerLogsSettings settings) {
            var baseCommand = "az container logs";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--follow", settings.Follow);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az container restart".
        /// Restarts all containers in a container group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public dynamic ContainerRestart(ContainerRestartSettings settings) {
            var baseCommand = "az container restart";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az container show".
        /// Get the details of a container group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public dynamic ContainerShow(ContainerShowSettings settings) {
            var baseCommand = "az container show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az container start".
        /// Starts all containers in a container group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public dynamic ContainerStart(ContainerStartSettings settings) {
            var baseCommand = "az container start";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az container stop".
        /// Stops all containers in a container group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzContainer")]
        public dynamic ContainerStop(ContainerStopSettings settings) {
            var baseCommand = "az container stop";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb check-name-exists".
        /// Checks if an Azure Cosmos DB account name exists.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public dynamic CosmosdbCheckNameExists(CosmosdbCheckNameExistsSettings settings) {
            var baseCommand = "az cosmosdb check-name-exists";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb create".
        /// Creates a new Azure Cosmos DB database account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public dynamic CosmosdbCreate(CosmosdbCreateSettings settings) {
            var baseCommand = "az cosmosdb create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--capabilities", settings.Capabilities);
            AppendIfNonNull(ref baseCommand, "--default-consistency-level", settings.DefaultConsistencyLevel);
            AppendIfNonNull(ref baseCommand, "--enable-automatic-failover", settings.EnableAutomaticFailover);
            AppendIfNonNull(ref baseCommand, "--enable-multiple-write-locations", settings.EnableMultipleWriteLocations);
            AppendIfNonNull(ref baseCommand, "--enable-virtual-network", settings.EnableVirtualNetwork);
            AppendIfNonNull(ref baseCommand, "--ip-range-filter", settings.IpRangeFilter);
            AppendIfNonNull(ref baseCommand, "--kind", settings.Kind);
            AppendIfNonNull(ref baseCommand, "--locations", settings.Locations);
            AppendIfNonNull(ref baseCommand, "--max-interval", settings.MaxInterval);
            AppendIfNonNull(ref baseCommand, "--max-staleness-prefix", settings.MaxStalenessPrefix);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--virtual-network-rules", settings.VirtualNetworkRules);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb delete".
        /// Deletes an Azure Cosmos DB database account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public dynamic CosmosdbDelete(CosmosdbDeleteSettings settings) {
            var baseCommand = "az cosmosdb delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb failover-priority-change".
        /// Changes the failover priority for the Azure Cosmos DB database account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public dynamic CosmosdbFailoverPriorityChange(CosmosdbFailoverPriorityChangeSettings settings) {
            var baseCommand = "az cosmosdb failover-priority-change";
            AppendIfNonNull(ref baseCommand, "--failover-policies", settings.FailoverPolicies);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb list".
        /// List Azure Cosmos DB database accounts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public dynamic CosmosdbList(CosmosdbListSettings settings) {
            var baseCommand = "az cosmosdb list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb show".
        /// Get the details of an Azure Cosmos DB database account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public dynamic CosmosdbShow(CosmosdbShowSettings settings) {
            var baseCommand = "az cosmosdb show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb update".
        /// Update an Azure Cosmos DB database account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdb")]
        public dynamic CosmosdbUpdate(CosmosdbUpdateSettings settings) {
            var baseCommand = "az cosmosdb update";
            AppendIfNonNull(ref baseCommand, "--capabilities", settings.Capabilities);
            AppendIfNonNull(ref baseCommand, "--default-consistency-level", settings.DefaultConsistencyLevel);
            AppendIfNonNull(ref baseCommand, "--enable-automatic-failover", settings.EnableAutomaticFailover);
            AppendIfNonNull(ref baseCommand, "--enable-multiple-write-locations", settings.EnableMultipleWriteLocations);
            AppendIfNonNull(ref baseCommand, "--enable-virtual-network", settings.EnableVirtualNetwork);
            AppendIfNonNull(ref baseCommand, "--ip-range-filter", settings.IpRangeFilter);
            AppendIfNonNull(ref baseCommand, "--locations", settings.Locations);
            AppendIfNonNull(ref baseCommand, "--max-interval", settings.MaxInterval);
            AppendIfNonNull(ref baseCommand, "--max-staleness-prefix", settings.MaxStalenessPrefix);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--virtual-network-rules", settings.VirtualNetworkRules);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra keyspace create".
        /// Create an Cassandra keyspace under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraKeyspace")]
        public dynamic CosmosdbCassandraKeyspaceCreate(CosmosdbCassandraKeyspaceCreateSettings settings) {
            var baseCommand = "az cosmosdb cassandra keyspace create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra keyspace delete".
        /// Delete the Cassandra keyspace under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraKeyspace")]
        public dynamic CosmosdbCassandraKeyspaceDelete(CosmosdbCassandraKeyspaceDeleteSettings settings) {
            var baseCommand = "az cosmosdb cassandra keyspace delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra keyspace list".
        /// List the Cassandra keyspaces under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraKeyspace")]
        public dynamic CosmosdbCassandraKeyspaceList(CosmosdbCassandraKeyspaceListSettings settings) {
            var baseCommand = "az cosmosdb cassandra keyspace list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra keyspace show".
        /// Show the details of a Cassandra keyspace under an Azure Cosmos DB account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraKeyspace")]
        public dynamic CosmosdbCassandraKeyspaceShow(CosmosdbCassandraKeyspaceShowSettings settings) {
            var baseCommand = "az cosmosdb cassandra keyspace show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra keyspace throughput show".
        /// Get the throughput of the Cassandra keyspace under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraKeyspaceThroughput")]
        public dynamic CosmosdbCassandraKeyspaceThroughputShow(CosmosdbCassandraKeyspaceThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb cassandra keyspace throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra keyspace throughput update".
        /// Update the throughput of the Cassandra keyspace under an Azure Cosmos DB account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraKeyspaceThroughput")]
        public dynamic CosmosdbCassandraKeyspaceThroughputUpdate(CosmosdbCassandraKeyspaceThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb cassandra keyspace throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra table create".
        /// Create an Cassandra table under an Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTable")]
        public dynamic CosmosdbCassandraTableCreate(CosmosdbCassandraTableCreateSettings settings) {
            var baseCommand = "az cosmosdb cassandra table create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--schema", settings.Schema);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra table delete".
        /// Delete the Cassandra table under an Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTable")]
        public dynamic CosmosdbCassandraTableDelete(CosmosdbCassandraTableDeleteSettings settings) {
            var baseCommand = "az cosmosdb cassandra table delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra table list".
        /// List the Cassandra tables under an Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTable")]
        public dynamic CosmosdbCassandraTableList(CosmosdbCassandraTableListSettings settings) {
            var baseCommand = "az cosmosdb cassandra table list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra table show".
        /// Show the details of a Cassandra table under an Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTable")]
        public dynamic CosmosdbCassandraTableShow(CosmosdbCassandraTableShowSettings settings) {
            var baseCommand = "az cosmosdb cassandra table show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra table update".
        /// Update an Cassandra table under an Azure Cosmos DB Cassandra keyspace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTable")]
        public dynamic CosmosdbCassandraTableUpdate(CosmosdbCassandraTableUpdateSettings settings) {
            var baseCommand = "az cosmosdb cassandra table update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--schema", settings.Schema);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra table throughput show".
        /// Get the throughput of the Cassandra table under an Azure Cosmos DB Cassandra keyspace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTableThroughput")]
        public dynamic CosmosdbCassandraTableThroughputShow(CosmosdbCassandraTableThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb cassandra table throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb cassandra table throughput update".
        /// Update the throughput of the Cassandra table under an Azure Cosmos DB Cassandra keyspace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCassandraTableThroughput")]
        public dynamic CosmosdbCassandraTableThroughputUpdate(CosmosdbCassandraTableThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb cassandra table throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--keyspace-name", settings.KeyspaceName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb collection create".
        /// Creates an Azure Cosmos DB collection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCollection")]
        public dynamic CosmosdbCollectionCreate(CosmosdbCollectionCreateSettings settings) {
            var baseCommand = "az cosmosdb collection create";
            AppendIfNonNull(ref baseCommand, "--collection-name", settings.CollectionName);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--default-ttl", settings.DefaultTtl);
            AppendIfNonNull(ref baseCommand, "--indexing-policy", settings.IndexingPolicy);
            AppendIfNonNull(ref baseCommand, "--partition-key-path", settings.PartitionKeyPath);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb collection delete".
        /// Deletes an Azure Cosmos DB collection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCollection")]
        public dynamic CosmosdbCollectionDelete(CosmosdbCollectionDeleteSettings settings) {
            var baseCommand = "az cosmosdb collection delete";
            AppendIfNonNull(ref baseCommand, "--collection-name", settings.CollectionName);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb collection exists".
        /// Returns a boolean indicating whether the collection exists.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCollection")]
        public dynamic CosmosdbCollectionExists(CosmosdbCollectionExistsSettings settings) {
            var baseCommand = "az cosmosdb collection exists";
            AppendIfNonNull(ref baseCommand, "--collection-name", settings.CollectionName);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb collection list".
        /// Lists all Azure Cosmos DB collections.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCollection")]
        public dynamic CosmosdbCollectionList(CosmosdbCollectionListSettings settings) {
            var baseCommand = "az cosmosdb collection list";
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb collection show".
        /// Shows an Azure Cosmos DB collection and its offer.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCollection")]
        public dynamic CosmosdbCollectionShow(CosmosdbCollectionShowSettings settings) {
            var baseCommand = "az cosmosdb collection show";
            AppendIfNonNull(ref baseCommand, "--collection-name", settings.CollectionName);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb collection update".
        /// Updates an Azure Cosmos DB collection.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbCollection")]
        public dynamic CosmosdbCollectionUpdate(CosmosdbCollectionUpdateSettings settings) {
            var baseCommand = "az cosmosdb collection update";
            AppendIfNonNull(ref baseCommand, "--collection-name", settings.CollectionName);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--default-ttl", settings.DefaultTtl);
            AppendIfNonNull(ref baseCommand, "--indexing-policy", settings.IndexingPolicy);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb database create".
        /// Creates an Azure Cosmos DB database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbDatabase")]
        public dynamic CosmosdbDatabaseCreate(CosmosdbDatabaseCreateSettings settings) {
            var baseCommand = "az cosmosdb database create";
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb database delete".
        /// Deletes an Azure Cosmos DB database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbDatabase")]
        public dynamic CosmosdbDatabaseDelete(CosmosdbDatabaseDeleteSettings settings) {
            var baseCommand = "az cosmosdb database delete";
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb database exists".
        /// Returns a boolean indicating whether the database exists.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbDatabase")]
        public dynamic CosmosdbDatabaseExists(CosmosdbDatabaseExistsSettings settings) {
            var baseCommand = "az cosmosdb database exists";
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb database list".
        /// Lists all Azure Cosmos DB databases.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbDatabase")]
        public dynamic CosmosdbDatabaseList(CosmosdbDatabaseListSettings settings) {
            var baseCommand = "az cosmosdb database list";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb database show".
        /// Shows an Azure Cosmos DB database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbDatabase")]
        public dynamic CosmosdbDatabaseShow(CosmosdbDatabaseShowSettings settings) {
            var baseCommand = "az cosmosdb database show";
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group-name", settings.ResourceGroupName);
            AppendIfNonNull(ref baseCommand, "--url-connection", settings.UrlConnection);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin database create".
        /// Create an Gremlin database under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinDatabase")]
        public dynamic CosmosdbGremlinDatabaseCreate(CosmosdbGremlinDatabaseCreateSettings settings) {
            var baseCommand = "az cosmosdb gremlin database create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin database delete".
        /// Delete the Gremlin database under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinDatabase")]
        public dynamic CosmosdbGremlinDatabaseDelete(CosmosdbGremlinDatabaseDeleteSettings settings) {
            var baseCommand = "az cosmosdb gremlin database delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin database list".
        /// List the Gremlin databases under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinDatabase")]
        public dynamic CosmosdbGremlinDatabaseList(CosmosdbGremlinDatabaseListSettings settings) {
            var baseCommand = "az cosmosdb gremlin database list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin database show".
        /// Show the details of a Gremlin database under an Azure Cosmos DB account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinDatabase")]
        public dynamic CosmosdbGremlinDatabaseShow(CosmosdbGremlinDatabaseShowSettings settings) {
            var baseCommand = "az cosmosdb gremlin database show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin database throughput show".
        /// Get the throughput of the Gremlin database under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinDatabaseThroughput")]
        public dynamic CosmosdbGremlinDatabaseThroughputShow(CosmosdbGremlinDatabaseThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb gremlin database throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin database throughput update".
        /// Update the throughput of the Gremlin database under an Azure Cosmos DB account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinDatabaseThroughput")]
        public dynamic CosmosdbGremlinDatabaseThroughputUpdate(CosmosdbGremlinDatabaseThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb gremlin database throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph create".
        /// Create an Gremlin graph under an Azure Cosmos DB Gremlin database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraph")]
        public dynamic CosmosdbGremlinGraphCreate(CosmosdbGremlinGraphCreateSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--partition-key-path", settings.PartitionKeyPath);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--conflict-resolution-policy", settings.ConflictResolutionPolicy);
            AppendIfNonNull(ref baseCommand, "--idx", settings.Idx);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph delete".
        /// Delete the Gremlin graph under an Azure Cosmos DB Gremlin database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraph")]
        public dynamic CosmosdbGremlinGraphDelete(CosmosdbGremlinGraphDeleteSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph list".
        /// List the Gremlin graphs under an Azure Cosmos DB Gremlin database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraph")]
        public dynamic CosmosdbGremlinGraphList(CosmosdbGremlinGraphListSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph show".
        /// Show the details of a Gremlin graph under an Azure Cosmos DB Gremlin database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraph")]
        public dynamic CosmosdbGremlinGraphShow(CosmosdbGremlinGraphShowSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph update".
        /// Update an Gremlin graph under an Azure Cosmos DB Gremlin database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraph")]
        public dynamic CosmosdbGremlinGraphUpdate(CosmosdbGremlinGraphUpdateSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--idx", settings.Idx);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph throughput show".
        /// Get the throughput of the Gremlin graph under an Azure Cosmos DB Gremlin database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraphThroughput")]
        public dynamic CosmosdbGremlinGraphThroughputShow(CosmosdbGremlinGraphThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb gremlin graph throughput update".
        /// Update the throughput of the Gremlin graph under an Azure Cosmos DB Gremlin database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbGremlinGraphThroughput")]
        public dynamic CosmosdbGremlinGraphThroughputUpdate(CosmosdbGremlinGraphThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb gremlin graph throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb keys list".
        /// List the access keys or connection strings for a Azure Cosmos DB database account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbKeys")]
        public dynamic CosmosdbKeysList(CosmosdbKeysListSettings settings) {
            var baseCommand = "az cosmosdb keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb keys regenerate".
        /// Regenerates an access key for the specified Azure Cosmos DB database account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbKeys")]
        public dynamic CosmosdbKeysRegenerate(CosmosdbKeysRegenerateSettings settings) {
            var baseCommand = "az cosmosdb keys regenerate";
            AppendIfNonNull(ref baseCommand, "--key-kind", settings.KeyKind);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection create".
        /// Create an MongoDB collection under an Azure Cosmos DB MongoDB database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollection")]
        public dynamic CosmosdbMongodbCollectionCreate(CosmosdbMongodbCollectionCreateSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--shard", settings.Shard);
            AppendIfNonNull(ref baseCommand, "--idx", settings.Idx);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection delete".
        /// Delete the MongoDB collection under an Azure Cosmos DB MongoDB database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollection")]
        public dynamic CosmosdbMongodbCollectionDelete(CosmosdbMongodbCollectionDeleteSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection list".
        /// List the MongoDB collections under an Azure Cosmos DB MongoDB database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollection")]
        public dynamic CosmosdbMongodbCollectionList(CosmosdbMongodbCollectionListSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection show".
        /// Show the details of a MongoDB collection under an Azure Cosmos DB MongoDB database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollection")]
        public dynamic CosmosdbMongodbCollectionShow(CosmosdbMongodbCollectionShowSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection update".
        /// Update an MongoDB collection under an Azure Cosmos DB MongoDB database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollection")]
        public dynamic CosmosdbMongodbCollectionUpdate(CosmosdbMongodbCollectionUpdateSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--idx", settings.Idx);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection throughput show".
        /// Get the throughput of the MongoDB collection under an Azure Cosmos DB MongoDB database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollectionThroughput")]
        public dynamic CosmosdbMongodbCollectionThroughputShow(CosmosdbMongodbCollectionThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb collection throughput update".
        /// Update the throughput of the MongoDB collection under an Azure Cosmos DB MongoDB database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbCollectionThroughput")]
        public dynamic CosmosdbMongodbCollectionThroughputUpdate(CosmosdbMongodbCollectionThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb mongodb collection throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb database create".
        /// Create an MongoDB database under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbDatabase")]
        public dynamic CosmosdbMongodbDatabaseCreate(CosmosdbMongodbDatabaseCreateSettings settings) {
            var baseCommand = "az cosmosdb mongodb database create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb database delete".
        /// Delete the MongoDB database under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbDatabase")]
        public dynamic CosmosdbMongodbDatabaseDelete(CosmosdbMongodbDatabaseDeleteSettings settings) {
            var baseCommand = "az cosmosdb mongodb database delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb database list".
        /// List the MongoDB databases under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbDatabase")]
        public dynamic CosmosdbMongodbDatabaseList(CosmosdbMongodbDatabaseListSettings settings) {
            var baseCommand = "az cosmosdb mongodb database list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb database show".
        /// Show the details of a MongoDB database under an Azure Cosmos DB account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbDatabase")]
        public dynamic CosmosdbMongodbDatabaseShow(CosmosdbMongodbDatabaseShowSettings settings) {
            var baseCommand = "az cosmosdb mongodb database show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb database throughput show".
        /// Get the throughput of the MongoDB database under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbDatabaseThroughput")]
        public dynamic CosmosdbMongodbDatabaseThroughputShow(CosmosdbMongodbDatabaseThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb mongodb database throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb mongodb database throughput update".
        /// Update the throughput of the MongoDB database under an Azure Cosmos DB account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbMongodbDatabaseThroughput")]
        public dynamic CosmosdbMongodbDatabaseThroughputUpdate(CosmosdbMongodbDatabaseThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb mongodb database throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb network-rule add".
        /// Adds a virtual network rule to an existing Cosmos DB database account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbNetworkRule")]
        public dynamic CosmosdbNetworkRuleAdd(CosmosdbNetworkRuleAddSettings settings) {
            var baseCommand = "az cosmosdb network-rule add";
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-vnet-service-endpoint", settings.IgnoreMissingVnetServiceEndpoint);
            AppendIfNonNull(ref baseCommand, "--virtual-network", settings.VirtualNetwork);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb network-rule list".
        /// Lists the virtual network accounts associated with a Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbNetworkRule")]
        public dynamic CosmosdbNetworkRuleList(CosmosdbNetworkRuleListSettings settings) {
            var baseCommand = "az cosmosdb network-rule list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb network-rule remove".
        /// Adds a virtual network rule to an existing Cosmos DB database account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbNetworkRule")]
        public dynamic CosmosdbNetworkRuleRemove(CosmosdbNetworkRuleRemoveSettings settings) {
            var baseCommand = "az cosmosdb network-rule remove";
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--virtual-network", settings.VirtualNetwork);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql container create".
        /// Create an SQL container under an Azure Cosmos DB SQL database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainer")]
        public dynamic CosmosdbSqlContainerCreate(CosmosdbSqlContainerCreateSettings settings) {
            var baseCommand = "az cosmosdb sql container create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--partition-key-path", settings.PartitionKeyPath);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--conflict-resolution-policy", settings.ConflictResolutionPolicy);
            AppendIfNonNull(ref baseCommand, "--idx", settings.Idx);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--unique-key-policy", settings.UniqueKeyPolicy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql container delete".
        /// Delete the SQL container under an Azure Cosmos DB SQL database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainer")]
        public dynamic CosmosdbSqlContainerDelete(CosmosdbSqlContainerDeleteSettings settings) {
            var baseCommand = "az cosmosdb sql container delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql container list".
        /// List the SQL containers under an Azure Cosmos DB SQL database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainer")]
        public dynamic CosmosdbSqlContainerList(CosmosdbSqlContainerListSettings settings) {
            var baseCommand = "az cosmosdb sql container list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql container show".
        /// Show the details of a SQL container under an Azure Cosmos DB SQL database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainer")]
        public dynamic CosmosdbSqlContainerShow(CosmosdbSqlContainerShowSettings settings) {
            var baseCommand = "az cosmosdb sql container show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql container update".
        /// Update an SQL container under an Azure Cosmos DB SQL database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainer")]
        public dynamic CosmosdbSqlContainerUpdate(CosmosdbSqlContainerUpdateSettings settings) {
            var baseCommand = "az cosmosdb sql container update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--idx", settings.Idx);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql container throughput show".
        /// Get the throughput of the SQL container under an Azure Cosmos DB SQL database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainerThroughput")]
        public dynamic CosmosdbSqlContainerThroughputShow(CosmosdbSqlContainerThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb sql container throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql container throughput update".
        /// Update the throughput of the SQL container under an Azure Cosmos DB SQL database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlContainerThroughput")]
        public dynamic CosmosdbSqlContainerThroughputUpdate(CosmosdbSqlContainerThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb sql container throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql database create".
        /// Create an SQL database under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlDatabase")]
        public dynamic CosmosdbSqlDatabaseCreate(CosmosdbSqlDatabaseCreateSettings settings) {
            var baseCommand = "az cosmosdb sql database create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql database delete".
        /// Delete the SQL database under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlDatabase")]
        public dynamic CosmosdbSqlDatabaseDelete(CosmosdbSqlDatabaseDeleteSettings settings) {
            var baseCommand = "az cosmosdb sql database delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql database list".
        /// List the SQL databases under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlDatabase")]
        public dynamic CosmosdbSqlDatabaseList(CosmosdbSqlDatabaseListSettings settings) {
            var baseCommand = "az cosmosdb sql database list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql database show".
        /// Show the details of a SQL database under an Azure Cosmos DB account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlDatabase")]
        public dynamic CosmosdbSqlDatabaseShow(CosmosdbSqlDatabaseShowSettings settings) {
            var baseCommand = "az cosmosdb sql database show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql database throughput show".
        /// Get the throughput of the SQL database under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlDatabaseThroughput")]
        public dynamic CosmosdbSqlDatabaseThroughputShow(CosmosdbSqlDatabaseThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb sql database throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb sql database throughput update".
        /// Update the throughput of the SQL database under an Azure Cosmos DB account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbSqlDatabaseThroughput")]
        public dynamic CosmosdbSqlDatabaseThroughputUpdate(CosmosdbSqlDatabaseThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb sql database throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb table create".
        /// Create an Table under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbTable")]
        public dynamic CosmosdbTableCreate(CosmosdbTableCreateSettings settings) {
            var baseCommand = "az cosmosdb table create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb table delete".
        /// Delete the Table under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbTable")]
        public dynamic CosmosdbTableDelete(CosmosdbTableDeleteSettings settings) {
            var baseCommand = "az cosmosdb table delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb table list".
        /// List the Tables under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbTable")]
        public dynamic CosmosdbTableList(CosmosdbTableListSettings settings) {
            var baseCommand = "az cosmosdb table list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb table show".
        /// Show the details of a Table under an Azure Cosmos DB account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbTable")]
        public dynamic CosmosdbTableShow(CosmosdbTableShowSettings settings) {
            var baseCommand = "az cosmosdb table show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb table throughput show".
        /// Get the throughput of the Table under an Azure Cosmos DB account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbTableThroughput")]
        public dynamic CosmosdbTableThroughputShow(CosmosdbTableThroughputShowSettings settings) {
            var baseCommand = "az cosmosdb table throughput show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az cosmosdb table throughput update".
        /// Update the throughput of the Table under an Azure Cosmos DB account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzCosmosdbTableThroughput")]
        public dynamic CosmosdbTableThroughputUpdate(CosmosdbTableThroughputUpdateSettings settings) {
            var baseCommand = "az cosmosdb table throughput update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--throughput", settings.Throughput);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deployment create".
        /// Start a deployment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public dynamic DeploymentCreate(DeploymentCreateSettings settings) {
            var baseCommand = "az deployment create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--handle-extended-json-format", settings.HandleExtendedJsonFormat);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--template-file", settings.TemplateFile);
            AppendIfNonNull(ref baseCommand, "--template-uri", settings.TemplateUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deployment delete".
        /// Delete a deployment at subscription scope.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public dynamic DeploymentDelete(DeploymentDeleteSettings settings) {
            var baseCommand = "az deployment delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deployment export".
        /// Export the template used for a deployment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public dynamic DeploymentExport(DeploymentExportSettings settings) {
            var baseCommand = "az deployment export";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deployment list".
        /// List deployments at subscription scope.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public dynamic DeploymentList(DeploymentListSettings settings) {
            var baseCommand = "az deployment list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deployment show".
        /// Show a deployment at subscription scope.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public dynamic DeploymentShow(DeploymentShowSettings settings) {
            var baseCommand = "az deployment show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deployment validate".
        /// Validate whether a template is syntactically correct.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public dynamic DeploymentValidate(DeploymentValidateSettings settings) {
            var baseCommand = "az deployment validate";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--handle-extended-json-format", settings.HandleExtendedJsonFormat);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--template-file", settings.TemplateFile);
            AppendIfNonNull(ref baseCommand, "--template-uri", settings.TemplateUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deployment wait".
        /// Place the CLI in a waiting state until a deployment condition is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeployment")]
        public dynamic DeploymentWait(DeploymentWaitSettings settings) {
            var baseCommand = "az deployment wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deployment operation list".
        /// List a deployment's operations.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentOperation")]
        public dynamic DeploymentOperationList(DeploymentOperationListSettings settings) {
            var baseCommand = "az deployment operation list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deployment operation show".
        /// Get a deployment's operation.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentOperation")]
        public dynamic DeploymentOperationShow(DeploymentOperationShowSettings settings) {
            var baseCommand = "az deployment operation show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--operation-ids", settings.OperationIds);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager artifact-source create".
        /// Creates an artifact source.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerArtifactSource")]
        public dynamic DeploymentmanagerArtifactSourceCreate(DeploymentmanagerArtifactSourceCreateSettings settings) {
            var baseCommand = "az deploymentmanager artifact-source create";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sas-uri", settings.SasUri);
            AppendIfNonNull(ref baseCommand, "--artifact-root", settings.ArtifactRoot);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager artifact-source delete".
        /// Deletes an artifact source.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerArtifactSource")]
        public dynamic DeploymentmanagerArtifactSourceDelete(DeploymentmanagerArtifactSourceDeleteSettings settings) {
            var baseCommand = "az deploymentmanager artifact-source delete";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager artifact-source show".
        /// Get the details of an artifact source.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerArtifactSource")]
        public dynamic DeploymentmanagerArtifactSourceShow(DeploymentmanagerArtifactSourceShowSettings settings) {
            var baseCommand = "az deploymentmanager artifact-source show";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager artifact-source update".
        /// Updates an artifact source.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerArtifactSource")]
        public dynamic DeploymentmanagerArtifactSourceUpdate(DeploymentmanagerArtifactSourceUpdateSettings settings) {
            var baseCommand = "az deploymentmanager artifact-source update";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--artifact-root", settings.ArtifactRoot);
            AppendIfNonNull(ref baseCommand, "--sas-uri", settings.SasUri);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager rollout delete".
        /// Deletes a rollout resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerRollout")]
        public dynamic DeploymentmanagerRolloutDelete(DeploymentmanagerRolloutDeleteSettings settings) {
            var baseCommand = "az deploymentmanager rollout delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager rollout restart".
        /// Restarts the rollout.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerRollout")]
        public dynamic DeploymentmanagerRolloutRestart(DeploymentmanagerRolloutRestartSettings settings) {
            var baseCommand = "az deploymentmanager rollout restart";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--skip-succeeded", settings.SkipSucceeded);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager rollout show".
        /// Gets the rollout.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerRollout")]
        public dynamic DeploymentmanagerRolloutShow(DeploymentmanagerRolloutShowSettings settings) {
            var baseCommand = "az deploymentmanager rollout show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--retry-attempt", settings.RetryAttempt);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager rollout stop".
        /// Stop the rollout.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerRollout")]
        public dynamic DeploymentmanagerRolloutStop(DeploymentmanagerRolloutStopSettings settings) {
            var baseCommand = "az deploymentmanager rollout stop";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager service create".
        /// Creates a service under the specified service topology.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerService")]
        public dynamic DeploymentmanagerServiceCreate(DeploymentmanagerServiceCreateSettings settings) {
            var baseCommand = "az deploymentmanager service create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--target-location", settings.TargetLocation);
            AppendIfNonNull(ref baseCommand, "--target-subscription-id", settings.TargetSubscriptionId);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager service delete".
        /// Deletes the service topology.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerService")]
        public dynamic DeploymentmanagerServiceDelete(DeploymentmanagerServiceDeleteSettings settings) {
            var baseCommand = "az deploymentmanager service delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager service show".
        /// Get the details of a service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerService")]
        public dynamic DeploymentmanagerServiceShow(DeploymentmanagerServiceShowSettings settings) {
            var baseCommand = "az deploymentmanager service show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager service update".
        /// Updates the service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerService")]
        public dynamic DeploymentmanagerServiceUpdate(DeploymentmanagerServiceUpdateSettings settings) {
            var baseCommand = "az deploymentmanager service update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--target-location", settings.TargetLocation);
            AppendIfNonNull(ref baseCommand, "--target-subscription-id", settings.TargetSubscriptionId);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager service-topology create".
        /// Creates a service topology.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceTopology")]
        public dynamic DeploymentmanagerServiceTopologyCreate(DeploymentmanagerServiceTopologyCreateSettings settings) {
            var baseCommand = "az deploymentmanager service-topology create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--artifact-source", settings.ArtifactSource);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager service-topology delete".
        /// Deletes the service topology.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceTopology")]
        public dynamic DeploymentmanagerServiceTopologyDelete(DeploymentmanagerServiceTopologyDeleteSettings settings) {
            var baseCommand = "az deploymentmanager service-topology delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager service-topology show".
        /// Get the details of a service topology.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceTopology")]
        public dynamic DeploymentmanagerServiceTopologyShow(DeploymentmanagerServiceTopologyShowSettings settings) {
            var baseCommand = "az deploymentmanager service-topology show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager service-topology update".
        /// Updates the service topology.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceTopology")]
        public dynamic DeploymentmanagerServiceTopologyUpdate(DeploymentmanagerServiceTopologyUpdateSettings settings) {
            var baseCommand = "az deploymentmanager service-topology update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--artifact-source", settings.ArtifactSource);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager service-unit create".
        /// Creates a service unit under the specified service and service topology.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceUnit")]
        public dynamic DeploymentmanagerServiceUnitCreate(DeploymentmanagerServiceUnitCreateSettings settings) {
            var baseCommand = "az deploymentmanager service-unit create";
            AppendIfNonNull(ref baseCommand, "--parameters-path", settings.ParametersPath);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--template-path", settings.TemplatePath);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--deployment-mode", settings.DeploymentMode);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--target-resource-group", settings.TargetResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager service-unit delete".
        /// Deletes the service unit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceUnit")]
        public dynamic DeploymentmanagerServiceUnitDelete(DeploymentmanagerServiceUnitDeleteSettings settings) {
            var baseCommand = "az deploymentmanager service-unit delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager service-unit show".
        /// Get the details of a service unit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceUnit")]
        public dynamic DeploymentmanagerServiceUnitShow(DeploymentmanagerServiceUnitShowSettings settings) {
            var baseCommand = "az deploymentmanager service-unit show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager service-unit update".
        /// Updates the service unit.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerServiceUnit")]
        public dynamic DeploymentmanagerServiceUnitUpdate(DeploymentmanagerServiceUnitUpdateSettings settings) {
            var baseCommand = "az deploymentmanager service-unit update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--service-topology-name", settings.ServiceTopologyName);
            AppendIfNonNull(ref baseCommand, "--deployment-mode", settings.DeploymentMode);
            AppendIfNonNull(ref baseCommand, "--parameters-path", settings.ParametersPath);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--target-resource-group", settings.TargetResourceGroup);
            AppendIfNonNull(ref baseCommand, "--template-path", settings.TemplatePath);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager step create".
        /// Creates the step.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerStep")]
        public dynamic DeploymentmanagerStepCreate(DeploymentmanagerStepCreateSettings settings) {
            var baseCommand = "az deploymentmanager step create";
            AppendIfNonNull(ref baseCommand, "--duration", settings.Duration);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager step delete".
        /// Deletes the step.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerStep")]
        public dynamic DeploymentmanagerStepDelete(DeploymentmanagerStepDeleteSettings settings) {
            var baseCommand = "az deploymentmanager step delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager step show".
        /// Get the details of the step.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerStep")]
        public dynamic DeploymentmanagerStepShow(DeploymentmanagerStepShowSettings settings) {
            var baseCommand = "az deploymentmanager step show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az deploymentmanager step update".
        /// Updates the step.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDeploymentmanagerStep")]
        public dynamic DeploymentmanagerStepUpdate(DeploymentmanagerStepUpdateSettings settings) {
            var baseCommand = "az deploymentmanager step update";
            AppendIfNonNull(ref baseCommand, "--duration", settings.Duration);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az disk create".
        /// Create a managed disk.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public dynamic DiskCreate(DiskCreateSettings settings) {
            var baseCommand = "az disk create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--disk-iops-read-write", settings.DiskIopsReadWrite);
            AppendIfNonNull(ref baseCommand, "--disk-mbps-read-write", settings.DiskMbpsReadWrite);
            AppendIfNonNull(ref baseCommand, "--for-upload", settings.ForUpload);
            AppendIfNonNull(ref baseCommand, "--hyper-v-generation", settings.HyperVGeneration);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--size-gb", settings.SizeGb);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--source-storage-account-id", settings.SourceStorageAccountId);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--upload-size-bytes", settings.UploadSizeBytes);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az disk delete".
        /// Delete a managed disk.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public dynamic DiskDelete(DiskDeleteSettings settings) {
            var baseCommand = "az disk delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az disk grant-access".
        /// Grant a resource access to a managed disk.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public dynamic DiskGrantAccess(DiskGrantAccessSettings settings) {
            var baseCommand = "az disk grant-access";
            AppendIfNonNull(ref baseCommand, "--duration-in-seconds", settings.DurationInSeconds);
            AppendIfNonNull(ref baseCommand, "--access-level", settings.AccessLevel);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az disk list".
        /// List managed disks.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public dynamic DiskList(DiskListSettings settings) {
            var baseCommand = "az disk list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az disk revoke-access".
        /// Revoke a resource's read access to a managed disk.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public dynamic DiskRevokeAccess(DiskRevokeAccessSettings settings) {
            var baseCommand = "az disk revoke-access";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az disk show".
        /// Gets information about a disk.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public dynamic DiskShow(DiskShowSettings settings) {
            var baseCommand = "az disk show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az disk update".
        /// Update a managed disk.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public dynamic DiskUpdate(DiskUpdateSettings settings) {
            var baseCommand = "az disk update";
            AppendIfNonNull(ref baseCommand, "--disk-iops-read-write", settings.DiskIopsReadWrite);
            AppendIfNonNull(ref baseCommand, "--disk-mbps-read-write", settings.DiskMbpsReadWrite);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--size-gb", settings.SizeGb);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az disk wait".
        /// Place the CLI in a waiting state until a condition of a managed disk is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDisk")]
        public dynamic DiskWait(DiskWaitSettings settings) {
            var baseCommand = "az disk wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account create".
        /// Create a Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccount")]
        public dynamic DlaAccountCreate(DlaAccountCreateSettings settings) {
            var baseCommand = "az dla account create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--default-data-lake-store", settings.DefaultDataLakeStore);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--max-degree-of-parallelism", settings.MaxDegreeOfParallelism);
            AppendIfNonNull(ref baseCommand, "--max-job-count", settings.MaxJobCount);
            AppendIfNonNull(ref baseCommand, "--query-store-retention", settings.QueryStoreRetention);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account delete".
        /// Delete a Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccount")]
        public dynamic DlaAccountDelete(DlaAccountDeleteSettings settings) {
            var baseCommand = "az dla account delete";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account list".
        /// List available Data Lake Analytics accounts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccount")]
        public dynamic DlaAccountList(DlaAccountListSettings settings) {
            var baseCommand = "az dla account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account show".
        /// Get the details of a Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccount")]
        public dynamic DlaAccountShow(DlaAccountShowSettings settings) {
            var baseCommand = "az dla account show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account update".
        /// Update a Data Lake Analytics account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccount")]
        public dynamic DlaAccountUpdate(DlaAccountUpdateSettings settings) {
            var baseCommand = "az dla account update";
            AppendIfNonNull(ref baseCommand, "--allow-azure-ips", settings.AllowAzureIps);
            AppendIfNonNull(ref baseCommand, "--firewall-state", settings.FirewallState);
            AppendIfNonNull(ref baseCommand, "--max-degree-of-parallelism", settings.MaxDegreeOfParallelism);
            AppendIfNonNull(ref baseCommand, "--max-job-count", settings.MaxJobCount);
            AppendIfNonNull(ref baseCommand, "--query-store-retention", settings.QueryStoreRetention);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account blob-storage add".
        /// Links an Azure Storage account to the specified Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountBlobStorage")]
        public dynamic DlaAccountBlobStorageAdd(DlaAccountBlobStorageAddSettings settings) {
            var baseCommand = "az dla account blob-storage add";
            AppendIfNonNull(ref baseCommand, "--access-key", settings.AccessKey);
            AppendIfNonNull(ref baseCommand, "--storage-account-name", settings.StorageAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account blob-storage delete".
        /// Updates the specified Data Lake Analytics account to remove an Azure Storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountBlobStorage")]
        public dynamic DlaAccountBlobStorageDelete(DlaAccountBlobStorageDeleteSettings settings) {
            var baseCommand = "az dla account blob-storage delete";
            AppendIfNonNull(ref baseCommand, "--storage-account-name", settings.StorageAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account blob-storage list".
        /// Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountBlobStorage")]
        public dynamic DlaAccountBlobStorageList(DlaAccountBlobStorageListSettings settings) {
            var baseCommand = "az dla account blob-storage list";
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account blob-storage show".
        /// Gets the specified Azure Storage account linked to the given Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountBlobStorage")]
        public dynamic DlaAccountBlobStorageShow(DlaAccountBlobStorageShowSettings settings) {
            var baseCommand = "az dla account blob-storage show";
            AppendIfNonNull(ref baseCommand, "--storage-account-name", settings.StorageAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account blob-storage update".
        /// Updates an Azure Storage account linked to the specified Data Lake Analytics account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountBlobStorage")]
        public dynamic DlaAccountBlobStorageUpdate(DlaAccountBlobStorageUpdateSettings settings) {
            var baseCommand = "az dla account blob-storage update";
            AppendIfNonNull(ref baseCommand, "--access-key", settings.AccessKey);
            AppendIfNonNull(ref baseCommand, "--storage-account-name", settings.StorageAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account compute-policy create".
        /// Create a compute policy in the Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountComputePolicy")]
        public dynamic DlaAccountComputePolicyCreate(DlaAccountComputePolicyCreateSettings settings) {
            var baseCommand = "az dla account compute-policy create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--compute-policy-name", settings.ComputePolicyName);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--object-type", settings.ObjectType);
            AppendIfNonNull(ref baseCommand, "--max-dop-per-job", settings.MaxDopPerJob);
            AppendIfNonNull(ref baseCommand, "--min-priority-per-job", settings.MinPriorityPerJob);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account compute-policy delete".
        /// Delete a compute policy in a Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountComputePolicy")]
        public dynamic DlaAccountComputePolicyDelete(DlaAccountComputePolicyDeleteSettings settings) {
            var baseCommand = "az dla account compute-policy delete";
            AppendIfNonNull(ref baseCommand, "--compute-policy-name", settings.ComputePolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account compute-policy list".
        /// List compute policies in the a Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountComputePolicy")]
        public dynamic DlaAccountComputePolicyList(DlaAccountComputePolicyListSettings settings) {
            var baseCommand = "az dla account compute-policy list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account compute-policy show".
        /// Retrieve a compute policy in a Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountComputePolicy")]
        public dynamic DlaAccountComputePolicyShow(DlaAccountComputePolicyShowSettings settings) {
            var baseCommand = "az dla account compute-policy show";
            AppendIfNonNull(ref baseCommand, "--compute-policy-name", settings.ComputePolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account compute-policy update".
        /// Update a compute policy in the Data Lake Analytics account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountComputePolicy")]
        public dynamic DlaAccountComputePolicyUpdate(DlaAccountComputePolicyUpdateSettings settings) {
            var baseCommand = "az dla account compute-policy update";
            AppendIfNonNull(ref baseCommand, "--compute-policy-name", settings.ComputePolicyName);
            AppendIfNonNull(ref baseCommand, "--max-dop-per-job", settings.MaxDopPerJob);
            AppendIfNonNull(ref baseCommand, "--min-priority-per-job", settings.MinPriorityPerJob);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account data-lake-store add".
        /// Updates the specified Data Lake Analytics account to include the additional Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountDataLakeStore")]
        public dynamic DlaAccountDataLakeStoreAdd(DlaAccountDataLakeStoreAddSettings settings) {
            var baseCommand = "az dla account data-lake-store add";
            AppendIfNonNull(ref baseCommand, "--data-lake-store-account-name", settings.DataLakeStoreAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--suffix", settings.Suffix);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account data-lake-store delete".
        /// Updates the Data Lake Analytics account specified to remove the specified Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountDataLakeStore")]
        public dynamic DlaAccountDataLakeStoreDelete(DlaAccountDataLakeStoreDeleteSettings settings) {
            var baseCommand = "az dla account data-lake-store delete";
            AppendIfNonNull(ref baseCommand, "--data-lake-store-account-name", settings.DataLakeStoreAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account data-lake-store list".
        /// Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountDataLakeStore")]
        public dynamic DlaAccountDataLakeStoreList(DlaAccountDataLakeStoreListSettings settings) {
            var baseCommand = "az dla account data-lake-store list";
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account data-lake-store show".
        /// Gets the specified Data Lake Store account details in the specified Data Lake Analytics account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountDataLakeStore")]
        public dynamic DlaAccountDataLakeStoreShow(DlaAccountDataLakeStoreShowSettings settings) {
            var baseCommand = "az dla account data-lake-store show";
            AppendIfNonNull(ref baseCommand, "--data-lake-store-account-name", settings.DataLakeStoreAccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account firewall create".
        /// Create a firewall rule in a Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountFirewall")]
        public dynamic DlaAccountFirewallCreate(DlaAccountFirewallCreateSettings settings) {
            var baseCommand = "az dla account firewall create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account firewall delete".
        /// Delete a firewall rule in a Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountFirewall")]
        public dynamic DlaAccountFirewallDelete(DlaAccountFirewallDeleteSettings settings) {
            var baseCommand = "az dla account firewall delete";
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account firewall list".
        /// List firewall rules in a Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountFirewall")]
        public dynamic DlaAccountFirewallList(DlaAccountFirewallListSettings settings) {
            var baseCommand = "az dla account firewall list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account firewall show".
        /// Retrieve a firewall rule in a Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountFirewall")]
        public dynamic DlaAccountFirewallShow(DlaAccountFirewallShowSettings settings) {
            var baseCommand = "az dla account firewall show";
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla account firewall update".
        /// Update a firewall rule in a Data Lake Analytics account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaAccountFirewall")]
        public dynamic DlaAccountFirewallUpdate(DlaAccountFirewallUpdateSettings settings) {
            var baseCommand = "az dla account firewall update";
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog assembly list".
        /// Retrieves the list of assemblies from the Data Lake Analytics catalog.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogAssembly")]
        public dynamic DlaCatalogAssemblyList(DlaCatalogAssemblyListSettings settings) {
            var baseCommand = "az dla catalog assembly list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog assembly show".
        /// Retrieves the specified assembly from the Data Lake Analytics catalog.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogAssembly")]
        public dynamic DlaCatalogAssemblyShow(DlaCatalogAssemblyShowSettings settings) {
            var baseCommand = "az dla catalog assembly show";
            AppendIfNonNull(ref baseCommand, "--assembly-name", settings.AssemblyName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog credential create".
        /// Create a new catalog credential for use with an external data source.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogCredential")]
        public dynamic DlaCatalogCredentialCreate(DlaCatalogCredentialCreateSettings settings) {
            var baseCommand = "az dla catalog credential create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--credential-name", settings.CredentialName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--uri", settings.Uri);
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog credential delete".
        /// Delete a catalog credential.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogCredential")]
        public dynamic DlaCatalogCredentialDelete(DlaCatalogCredentialDeleteSettings settings) {
            var baseCommand = "az dla catalog credential delete";
            AppendIfNonNull(ref baseCommand, "--credential-name", settings.CredentialName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--cascade", settings.Cascade);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog credential list".
        /// List catalog credentials.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogCredential")]
        public dynamic DlaCatalogCredentialList(DlaCatalogCredentialListSettings settings) {
            var baseCommand = "az dla catalog credential list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog credential show".
        /// Retrieve a catalog credential.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogCredential")]
        public dynamic DlaCatalogCredentialShow(DlaCatalogCredentialShowSettings settings) {
            var baseCommand = "az dla catalog credential show";
            AppendIfNonNull(ref baseCommand, "--credential-name", settings.CredentialName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog credential update".
        /// Update a catalog credential for use with an external data source.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogCredential")]
        public dynamic DlaCatalogCredentialUpdate(DlaCatalogCredentialUpdateSettings settings) {
            var baseCommand = "az dla catalog credential update";
            AppendIfNonNull(ref baseCommand, "--credential-name", settings.CredentialName);
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--uri", settings.Uri);
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--new-password", settings.NewPassword);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog database list".
        /// Retrieves the list of databases from the Data Lake Analytics catalog.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogDatabase")]
        public dynamic DlaCatalogDatabaseList(DlaCatalogDatabaseListSettings settings) {
            var baseCommand = "az dla catalog database list";
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog database show".
        /// Retrieves the specified database from the Data Lake Analytics catalog.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogDatabase")]
        public dynamic DlaCatalogDatabaseShow(DlaCatalogDatabaseShowSettings settings) {
            var baseCommand = "az dla catalog database show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog external-data-source list".
        /// Retrieves the list of external data sources from the Data Lake Analytics catalog.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogExternalDataSource")]
        public dynamic DlaCatalogExternalDataSourceList(DlaCatalogExternalDataSourceListSettings settings) {
            var baseCommand = "az dla catalog external-data-source list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog external-data-source show".
        /// Retrieves the specified external data source from the Data Lake Analytics catalog.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogExternalDataSource")]
        public dynamic DlaCatalogExternalDataSourceShow(DlaCatalogExternalDataSourceShowSettings settings) {
            var baseCommand = "az dla catalog external-data-source show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--external-data-source-name", settings.ExternalDataSourceName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog package list".
        /// Retrieves the list of packages from the Data Lake Analytics catalog.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogPackage")]
        public dynamic DlaCatalogPackageList(DlaCatalogPackageListSettings settings) {
            var baseCommand = "az dla catalog package list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog package show".
        /// Retrieves the specified package from the Data Lake Analytics catalog.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogPackage")]
        public dynamic DlaCatalogPackageShow(DlaCatalogPackageShowSettings settings) {
            var baseCommand = "az dla catalog package show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--package-name", settings.PackageName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog procedure list".
        /// Retrieves the list of procedures from the Data Lake Analytics catalog.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogProcedure")]
        public dynamic DlaCatalogProcedureList(DlaCatalogProcedureListSettings settings) {
            var baseCommand = "az dla catalog procedure list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog procedure show".
        /// Retrieves the specified procedure from the Data Lake Analytics catalog.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogProcedure")]
        public dynamic DlaCatalogProcedureShow(DlaCatalogProcedureShowSettings settings) {
            var baseCommand = "az dla catalog procedure show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--procedure-name", settings.ProcedureName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog schema list".
        /// Retrieves the list of schemas from the Data Lake Analytics catalog.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogSchema")]
        public dynamic DlaCatalogSchemaList(DlaCatalogSchemaListSettings settings) {
            var baseCommand = "az dla catalog schema list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog schema show".
        /// Retrieves the specified schema from the Data Lake Analytics catalog.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogSchema")]
        public dynamic DlaCatalogSchemaShow(DlaCatalogSchemaShowSettings settings) {
            var baseCommand = "az dla catalog schema show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog table list".
        /// List tables in a database or schema.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTable")]
        public dynamic DlaCatalogTableList(DlaCatalogTableListSettings settings) {
            var baseCommand = "az dla catalog table list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog table show".
        /// Retrieves the specified table from the Data Lake Analytics catalog.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTable")]
        public dynamic DlaCatalogTableShow(DlaCatalogTableShowSettings settings) {
            var baseCommand = "az dla catalog table show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog table-partition list".
        /// Retrieves the list of table partitions from the Data Lake Analytics catalog.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTablePartition")]
        public dynamic DlaCatalogTablePartitionList(DlaCatalogTablePartitionListSettings settings) {
            var baseCommand = "az dla catalog table-partition list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog table-partition show".
        /// Retrieves the specified table partition from the Data Lake Analytics catalog.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTablePartition")]
        public dynamic DlaCatalogTablePartitionShow(DlaCatalogTablePartitionShowSettings settings) {
            var baseCommand = "az dla catalog table-partition show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--partition-name", settings.PartitionName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog table-stats list".
        /// List table statistics in a database, table, or schema.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTableStats")]
        public dynamic DlaCatalogTableStatsList(DlaCatalogTableStatsListSettings settings) {
            var baseCommand = "az dla catalog table-stats list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog table-stats show".
        /// Retrieves the specified table statistics from the Data Lake Analytics catalog.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTableStats")]
        public dynamic DlaCatalogTableStatsShow(DlaCatalogTableStatsShowSettings settings) {
            var baseCommand = "az dla catalog table-stats show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--statistics-name", settings.StatisticsName);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog table-type list".
        /// Retrieves the list of table types from the Data Lake Analytics catalog.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTableType")]
        public dynamic DlaCatalogTableTypeList(DlaCatalogTableTypeListSettings settings) {
            var baseCommand = "az dla catalog table-type list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog table-type show".
        /// Retrieves the specified table type from the Data Lake Analytics catalog.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTableType")]
        public dynamic DlaCatalogTableTypeShow(DlaCatalogTableTypeShowSettings settings) {
            var baseCommand = "az dla catalog table-type show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--table-type-name", settings.TableTypeName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog tvf list".
        /// List table valued functions in a database or schema.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTvf")]
        public dynamic DlaCatalogTvfList(DlaCatalogTvfListSettings settings) {
            var baseCommand = "az dla catalog tvf list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog tvf show".
        /// Retrieves the specified table valued function from the Data Lake Analytics catalog.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogTvf")]
        public dynamic DlaCatalogTvfShow(DlaCatalogTvfShowSettings settings) {
            var baseCommand = "az dla catalog tvf show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--table-valued-function-name", settings.TableValuedFunctionName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog view list".
        /// List views in a database or schema.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogView")]
        public dynamic DlaCatalogViewList(DlaCatalogViewListSettings settings) {
            var baseCommand = "az dla catalog view list";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla catalog view show".
        /// Retrieves the specified view from the Data Lake Analytics catalog.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaCatalogView")]
        public dynamic DlaCatalogViewShow(DlaCatalogViewShowSettings settings) {
            var baseCommand = "az dla catalog view show";
            AppendIfNonNull(ref baseCommand, "--database-name", settings.DatabaseName);
            AppendIfNonNull(ref baseCommand, "--schema-name", settings.SchemaName);
            AppendIfNonNull(ref baseCommand, "--view-name", settings.ViewName);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla job cancel".
        /// Cancel a Data Lake Analytics job.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJob")]
        public dynamic DlaJobCancel(DlaJobCancelSettings settings) {
            var baseCommand = "az dla job cancel";
            AppendIfNonNull(ref baseCommand, "--job-identity", settings.JobIdentity);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla job list".
        /// List Data Lake Analytics jobs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJob")]
        public dynamic DlaJobList(DlaJobListSettings settings) {
            var baseCommand = "az dla job list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pipeline-id", settings.PipelineId);
            AppendIfNonNull(ref baseCommand, "--recurrence-id", settings.RecurrenceId);
            AppendIfNonNull(ref baseCommand, "--result", settings.Result);
            AppendIfNonNull(ref baseCommand, "--state", settings.State);
            AppendIfNonNull(ref baseCommand, "--submitted-after", settings.SubmittedAfter);
            AppendIfNonNull(ref baseCommand, "--submitted-before", settings.SubmittedBefore);
            AppendIfNonNull(ref baseCommand, "--submitter", settings.Submitter);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla job show".
        /// Get information for a Data Lake Analytics job.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJob")]
        public dynamic DlaJobShow(DlaJobShowSettings settings) {
            var baseCommand = "az dla job show";
            AppendIfNonNull(ref baseCommand, "--job-identity", settings.JobIdentity);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla job submit".
        /// Submit a job to a Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJob")]
        public dynamic DlaJobSubmit(DlaJobSubmitSettings settings) {
            var baseCommand = "az dla job submit";
            AppendIfNonNull(ref baseCommand, "--job-name", settings.JobName);
            AppendIfNonNull(ref baseCommand, "--script", settings.Script);
            AppendIfNonNull(ref baseCommand, "--compile-mode", settings.CompileMode);
            AppendIfNonNull(ref baseCommand, "--compile-only", settings.CompileOnly);
            AppendIfNonNull(ref baseCommand, "--degree-of-parallelism", settings.DegreeOfParallelism);
            AppendIfNonNull(ref baseCommand, "--pipeline-id", settings.PipelineId);
            AppendIfNonNull(ref baseCommand, "--pipeline-name", settings.PipelineName);
            AppendIfNonNull(ref baseCommand, "--pipeline-uri", settings.PipelineUri);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--recurrence-id", settings.RecurrenceId);
            AppendIfNonNull(ref baseCommand, "--recurrence-name", settings.RecurrenceName);
            AppendIfNonNull(ref baseCommand, "--run-id", settings.RunId);
            AppendIfNonNull(ref baseCommand, "--runtime-version", settings.RuntimeVersion);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla job wait".
        /// Wait for a Data Lake Analytics job to finish.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJob")]
        public dynamic DlaJobWait(DlaJobWaitSettings settings) {
            var baseCommand = "az dla job wait";
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--max-wait-time-sec", settings.MaxWaitTimeSec);
            AppendIfNonNull(ref baseCommand, "--wait-interval-sec", settings.WaitIntervalSec);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla job pipeline list".
        /// List job pipelines in a Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJobPipeline")]
        public dynamic DlaJobPipelineList(DlaJobPipelineListSettings settings) {
            var baseCommand = "az dla job pipeline list";
            AppendIfNonNull(ref baseCommand, "--end-date-time", settings.EndDateTime);
            AppendIfNonNull(ref baseCommand, "--start-date-time", settings.StartDateTime);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla job pipeline show".
        /// Retrieve a job pipeline in a Data Lake Analytics account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJobPipeline")]
        public dynamic DlaJobPipelineShow(DlaJobPipelineShowSettings settings) {
            var baseCommand = "az dla job pipeline show";
            AppendIfNonNull(ref baseCommand, "--pipeline-identity", settings.PipelineIdentity);
            AppendIfNonNull(ref baseCommand, "--end-date-time", settings.EndDateTime);
            AppendIfNonNull(ref baseCommand, "--start-date-time", settings.StartDateTime);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla job recurrence list".
        /// List job recurrences in a Data Lake Analytics account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJobRecurrence")]
        public dynamic DlaJobRecurrenceList(DlaJobRecurrenceListSettings settings) {
            var baseCommand = "az dla job recurrence list";
            AppendIfNonNull(ref baseCommand, "--end-date-time", settings.EndDateTime);
            AppendIfNonNull(ref baseCommand, "--start-date-time", settings.StartDateTime);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dla job recurrence show".
        /// Retrieve a job recurrence in a Data Lake Analytics account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlaJobRecurrence")]
        public dynamic DlaJobRecurrenceShow(DlaJobRecurrenceShowSettings settings) {
            var baseCommand = "az dla job recurrence show";
            AppendIfNonNull(ref baseCommand, "--recurrence-identity", settings.RecurrenceIdentity);
            AppendIfNonNull(ref baseCommand, "--end-date-time", settings.EndDateTime);
            AppendIfNonNull(ref baseCommand, "--start-date-time", settings.StartDateTime);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account create".
        /// Creates a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccount")]
        public dynamic DlsAccountCreate(DlsAccountCreateSettings settings) {
            var baseCommand = "az dls account create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--default-group", settings.DefaultGroup);
            AppendIfNonNull(ref baseCommand, "--disable-encryption", settings.DisableEncryption);
            AppendIfNonNull(ref baseCommand, "--encryption-type", settings.EncryptionType);
            AppendIfNonNull(ref baseCommand, "--key-name", settings.KeyName);
            AppendIfNonNull(ref baseCommand, "--key-vault-id", settings.KeyVaultId);
            AppendIfNonNull(ref baseCommand, "--key-version", settings.KeyVersion);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account delete".
        /// Delete a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccount")]
        public dynamic DlsAccountDelete(DlsAccountDeleteSettings settings) {
            var baseCommand = "az dls account delete";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account enable-key-vault".
        /// Enable the use of Azure Key Vault for encryption of a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccount")]
        public dynamic DlsAccountEnableKeyVault(DlsAccountEnableKeyVaultSettings settings) {
            var baseCommand = "az dls account enable-key-vault";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account list".
        /// Lists available Data Lake Store accounts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccount")]
        public dynamic DlsAccountList(DlsAccountListSettings settings) {
            var baseCommand = "az dls account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account show".
        /// Get the details of a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccount")]
        public dynamic DlsAccountShow(DlsAccountShowSettings settings) {
            var baseCommand = "az dls account show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account update".
        /// Updates a Data Lake Store account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccount")]
        public dynamic DlsAccountUpdate(DlsAccountUpdateSettings settings) {
            var baseCommand = "az dls account update";
            AppendIfNonNull(ref baseCommand, "--allow-azure-ips", settings.AllowAzureIps);
            AppendIfNonNull(ref baseCommand, "--default-group", settings.DefaultGroup);
            AppendIfNonNull(ref baseCommand, "--firewall-state", settings.FirewallState);
            AppendIfNonNull(ref baseCommand, "--key-version", settings.KeyVersion);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--trusted-id-provider-state", settings.TrustedIdProviderState);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account firewall create".
        /// Creates a firewall rule in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountFirewall")]
        public dynamic DlsAccountFirewallCreate(DlsAccountFirewallCreateSettings settings) {
            var baseCommand = "az dls account firewall create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account firewall delete".
        /// Deletes a firewall rule in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountFirewall")]
        public dynamic DlsAccountFirewallDelete(DlsAccountFirewallDeleteSettings settings) {
            var baseCommand = "az dls account firewall delete";
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account firewall list".
        /// Lists firewall rules in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountFirewall")]
        public dynamic DlsAccountFirewallList(DlsAccountFirewallListSettings settings) {
            var baseCommand = "az dls account firewall list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account firewall show".
        /// Get the details of a firewall rule in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountFirewall")]
        public dynamic DlsAccountFirewallShow(DlsAccountFirewallShowSettings settings) {
            var baseCommand = "az dls account firewall show";
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account firewall update".
        /// Updates a firewall rule in a Data Lake Store account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountFirewall")]
        public dynamic DlsAccountFirewallUpdate(DlsAccountFirewallUpdateSettings settings) {
            var baseCommand = "az dls account firewall update";
            AppendIfNonNull(ref baseCommand, "--firewall-rule-name", settings.FirewallRuleName);
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account network-rule create".
        /// Creates a virtual network rule in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountNetworkRule")]
        public dynamic DlsAccountNetworkRuleCreate(DlsAccountNetworkRuleCreateSettings settings) {
            var baseCommand = "az dls account network-rule create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account network-rule delete".
        /// Deletes a virtual network rule in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountNetworkRule")]
        public dynamic DlsAccountNetworkRuleDelete(DlsAccountNetworkRuleDeleteSettings settings) {
            var baseCommand = "az dls account network-rule delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account network-rule list".
        /// Lists virtual network rules in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountNetworkRule")]
        public dynamic DlsAccountNetworkRuleList(DlsAccountNetworkRuleListSettings settings) {
            var baseCommand = "az dls account network-rule list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account network-rule show".
        /// Get the details of a virtual network rule in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountNetworkRule")]
        public dynamic DlsAccountNetworkRuleShow(DlsAccountNetworkRuleShowSettings settings) {
            var baseCommand = "az dls account network-rule show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account network-rule update".
        /// Updates a virtual network rule in a Data Lake Store account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountNetworkRule")]
        public dynamic DlsAccountNetworkRuleUpdate(DlsAccountNetworkRuleUpdateSettings settings) {
            var baseCommand = "az dls account network-rule update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account trusted-provider create".
        /// Creates or updates the specified trusted identity provider.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountTrustedProvider")]
        public dynamic DlsAccountTrustedProviderCreate(DlsAccountTrustedProviderCreateSettings settings) {
            var baseCommand = "az dls account trusted-provider create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--id-provider", settings.IdProvider);
            AppendIfNonNull(ref baseCommand, "--trusted-id-provider-name", settings.TrustedIdProviderName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account trusted-provider delete".
        /// Deletes the specified trusted identity provider from the specified Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountTrustedProvider")]
        public dynamic DlsAccountTrustedProviderDelete(DlsAccountTrustedProviderDeleteSettings settings) {
            var baseCommand = "az dls account trusted-provider delete";
            AppendIfNonNull(ref baseCommand, "--trusted-id-provider-name", settings.TrustedIdProviderName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account trusted-provider list".
        /// Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountTrustedProvider")]
        public dynamic DlsAccountTrustedProviderList(DlsAccountTrustedProviderListSettings settings) {
            var baseCommand = "az dls account trusted-provider list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account trusted-provider show".
        /// Gets the specified Data Lake Store trusted identity provider.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountTrustedProvider")]
        public dynamic DlsAccountTrustedProviderShow(DlsAccountTrustedProviderShowSettings settings) {
            var baseCommand = "az dls account trusted-provider show";
            AppendIfNonNull(ref baseCommand, "--trusted-id-provider-name", settings.TrustedIdProviderName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls account trusted-provider update".
        /// Updates the specified trusted identity provider.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsAccountTrustedProvider")]
        public dynamic DlsAccountTrustedProviderUpdate(DlsAccountTrustedProviderUpdateSettings settings) {
            var baseCommand = "az dls account trusted-provider update";
            AppendIfNonNull(ref baseCommand, "--trusted-id-provider-name", settings.TrustedIdProviderName);
            AppendIfNonNull(ref baseCommand, "--id-provider", settings.IdProvider);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs append".
        /// Append content to a file in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsAppend(DlsFsAppendSettings settings) {
            var baseCommand = "az dls fs append";
            AppendIfNonNull(ref baseCommand, "--content", settings.Content);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs create".
        /// Creates a file or folder in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsCreate(DlsFsCreateSettings settings) {
            var baseCommand = "az dls fs create";
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--content", settings.Content);
            AppendIfNonNull(ref baseCommand, "--folder", settings.Folder);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs delete".
        /// Delete a file or folder in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsDelete(DlsFsDeleteSettings settings) {
            var baseCommand = "az dls fs delete";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--recurse", settings.Recurse);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs download".
        /// Download a file or folder from a Data Lake Store account to the local machine.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsDownload(DlsFsDownloadSettings settings) {
            var baseCommand = "az dls fs download";
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--source-path", settings.SourcePath);
            AppendIfNonNull(ref baseCommand, "--block-size", settings.BlockSize);
            AppendIfNonNull(ref baseCommand, "--buffer-size", settings.BufferSize);
            AppendIfNonNull(ref baseCommand, "--chunk-size", settings.ChunkSize);
            AppendIfNonNull(ref baseCommand, "--overwrite", settings.Overwrite);
            AppendIfNonNull(ref baseCommand, "--thread-count", settings.ThreadCount);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs join".
        /// Join files in a Data Lake Store account into one file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsJoin(DlsFsJoinSettings settings) {
            var baseCommand = "az dls fs join";
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--source-paths", settings.SourcePaths);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs list".
        /// List the files and folders in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsList(DlsFsListSettings settings) {
            var baseCommand = "az dls fs list";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs move".
        /// Move a file or folder in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsMove(DlsFsMoveSettings settings) {
            var baseCommand = "az dls fs move";
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--source-path", settings.SourcePath);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs preview".
        /// Preview the content of a file in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsPreview(DlsFsPreviewSettings settings) {
            var baseCommand = "az dls fs preview";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--length", settings.Length);
            AppendIfNonNull(ref baseCommand, "--offset", settings.Offset);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs remove-expiry".
        /// Remove the expiration time for a file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsRemoveExpiry(DlsFsRemoveExpirySettings settings) {
            var baseCommand = "az dls fs remove-expiry";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs set-expiry".
        /// Set the expiration time for a file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsSetExpiry(DlsFsSetExpirySettings settings) {
            var baseCommand = "az dls fs set-expiry";
            AppendIfNonNull(ref baseCommand, "--expiration-time", settings.ExpirationTime);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs show".
        /// Get file or folder information in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsShow(DlsFsShowSettings settings) {
            var baseCommand = "az dls fs show";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs test".
        /// Test for the existence of a file or folder in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsTest(DlsFsTestSettings settings) {
            var baseCommand = "az dls fs test";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs upload".
        /// Upload a file or folder to a Data Lake Store account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFs")]
        public dynamic DlsFsUpload(DlsFsUploadSettings settings) {
            var baseCommand = "az dls fs upload";
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--source-path", settings.SourcePath);
            AppendIfNonNull(ref baseCommand, "--block-size", settings.BlockSize);
            AppendIfNonNull(ref baseCommand, "--buffer-size", settings.BufferSize);
            AppendIfNonNull(ref baseCommand, "--chunk-size", settings.ChunkSize);
            AppendIfNonNull(ref baseCommand, "--overwrite", settings.Overwrite);
            AppendIfNonNull(ref baseCommand, "--thread-count", settings.ThreadCount);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs access remove-all".
        /// Remove the access control list for a file or folder.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public dynamic DlsFsAccessRemoveAll(DlsFsAccessRemoveAllSettings settings) {
            var baseCommand = "az dls fs access remove-all";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--default-acl", settings.DefaultAcl);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs access remove-entry".
        /// Remove entries for the access control list of a file or folder.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public dynamic DlsFsAccessRemoveEntry(DlsFsAccessRemoveEntrySettings settings) {
            var baseCommand = "az dls fs access remove-entry";
            AppendIfNonNull(ref baseCommand, "--acl-spec", settings.AclSpec);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs access set".
        /// Replace the existing access control list for a file or folder.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public dynamic DlsFsAccessSet(DlsFsAccessSetSettings settings) {
            var baseCommand = "az dls fs access set";
            AppendIfNonNull(ref baseCommand, "--acl-spec", settings.AclSpec);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs access set-entry".
        /// Update the access control list for a file or folder.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public dynamic DlsFsAccessSetEntry(DlsFsAccessSetEntrySettings settings) {
            var baseCommand = "az dls fs access set-entry";
            AppendIfNonNull(ref baseCommand, "--acl-spec", settings.AclSpec);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs access set-owner".
        /// Set the owner information for a file or folder in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public dynamic DlsFsAccessSetOwner(DlsFsAccessSetOwnerSettings settings) {
            var baseCommand = "az dls fs access set-owner";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--owner", settings.Owner);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs access set-permission".
        /// Set the permissions for a file or folder in a Data Lake Store account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public dynamic DlsFsAccessSetPermission(DlsFsAccessSetPermissionSettings settings) {
            var baseCommand = "az dls fs access set-permission";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--permission", settings.Permission);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dls fs access show".
        /// Display the access control list (ACL).  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDlsFsAccess")]
        public dynamic DlsFsAccessShow(DlsFsAccessShowSettings settings) {
            var baseCommand = "az dls fs access show";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--account", settings.Account);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms check-name".
        /// Check if a given DMS instance name is available in a given region as well as the name's validity.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public dynamic DmsCheckName(DmsCheckNameSettings settings) {
            var baseCommand = "az dms check-name";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms check-status".
        /// Perform a health check and return the status of the service and virtual machine size.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public dynamic DmsCheckStatus(DmsCheckStatusSettings settings) {
            var baseCommand = "az dms check-status";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms create".
        /// Create an instance of the Data Migration Service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public dynamic DmsCreate(DmsCreateSettings settings) {
            var baseCommand = "az dms create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms delete".
        /// Delete an instance of the Data Migration Service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public dynamic DmsDelete(DmsDeleteSettings settings) {
            var baseCommand = "az dms delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--delete-running-tasks", settings.DeleteRunningTasks);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms list".
        /// List the DMS instances within your currently configured subscription (to set this use "az account set"). If provided, only show the instances within a given resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public dynamic DmsList(DmsListSettings settings) {
            var baseCommand = "az dms list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms list-skus".
        /// List the SKUs that are supported by the Data Migration Service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public dynamic DmsListSkus(DmsListSkusSettings settings) {
            var baseCommand = "az dms list-skus";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms show".
        /// Show the details for an instance of the Data Migration Service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public dynamic DmsShow(DmsShowSettings settings) {
            var baseCommand = "az dms show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms start".
        /// Start an instance of the Data Migration Service. It can then be used to run data migrations.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public dynamic DmsStart(DmsStartSettings settings) {
            var baseCommand = "az dms start";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms stop".
        /// Stop an instance of the Data Migration Service. While stopped, it can't be used to run data migrations and the owner won't be billed.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public dynamic DmsStop(DmsStopSettings settings) {
            var baseCommand = "az dms stop";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms wait".
        /// Place the CLI in a waiting state until a condition of the DMS instance is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDms")]
        public dynamic DmsWait(DmsWaitSettings settings) {
            var baseCommand = "az dms wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms project check-name".
        /// Check if a given Project name is available within a given instance of DMS as well as the name's validity.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProject")]
        public dynamic DmsProjectCheckName(DmsProjectCheckNameSettings settings) {
            var baseCommand = "az dms project check-name";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms project create".
        /// Create a migration Project which can contain multiple Tasks.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProject")]
        public dynamic DmsProjectCreate(DmsProjectCreateSettings settings) {
            var baseCommand = "az dms project create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--source-platform", settings.SourcePlatform);
            AppendIfNonNull(ref baseCommand, "--target-platform", settings.TargetPlatform);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms project delete".
        /// Delete a Project.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProject")]
        public dynamic DmsProjectDelete(DmsProjectDeleteSettings settings) {
            var baseCommand = "az dms project delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--delete-running-tasks", settings.DeleteRunningTasks);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms project list".
        /// List the Projects within an instance of DMS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProject")]
        public dynamic DmsProjectList(DmsProjectListSettings settings) {
            var baseCommand = "az dms project list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms project show".
        /// Show the details of a migration Project.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProject")]
        public dynamic DmsProjectShow(DmsProjectShowSettings settings) {
            var baseCommand = "az dms project show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms project task cancel".
        /// Cancel a Task if it's currently queued or running.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProjectTask")]
        public dynamic DmsProjectTaskCancel(DmsProjectTaskCancelSettings settings) {
            var baseCommand = "az dms project task cancel";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms project task check-name".
        /// Check if a given Task name is available within a given instance of DMS as well as the name's validity.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProjectTask")]
        public dynamic DmsProjectTaskCheckName(DmsProjectTaskCheckNameSettings settings) {
            var baseCommand = "az dms project task check-name";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms project task create".
        /// Create and start a migration Task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProjectTask")]
        public dynamic DmsProjectTaskCreate(DmsProjectTaskCreateSettings settings) {
            var baseCommand = "az dms project task create";
            AppendIfNonNull(ref baseCommand, "--database-options-json", settings.DatabaseOptionsJson);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--source-connection-json", settings.SourceConnectionJson);
            AppendIfNonNull(ref baseCommand, "--target-connection-json", settings.TargetConnectionJson);
            AppendIfNonNull(ref baseCommand, "--enable-data-integrity-validation", settings.EnableDataIntegrityValidation);
            AppendIfNonNull(ref baseCommand, "--enable-query-analysis-validation", settings.EnableQueryAnalysisValidation);
            AppendIfNonNull(ref baseCommand, "--enable-schema-validation", settings.EnableSchemaValidation);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms project task delete".
        /// Delete a migration Task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProjectTask")]
        public dynamic DmsProjectTaskDelete(DmsProjectTaskDeleteSettings settings) {
            var baseCommand = "az dms project task delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--delete-running-tasks", settings.DeleteRunningTasks);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms project task list".
        /// List the Tasks within a Project. Some tasks may have a status of Unknown, which indicates that an error occurred while querying the status of that task.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProjectTask")]
        public dynamic DmsProjectTaskList(DmsProjectTaskListSettings settings) {
            var baseCommand = "az dms project task list";
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--task-type", settings.TaskType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az dms project task show".
        /// Show the details of a migration Task. Use the "--expand" to get more details.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzDmsProjectTask")]
        public dynamic DmsProjectTaskShow(DmsProjectTaskShowSettings settings) {
            var baseCommand = "az dms project task show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid domain create".
        /// Create a domain.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomain")]
        public dynamic EventgridDomainCreate(EventgridDomainCreateSettings settings) {
            var baseCommand = "az eventgrid domain create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid domain delete".
        /// Delete a domain.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomain")]
        public dynamic EventgridDomainDelete(EventgridDomainDeleteSettings settings) {
            var baseCommand = "az eventgrid domain delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid domain list".
        /// List available domains.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomain")]
        public dynamic EventgridDomainList(EventgridDomainListSettings settings) {
            var baseCommand = "az eventgrid domain list";
            AppendIfNonNull(ref baseCommand, "--odata-query", settings.OdataQuery);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid domain show".
        /// Get the details of a domain.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomain")]
        public dynamic EventgridDomainShow(EventgridDomainShowSettings settings) {
            var baseCommand = "az eventgrid domain show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid domain update".
        /// Update a domain.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomain")]
        public dynamic EventgridDomainUpdate(EventgridDomainUpdateSettings settings) {
            var baseCommand = "az eventgrid domain update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid domain key list".
        /// List shared access keys of a domain.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomainKey")]
        public dynamic EventgridDomainKeyList(EventgridDomainKeyListSettings settings) {
            var baseCommand = "az eventgrid domain key list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid domain key regenerate".
        /// Regenerate a shared access key of a domain.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomainKey")]
        public dynamic EventgridDomainKeyRegenerate(EventgridDomainKeyRegenerateSettings settings) {
            var baseCommand = "az eventgrid domain key regenerate";
            AppendIfNonNull(ref baseCommand, "--key-name", settings.KeyName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid domain topic create".
        /// Create a domain topic under a domain.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomainTopic")]
        public dynamic EventgridDomainTopicCreate(EventgridDomainTopicCreateSettings settings) {
            var baseCommand = "az eventgrid domain topic create";
            AppendIfNonNull(ref baseCommand, "--domain-name", settings.DomainName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid domain topic delete".
        /// Delete a domain topic under a domain.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomainTopic")]
        public dynamic EventgridDomainTopicDelete(EventgridDomainTopicDeleteSettings settings) {
            var baseCommand = "az eventgrid domain topic delete";
            AppendIfNonNull(ref baseCommand, "--domain-name", settings.DomainName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid domain topic list".
        /// List available topics in a domain.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomainTopic")]
        public dynamic EventgridDomainTopicList(EventgridDomainTopicListSettings settings) {
            var baseCommand = "az eventgrid domain topic list";
            AppendIfNonNull(ref baseCommand, "--domain-name", settings.DomainName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--odata-query", settings.OdataQuery);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid domain topic show".
        /// Get the details of a domain topic.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridDomainTopic")]
        public dynamic EventgridDomainTopicShow(EventgridDomainTopicShowSettings settings) {
            var baseCommand = "az eventgrid domain topic show";
            AppendIfNonNull(ref baseCommand, "--domain-name", settings.DomainName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid event-subscription create".
        /// Create a new event subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridEventSubscription")]
        public dynamic EventgridEventSubscriptionCreate(EventgridEventSubscriptionCreateSettings settings) {
            var baseCommand = "az eventgrid event-subscription create";
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--advanced-filter", settings.AdvancedFilter);
            AppendIfNonNull(ref baseCommand, "--deadletter-endpoint", settings.DeadletterEndpoint);
            AppendIfNonNull(ref baseCommand, "--endpoint-type", settings.EndpointType);
            AppendIfNonNull(ref baseCommand, "--event-ttl", settings.EventTtl);
            AppendIfNonNull(ref baseCommand, "--expiration-date", settings.ExpirationDate);
            AppendIfNonNull(ref baseCommand, "--included-event-types", settings.IncludedEventTypes);
            AppendIfNonNull(ref baseCommand, "--labels", settings.Labels);
            AppendIfNonNull(ref baseCommand, "--max-delivery-attempts", settings.MaxDeliveryAttempts);
            AppendIfNonNull(ref baseCommand, "--source-resource-id", settings.SourceResourceId);
            AppendIfNonNull(ref baseCommand, "--subject-begins-with", settings.SubjectBeginsWith);
            AppendIfNonNull(ref baseCommand, "--subject-case-sensitive", settings.SubjectCaseSensitive);
            AppendIfNonNull(ref baseCommand, "--subject-ends-with", settings.SubjectEndsWith);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid event-subscription delete".
        /// Delete an event subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridEventSubscription")]
        public dynamic EventgridEventSubscriptionDelete(EventgridEventSubscriptionDeleteSettings settings) {
            var baseCommand = "az eventgrid event-subscription delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source-resource-id", settings.SourceResourceId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid event-subscription list".
        /// List event subscriptions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridEventSubscription")]
        public dynamic EventgridEventSubscriptionList(EventgridEventSubscriptionListSettings settings) {
            var baseCommand = "az eventgrid event-subscription list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--odata-query", settings.OdataQuery);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-resource-id", settings.SourceResourceId);
            AppendIfNonNull(ref baseCommand, "--topic-type-name", settings.TopicTypeName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid event-subscription show".
        /// Get the details of an event subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridEventSubscription")]
        public dynamic EventgridEventSubscriptionShow(EventgridEventSubscriptionShowSettings settings) {
            var baseCommand = "az eventgrid event-subscription show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--include-full-endpoint-url", settings.IncludeFullEndpointUrl);
            AppendIfNonNull(ref baseCommand, "--source-resource-id", settings.SourceResourceId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid event-subscription update".
        /// Update an event subscription.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridEventSubscription")]
        public dynamic EventgridEventSubscriptionUpdate(EventgridEventSubscriptionUpdateSettings settings) {
            var baseCommand = "az eventgrid event-subscription update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--deadletter-endpoint", settings.DeadletterEndpoint);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--endpoint-type", settings.EndpointType);
            AppendIfNonNull(ref baseCommand, "--included-event-types", settings.IncludedEventTypes);
            AppendIfNonNull(ref baseCommand, "--labels", settings.Labels);
            AppendIfNonNull(ref baseCommand, "--source-resource-id", settings.SourceResourceId);
            AppendIfNonNull(ref baseCommand, "--subject-begins-with", settings.SubjectBeginsWith);
            AppendIfNonNull(ref baseCommand, "--subject-ends-with", settings.SubjectEndsWith);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid topic create".
        /// Create a topic.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopic")]
        public dynamic EventgridTopicCreate(EventgridTopicCreateSettings settings) {
            var baseCommand = "az eventgrid topic create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid topic delete".
        /// Delete a topic.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopic")]
        public dynamic EventgridTopicDelete(EventgridTopicDeleteSettings settings) {
            var baseCommand = "az eventgrid topic delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid topic list".
        /// List available topics.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopic")]
        public dynamic EventgridTopicList(EventgridTopicListSettings settings) {
            var baseCommand = "az eventgrid topic list";
            AppendIfNonNull(ref baseCommand, "--odata-query", settings.OdataQuery);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid topic show".
        /// Get the details of a topic.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopic")]
        public dynamic EventgridTopicShow(EventgridTopicShowSettings settings) {
            var baseCommand = "az eventgrid topic show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid topic update".
        /// Update a topic.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopic")]
        public dynamic EventgridTopicUpdate(EventgridTopicUpdateSettings settings) {
            var baseCommand = "az eventgrid topic update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid topic key list".
        /// List shared access keys of a topic.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopicKey")]
        public dynamic EventgridTopicKeyList(EventgridTopicKeyListSettings settings) {
            var baseCommand = "az eventgrid topic key list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid topic key regenerate".
        /// Regenerate a shared access key of a topic.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopicKey")]
        public dynamic EventgridTopicKeyRegenerate(EventgridTopicKeyRegenerateSettings settings) {
            var baseCommand = "az eventgrid topic key regenerate";
            AppendIfNonNull(ref baseCommand, "--key-name", settings.KeyName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid topic-type list".
        /// List registered topic types.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopicType")]
        public dynamic EventgridTopicTypeList(EventgridTopicTypeListSettings settings) {
            var baseCommand = "az eventgrid topic-type list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid topic-type list-event-types".
        /// List the event types supported by a topic type.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopicType")]
        public dynamic EventgridTopicTypeListEventTypes(EventgridTopicTypeListEventTypesSettings settings) {
            var baseCommand = "az eventgrid topic-type list-event-types";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventgrid topic-type show".
        /// Get the details for a topic type.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventgridTopicType")]
        public dynamic EventgridTopicTypeShow(EventgridTopicTypeShowSettings settings) {
            var baseCommand = "az eventgrid topic-type show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub create".
        /// Creates the EventHubs Eventhub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhub")]
        public dynamic EventhubsEventhubCreate(EventhubsEventhubCreateSettings settings) {
            var baseCommand = "az eventhubs eventhub create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--enable-capture", settings.EnableCapture);
            AppendIfNonNull(ref baseCommand, "--message-retention", settings.MessageRetention);
            AppendIfNonNull(ref baseCommand, "--partition-count", settings.PartitionCount);
            AppendIfNonNull(ref baseCommand, "--skip-empty-archives", settings.SkipEmptyArchives);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--capture-interval", settings.CaptureInterval);
            AppendIfNonNull(ref baseCommand, "--capture-size-limit", settings.CaptureSizeLimit);
            AppendIfNonNull(ref baseCommand, "--archive-name-format", settings.ArchiveNameFormat);
            AppendIfNonNull(ref baseCommand, "--blob-container", settings.BlobContainer);
            AppendIfNonNull(ref baseCommand, "--destination-name", settings.DestinationName);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub delete".
        /// Deletes the Eventhub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhub")]
        public dynamic EventhubsEventhubDelete(EventhubsEventhubDeleteSettings settings) {
            var baseCommand = "az eventhubs eventhub delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub list".
        /// List the EventHub by Namepsace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhub")]
        public dynamic EventhubsEventhubList(EventhubsEventhubListSettings settings) {
            var baseCommand = "az eventhubs eventhub list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub show".
        /// Shows the Eventhub Details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhub")]
        public dynamic EventhubsEventhubShow(EventhubsEventhubShowSettings settings) {
            var baseCommand = "az eventhubs eventhub show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub update".
        /// Updates the EventHubs Eventhub.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhub")]
        public dynamic EventhubsEventhubUpdate(EventhubsEventhubUpdateSettings settings) {
            var baseCommand = "az eventhubs eventhub update";
            AppendIfNonNull(ref baseCommand, "--enable-capture", settings.EnableCapture);
            AppendIfNonNull(ref baseCommand, "--message-retention", settings.MessageRetention);
            AppendIfNonNull(ref baseCommand, "--partition-count", settings.PartitionCount);
            AppendIfNonNull(ref baseCommand, "--skip-empty-archives", settings.SkipEmptyArchives);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--capture-interval", settings.CaptureInterval);
            AppendIfNonNull(ref baseCommand, "--capture-size-limit", settings.CaptureSizeLimit);
            AppendIfNonNull(ref baseCommand, "--archive-name-format", settings.ArchiveNameFormat);
            AppendIfNonNull(ref baseCommand, "--blob-container", settings.BlobContainer);
            AppendIfNonNull(ref baseCommand, "--destination-name", settings.DestinationName);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule create".
        /// Creates Authorizationrule for the given Eventhub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRule")]
        public dynamic EventhubsEventhubAuthorizationRuleCreate(EventhubsEventhubAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule delete".
        /// Deletes the Authorizationrule of Eventhub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRule")]
        public dynamic EventhubsEventhubAuthorizationRuleDelete(EventhubsEventhubAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule list".
        /// Shows the list of Authorization-rules by Eventhub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRule")]
        public dynamic EventhubsEventhubAuthorizationRuleList(EventhubsEventhubAuthorizationRuleListSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule show".
        /// Shows the details of Authorizationrule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRule")]
        public dynamic EventhubsEventhubAuthorizationRuleShow(EventhubsEventhubAuthorizationRuleShowSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule update".
        /// Updates Authorizationrule for the given Eventhub.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRule")]
        public dynamic EventhubsEventhubAuthorizationRuleUpdate(EventhubsEventhubAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule keys list".
        /// Shows the connection strings of Authorizationrule for the Eventhub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRuleKeys")]
        public dynamic EventhubsEventhubAuthorizationRuleKeysList(EventhubsEventhubAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub authorization-rule keys renew".
        /// Regenerate the connection strings of Authorizationrule for the namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubAuthorizationRuleKeys")]
        public dynamic EventhubsEventhubAuthorizationRuleKeysRenew(EventhubsEventhubAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az eventhubs eventhub authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub consumer-group create".
        /// Creates the EventHub ConsumerGroup.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubConsumerGroup")]
        public dynamic EventhubsEventhubConsumerGroupCreate(EventhubsEventhubConsumerGroupCreateSettings settings) {
            var baseCommand = "az eventhubs eventhub consumer-group create";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--user-metadata", settings.UserMetadata);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub consumer-group delete".
        /// Deletes the ConsumerGroup.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubConsumerGroup")]
        public dynamic EventhubsEventhubConsumerGroupDelete(EventhubsEventhubConsumerGroupDeleteSettings settings) {
            var baseCommand = "az eventhubs eventhub consumer-group delete";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub consumer-group list".
        /// List the ConsumerGroup by Eventhub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubConsumerGroup")]
        public dynamic EventhubsEventhubConsumerGroupList(EventhubsEventhubConsumerGroupListSettings settings) {
            var baseCommand = "az eventhubs eventhub consumer-group list";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub consumer-group show".
        /// Shows the ConsumerGroup Details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubConsumerGroup")]
        public dynamic EventhubsEventhubConsumerGroupShow(EventhubsEventhubConsumerGroupShowSettings settings) {
            var baseCommand = "az eventhubs eventhub consumer-group show";
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs eventhub consumer-group update".
        /// Updates the EventHub ConsumerGroup.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsEventhubConsumerGroup")]
        public dynamic EventhubsEventhubConsumerGroupUpdate(EventhubsEventhubConsumerGroupUpdateSettings settings) {
            var baseCommand = "az eventhubs eventhub consumer-group update";
            AppendIfNonNull(ref baseCommand, "--user-metadata", settings.UserMetadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--eventhub-name", settings.EventhubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias break-pair".
        /// Disables Geo-Disaster Recovery Configuration Alias and stops replicating changes from primary to secondary namespaces.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public dynamic EventhubsGeorecoveryAliasBreakPair(EventhubsGeorecoveryAliasBreakPairSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias break-pair";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias delete".
        /// Delete Geo-Disaster Recovery Configuration Alias.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public dynamic EventhubsGeorecoveryAliasDelete(EventhubsGeorecoveryAliasDeleteSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias delete";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias exists".
        /// Check the availability of Geo-Disaster Recovery Configuration Alias Name.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public dynamic EventhubsGeorecoveryAliasExists(EventhubsGeorecoveryAliasExistsSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias exists";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias fail-over".
        /// Invokes Geo-Disaster Recovery Configuration Alias to point to the secondary namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public dynamic EventhubsGeorecoveryAliasFailOver(EventhubsGeorecoveryAliasFailOverSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias fail-over";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias list".
        /// Gets all Alias(Disaster Recovery configurations).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public dynamic EventhubsGeorecoveryAliasList(EventhubsGeorecoveryAliasListSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias set".
        /// Sets a Geo-Disaster Recovery Configuration Alias for the give Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public dynamic EventhubsGeorecoveryAliasSet(EventhubsGeorecoveryAliasSetSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias set";
            AppendIfNonNull(ref baseCommand, "--partner-namespace", settings.PartnerNamespace);
            AppendIfNonNull(ref baseCommand, "--alternate-name", settings.AlternateName);
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias show".
        /// Shows properties of Geo-Disaster Recovery Configuration Alias for Primay or Secondary Namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAlias")]
        public dynamic EventhubsGeorecoveryAliasShow(EventhubsGeorecoveryAliasShowSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias show";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias authorization-rule list".
        /// List of Authorizationrule by EventHubs Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAliasAuthorizationRule")]
        public dynamic EventhubsGeorecoveryAliasAuthorizationRuleList(EventhubsGeorecoveryAliasAuthorizationRuleListSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias authorization-rule show".
        /// Show properties of EventHubs Geo-Disaster Recovery Configuration Alias and Namespace Authorizationrule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAliasAuthorizationRule")]
        public dynamic EventhubsGeorecoveryAliasAuthorizationRuleShow(EventhubsGeorecoveryAliasAuthorizationRuleShowSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs georecovery-alias authorization-rule keys list".
        /// Shows the keys and connection strings of Authorizationrule for the EventHubs Namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsGeorecoveryAliasAuthorizationRuleKeys")]
        public dynamic EventhubsGeorecoveryAliasAuthorizationRuleKeysList(EventhubsGeorecoveryAliasAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az eventhubs georecovery-alias authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace create".
        /// Creates the EventHubs Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespace")]
        public dynamic EventhubsNamespaceCreate(EventhubsNamespaceCreateSettings settings) {
            var baseCommand = "az eventhubs namespace create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--enable-auto-inflate", settings.EnableAutoInflate);
            AppendIfNonNull(ref baseCommand, "--enable-kafka", settings.EnableKafka);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--maximum-throughput-units", settings.MaximumThroughputUnits);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace delete".
        /// Deletes the Namespaces.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespace")]
        public dynamic EventhubsNamespaceDelete(EventhubsNamespaceDeleteSettings settings) {
            var baseCommand = "az eventhubs namespace delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace exists".
        /// Check for the availability of the given name for the Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespace")]
        public dynamic EventhubsNamespaceExists(EventhubsNamespaceExistsSettings settings) {
            var baseCommand = "az eventhubs namespace exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace list".
        /// Lists the EventHubs Namespaces.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespace")]
        public dynamic EventhubsNamespaceList(EventhubsNamespaceListSettings settings) {
            var baseCommand = "az eventhubs namespace list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace show".
        /// Shows the Event Hubs Namespace Details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespace")]
        public dynamic EventhubsNamespaceShow(EventhubsNamespaceShowSettings settings) {
            var baseCommand = "az eventhubs namespace show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace update".
        /// Updates the EventHubs Namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespace")]
        public dynamic EventhubsNamespaceUpdate(EventhubsNamespaceUpdateSettings settings) {
            var baseCommand = "az eventhubs namespace update";
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--enable-auto-inflate", settings.EnableAutoInflate);
            AppendIfNonNull(ref baseCommand, "--enable-kafka", settings.EnableKafka);
            AppendIfNonNull(ref baseCommand, "--maximum-throughput-units", settings.MaximumThroughputUnits);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule create".
        /// Creates Authorizationrule for the given Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRule")]
        public dynamic EventhubsNamespaceAuthorizationRuleCreate(EventhubsNamespaceAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule delete".
        /// Deletes the Authorizationrule of the namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRule")]
        public dynamic EventhubsNamespaceAuthorizationRuleDelete(EventhubsNamespaceAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule list".
        /// Shows the list of Authorizationrule by Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRule")]
        public dynamic EventhubsNamespaceAuthorizationRuleList(EventhubsNamespaceAuthorizationRuleListSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule show".
        /// Shows the details of Authorizationrule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRule")]
        public dynamic EventhubsNamespaceAuthorizationRuleShow(EventhubsNamespaceAuthorizationRuleShowSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule update".
        /// Updates Authorizationrule for the given Namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRule")]
        public dynamic EventhubsNamespaceAuthorizationRuleUpdate(EventhubsNamespaceAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule keys list".
        /// Shows the connection strings for namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRuleKeys")]
        public dynamic EventhubsNamespaceAuthorizationRuleKeysList(EventhubsNamespaceAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace authorization-rule keys renew".
        /// Regenerate the connection strings of Authorizationrule for the namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceAuthorizationRuleKeys")]
        public dynamic EventhubsNamespaceAuthorizationRuleKeysRenew(EventhubsNamespaceAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az eventhubs namespace authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace network-rule add".
        /// Add a network rule for a namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceNetworkRule")]
        public dynamic EventhubsNamespaceNetworkRuleAdd(EventhubsNamespaceNetworkRuleAddSettings settings) {
            var baseCommand = "az eventhubs namespace network-rule add";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace network-rule list".
        /// Show properties of Network rule of the given Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceNetworkRule")]
        public dynamic EventhubsNamespaceNetworkRuleList(EventhubsNamespaceNetworkRuleListSettings settings) {
            var baseCommand = "az eventhubs namespace network-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az eventhubs namespace network-rule remove".
        /// Remove network rule for a namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzEventhubsNamespaceNetworkRule")]
        public dynamic EventhubsNamespaceNetworkRuleRemove(EventhubsNamespaceNetworkRuleRemoveSettings settings) {
            var baseCommand = "az eventhubs namespace network-rule remove";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az extension add".
        /// Add an extension.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzExtension")]
        public dynamic ExtensionAdd(ExtensionAddSettings settings) {
            var baseCommand = "az extension add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--pip-extra-index-urls", settings.PipExtraIndexUrls);
            AppendIfNonNull(ref baseCommand, "--pip-proxy", settings.PipProxy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az extension list".
        /// List the installed extensions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzExtension")]
        public dynamic ExtensionList(ExtensionListSettings settings) {
            var baseCommand = "az extension list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az extension list-available".
        /// List publicly available extensions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzExtension")]
        public dynamic ExtensionListAvailable(ExtensionListAvailableSettings settings) {
            var baseCommand = "az extension list-available";
            AppendIfNonNull(ref baseCommand, "--show-details", settings.ShowDetails);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az extension remove".
        /// Remove an extension.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzExtension")]
        public dynamic ExtensionRemove(ExtensionRemoveSettings settings) {
            var baseCommand = "az extension remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az extension show".
        /// Show an extension.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzExtension")]
        public dynamic ExtensionShow(ExtensionShowSettings settings) {
            var baseCommand = "az extension show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az extension update".
        /// Update an extension.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzExtension")]
        public dynamic ExtensionUpdate(ExtensionUpdateSettings settings) {
            var baseCommand = "az extension update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pip-extra-index-urls", settings.PipExtraIndexUrls);
            AppendIfNonNull(ref baseCommand, "--pip-proxy", settings.PipProxy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az feature list".
        /// List preview features.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFeature")]
        public dynamic FeatureList(FeatureListSettings settings) {
            var baseCommand = "az feature list";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az feature register".
        /// Register a preview feature.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFeature")]
        public dynamic FeatureRegister(FeatureRegisterSettings settings) {
            var baseCommand = "az feature register";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az feature show".
        /// Gets the preview feature with the specified name.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFeature")]
        public dynamic FeatureShow(FeatureShowSettings settings) {
            var baseCommand = "az feature show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp create".
        /// Create a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public dynamic FunctionappCreate(FunctionappCreateSettings settings) {
            var baseCommand = "az functionapp create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--app-insights", settings.AppInsights);
            AppendIfNonNull(ref baseCommand, "--app-insights-key", settings.AppInsightsKey);
            AppendIfNonNull(ref baseCommand, "--consumption-plan-location", settings.ConsumptionPlanLocation);
            AppendIfNonNull(ref baseCommand, "--deployment-container-image-name", settings.DeploymentContainerImageName);
            AppendIfNonNull(ref baseCommand, "--deployment-local-git", settings.DeploymentLocalGit);
            AppendIfNonNull(ref baseCommand, "--deployment-source-branch", settings.DeploymentSourceBranch);
            AppendIfNonNull(ref baseCommand, "--deployment-source-url", settings.DeploymentSourceUrl);
            AppendIfNonNull(ref baseCommand, "--disable-app-insights", settings.DisableAppInsights);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-password", settings.DockerRegistryServerPassword);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-user", settings.DockerRegistryServerUser);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--runtime", settings.Runtime);
            AppendIfNonNull(ref baseCommand, "--runtime-version", settings.RuntimeVersion);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp delete".
        /// Delete a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public dynamic FunctionappDelete(FunctionappDeleteSettings settings) {
            var baseCommand = "az functionapp delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp list".
        /// List function apps.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public dynamic FunctionappList(FunctionappListSettings settings) {
            var baseCommand = "az functionapp list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp list-consumption-locations".
        /// List available locations for running function apps.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public dynamic FunctionappListConsumptionLocations(FunctionappListConsumptionLocationsSettings settings) {
            var baseCommand = "az functionapp list-consumption-locations";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp restart".
        /// Restart a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public dynamic FunctionappRestart(FunctionappRestartSettings settings) {
            var baseCommand = "az functionapp restart";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp show".
        /// Get the details of a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public dynamic FunctionappShow(FunctionappShowSettings settings) {
            var baseCommand = "az functionapp show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp start".
        /// Start a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public dynamic FunctionappStart(FunctionappStartSettings settings) {
            var baseCommand = "az functionapp start";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp stop".
        /// Stop a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public dynamic FunctionappStop(FunctionappStopSettings settings) {
            var baseCommand = "az functionapp stop";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp update".
        /// Update a function app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionapp")]
        public dynamic FunctionappUpdate(FunctionappUpdateSettings settings) {
            var baseCommand = "az functionapp update";
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config set".
        /// Set the function app's configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfig")]
        public dynamic FunctionappConfigSet(FunctionappConfigSetSettings settings) {
            var baseCommand = "az functionapp config set";
            AppendIfNonNull(ref baseCommand, "--always-on", settings.AlwaysOn);
            AppendIfNonNull(ref baseCommand, "--auto-heal-enabled", settings.AutoHealEnabled);
            AppendIfNonNull(ref baseCommand, "--ftps-state", settings.FtpsState);
            AppendIfNonNull(ref baseCommand, "--generic-configurations", settings.GenericConfigurations);
            AppendIfNonNull(ref baseCommand, "--http20-enabled", settings.Http20Enabled);
            AppendIfNonNull(ref baseCommand, "--java-container", settings.JavaContainer);
            AppendIfNonNull(ref baseCommand, "--java-container-version", settings.JavaContainerVersion);
            AppendIfNonNull(ref baseCommand, "--java-version", settings.JavaVersion);
            AppendIfNonNull(ref baseCommand, "--linux-fx-version", settings.LinuxFxVersion);
            AppendIfNonNull(ref baseCommand, "--min-tls-version", settings.MinTlsVersion);
            AppendIfNonNull(ref baseCommand, "--net-framework-version", settings.NetFrameworkVersion);
            AppendIfNonNull(ref baseCommand, "--number-of-workers", settings.NumberOfWorkers);
            AppendIfNonNull(ref baseCommand, "--php-version", settings.PhpVersion);
            AppendIfNonNull(ref baseCommand, "--prewarmed-instance-count", settings.PrewarmedInstanceCount);
            AppendIfNonNull(ref baseCommand, "--python-version", settings.PythonVersion);
            AppendIfNonNull(ref baseCommand, "--remote-debugging-enabled", settings.RemoteDebuggingEnabled);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--startup-file", settings.StartupFile);
            AppendIfNonNull(ref baseCommand, "--use-32bit-worker-process", settings.Use32BitWorkerProcess);
            AppendIfNonNull(ref baseCommand, "--web-sockets-enabled", settings.WebSocketsEnabled);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config show".
        /// Get the details of a function app's configuration.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfig")]
        public dynamic FunctionappConfigShow(FunctionappConfigShowSettings settings) {
            var baseCommand = "az functionapp config show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config access-restriction add".
        /// Adds an Access Restriction to the functionapp, or updates if the Action of the Ip- Address or Subnet already exists.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAccessRestriction")]
        public dynamic FunctionappConfigAccessRestrictionAdd(FunctionappConfigAccessRestrictionAddSettings settings) {
            var baseCommand = "az functionapp config access-restriction add";
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--scm-site", settings.ScmSite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config access-restriction remove".
        /// Removes an Access Restriction from the functionapp.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAccessRestriction")]
        public dynamic FunctionappConfigAccessRestrictionRemove(FunctionappConfigAccessRestrictionRemoveSettings settings) {
            var baseCommand = "az functionapp config access-restriction remove";
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--scm-site", settings.ScmSite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config access-restriction set".
        /// Sets if SCM site is using the same restrictions as the main site.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAccessRestriction")]
        public dynamic FunctionappConfigAccessRestrictionSet(FunctionappConfigAccessRestrictionSetSettings settings) {
            var baseCommand = "az functionapp config access-restriction set";
            AppendIfNonNull(ref baseCommand, "--use-same-restrictions-for-scm-site", settings.UseSameRestrictionsForScmSite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config access-restriction show".
        /// Show Access Restriction settings for functionapp.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAccessRestriction")]
        public dynamic FunctionappConfigAccessRestrictionShow(FunctionappConfigAccessRestrictionShowSettings settings) {
            var baseCommand = "az functionapp config access-restriction show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config appsettings delete".
        /// Delete a function app's settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAppsettings")]
        public dynamic FunctionappConfigAppsettingsDelete(FunctionappConfigAppsettingsDeleteSettings settings) {
            var baseCommand = "az functionapp config appsettings delete";
            AppendIfNonNull(ref baseCommand, "--setting-names", settings.SettingNames);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config appsettings list".
        /// Show settings for a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAppsettings")]
        public dynamic FunctionappConfigAppsettingsList(FunctionappConfigAppsettingsListSettings settings) {
            var baseCommand = "az functionapp config appsettings list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config appsettings set".
        /// Update a function app's settings.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigAppsettings")]
        public dynamic FunctionappConfigAppsettingsSet(FunctionappConfigAppsettingsSetSettings settings) {
            var baseCommand = "az functionapp config appsettings set";
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--slot-settings", settings.SlotSettings);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config container delete".
        /// Delete a function app container's settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigContainer")]
        public dynamic FunctionappConfigContainerDelete(FunctionappConfigContainerDeleteSettings settings) {
            var baseCommand = "az functionapp config container delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config container set".
        /// Set a function app container's settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigContainer")]
        public dynamic FunctionappConfigContainerSet(FunctionappConfigContainerSetSettings settings) {
            var baseCommand = "az functionapp config container set";
            AppendIfNonNull(ref baseCommand, "--docker-custom-image-name", settings.DockerCustomImageName);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-password", settings.DockerRegistryServerPassword);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-url", settings.DockerRegistryServerUrl);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-user", settings.DockerRegistryServerUser);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config container show".
        /// Get details of a function app container's settings.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigContainer")]
        public dynamic FunctionappConfigContainerShow(FunctionappConfigContainerShowSettings settings) {
            var baseCommand = "az functionapp config container show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config hostname add".
        /// Bind a hostname to a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigHostname")]
        public dynamic FunctionappConfigHostnameAdd(FunctionappConfigHostnameAddSettings settings) {
            var baseCommand = "az functionapp config hostname add";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--hostname", settings.Hostname);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config hostname delete".
        /// Unbind a hostname from a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigHostname")]
        public dynamic FunctionappConfigHostnameDelete(FunctionappConfigHostnameDeleteSettings settings) {
            var baseCommand = "az functionapp config hostname delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--hostname", settings.Hostname);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config hostname get-external-ip".
        /// Get the external-facing IP address for a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigHostname")]
        public dynamic FunctionappConfigHostnameGetExternalIp(FunctionappConfigHostnameGetExternalIpSettings settings) {
            var baseCommand = "az functionapp config hostname get-external-ip";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config hostname list".
        /// List all hostname bindings for a function app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigHostname")]
        public dynamic FunctionappConfigHostnameList(FunctionappConfigHostnameListSettings settings) {
            var baseCommand = "az functionapp config hostname list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config ssl bind".
        /// Bind an SSL certificate to a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigSsl")]
        public dynamic FunctionappConfigSslBind(FunctionappConfigSslBindSettings settings) {
            var baseCommand = "az functionapp config ssl bind";
            AppendIfNonNull(ref baseCommand, "--certificate-thumbprint", settings.CertificateThumbprint);
            AppendIfNonNull(ref baseCommand, "--ssl-type", settings.SslType);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config ssl delete".
        /// Delete an SSL certificate from a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigSsl")]
        public dynamic FunctionappConfigSslDelete(FunctionappConfigSslDeleteSettings settings) {
            var baseCommand = "az functionapp config ssl delete";
            AppendIfNonNull(ref baseCommand, "--certificate-thumbprint", settings.CertificateThumbprint);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config ssl list".
        /// List SSL certificates for a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigSsl")]
        public dynamic FunctionappConfigSslList(FunctionappConfigSslListSettings settings) {
            var baseCommand = "az functionapp config ssl list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config ssl unbind".
        /// Unbind an SSL certificate from a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigSsl")]
        public dynamic FunctionappConfigSslUnbind(FunctionappConfigSslUnbindSettings settings) {
            var baseCommand = "az functionapp config ssl unbind";
            AppendIfNonNull(ref baseCommand, "--certificate-thumbprint", settings.CertificateThumbprint);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp config ssl upload".
        /// Upload an SSL certificate to a function app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappConfigSsl")]
        public dynamic FunctionappConfigSslUpload(FunctionappConfigSslUploadSettings settings) {
            var baseCommand = "az functionapp config ssl upload";
            AppendIfNonNull(ref baseCommand, "--certificate-file", settings.CertificateFile);
            AppendIfNonNull(ref baseCommand, "--certificate-password", settings.CertificatePassword);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp cors add".
        /// Add allowed origins.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappCors")]
        public dynamic FunctionappCorsAdd(FunctionappCorsAddSettings settings) {
            var baseCommand = "az functionapp cors add";
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp cors remove".
        /// Remove allowed origins.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappCors")]
        public dynamic FunctionappCorsRemove(FunctionappCorsRemoveSettings settings) {
            var baseCommand = "az functionapp cors remove";
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp cors show".
        /// Show allowed origins.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappCors")]
        public dynamic FunctionappCorsShow(FunctionappCorsShowSettings settings) {
            var baseCommand = "az functionapp cors show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment list-publishing-credentials".
        /// Get the details for available function app publishing credentials.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeployment")]
        public dynamic FunctionappDeploymentListPublishingCredentials(FunctionappDeploymentListPublishingCredentialsSettings settings) {
            var baseCommand = "az functionapp deployment list-publishing-credentials";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment list-publishing-profiles".
        /// Get the details for available function app deployment profiles.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeployment")]
        public dynamic FunctionappDeploymentListPublishingProfiles(FunctionappDeploymentListPublishingProfilesSettings settings) {
            var baseCommand = "az functionapp deployment list-publishing-profiles";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment container config".
        /// Configure continuous deployment via containers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentContainer")]
        public dynamic FunctionappDeploymentContainerConfig(FunctionappDeploymentContainerConfigSettings settings) {
            var baseCommand = "az functionapp deployment container config";
            AppendIfNonNull(ref baseCommand, "--enable-cd", settings.EnableCd);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment container show-cd-url".
        /// Get the URL which can be used to configure webhooks for continuous deployment.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentContainer")]
        public dynamic FunctionappDeploymentContainerShowCdUrl(FunctionappDeploymentContainerShowCdUrlSettings settings) {
            var baseCommand = "az functionapp deployment container show-cd-url";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment slot auto-swap".
        /// Configure deployment slot auto swap.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSlot")]
        public dynamic FunctionappDeploymentSlotAutoSwap(FunctionappDeploymentSlotAutoSwapSettings settings) {
            var baseCommand = "az functionapp deployment slot auto-swap";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--auto-swap-slot", settings.AutoSwapSlot);
            AppendIfNonNull(ref baseCommand, "--disable", settings.Disable);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment slot create".
        /// Create a deployment slot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSlot")]
        public dynamic FunctionappDeploymentSlotCreate(FunctionappDeploymentSlotCreateSettings settings) {
            var baseCommand = "az functionapp deployment slot create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--configuration-source", settings.ConfigurationSource);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment slot delete".
        /// Delete a deployment slot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSlot")]
        public dynamic FunctionappDeploymentSlotDelete(FunctionappDeploymentSlotDeleteSettings settings) {
            var baseCommand = "az functionapp deployment slot delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment slot list".
        /// List all deployment slots.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSlot")]
        public dynamic FunctionappDeploymentSlotList(FunctionappDeploymentSlotListSettings settings) {
            var baseCommand = "az functionapp deployment slot list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment slot swap".
        /// Change deployment slots for a function app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSlot")]
        public dynamic FunctionappDeploymentSlotSwap(FunctionappDeploymentSlotSwapSettings settings) {
            var baseCommand = "az functionapp deployment slot swap";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--target-slot", settings.TargetSlot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment source config".
        /// Manage deployment from git or Mercurial repositories.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public dynamic FunctionappDeploymentSourceConfig(FunctionappDeploymentSourceConfigSettings settings) {
            var baseCommand = "az functionapp deployment source config";
            AppendIfNonNull(ref baseCommand, "--repo-url", settings.RepoUrl);
            AppendIfNonNull(ref baseCommand, "--branch", settings.Branch);
            AppendIfNonNull(ref baseCommand, "--git-token", settings.GitToken);
            AppendIfNonNull(ref baseCommand, "--manual-integration", settings.ManualIntegration);
            AppendIfNonNull(ref baseCommand, "--repository-type", settings.RepositoryType);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--app-working-dir", settings.AppWorkingDir);
            AppendIfNonNull(ref baseCommand, "--cd-account-create", settings.CdAccountCreate);
            AppendIfNonNull(ref baseCommand, "--cd-app-type", settings.CdAppType);
            AppendIfNonNull(ref baseCommand, "--cd-project-url", settings.CdProjectUrl);
            AppendIfNonNull(ref baseCommand, "--nodejs-task-runner", settings.NodejsTaskRunner);
            AppendIfNonNull(ref baseCommand, "--private-repo-password", settings.PrivateRepoPassword);
            AppendIfNonNull(ref baseCommand, "--private-repo-username", settings.PrivateRepoUsername);
            AppendIfNonNull(ref baseCommand, "--python-framework", settings.PythonFramework);
            AppendIfNonNull(ref baseCommand, "--python-version", settings.PythonVersion);
            AppendIfNonNull(ref baseCommand, "--slot-swap", settings.SlotSwap);
            AppendIfNonNull(ref baseCommand, "--test", settings.Test);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment source config-local-git".
        /// Get a URL for a git repository endpoint to clone and push to for function app deployment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public dynamic FunctionappDeploymentSourceConfigLocalGit(FunctionappDeploymentSourceConfigLocalGitSettings settings) {
            var baseCommand = "az functionapp deployment source config-local-git";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment source config-zip".
        /// Perform deployment using the kudu zip push deployment for a function app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public dynamic FunctionappDeploymentSourceConfigZip(FunctionappDeploymentSourceConfigZipSettings settings) {
            var baseCommand = "az functionapp deployment source config-zip";
            AppendIfNonNull(ref baseCommand, "--src", settings.Src);
            AppendIfNonNull(ref baseCommand, "--build-remote", settings.BuildRemote);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment source delete".
        /// Delete a source control deployment configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public dynamic FunctionappDeploymentSourceDelete(FunctionappDeploymentSourceDeleteSettings settings) {
            var baseCommand = "az functionapp deployment source delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment source show".
        /// Get the details of a source control deployment configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public dynamic FunctionappDeploymentSourceShow(FunctionappDeploymentSourceShowSettings settings) {
            var baseCommand = "az functionapp deployment source show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment source sync".
        /// Synchronize from the repository. Only needed under manual integration mode.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public dynamic FunctionappDeploymentSourceSync(FunctionappDeploymentSourceSyncSettings settings) {
            var baseCommand = "az functionapp deployment source sync";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment source update-token".
        /// Update source control token cached in Azure app service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentSource")]
        public dynamic FunctionappDeploymentSourceUpdateToken(FunctionappDeploymentSourceUpdateTokenSettings settings) {
            var baseCommand = "az functionapp deployment source update-token";
            AppendIfNonNull(ref baseCommand, "--git-token", settings.GitToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment user set".
        /// Update deployment credentials.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentUser")]
        public dynamic FunctionappDeploymentUserSet(FunctionappDeploymentUserSetSettings settings) {
            var baseCommand = "az functionapp deployment user set";
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp deployment user show".
        /// Gets publishing user.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDeploymentUser")]
        public dynamic FunctionappDeploymentUserShow(FunctionappDeploymentUserShowSettings settings) {
            var baseCommand = "az functionapp deployment user show";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp devops-pipeline create".
        /// Create an Azure DevOps pipeline for a function app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappDevopsPipeline")]
        public dynamic FunctionappDevopsPipelineCreate(FunctionappDevopsPipelineCreateSettings settings) {
            var baseCommand = "az functionapp devops-pipeline create";
            AppendIfNonNull(ref baseCommand, "--allow-force-push", settings.AllowForcePush);
            AppendIfNonNull(ref baseCommand, "--functionapp-name", settings.FunctionappName);
            AppendIfNonNull(ref baseCommand, "--github-pat", settings.GithubPat);
            AppendIfNonNull(ref baseCommand, "--github-repository", settings.GithubRepository);
            AppendIfNonNull(ref baseCommand, "--organization-name", settings.OrganizationName);
            AppendIfNonNull(ref baseCommand, "--overwrite-yaml", settings.OverwriteYaml);
            AppendIfNonNull(ref baseCommand, "--project-name", settings.ProjectName);
            AppendIfNonNull(ref baseCommand, "--repository-name", settings.RepositoryName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp hybrid-connection add".
        /// Add a hybrid-connection to a functionapp.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappHybridConnection")]
        public dynamic FunctionappHybridConnectionAdd(FunctionappHybridConnectionAddSettings settings) {
            var baseCommand = "az functionapp hybrid-connection add";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection", settings.HybridConnection);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp hybrid-connection list".
        /// List the hybrid-connections on a functionapp.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappHybridConnection")]
        public dynamic FunctionappHybridConnectionList(FunctionappHybridConnectionListSettings settings) {
            var baseCommand = "az functionapp hybrid-connection list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp hybrid-connection remove".
        /// Remove a hybrid-connection from a functionapp.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappHybridConnection")]
        public dynamic FunctionappHybridConnectionRemove(FunctionappHybridConnectionRemoveSettings settings) {
            var baseCommand = "az functionapp hybrid-connection remove";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection", settings.HybridConnection);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp identity assign".
        /// Assign or disable managed service identity to the web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappIdentity")]
        public dynamic FunctionappIdentityAssign(FunctionappIdentityAssignSettings settings) {
            var baseCommand = "az functionapp identity assign";
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp identity remove".
        /// Disable web app's managed service identity.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappIdentity")]
        public dynamic FunctionappIdentityRemove(FunctionappIdentityRemoveSettings settings) {
            var baseCommand = "az functionapp identity remove";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp identity show".
        /// Display web app's managed service identity.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappIdentity")]
        public dynamic FunctionappIdentityShow(FunctionappIdentityShowSettings settings) {
            var baseCommand = "az functionapp identity show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp plan create".
        /// Create an App Service Plan for an Azure Function.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappPlan")]
        public dynamic FunctionappPlanCreate(FunctionappPlanCreateSettings settings) {
            var baseCommand = "az functionapp plan create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--is-linux", settings.IsLinux);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--max-burst", settings.MaxBurst);
            AppendIfNonNull(ref baseCommand, "--min-instances", settings.MinInstances);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp plan delete".
        /// Delete an App Service Plan.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappPlan")]
        public dynamic FunctionappPlanDelete(FunctionappPlanDeleteSettings settings) {
            var baseCommand = "az functionapp plan delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp plan list".
        /// List App Service Plans.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappPlan")]
        public dynamic FunctionappPlanList(FunctionappPlanListSettings settings) {
            var baseCommand = "az functionapp plan list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp plan show".
        /// Get the App Service Plans for a resource group or a set of resource groups.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappPlan")]
        public dynamic FunctionappPlanShow(FunctionappPlanShowSettings settings) {
            var baseCommand = "az functionapp plan show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp plan update".
        /// Update an App Service plan for an Azure Function.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappPlan")]
        public dynamic FunctionappPlanUpdate(FunctionappPlanUpdateSettings settings) {
            var baseCommand = "az functionapp plan update";
            AppendIfNonNull(ref baseCommand, "--max-burst", settings.MaxBurst);
            AppendIfNonNull(ref baseCommand, "--min-instances", settings.MinInstances);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp vnet-integration add".
        /// Add a regional virtual network integration to a functionapp.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappVnetIntegration")]
        public dynamic FunctionappVnetIntegrationAdd(FunctionappVnetIntegrationAddSettings settings) {
            var baseCommand = "az functionapp vnet-integration add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp vnet-integration list".
        /// List the virtual network integrations on a functionapp.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappVnetIntegration")]
        public dynamic FunctionappVnetIntegrationList(FunctionappVnetIntegrationListSettings settings) {
            var baseCommand = "az functionapp vnet-integration list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az functionapp vnet-integration remove".
        /// Remove a regional virtual network integration from functionapp.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzFunctionappVnetIntegration")]
        public dynamic FunctionappVnetIntegrationRemove(FunctionappVnetIntegrationRemoveSettings settings) {
            var baseCommand = "az functionapp vnet-integration remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group create".
        /// Create a new resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public dynamic GroupCreate(GroupCreateSettings settings) {
            var baseCommand = "az group create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group delete".
        /// Delete a resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public dynamic GroupDelete(GroupDeleteSettings settings) {
            var baseCommand = "az group delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group exists".
        /// Check if a resource group exists.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public dynamic GroupExists(GroupExistsSettings settings) {
            var baseCommand = "az group exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group export".
        /// Captures a resource group as a template.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public dynamic GroupExport(GroupExportSettings settings) {
            var baseCommand = "az group export";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--include-comments", settings.IncludeComments);
            AppendIfNonNull(ref baseCommand, "--include-parameter-default-value", settings.IncludeParameterDefaultValue);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group list".
        /// List resource groups.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public dynamic GroupList(GroupListSettings settings) {
            var baseCommand = "az group list";
            AppendIfNonNull(ref baseCommand, "--tag", settings.Tag);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group show".
        /// Gets a resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public dynamic GroupShow(GroupShowSettings settings) {
            var baseCommand = "az group show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group update".
        /// Update a resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public dynamic GroupUpdate(GroupUpdateSettings settings) {
            var baseCommand = "az group update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group wait".
        /// Place the CLI in a waiting state until a condition of the resource group is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroup")]
        public dynamic GroupWait(GroupWaitSettings settings) {
            var baseCommand = "az group wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group deployment create".
        /// Start a deployment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public dynamic GroupDeploymentCreate(GroupDeploymentCreateSettings settings) {
            var baseCommand = "az group deployment create";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--handle-extended-json-format", settings.HandleExtendedJsonFormat);
            AppendIfNonNull(ref baseCommand, "--mode", settings.Mode);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--rollback-on-error", settings.RollbackOnError);
            AppendIfNonNull(ref baseCommand, "--template-file", settings.TemplateFile);
            AppendIfNonNull(ref baseCommand, "--template-uri", settings.TemplateUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group deployment delete".
        /// Deletes a deployment from the deployment history.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public dynamic GroupDeploymentDelete(GroupDeploymentDeleteSettings settings) {
            var baseCommand = "az group deployment delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group deployment export".
        /// Export the template used for a deployment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public dynamic GroupDeploymentExport(GroupDeploymentExportSettings settings) {
            var baseCommand = "az group deployment export";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group deployment list".
        /// Get all the deployments for a resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public dynamic GroupDeploymentList(GroupDeploymentListSettings settings) {
            var baseCommand = "az group deployment list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group deployment show".
        /// Gets a deployment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public dynamic GroupDeploymentShow(GroupDeploymentShowSettings settings) {
            var baseCommand = "az group deployment show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group deployment validate".
        /// Validate whether a template is syntactically correct.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public dynamic GroupDeploymentValidate(GroupDeploymentValidateSettings settings) {
            var baseCommand = "az group deployment validate";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--handle-extended-json-format", settings.HandleExtendedJsonFormat);
            AppendIfNonNull(ref baseCommand, "--mode", settings.Mode);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--rollback-on-error", settings.RollbackOnError);
            AppendIfNonNull(ref baseCommand, "--template-file", settings.TemplateFile);
            AppendIfNonNull(ref baseCommand, "--template-uri", settings.TemplateUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group deployment wait".
        /// Place the CLI in a waiting state until a deployment condition is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeployment")]
        public dynamic GroupDeploymentWait(GroupDeploymentWaitSettings settings) {
            var baseCommand = "az group deployment wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group deployment operation list".
        /// Gets all deployments operations for a deployment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeploymentOperation")]
        public dynamic GroupDeploymentOperationList(GroupDeploymentOperationListSettings settings) {
            var baseCommand = "az group deployment operation list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group deployment operation show".
        /// Get a deployment's operation.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupDeploymentOperation")]
        public dynamic GroupDeploymentOperationShow(GroupDeploymentOperationShowSettings settings) {
            var baseCommand = "az group deployment operation show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--operation-ids", settings.OperationIds);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group lock create".
        /// Create a resource group lock.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupLock")]
        public dynamic GroupLockCreate(GroupLockCreateSettings settings) {
            var baseCommand = "az group lock create";
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group lock delete".
        /// Delete a resource group lock.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupLock")]
        public dynamic GroupLockDelete(GroupLockDeleteSettings settings) {
            var baseCommand = "az group lock delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group lock list".
        /// List lock information in the resource-group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupLock")]
        public dynamic GroupLockList(GroupLockListSettings settings) {
            var baseCommand = "az group lock list";
            AppendIfNonNull(ref baseCommand, "--filter-string", settings.FilterString);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group lock show".
        /// Show the details of a resource group lock.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupLock")]
        public dynamic GroupLockShow(GroupLockShowSettings settings) {
            var baseCommand = "az group lock show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az group lock update".
        /// Update a resource group lock.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzGroupLock")]
        public dynamic GroupLockUpdate(GroupLockUpdateSettings settings) {
            var baseCommand = "az group lock update";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight create".
        /// Create a new cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public dynamic HdinsightCreate(HdinsightCreateSettings settings) {
            var baseCommand = "az hdinsight create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-validation-timeout", settings.NoValidationTimeout);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--cluster-configurations", settings.ClusterConfigurations);
            AppendIfNonNull(ref baseCommand, "--cluster-tier", settings.ClusterTier);
            AppendIfNonNull(ref baseCommand, "--component-version", settings.ComponentVersion);
            AppendIfNonNull(ref baseCommand, "--esp", settings.Esp);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--encryption-algorithm", settings.EncryptionAlgorithm);
            AppendIfNonNull(ref baseCommand, "--encryption-key-name", settings.EncryptionKeyName);
            AppendIfNonNull(ref baseCommand, "--encryption-key-version", settings.EncryptionKeyVersion);
            AppendIfNonNull(ref baseCommand, "--encryption-vault-uri", settings.EncryptionVaultUri);
            AppendIfNonNull(ref baseCommand, "--cluster-admin-account", settings.ClusterAdminAccount);
            AppendIfNonNull(ref baseCommand, "--cluster-admin-password", settings.ClusterAdminPassword);
            AppendIfNonNull(ref baseCommand, "--cluster-users-group-dns", settings.ClusterUsersGroupDns);
            AppendIfNonNull(ref baseCommand, "--domain", settings.Domain);
            AppendIfNonNull(ref baseCommand, "--ldaps-urls", settings.LdapsUrls);
            AppendIfNonNull(ref baseCommand, "--http-password", settings.HttpPassword);
            AppendIfNonNull(ref baseCommand, "--http-user", settings.HttpUser);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--edgenode-size", settings.EdgenodeSize);
            AppendIfNonNull(ref baseCommand, "--headnode-size", settings.HeadnodeSize);
            AppendIfNonNull(ref baseCommand, "--workernode-count", settings.WorkernodeCount);
            AppendIfNonNull(ref baseCommand, "--workernode-data-disk-size", settings.WorkernodeDataDiskSize);
            AppendIfNonNull(ref baseCommand, "--workernode-data-disk-storage-account-type", settings.WorkernodeDataDiskStorageAccountType);
            AppendIfNonNull(ref baseCommand, "--workernode-data-disks-per-node", settings.WorkernodeDataDisksPerNode);
            AppendIfNonNull(ref baseCommand, "--workernode-size", settings.WorkernodeSize);
            AppendIfNonNull(ref baseCommand, "--zookeepernode-size", settings.ZookeepernodeSize);
            AppendIfNonNull(ref baseCommand, "--ssh-password", settings.SshPassword);
            AppendIfNonNull(ref baseCommand, "--ssh-public-key", settings.SshPublicKey);
            AppendIfNonNull(ref baseCommand, "--ssh-user", settings.SshUser);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--storage-account-key", settings.StorageAccountKey);
            AppendIfNonNull(ref baseCommand, "--storage-account-managed-identity", settings.StorageAccountManagedIdentity);
            AppendIfNonNull(ref baseCommand, "--storage-container", settings.StorageContainer);
            AppendIfNonNull(ref baseCommand, "--storage-filesystem", settings.StorageFilesystem);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight delete".
        /// Deletes the specified HDInsight cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public dynamic HdinsightDelete(HdinsightDeleteSettings settings) {
            var baseCommand = "az hdinsight delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight list".
        /// List HDInsight clusters in a resource group or subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public dynamic HdinsightList(HdinsightListSettings settings) {
            var baseCommand = "az hdinsight list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight list-usage".
        /// Lists the usages for the specified location.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public dynamic HdinsightListUsage(HdinsightListUsageSettings settings) {
            var baseCommand = "az hdinsight list-usage";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight resize".
        /// Resizes the specified HDInsight cluster to the specified size.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public dynamic HdinsightResize(HdinsightResizeSettings settings) {
            var baseCommand = "az hdinsight resize";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workernode-count", settings.WorkernodeCount);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight rotate-disk-encryption-key".
        /// Rotate the disk encryption key of the specified HDInsight cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public dynamic HdinsightRotateDiskEncryptionKey(HdinsightRotateDiskEncryptionKeySettings settings) {
            var baseCommand = "az hdinsight rotate-disk-encryption-key";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--encryption-key-name", settings.EncryptionKeyName);
            AppendIfNonNull(ref baseCommand, "--encryption-key-version", settings.EncryptionKeyVersion);
            AppendIfNonNull(ref baseCommand, "--encryption-vault-uri", settings.EncryptionVaultUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight show".
        /// Gets the specified cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public dynamic HdinsightShow(HdinsightShowSettings settings) {
            var baseCommand = "az hdinsight show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight update".
        /// Patch HDInsight cluster with the specified parameters.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public dynamic HdinsightUpdate(HdinsightUpdateSettings settings) {
            var baseCommand = "az hdinsight update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight wait".
        /// Place the CLI in a waiting state until an operation is complete.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsight")]
        public dynamic HdinsightWait(HdinsightWaitSettings settings) {
            var baseCommand = "az hdinsight wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight application create".
        /// Create an application for a HDInsight cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightApplication")]
        public dynamic HdinsightApplicationCreate(HdinsightApplicationCreateSettings settings) {
            var baseCommand = "az hdinsight application create";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--marketplace-id", settings.MarketplaceId);
            AppendIfNonNull(ref baseCommand, "--no-validation-timeout", settings.NoValidationTimeout);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--access-mode", settings.AccessMode);
            AppendIfNonNull(ref baseCommand, "--destination-port", settings.DestinationPort);
            AppendIfNonNull(ref baseCommand, "--disable-gateway-auth", settings.DisableGatewayAuth);
            AppendIfNonNull(ref baseCommand, "--sub-domain-suffix", settings.SubDomainSuffix);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--edgenode-size", settings.EdgenodeSize);
            AppendIfNonNull(ref baseCommand, "--ssh-password", settings.SshPassword);
            AppendIfNonNull(ref baseCommand, "--ssh-public-key", settings.SshPublicKey);
            AppendIfNonNull(ref baseCommand, "--ssh-user", settings.SshUser);
            AppendIfNonNull(ref baseCommand, "--script-action-name", settings.ScriptActionName);
            AppendIfNonNull(ref baseCommand, "--script-uri", settings.ScriptUri);
            AppendIfNonNull(ref baseCommand, "--script-parameters", settings.ScriptParameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight application delete".
        /// Deletes the specified application on the HDInsight cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightApplication")]
        public dynamic HdinsightApplicationDelete(HdinsightApplicationDeleteSettings settings) {
            var baseCommand = "az hdinsight application delete";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight application list".
        /// Lists all of the applications for the HDInsight cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightApplication")]
        public dynamic HdinsightApplicationList(HdinsightApplicationListSettings settings) {
            var baseCommand = "az hdinsight application list";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight application show".
        /// Gets properties of the specified application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightApplication")]
        public dynamic HdinsightApplicationShow(HdinsightApplicationShowSettings settings) {
            var baseCommand = "az hdinsight application show";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight application wait".
        /// Place the CLI in a waiting state until an operation is complete.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightApplication")]
        public dynamic HdinsightApplicationWait(HdinsightApplicationWaitSettings settings) {
            var baseCommand = "az hdinsight application wait";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight monitor disable".
        /// Disable the Azure Monitor logs integration on an HDInsight cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightMonitor")]
        public dynamic HdinsightMonitorDisable(HdinsightMonitorDisableSettings settings) {
            var baseCommand = "az hdinsight monitor disable";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight monitor enable".
        /// Enable the Azure Monitor logs integration on an HDInsight cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightMonitor")]
        public dynamic HdinsightMonitorEnable(HdinsightMonitorEnableSettings settings) {
            var baseCommand = "az hdinsight monitor enable";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace", settings.Workspace);
            AppendIfNonNull(ref baseCommand, "--no-validation-timeout", settings.NoValidationTimeout);
            AppendIfNonNull(ref baseCommand, "--primary-key", settings.PrimaryKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight monitor show".
        /// Get the status of Azure Monitor logs integration on an HDInsight cluster.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightMonitor")]
        public dynamic HdinsightMonitorShow(HdinsightMonitorShowSettings settings) {
            var baseCommand = "az hdinsight monitor show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight script-action delete".
        /// Deletes a specified persisted script action of the cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightScriptAction")]
        public dynamic HdinsightScriptActionDelete(HdinsightScriptActionDeleteSettings settings) {
            var baseCommand = "az hdinsight script-action delete";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight script-action execute".
        /// Execute script actions on the specified HDInsight cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightScriptAction")]
        public dynamic HdinsightScriptActionExecute(HdinsightScriptActionExecuteSettings settings) {
            var baseCommand = "az hdinsight script-action execute";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--roles", settings.Roles);
            AppendIfNonNull(ref baseCommand, "--script-uri", settings.ScriptUri);
            AppendIfNonNull(ref baseCommand, "--persist-on-success", settings.PersistOnSuccess);
            AppendIfNonNull(ref baseCommand, "--script-parameters", settings.ScriptParameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight script-action list".
        /// Lists all the persisted script actions for the specified cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightScriptAction")]
        public dynamic HdinsightScriptActionList(HdinsightScriptActionListSettings settings) {
            var baseCommand = "az hdinsight script-action list";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight script-action list-execution-history".
        /// Lists all scripts' execution history for the specified cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightScriptAction")]
        public dynamic HdinsightScriptActionListExecutionHistory(HdinsightScriptActionListExecutionHistorySettings settings) {
            var baseCommand = "az hdinsight script-action list-execution-history";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight script-action promote".
        /// Promotes the specified ad-hoc script execution to a persisted script.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightScriptAction")]
        public dynamic HdinsightScriptActionPromote(HdinsightScriptActionPromoteSettings settings) {
            var baseCommand = "az hdinsight script-action promote";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--execution-id", settings.ExecutionId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az hdinsight script-action show-execution-details".
        /// Gets the script execution detail for the given script execution ID.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzHdinsightScriptAction")]
        public dynamic HdinsightScriptActionShowExecutionDetails(HdinsightScriptActionShowExecutionDetailsSettings settings) {
            var baseCommand = "az hdinsight script-action show-execution-details";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--execution-id", settings.ExecutionId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az identity create".
        /// Create or update an identity in the specified subscription and resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIdentity")]
        public dynamic IdentityCreate(IdentityCreateSettings settings) {
            var baseCommand = "az identity create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az identity delete".
        /// Deletes the identity.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIdentity")]
        public dynamic IdentityDelete(IdentityDeleteSettings settings) {
            var baseCommand = "az identity delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az identity list".
        /// List Managed Service Identities.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIdentity")]
        public dynamic IdentityList(IdentityListSettings settings) {
            var baseCommand = "az identity list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az identity list-operations".
        /// Lists available operations for the Managed Identity provider.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIdentity")]
        public dynamic IdentityListOperations(IdentityListOperationsSettings settings) {
            var baseCommand = "az identity list-operations";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az identity show".
        /// Gets the identity.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIdentity")]
        public dynamic IdentityShow(IdentityShowSettings settings) {
            var baseCommand = "az identity show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image create".
        /// Create a custom Virtual Machine Image from managed disks or snapshots.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImage")]
        public dynamic ImageCreate(ImageCreateSettings settings) {
            var baseCommand = "az image create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--data-disk-caching", settings.DataDiskCaching);
            AppendIfNonNull(ref baseCommand, "--data-disk-sources", settings.DataDiskSources);
            AppendIfNonNull(ref baseCommand, "--hyper-v-generation", settings.HyperVGeneration);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--os-disk-caching", settings.OsDiskCaching);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--storage-sku", settings.StorageSku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-resilient", settings.ZoneResilient);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image delete".
        /// Deletes an Image.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImage")]
        public dynamic ImageDelete(ImageDeleteSettings settings) {
            var baseCommand = "az image delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image list".
        /// List custom VM images.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImage")]
        public dynamic ImageList(ImageListSettings settings) {
            var baseCommand = "az image list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image show".
        /// Gets an image.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImage")]
        public dynamic ImageShow(ImageShowSettings settings) {
            var baseCommand = "az image show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image update".
        /// Update custom VM images.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImage")]
        public dynamic ImageUpdate(ImageUpdateSettings settings) {
            var baseCommand = "az image update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template create".
        /// Create an image builder template.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public dynamic ImageTemplateCreate(ImageTemplateCreateSettings settings) {
            var baseCommand = "az image template create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--build-timeout", settings.BuildTimeout);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--scripts", settings.Scripts);
            AppendIfNonNull(ref baseCommand, "--checksum", settings.Checksum);
            AppendIfNonNull(ref baseCommand, "--image-source", settings.ImageSource);
            AppendIfNonNull(ref baseCommand, "--managed-image-destinations", settings.ManagedImageDestinations);
            AppendIfNonNull(ref baseCommand, "--shared-image-destinations", settings.SharedImageDestinations);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template delete".
        /// Delete image builder template.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public dynamic ImageTemplateDelete(ImageTemplateDeleteSettings settings) {
            var baseCommand = "az image template delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template list".
        /// List image builder templates.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public dynamic ImageTemplateList(ImageTemplateListSettings settings) {
            var baseCommand = "az image template list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template run".
        /// Build an image builder template.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public dynamic ImageTemplateRun(ImageTemplateRunSettings settings) {
            var baseCommand = "az image template run";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template show".
        /// Show an image builder template.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public dynamic ImageTemplateShow(ImageTemplateShowSettings settings) {
            var baseCommand = "az image template show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template show-runs".
        /// Show an image builder template's run outputs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public dynamic ImageTemplateShowRuns(ImageTemplateShowRunsSettings settings) {
            var baseCommand = "az image template show-runs";
            AppendIfNonNull(ref baseCommand, "--output-name", settings.OutputName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template update".
        /// Update an image builder template.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public dynamic ImageTemplateUpdate(ImageTemplateUpdateSettings settings) {
            var baseCommand = "az image template update";
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template wait".
        /// Place the CLI in a waiting state until a condition of the template is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplate")]
        public dynamic ImageTemplateWait(ImageTemplateWaitSettings settings) {
            var baseCommand = "az image template wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template customizer add".
        /// Add an image builder customizer to an image builder template.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplateCustomizer")]
        public dynamic ImageTemplateCustomizerAdd(ImageTemplateCustomizerAddSettings settings) {
            var baseCommand = "az image template customizer add";
            AppendIfNonNull(ref baseCommand, "--customizer-name", settings.CustomizerName);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--dest-path", settings.DestPath);
            AppendIfNonNull(ref baseCommand, "--file-source", settings.FileSource);
            AppendIfNonNull(ref baseCommand, "--exit-codes", settings.ExitCodes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--inline-script", settings.InlineScript);
            AppendIfNonNull(ref baseCommand, "--script-url", settings.ScriptUrl);
            AppendIfNonNull(ref baseCommand, "--restart-check-command", settings.RestartCheckCommand);
            AppendIfNonNull(ref baseCommand, "--restart-command", settings.RestartCommand);
            AppendIfNonNull(ref baseCommand, "--restart-timeout", settings.RestartTimeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template customizer clear".
        /// Remove all image builder customizers from an image builder template.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplateCustomizer")]
        public dynamic ImageTemplateCustomizerClear(ImageTemplateCustomizerClearSettings settings) {
            var baseCommand = "az image template customizer clear";
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template customizer remove".
        /// Remove an image builder customizer from an image builder template.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplateCustomizer")]
        public dynamic ImageTemplateCustomizerRemove(ImageTemplateCustomizerRemoveSettings settings) {
            var baseCommand = "az image template customizer remove";
            AppendIfNonNull(ref baseCommand, "--customizer-name", settings.CustomizerName);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template output add".
        /// Add an image builder output distributor to an image builder template.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplateOutput")]
        public dynamic ImageTemplateOutputAdd(ImageTemplateOutputAddSettings settings) {
            var baseCommand = "az image template output add";
            AppendIfNonNull(ref baseCommand, "--artifact-tags", settings.ArtifactTags);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--output-name", settings.OutputName);
            AppendIfNonNull(ref baseCommand, "--managed-image", settings.ManagedImage);
            AppendIfNonNull(ref baseCommand, "--managed-image-location", settings.ManagedImageLocation);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--gallery-replication-regions", settings.GalleryReplicationRegions);
            AppendIfNonNull(ref baseCommand, "--is-vhd", settings.IsVhd);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template output clear".
        /// Remove all image builder output distributors from an image builder template.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplateOutput")]
        public dynamic ImageTemplateOutputClear(ImageTemplateOutputClearSettings settings) {
            var baseCommand = "az image template output clear";
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az image template output remove".
        /// Remove an image builder output distributor from an image builder template.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzImageTemplateOutput")]
        public dynamic ImageTemplateOutputRemove(ImageTemplateOutputRemoveSettings settings) {
            var baseCommand = "az image template output remove";
            AppendIfNonNull(ref baseCommand, "--output-name", settings.OutputName);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps create".
        /// Create an Azure IoT Hub device provisioning service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDps")]
        public dynamic IotDpsCreate(IotDpsCreateSettings settings) {
            var baseCommand = "az iot dps create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--unit", settings.Unit);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps delete".
        /// Delete an Azure IoT Hub device provisioning service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDps")]
        public dynamic IotDpsDelete(IotDpsDeleteSettings settings) {
            var baseCommand = "az iot dps delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps list".
        /// List Azure IoT Hub device provisioning services.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDps")]
        public dynamic IotDpsList(IotDpsListSettings settings) {
            var baseCommand = "az iot dps list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps show".
        /// Get the details of an Azure IoT Hub device provisioning service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDps")]
        public dynamic IotDpsShow(IotDpsShowSettings settings) {
            var baseCommand = "az iot dps show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps update".
        /// Update an Azure IoT Hub device provisioning service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDps")]
        public dynamic IotDpsUpdate(IotDpsUpdateSettings settings) {
            var baseCommand = "az iot dps update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps access-policy create".
        /// Create a new shared access policy in an Azure IoT Hub device provisioning service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsAccessPolicy")]
        public dynamic IotDpsAccessPolicyCreate(IotDpsAccessPolicyCreateSettings settings) {
            var baseCommand = "az iot dps access-policy create";
            AppendIfNonNull(ref baseCommand, "--access-policy-name", settings.AccessPolicyName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--primary-key", settings.PrimaryKey);
            AppendIfNonNull(ref baseCommand, "--secondary-key", settings.SecondaryKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps access-policy delete".
        /// Delete a shared access policies in an Azure IoT Hub device provisioning service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsAccessPolicy")]
        public dynamic IotDpsAccessPolicyDelete(IotDpsAccessPolicyDeleteSettings settings) {
            var baseCommand = "az iot dps access-policy delete";
            AppendIfNonNull(ref baseCommand, "--access-policy-name", settings.AccessPolicyName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps access-policy list".
        /// List all shared access policies in an Azure IoT Hub device provisioning service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsAccessPolicy")]
        public dynamic IotDpsAccessPolicyList(IotDpsAccessPolicyListSettings settings) {
            var baseCommand = "az iot dps access-policy list";
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps access-policy show".
        /// Show details of a shared access policies in an Azure IoT Hub device provisioning service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsAccessPolicy")]
        public dynamic IotDpsAccessPolicyShow(IotDpsAccessPolicyShowSettings settings) {
            var baseCommand = "az iot dps access-policy show";
            AppendIfNonNull(ref baseCommand, "--access-policy-name", settings.AccessPolicyName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps access-policy update".
        /// Update a shared access policy in an Azure IoT Hub device provisioning service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsAccessPolicy")]
        public dynamic IotDpsAccessPolicyUpdate(IotDpsAccessPolicyUpdateSettings settings) {
            var baseCommand = "az iot dps access-policy update";
            AppendIfNonNull(ref baseCommand, "--access-policy-name", settings.AccessPolicyName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--primary-key", settings.PrimaryKey);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--secondary-key", settings.SecondaryKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps certificate create".
        /// Create/upload an Azure IoT Hub Device Provisioning Service certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public dynamic IotDpsCertificateCreate(IotDpsCertificateCreateSettings settings) {
            var baseCommand = "az iot dps certificate create";
            AppendIfNonNull(ref baseCommand, "--certificate-name", settings.CertificateName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps certificate delete".
        /// Delete an Azure IoT Hub Device Provisioning Service certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public dynamic IotDpsCertificateDelete(IotDpsCertificateDeleteSettings settings) {
            var baseCommand = "az iot dps certificate delete";
            AppendIfNonNull(ref baseCommand, "--certificate-name", settings.CertificateName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps certificate generate-verification-code".
        /// Generate a verification code for an Azure IoT Hub Device Provisioning Service certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public dynamic IotDpsCertificateGenerateVerificationCode(IotDpsCertificateGenerateVerificationCodeSettings settings) {
            var baseCommand = "az iot dps certificate generate-verification-code";
            AppendIfNonNull(ref baseCommand, "--certificate-name", settings.CertificateName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps certificate list".
        /// List all certificates contained within an Azure IoT Hub device provisioning service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public dynamic IotDpsCertificateList(IotDpsCertificateListSettings settings) {
            var baseCommand = "az iot dps certificate list";
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps certificate show".
        /// Show information about a particular Azure IoT Hub Device Provisioning Service certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public dynamic IotDpsCertificateShow(IotDpsCertificateShowSettings settings) {
            var baseCommand = "az iot dps certificate show";
            AppendIfNonNull(ref baseCommand, "--certificate-name", settings.CertificateName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps certificate update".
        /// Update an Azure IoT Hub Device Provisioning Service certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public dynamic IotDpsCertificateUpdate(IotDpsCertificateUpdateSettings settings) {
            var baseCommand = "az iot dps certificate update";
            AppendIfNonNull(ref baseCommand, "--certificate-name", settings.CertificateName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps certificate verify".
        /// Verify an Azure IoT Hub Device Provisioning Service certificate.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsCertificate")]
        public dynamic IotDpsCertificateVerify(IotDpsCertificateVerifySettings settings) {
            var baseCommand = "az iot dps certificate verify";
            AppendIfNonNull(ref baseCommand, "--certificate-name", settings.CertificateName);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps linked-hub create".
        /// Create a linked IoT hub in an Azure IoT Hub device provisioning service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsLinkedHub")]
        public dynamic IotDpsLinkedHubCreate(IotDpsLinkedHubCreateSettings settings) {
            var baseCommand = "az iot dps linked-hub create";
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allocation-weight", settings.AllocationWeight);
            AppendIfNonNull(ref baseCommand, "--apply-allocation-policy", settings.ApplyAllocationPolicy);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps linked-hub delete".
        /// Update a linked IoT hub in an Azure IoT Hub device provisioning service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsLinkedHub")]
        public dynamic IotDpsLinkedHubDelete(IotDpsLinkedHubDeleteSettings settings) {
            var baseCommand = "az iot dps linked-hub delete";
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--linked-hub", settings.LinkedHub);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps linked-hub list".
        /// List all linked IoT hubs in an Azure IoT Hub device provisioning service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsLinkedHub")]
        public dynamic IotDpsLinkedHubList(IotDpsLinkedHubListSettings settings) {
            var baseCommand = "az iot dps linked-hub list";
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps linked-hub show".
        /// Show details of a linked IoT hub in an Azure IoT Hub device provisioning service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsLinkedHub")]
        public dynamic IotDpsLinkedHubShow(IotDpsLinkedHubShowSettings settings) {
            var baseCommand = "az iot dps linked-hub show";
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--linked-hub", settings.LinkedHub);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot dps linked-hub update".
        /// Update a linked IoT hub in an Azure IoT Hub device provisioning service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotDpsLinkedHub")]
        public dynamic IotDpsLinkedHubUpdate(IotDpsLinkedHubUpdateSettings settings) {
            var baseCommand = "az iot dps linked-hub update";
            AppendIfNonNull(ref baseCommand, "--dps-name", settings.DpsName);
            AppendIfNonNull(ref baseCommand, "--linked-hub", settings.LinkedHub);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allocation-weight", settings.AllocationWeight);
            AppendIfNonNull(ref baseCommand, "--apply-allocation-policy", settings.ApplyAllocationPolicy);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub create".
        /// Create an Azure IoT hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public dynamic IotHubCreate(IotHubCreateSettings settings) {
            var baseCommand = "az iot hub create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--c2d-max-delivery-count", settings.C2dMaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--c2d-ttl", settings.C2dTtl);
            AppendIfNonNull(ref baseCommand, "--fc", settings.Fc);
            AppendIfNonNull(ref baseCommand, "--fcs", settings.Fcs);
            AppendIfNonNull(ref baseCommand, "--fd", settings.Fd);
            AppendIfNonNull(ref baseCommand, "--feedback-lock-duration", settings.FeedbackLockDuration);
            AppendIfNonNull(ref baseCommand, "--feedback-ttl", settings.FeedbackTtl);
            AppendIfNonNull(ref baseCommand, "--fileupload-notification-max-delivery-count", settings.FileuploadNotificationMaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--fileupload-notification-ttl", settings.FileuploadNotificationTtl);
            AppendIfNonNull(ref baseCommand, "--fileupload-notifications", settings.FileuploadNotifications);
            AppendIfNonNull(ref baseCommand, "--fileupload-sas-ttl", settings.FileuploadSasTtl);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--partition-count", settings.PartitionCount);
            AppendIfNonNull(ref baseCommand, "--rd", settings.Rd);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--unit", settings.Unit);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub delete".
        /// Delete an IoT hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public dynamic IotHubDelete(IotHubDeleteSettings settings) {
            var baseCommand = "az iot hub delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub list".
        /// List IoT hubs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public dynamic IotHubList(IotHubListSettings settings) {
            var baseCommand = "az iot hub list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub list-skus".
        /// List available pricing tiers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public dynamic IotHubListSkus(IotHubListSkusSettings settings) {
            var baseCommand = "az iot hub list-skus";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub manual-failover".
        /// Initiate a manual failover for the IoT Hub to the geo-paired disaster recovery region.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public dynamic IotHubManualFailover(IotHubManualFailoverSettings settings) {
            var baseCommand = "az iot hub manual-failover";
            AppendIfNonNull(ref baseCommand, "--failover-region", settings.FailoverRegion);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub show".
        /// Get the details of an IoT hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public dynamic IotHubShow(IotHubShowSettings settings) {
            var baseCommand = "az iot hub show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub show-connection-string".
        /// Show the connection strings for an IoT hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public dynamic IotHubShowConnectionString(IotHubShowConnectionStringSettings settings) {
            var baseCommand = "az iot hub show-connection-string";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub show-quota-metrics".
        /// Get the quota metrics for an IoT hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public dynamic IotHubShowQuotaMetrics(IotHubShowQuotaMetricsSettings settings) {
            var baseCommand = "az iot hub show-quota-metrics";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub show-stats".
        /// Get the statistics for an IoT hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public dynamic IotHubShowStats(IotHubShowStatsSettings settings) {
            var baseCommand = "az iot hub show-stats";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub update".
        /// Update metadata for an IoT hub.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHub")]
        public dynamic IotHubUpdate(IotHubUpdateSettings settings) {
            var baseCommand = "az iot hub update";
            AppendIfNonNull(ref baseCommand, "--c2d-max-delivery-count", settings.C2dMaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--c2d-ttl", settings.C2dTtl);
            AppendIfNonNull(ref baseCommand, "--fc", settings.Fc);
            AppendIfNonNull(ref baseCommand, "--fcs", settings.Fcs);
            AppendIfNonNull(ref baseCommand, "--fd", settings.Fd);
            AppendIfNonNull(ref baseCommand, "--feedback-lock-duration", settings.FeedbackLockDuration);
            AppendIfNonNull(ref baseCommand, "--feedback-ttl", settings.FeedbackTtl);
            AppendIfNonNull(ref baseCommand, "--fileupload-notification-max-delivery-count", settings.FileuploadNotificationMaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--fileupload-notification-ttl", settings.FileuploadNotificationTtl);
            AppendIfNonNull(ref baseCommand, "--fileupload-notifications", settings.FileuploadNotifications);
            AppendIfNonNull(ref baseCommand, "--fileupload-sas-ttl", settings.FileuploadSasTtl);
            AppendIfNonNull(ref baseCommand, "--rd", settings.Rd);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--unit", settings.Unit);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub certificate create".
        /// Create/upload an Azure IoT Hub certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public dynamic IotHubCertificateCreate(IotHubCertificateCreateSettings settings) {
            var baseCommand = "az iot hub certificate create";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub certificate delete".
        /// Deletes an Azure IoT Hub certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public dynamic IotHubCertificateDelete(IotHubCertificateDeleteSettings settings) {
            var baseCommand = "az iot hub certificate delete";
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub certificate generate-verification-code".
        /// Generates a verification code for an Azure IoT Hub certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public dynamic IotHubCertificateGenerateVerificationCode(IotHubCertificateGenerateVerificationCodeSettings settings) {
            var baseCommand = "az iot hub certificate generate-verification-code";
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub certificate list".
        /// Lists all certificates contained within an Azure IoT Hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public dynamic IotHubCertificateList(IotHubCertificateListSettings settings) {
            var baseCommand = "az iot hub certificate list";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub certificate show".
        /// Shows information about a particular Azure IoT Hub certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public dynamic IotHubCertificateShow(IotHubCertificateShowSettings settings) {
            var baseCommand = "az iot hub certificate show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub certificate update".
        /// Update an Azure IoT Hub certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public dynamic IotHubCertificateUpdate(IotHubCertificateUpdateSettings settings) {
            var baseCommand = "az iot hub certificate update";
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub certificate verify".
        /// Verifies an Azure IoT Hub certificate.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubCertificate")]
        public dynamic IotHubCertificateVerify(IotHubCertificateVerifySettings settings) {
            var baseCommand = "az iot hub certificate verify";
            AppendIfNonNull(ref baseCommand, "--etag", settings.Etag);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub consumer-group create".
        /// Create an event hub consumer group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubConsumerGroup")]
        public dynamic IotHubConsumerGroupCreate(IotHubConsumerGroupCreateSettings settings) {
            var baseCommand = "az iot hub consumer-group create";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--event-hub-name", settings.EventHubName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub consumer-group delete".
        /// Delete an event hub consumer group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubConsumerGroup")]
        public dynamic IotHubConsumerGroupDelete(IotHubConsumerGroupDeleteSettings settings) {
            var baseCommand = "az iot hub consumer-group delete";
            AppendIfNonNull(ref baseCommand, "--event-hub-name", settings.EventHubName);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub consumer-group list".
        /// List event hub consumer groups.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubConsumerGroup")]
        public dynamic IotHubConsumerGroupList(IotHubConsumerGroupListSettings settings) {
            var baseCommand = "az iot hub consumer-group list";
            AppendIfNonNull(ref baseCommand, "--event-hub-name", settings.EventHubName);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub consumer-group show".
        /// Get the details for an event hub consumer group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubConsumerGroup")]
        public dynamic IotHubConsumerGroupShow(IotHubConsumerGroupShowSettings settings) {
            var baseCommand = "az iot hub consumer-group show";
            AppendIfNonNull(ref baseCommand, "--event-hub-name", settings.EventHubName);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub devicestream show".
        /// Get IoT Hub's device streams endpoints.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubDevicestream")]
        public dynamic IotHubDevicestreamShow(IotHubDevicestreamShowSettings settings) {
            var baseCommand = "az iot hub devicestream show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub job cancel".
        /// Cancel a job in an IoT hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubJob")]
        public dynamic IotHubJobCancel(IotHubJobCancelSettings settings) {
            var baseCommand = "az iot hub job cancel";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub job list".
        /// List the jobs in an IoT hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubJob")]
        public dynamic IotHubJobList(IotHubJobListSettings settings) {
            var baseCommand = "az iot hub job list";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub job show".
        /// Get the details of a job in an IoT hub.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubJob")]
        public dynamic IotHubJobShow(IotHubJobShowSettings settings) {
            var baseCommand = "az iot hub job show";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--job-id", settings.JobId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub message-enrichment create".
        /// Create a message enrichment for chosen endpoints in your IoT Hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubMessageEnrichment")]
        public dynamic IotHubMessageEnrichmentCreate(IotHubMessageEnrichmentCreateSettings settings) {
            var baseCommand = "az iot hub message-enrichment create";
            AppendIfNonNull(ref baseCommand, "--endpoints", settings.Endpoints);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub message-enrichment delete".
        /// Delete a message enrichment in your IoT hub (by key).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubMessageEnrichment")]
        public dynamic IotHubMessageEnrichmentDelete(IotHubMessageEnrichmentDeleteSettings settings) {
            var baseCommand = "az iot hub message-enrichment delete";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub message-enrichment list".
        /// Get information on all message enrichments for your IoT Hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubMessageEnrichment")]
        public dynamic IotHubMessageEnrichmentList(IotHubMessageEnrichmentListSettings settings) {
            var baseCommand = "az iot hub message-enrichment list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub message-enrichment update".
        /// Update a message enrichment in your IoT hub (by key).  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubMessageEnrichment")]
        public dynamic IotHubMessageEnrichmentUpdate(IotHubMessageEnrichmentUpdateSettings settings) {
            var baseCommand = "az iot hub message-enrichment update";
            AppendIfNonNull(ref baseCommand, "--endpoints", settings.Endpoints);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub policy create".
        /// Create a new shared access policy in an IoT hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubPolicy")]
        public dynamic IotHubPolicyCreate(IotHubPolicyCreateSettings settings) {
            var baseCommand = "az iot hub policy create";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub policy delete".
        /// Delete a shared access policy from an IoT hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubPolicy")]
        public dynamic IotHubPolicyDelete(IotHubPolicyDeleteSettings settings) {
            var baseCommand = "az iot hub policy delete";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub policy list".
        /// List shared access policies of an IoT hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubPolicy")]
        public dynamic IotHubPolicyList(IotHubPolicyListSettings settings) {
            var baseCommand = "az iot hub policy list";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub policy renew-key".
        /// Regenerate keys of a shared access policy of an IoT hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubPolicy")]
        public dynamic IotHubPolicyRenewKey(IotHubPolicyRenewKeySettings settings) {
            var baseCommand = "az iot hub policy renew-key";
            AppendIfNonNull(ref baseCommand, "--renew-key", settings.RenewKey);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub policy show".
        /// Get the details of a shared access policy of an IoT hub.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubPolicy")]
        public dynamic IotHubPolicyShow(IotHubPolicyShowSettings settings) {
            var baseCommand = "az iot hub policy show";
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub route create".
        /// Create a route in IoT Hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoute")]
        public dynamic IotHubRouteCreate(IotHubRouteCreateSettings settings) {
            var baseCommand = "az iot hub route create";
            AppendIfNonNull(ref baseCommand, "--en", settings.En);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--condition", settings.Condition);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub route delete".
        /// Delete all or mentioned route for your IoT Hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoute")]
        public dynamic IotHubRouteDelete(IotHubRouteDeleteSettings settings) {
            var baseCommand = "az iot hub route delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub route list".
        /// Get all the routes in IoT Hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoute")]
        public dynamic IotHubRouteList(IotHubRouteListSettings settings) {
            var baseCommand = "az iot hub route list";
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub route show".
        /// Get information about the route in IoT Hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoute")]
        public dynamic IotHubRouteShow(IotHubRouteShowSettings settings) {
            var baseCommand = "az iot hub route show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub route test".
        /// Test all routes or mentioned route in IoT Hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoute")]
        public dynamic IotHubRouteTest(IotHubRouteTestSettings settings) {
            var baseCommand = "az iot hub route test";
            AppendIfNonNull(ref baseCommand, "--ap", settings.Ap);
            AppendIfNonNull(ref baseCommand, "--body", settings.Body);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--sp", settings.Sp);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub route update".
        /// Update a route in IoT Hub.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoute")]
        public dynamic IotHubRouteUpdate(IotHubRouteUpdateSettings settings) {
            var baseCommand = "az iot hub route update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--condition", settings.Condition);
            AppendIfNonNull(ref baseCommand, "--en", settings.En);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub routing-endpoint create".
        /// Add an endpoint to your IoT Hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoutingEndpoint")]
        public dynamic IotHubRoutingEndpointCreate(IotHubRoutingEndpointCreateSettings settings) {
            var baseCommand = "az iot hub routing-endpoint create";
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--endpoint-resource-group", settings.EndpointResourceGroup);
            AppendIfNonNull(ref baseCommand, "--endpoint-subscription-id", settings.EndpointSubscriptionId);
            AppendIfNonNull(ref baseCommand, "--endpoint-type", settings.EndpointType);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--batch-frequency", settings.BatchFrequency);
            AppendIfNonNull(ref baseCommand, "--chunk-size", settings.ChunkSize);
            AppendIfNonNull(ref baseCommand, "--container", settings.Container);
            AppendIfNonNull(ref baseCommand, "--encoding", settings.Encoding);
            AppendIfNonNull(ref baseCommand, "--ff", settings.Ff);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub routing-endpoint delete".
        /// Delete all or mentioned endpoint for your IoT Hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoutingEndpoint")]
        public dynamic IotHubRoutingEndpointDelete(IotHubRoutingEndpointDeleteSettings settings) {
            var baseCommand = "az iot hub routing-endpoint delete";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--endpoint-type", settings.EndpointType);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub routing-endpoint list".
        /// Get information on all the endpoints for your IoT Hub.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoutingEndpoint")]
        public dynamic IotHubRoutingEndpointList(IotHubRoutingEndpointListSettings settings) {
            var baseCommand = "az iot hub routing-endpoint list";
            AppendIfNonNull(ref baseCommand, "--endpoint-type", settings.EndpointType);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot hub routing-endpoint show".
        /// Get information on mentioned endpoint for your IoT Hub.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotHubRoutingEndpoint")]
        public dynamic IotHubRoutingEndpointShow(IotHubRoutingEndpointShowSettings settings) {
            var baseCommand = "az iot hub routing-endpoint show";
            AppendIfNonNull(ref baseCommand, "--endpoint-name", settings.EndpointName);
            AppendIfNonNull(ref baseCommand, "--hub-name", settings.HubName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot pnp key create".
        /// Create a key for the given repository.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpKey")]
        public dynamic IotPnpKeyCreate(IotPnpKeyCreateSettings settings) {
            var baseCommand = "az iot pnp key create";
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot pnp key delete".
        /// Delete a key from the given repository.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpKey")]
        public dynamic IotPnpKeyDelete(IotPnpKeyDeleteSettings settings) {
            var baseCommand = "az iot pnp key delete";
            AppendIfNonNull(ref baseCommand, "--key-id", settings.KeyId);
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot pnp key list".
        /// List repository's keys.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpKey")]
        public dynamic IotPnpKeyList(IotPnpKeyListSettings settings) {
            var baseCommand = "az iot pnp key list";
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot pnp key show".
        /// Get the details of a repository key.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpKey")]
        public dynamic IotPnpKeyShow(IotPnpKeyShowSettings settings) {
            var baseCommand = "az iot pnp key show";
            AppendIfNonNull(ref baseCommand, "--key-id", settings.KeyId);
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot pnp key update".
        /// Update the key for the given repository.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpKey")]
        public dynamic IotPnpKeyUpdate(IotPnpKeyUpdateSettings settings) {
            var baseCommand = "az iot pnp key update";
            AppendIfNonNull(ref baseCommand, "--key-id", settings.KeyId);
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot pnp repository create".
        /// Create an IoT Plug and Play repository.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpRepository")]
        public dynamic IotPnpRepositoryCreate(IotPnpRepositoryCreateSettings settings) {
            var baseCommand = "az iot pnp repository create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot pnp repository delete".
        /// Delete an IoT Plug and Play repository.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpRepository")]
        public dynamic IotPnpRepositoryDelete(IotPnpRepositoryDeleteSettings settings) {
            var baseCommand = "az iot pnp repository delete";
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot pnp repository get-provision-status".
        /// Returns the IoT Plug and Play repository provisioning status.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpRepository")]
        public dynamic IotPnpRepositoryGetProvisionStatus(IotPnpRepositoryGetProvisionStatusSettings settings) {
            var baseCommand = "az iot pnp repository get-provision-status";
            AppendIfNonNull(ref baseCommand, "--provisioning-State", settings.ProvisioningState);
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot pnp repository list".
        /// List IoT Plug and Play repositories.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpRepository")]
        public dynamic IotPnpRepositoryList(IotPnpRepositoryListSettings settings) {
            var baseCommand = "az iot pnp repository list";
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot pnp repository show".
        /// Gets the details for an IoT Plug and Play repository.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpRepository")]
        public dynamic IotPnpRepositoryShow(IotPnpRepositoryShowSettings settings) {
            var baseCommand = "az iot pnp repository show";
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iot pnp repository update".
        /// Update an IoT Plug and Play repository.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotPnpRepository")]
        public dynamic IotPnpRepositoryUpdate(IotPnpRepositoryUpdateSettings settings) {
            var baseCommand = "az iot pnp repository update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--repo-id", settings.RepoId);
            AppendIfNonNull(ref baseCommand, "--endpoint", settings.Endpoint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iotcentral app create".
        /// Create an IoT Central application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotcentralApp")]
        public dynamic IotcentralAppCreate(IotcentralAppCreateSettings settings) {
            var baseCommand = "az iotcentral app create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subdomain", settings.Subdomain);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--template", settings.Template);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iotcentral app delete".
        /// Delete an IoT Central application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotcentralApp")]
        public dynamic IotcentralAppDelete(IotcentralAppDeleteSettings settings) {
            var baseCommand = "az iotcentral app delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iotcentral app list".
        /// List IoT Central applications.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotcentralApp")]
        public dynamic IotcentralAppList(IotcentralAppListSettings settings) {
            var baseCommand = "az iotcentral app list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iotcentral app show".
        /// Get the details of an IoT Central application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotcentralApp")]
        public dynamic IotcentralAppShow(IotcentralAppShowSettings settings) {
            var baseCommand = "az iotcentral app show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az iotcentral app update".
        /// Update metadata for an IoT Central application.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzIotcentralApp")]
        public dynamic IotcentralAppUpdate(IotcentralAppUpdateSettings settings) {
            var baseCommand = "az iotcentral app update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault create".
        /// Create a key vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public dynamic KeyvaultCreate(KeyvaultCreateSettings settings) {
            var baseCommand = "az keyvault create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--enable-purge-protection", settings.EnablePurgeProtection);
            AppendIfNonNull(ref baseCommand, "--enable-soft-delete", settings.EnableSoftDelete);
            AppendIfNonNull(ref baseCommand, "--enabled-for-deployment", settings.EnabledForDeployment);
            AppendIfNonNull(ref baseCommand, "--enabled-for-disk-encryption", settings.EnabledForDiskEncryption);
            AppendIfNonNull(ref baseCommand, "--enabled-for-template-deployment", settings.EnabledForTemplateDeployment);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-self-perms", settings.NoSelfPerms);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--bypass", settings.Bypass);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault delete".
        /// Delete a key vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public dynamic KeyvaultDelete(KeyvaultDeleteSettings settings) {
            var baseCommand = "az keyvault delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault delete-policy".
        /// Delete security policy settings for a Key Vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public dynamic KeyvaultDeletePolicy(KeyvaultDeletePolicySettings settings) {
            var baseCommand = "az keyvault delete-policy";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--spn", settings.Spn);
            AppendIfNonNull(ref baseCommand, "--upn", settings.Upn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault list".
        /// List key vaults.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public dynamic KeyvaultList(KeyvaultListSettings settings) {
            var baseCommand = "az keyvault list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault list-deleted".
        /// Gets information about the deleted vaults in a subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public dynamic KeyvaultListDeleted(KeyvaultListDeletedSettings settings) {
            var baseCommand = "az keyvault list-deleted";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault purge".
        /// Permanently deletes the specified vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public dynamic KeyvaultPurge(KeyvaultPurgeSettings settings) {
            var baseCommand = "az keyvault purge";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault recover".
        /// Recover a key vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public dynamic KeyvaultRecover(KeyvaultRecoverSettings settings) {
            var baseCommand = "az keyvault recover";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault set-policy".
        /// Update security policy settings for a Key Vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public dynamic KeyvaultSetPolicy(KeyvaultSetPolicySettings settings) {
            var baseCommand = "az keyvault set-policy";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--spn", settings.Spn);
            AppendIfNonNull(ref baseCommand, "--upn", settings.Upn);
            AppendIfNonNull(ref baseCommand, "--certificate-permissions", settings.CertificatePermissions);
            AppendIfNonNull(ref baseCommand, "--key-permissions", settings.KeyPermissions);
            AppendIfNonNull(ref baseCommand, "--secret-permissions", settings.SecretPermissions);
            AppendIfNonNull(ref baseCommand, "--storage-permissions", settings.StoragePermissions);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault show".
        /// Show details of a key vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public dynamic KeyvaultShow(KeyvaultShowSettings settings) {
            var baseCommand = "az keyvault show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault update".
        /// Update the properties of a key vault.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvault")]
        public dynamic KeyvaultUpdate(KeyvaultUpdateSettings settings) {
            var baseCommand = "az keyvault update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--enable-purge-protection", settings.EnablePurgeProtection);
            AppendIfNonNull(ref baseCommand, "--enable-soft-delete", settings.EnableSoftDelete);
            AppendIfNonNull(ref baseCommand, "--enabled-for-deployment", settings.EnabledForDeployment);
            AppendIfNonNull(ref baseCommand, "--enabled-for-disk-encryption", settings.EnabledForDiskEncryption);
            AppendIfNonNull(ref baseCommand, "--enabled-for-template-deployment", settings.EnabledForTemplateDeployment);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--bypass", settings.Bypass);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate create".
        /// Create a Key Vault certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificateCreate(KeyvaultCertificateCreateSettings settings) {
            var baseCommand = "az keyvault certificate create";
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--validity", settings.Validity);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate delete".
        /// Deletes a certificate from a specified key vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificateDelete(KeyvaultCertificateDeleteSettings settings) {
            var baseCommand = "az keyvault certificate delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate download".
        /// Download the public portion of a Key Vault certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificateDownload(KeyvaultCertificateDownloadSettings settings) {
            var baseCommand = "az keyvault certificate download";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--encoding", settings.Encoding);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate get-default-policy".
        /// Get the default policy for self-signed certificates.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificateGetDefaultPolicy(KeyvaultCertificateGetDefaultPolicySettings settings) {
            var baseCommand = "az keyvault certificate get-default-policy";
            AppendIfNonNull(ref baseCommand, "--scaffold", settings.Scaffold);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate import".
        /// Import a certificate into KeyVault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificateImport(KeyvaultCertificateImportSettings settings) {
            var baseCommand = "az keyvault certificate import";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate list".
        /// List certificates in a specified key vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificateList(KeyvaultCertificateListSettings settings) {
            var baseCommand = "az keyvault certificate list";
            AppendIfNonNull(ref baseCommand, "--include-pending", settings.IncludePending);
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate list-deleted".
        /// Lists the deleted certificates in the specified vault currently available for recovery.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificateListDeleted(KeyvaultCertificateListDeletedSettings settings) {
            var baseCommand = "az keyvault certificate list-deleted";
            AppendIfNonNull(ref baseCommand, "--include-pending", settings.IncludePending);
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate list-versions".
        /// List the versions of a certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificateListVersions(KeyvaultCertificateListVersionsSettings settings) {
            var baseCommand = "az keyvault certificate list-versions";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate purge".
        /// Permanently deletes the specified deleted certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificatePurge(KeyvaultCertificatePurgeSettings settings) {
            var baseCommand = "az keyvault certificate purge";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate recover".
        /// Recovers the deleted certificate back to its current version under /certificates.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificateRecover(KeyvaultCertificateRecoverSettings settings) {
            var baseCommand = "az keyvault certificate recover";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate set-attributes".
        /// Updates the specified attributes associated with the given certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificateSetAttributes(KeyvaultCertificateSetAttributesSettings settings) {
            var baseCommand = "az keyvault certificate set-attributes";
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate show".
        /// Gets information about a certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificateShow(KeyvaultCertificateShowSettings settings) {
            var baseCommand = "az keyvault certificate show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate show-deleted".
        /// Retrieves information about the specified deleted certificate.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificate")]
        public dynamic KeyvaultCertificateShowDeleted(KeyvaultCertificateShowDeletedSettings settings) {
            var baseCommand = "az keyvault certificate show-deleted";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate contact add".
        /// Add a contact to the specified vault to receive notifications of certificate operations.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateContact")]
        public dynamic KeyvaultCertificateContactAdd(KeyvaultCertificateContactAddSettings settings) {
            var baseCommand = "az keyvault certificate contact add";
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--phone", settings.Phone);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate contact delete".
        /// Remove a certificate contact from the specified vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateContact")]
        public dynamic KeyvaultCertificateContactDelete(KeyvaultCertificateContactDeleteSettings settings) {
            var baseCommand = "az keyvault certificate contact delete";
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate contact list".
        /// Lists the certificate contacts for a specified key vault.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateContact")]
        public dynamic KeyvaultCertificateContactList(KeyvaultCertificateContactListSettings settings) {
            var baseCommand = "az keyvault certificate contact list";
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate issuer create".
        /// Create a certificate issuer record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuer")]
        public dynamic KeyvaultCertificateIssuerCreate(KeyvaultCertificateIssuerCreateSettings settings) {
            var baseCommand = "az keyvault certificate issuer create";
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--provider-name", settings.ProviderName);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--account-id", settings.AccountId);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--organization-id", settings.OrganizationId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate issuer delete".
        /// Deletes the specified certificate issuer.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuer")]
        public dynamic KeyvaultCertificateIssuerDelete(KeyvaultCertificateIssuerDeleteSettings settings) {
            var baseCommand = "az keyvault certificate issuer delete";
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate issuer list".
        /// List certificate issuers for a specified key vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuer")]
        public dynamic KeyvaultCertificateIssuerList(KeyvaultCertificateIssuerListSettings settings) {
            var baseCommand = "az keyvault certificate issuer list";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate issuer show".
        /// Lists the specified certificate issuer.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuer")]
        public dynamic KeyvaultCertificateIssuerShow(KeyvaultCertificateIssuerShowSettings settings) {
            var baseCommand = "az keyvault certificate issuer show";
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate issuer update".
        /// Update a certificate issuer record.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuer")]
        public dynamic KeyvaultCertificateIssuerUpdate(KeyvaultCertificateIssuerUpdateSettings settings) {
            var baseCommand = "az keyvault certificate issuer update";
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--provider-name", settings.ProviderName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--account-id", settings.AccountId);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--organization-id", settings.OrganizationId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate issuer admin add".
        /// Add admin details for a specified certificate issuer.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuerAdmin")]
        public dynamic KeyvaultCertificateIssuerAdminAdd(KeyvaultCertificateIssuerAdminAddSettings settings) {
            var baseCommand = "az keyvault certificate issuer admin add";
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--first-name", settings.FirstName);
            AppendIfNonNull(ref baseCommand, "--last-name", settings.LastName);
            AppendIfNonNull(ref baseCommand, "--phone", settings.Phone);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate issuer admin delete".
        /// Remove admin details for the specified certificate issuer.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuerAdmin")]
        public dynamic KeyvaultCertificateIssuerAdminDelete(KeyvaultCertificateIssuerAdminDeleteSettings settings) {
            var baseCommand = "az keyvault certificate issuer admin delete";
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate issuer admin list".
        /// List admins for a specified certificate issuer.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificateIssuerAdmin")]
        public dynamic KeyvaultCertificateIssuerAdminList(KeyvaultCertificateIssuerAdminListSettings settings) {
            var baseCommand = "az keyvault certificate issuer admin list";
            AppendIfNonNull(ref baseCommand, "--issuer-name", settings.IssuerName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate pending delete".
        /// Deletes the creation operation for a specific certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificatePending")]
        public dynamic KeyvaultCertificatePendingDelete(KeyvaultCertificatePendingDeleteSettings settings) {
            var baseCommand = "az keyvault certificate pending delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate pending merge".
        /// Merges a certificate or a certificate chain with a key pair existing on the server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificatePending")]
        public dynamic KeyvaultCertificatePendingMerge(KeyvaultCertificatePendingMergeSettings settings) {
            var baseCommand = "az keyvault certificate pending merge";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--not-before", settings.NotBefore);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault certificate pending show".
        /// Gets the creation operation of a certificate.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultCertificatePending")]
        public dynamic KeyvaultCertificatePendingShow(KeyvaultCertificatePendingShowSettings settings) {
            var baseCommand = "az keyvault certificate pending show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key backup".
        /// Requests that a backup of the specified key be downloaded to the client.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeyBackup(KeyvaultKeyBackupSettings settings) {
            var baseCommand = "az keyvault key backup";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key create".
        /// Creates a new key, stores it, then returns key parameters and attributes to the client.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeyCreate(KeyvaultKeyCreateSettings settings) {
            var baseCommand = "az keyvault key create";
            AppendIfNonNull(ref baseCommand, "--curve", settings.Curve);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--kty", settings.Kty);
            AppendIfNonNull(ref baseCommand, "--not-before", settings.NotBefore);
            AppendIfNonNull(ref baseCommand, "--ops", settings.Ops);
            AppendIfNonNull(ref baseCommand, "--protection", settings.Protection);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key delete".
        /// Deletes a key of any type from storage in Azure Key Vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeyDelete(KeyvaultKeyDeleteSettings settings) {
            var baseCommand = "az keyvault key delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key import".
        /// Import a private key.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeyImport(KeyvaultKeyImportSettings settings) {
            var baseCommand = "az keyvault key import";
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--not-before", settings.NotBefore);
            AppendIfNonNull(ref baseCommand, "--ops", settings.Ops);
            AppendIfNonNull(ref baseCommand, "--protection", settings.Protection);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--byok-file", settings.ByokFile);
            AppendIfNonNull(ref baseCommand, "--pem-file", settings.PemFile);
            AppendIfNonNull(ref baseCommand, "--pem-password", settings.PemPassword);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key list".
        /// List keys in the specified vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeyList(KeyvaultKeyListSettings settings) {
            var baseCommand = "az keyvault key list";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key list-deleted".
        /// Lists the deleted keys in the specified vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeyListDeleted(KeyvaultKeyListDeletedSettings settings) {
            var baseCommand = "az keyvault key list-deleted";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key list-versions".
        /// Retrieves a list of individual key versions with the same key name.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeyListVersions(KeyvaultKeyListVersionsSettings settings) {
            var baseCommand = "az keyvault key list-versions";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key purge".
        /// Permanently deletes the specified key.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeyPurge(KeyvaultKeyPurgeSettings settings) {
            var baseCommand = "az keyvault key purge";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key recover".
        /// Recovers the deleted key to its latest version.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeyRecover(KeyvaultKeyRecoverSettings settings) {
            var baseCommand = "az keyvault key recover";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key restore".
        /// Restores a backed up key to a vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeyRestore(KeyvaultKeyRestoreSettings settings) {
            var baseCommand = "az keyvault key restore";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key set-attributes".
        /// The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeySetAttributes(KeyvaultKeySetAttributesSettings settings) {
            var baseCommand = "az keyvault key set-attributes";
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--not-before", settings.NotBefore);
            AppendIfNonNull(ref baseCommand, "--ops", settings.Ops);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key show".
        /// Gets the public part of a stored key.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeyShow(KeyvaultKeyShowSettings settings) {
            var baseCommand = "az keyvault key show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault key show-deleted".
        /// Gets the public part of a deleted key.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultKey")]
        public dynamic KeyvaultKeyShowDeleted(KeyvaultKeyShowDeletedSettings settings) {
            var baseCommand = "az keyvault key show-deleted";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault network-rule add".
        /// Add a network rule to the network ACLs for a Key Vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultNetworkRule")]
        public dynamic KeyvaultNetworkRuleAdd(KeyvaultNetworkRuleAddSettings settings) {
            var baseCommand = "az keyvault network-rule add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault network-rule list".
        /// Lists the network rules from the network ACLs for a Key Vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultNetworkRule")]
        public dynamic KeyvaultNetworkRuleList(KeyvaultNetworkRuleListSettings settings) {
            var baseCommand = "az keyvault network-rule list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault network-rule remove".
        /// Removes a network rule from the network ACLs for a Key Vault.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultNetworkRule")]
        public dynamic KeyvaultNetworkRuleRemove(KeyvaultNetworkRuleRemoveSettings settings) {
            var baseCommand = "az keyvault network-rule remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret backup".
        /// Backs up the specified secret.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretBackup(KeyvaultSecretBackupSettings settings) {
            var baseCommand = "az keyvault secret backup";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret delete".
        /// Deletes a secret from a specified key vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretDelete(KeyvaultSecretDeleteSettings settings) {
            var baseCommand = "az keyvault secret delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret download".
        /// Download a secret from a KeyVault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretDownload(KeyvaultSecretDownloadSettings settings) {
            var baseCommand = "az keyvault secret download";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--encoding", settings.Encoding);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret list".
        /// List secrets in a specified key vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretList(KeyvaultSecretListSettings settings) {
            var baseCommand = "az keyvault secret list";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret list-deleted".
        /// Lists deleted secrets for the specified vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretListDeleted(KeyvaultSecretListDeletedSettings settings) {
            var baseCommand = "az keyvault secret list-deleted";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret list-versions".
        /// List all versions of the specified secret.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretListVersions(KeyvaultSecretListVersionsSettings settings) {
            var baseCommand = "az keyvault secret list-versions";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret purge".
        /// Permanently deletes the specified secret.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretPurge(KeyvaultSecretPurgeSettings settings) {
            var baseCommand = "az keyvault secret purge";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret recover".
        /// Recovers the deleted secret to the latest version.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretRecover(KeyvaultSecretRecoverSettings settings) {
            var baseCommand = "az keyvault secret recover";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret restore".
        /// Restores a backed up secret to a vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretRestore(KeyvaultSecretRestoreSettings settings) {
            var baseCommand = "az keyvault secret restore";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret set".
        /// Create a secret (if one doesn't exist) or update a secret in a KeyVault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretSet(KeyvaultSecretSetSettings settings) {
            var baseCommand = "az keyvault secret set";
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--not-before", settings.NotBefore);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--encoding", settings.Encoding);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret set-attributes".
        /// Updates the attributes associated with a specified secret in a given key vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretSetAttributes(KeyvaultSecretSetAttributesSettings settings) {
            var baseCommand = "az keyvault secret set-attributes";
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--expires", settings.Expires);
            AppendIfNonNull(ref baseCommand, "--not-before", settings.NotBefore);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret show".
        /// Get a specified secret from a given key vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretShow(KeyvaultSecretShowSettings settings) {
            var baseCommand = "az keyvault secret show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault secret show-deleted".
        /// Gets the specified deleted secret.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultSecret")]
        public dynamic KeyvaultSecretShowDeleted(KeyvaultSecretShowDeletedSettings settings) {
            var baseCommand = "az keyvault secret show-deleted";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage add".
        /// Creates or updates a new storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public dynamic KeyvaultStorageAdd(KeyvaultStorageAddSettings settings) {
            var baseCommand = "az keyvault storage add";
            AppendIfNonNull(ref baseCommand, "--active-key-name", settings.ActiveKeyName);
            AppendIfNonNull(ref baseCommand, "--resource-id", settings.ResourceId);
            AppendIfNonNull(ref baseCommand, "--auto-regenerate-key", settings.AutoRegenerateKey);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--regeneration-period", settings.RegenerationPeriod);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage backup".
        /// Backs up the specified storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public dynamic KeyvaultStorageBackup(KeyvaultStorageBackupSettings settings) {
            var baseCommand = "az keyvault storage backup";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage list".
        /// List storage accounts managed by the specified key vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public dynamic KeyvaultStorageList(KeyvaultStorageListSettings settings) {
            var baseCommand = "az keyvault storage list";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage list-deleted".
        /// Lists deleted storage accounts for the specified vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public dynamic KeyvaultStorageListDeleted(KeyvaultStorageListDeletedSettings settings) {
            var baseCommand = "az keyvault storage list-deleted";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage purge".
        /// Permanently deletes the specified storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public dynamic KeyvaultStoragePurge(KeyvaultStoragePurgeSettings settings) {
            var baseCommand = "az keyvault storage purge";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage recover".
        /// Recovers the deleted storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public dynamic KeyvaultStorageRecover(KeyvaultStorageRecoverSettings settings) {
            var baseCommand = "az keyvault storage recover";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage regenerate-key".
        /// Regenerates the specified key value for the given storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public dynamic KeyvaultStorageRegenerateKey(KeyvaultStorageRegenerateKeySettings settings) {
            var baseCommand = "az keyvault storage regenerate-key";
            AppendIfNonNull(ref baseCommand, "--key-name", settings.KeyName);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage remove".
        /// Deletes a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public dynamic KeyvaultStorageRemove(KeyvaultStorageRemoveSettings settings) {
            var baseCommand = "az keyvault storage remove";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage restore".
        /// Restores a backed up storage account to a vault.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public dynamic KeyvaultStorageRestore(KeyvaultStorageRestoreSettings settings) {
            var baseCommand = "az keyvault storage restore";
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage show".
        /// Gets information about a specified storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public dynamic KeyvaultStorageShow(KeyvaultStorageShowSettings settings) {
            var baseCommand = "az keyvault storage show";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage show-deleted".
        /// Gets the specified deleted storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public dynamic KeyvaultStorageShowDeleted(KeyvaultStorageShowDeletedSettings settings) {
            var baseCommand = "az keyvault storage show-deleted";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage update".
        /// Updates the specified attributes associated with the given storage account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorage")]
        public dynamic KeyvaultStorageUpdate(KeyvaultStorageUpdateSettings settings) {
            var baseCommand = "az keyvault storage update";
            AppendIfNonNull(ref baseCommand, "--active-key-name", settings.ActiveKeyName);
            AppendIfNonNull(ref baseCommand, "--auto-regenerate-key", settings.AutoRegenerateKey);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--regeneration-period", settings.RegenerationPeriod);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage sas-definition create".
        /// Creates or updates a new SAS definition for the specified storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public dynamic KeyvaultStorageSasDefinitionCreate(KeyvaultStorageSasDefinitionCreateSettings settings) {
            var baseCommand = "az keyvault storage sas-definition create";
            AppendIfNonNull(ref baseCommand, "--sas-type", settings.SasType);
            AppendIfNonNull(ref baseCommand, "--template-uri", settings.TemplateUri);
            AppendIfNonNull(ref baseCommand, "--validity-period", settings.ValidityPeriod);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage sas-definition delete".
        /// Deletes a SAS definition from a specified storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public dynamic KeyvaultStorageSasDefinitionDelete(KeyvaultStorageSasDefinitionDeleteSettings settings) {
            var baseCommand = "az keyvault storage sas-definition delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage sas-definition list".
        /// List storage SAS definitions for the given storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public dynamic KeyvaultStorageSasDefinitionList(KeyvaultStorageSasDefinitionListSettings settings) {
            var baseCommand = "az keyvault storage sas-definition list";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage sas-definition list-deleted".
        /// Lists deleted SAS definitions for the specified vault and storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public dynamic KeyvaultStorageSasDefinitionListDeleted(KeyvaultStorageSasDefinitionListDeletedSettings settings) {
            var baseCommand = "az keyvault storage sas-definition list-deleted";
            AppendIfNonNull(ref baseCommand, "--maxresults", settings.Maxresults);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage sas-definition recover".
        /// Recovers the deleted SAS definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public dynamic KeyvaultStorageSasDefinitionRecover(KeyvaultStorageSasDefinitionRecoverSettings settings) {
            var baseCommand = "az keyvault storage sas-definition recover";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage sas-definition show".
        /// Gets information about a SAS definition for the specified storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public dynamic KeyvaultStorageSasDefinitionShow(KeyvaultStorageSasDefinitionShowSettings settings) {
            var baseCommand = "az keyvault storage sas-definition show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage sas-definition show-deleted".
        /// Gets the specified deleted sas definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public dynamic KeyvaultStorageSasDefinitionShowDeleted(KeyvaultStorageSasDefinitionShowDeletedSettings settings) {
            var baseCommand = "az keyvault storage sas-definition show-deleted";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az keyvault storage sas-definition update".
        /// Updates the specified attributes associated with the given SAS definition.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKeyvaultStorageSasDefinition")]
        public dynamic KeyvaultStorageSasDefinitionUpdate(KeyvaultStorageSasDefinitionUpdateSettings settings) {
            var baseCommand = "az keyvault storage sas-definition update";
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--sas-type", settings.SasType);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--template-uri", settings.TemplateUri);
            AppendIfNonNull(ref baseCommand, "--validity-period", settings.ValidityPeriod);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto cluster create".
        /// Create a Kusto cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public dynamic KustoClusterCreate(KustoClusterCreateSettings settings) {
            var baseCommand = "az kusto cluster create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto cluster delete".
        /// Delete a Kusto cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public dynamic KustoClusterDelete(KustoClusterDeleteSettings settings) {
            var baseCommand = "az kusto cluster delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto cluster list".
        /// List a Kusto cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public dynamic KustoClusterList(KustoClusterListSettings settings) {
            var baseCommand = "az kusto cluster list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto cluster show".
        /// Get a Kusto cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public dynamic KustoClusterShow(KustoClusterShowSettings settings) {
            var baseCommand = "az kusto cluster show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto cluster start".
        /// Start a Kusto cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public dynamic KustoClusterStart(KustoClusterStartSettings settings) {
            var baseCommand = "az kusto cluster start";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto cluster stop".
        /// Stop a Kusto cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public dynamic KustoClusterStop(KustoClusterStopSettings settings) {
            var baseCommand = "az kusto cluster stop";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto cluster update".
        /// Update a Kusto cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public dynamic KustoClusterUpdate(KustoClusterUpdateSettings settings) {
            var baseCommand = "az kusto cluster update";
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto cluster wait".
        /// Wait for a managed Kusto cluster to reach a desired state.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoCluster")]
        public dynamic KustoClusterWait(KustoClusterWaitSettings settings) {
            var baseCommand = "az kusto cluster wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto database create".
        /// Create a Kusto database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoDatabase")]
        public dynamic KustoDatabaseCreate(KustoDatabaseCreateSettings settings) {
            var baseCommand = "az kusto database create";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--hot-cache-period", settings.HotCachePeriod);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--soft-delete-period", settings.SoftDeletePeriod);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto database delete".
        /// Delete a Kusto database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoDatabase")]
        public dynamic KustoDatabaseDelete(KustoDatabaseDeleteSettings settings) {
            var baseCommand = "az kusto database delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto database list".
        /// List a Kusto database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoDatabase")]
        public dynamic KustoDatabaseList(KustoDatabaseListSettings settings) {
            var baseCommand = "az kusto database list";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto database show".
        /// Get a Kusto database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoDatabase")]
        public dynamic KustoDatabaseShow(KustoDatabaseShowSettings settings) {
            var baseCommand = "az kusto database show";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto database update".
        /// Update a Kusto database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoDatabase")]
        public dynamic KustoDatabaseUpdate(KustoDatabaseUpdateSettings settings) {
            var baseCommand = "az kusto database update";
            AppendIfNonNull(ref baseCommand, "--soft-delete-period", settings.SoftDeletePeriod);
            AppendIfNonNull(ref baseCommand, "--hot-cache-period", settings.HotCachePeriod);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az kusto database wait".
        /// Wait for a managed Kusto database to reach a desired state.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzKustoDatabase")]
        public dynamic KustoDatabaseWait(KustoDatabaseWaitSettings settings) {
            var baseCommand = "az kusto database wait";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab delete".
        /// Delete lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLab")]
        public dynamic LabDelete(LabDeleteSettings settings) {
            var baseCommand = "az lab delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab get".
        /// Get lab.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLab")]
        public dynamic LabGet(LabGetSettings settings) {
            var baseCommand = "az lab get";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab arm-template list".
        /// List azure resource manager templates in a given artifact source.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabArmTemplate")]
        public dynamic LabArmTemplateList(LabArmTemplateListSettings settings) {
            var baseCommand = "az lab arm-template list";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab arm-template show".
        /// Get the details of an ARM template in a lab.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabArmTemplate")]
        public dynamic LabArmTemplateShow(LabArmTemplateShowSettings settings) {
            var baseCommand = "az lab arm-template show";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--export-parameters", settings.ExportParameters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab artifact list".
        /// List artifacts in a given artifact source.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabArtifact")]
        public dynamic LabArtifactList(LabArtifactListSettings settings) {
            var baseCommand = "az lab artifact list";
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab artifact-source list".
        /// List artifact sources in a given lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabArtifactSource")]
        public dynamic LabArtifactSourceList(LabArtifactSourceListSettings settings) {
            var baseCommand = "az lab artifact-source list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab artifact-source show".
        /// Get artifact source.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabArtifactSource")]
        public dynamic LabArtifactSourceShow(LabArtifactSourceShowSettings settings) {
            var baseCommand = "az lab artifact-source show";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab custom-image create".
        /// Create a custom image in a DevTest Lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabCustomImage")]
        public dynamic LabCustomImageCreate(LabCustomImageCreateSettings settings) {
            var baseCommand = "az lab custom-image create";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--os-state", settings.OsState);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-vm-id", settings.SourceVmId);
            AppendIfNonNull(ref baseCommand, "--author", settings.Author);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab custom-image delete".
        /// Delete custom image.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabCustomImage")]
        public dynamic LabCustomImageDelete(LabCustomImageDeleteSettings settings) {
            var baseCommand = "az lab custom-image delete";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab custom-image list".
        /// List custom images in a given lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabCustomImage")]
        public dynamic LabCustomImageList(LabCustomImageListSettings settings) {
            var baseCommand = "az lab custom-image list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab custom-image show".
        /// Get custom image.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabCustomImage")]
        public dynamic LabCustomImageShow(LabCustomImageShowSettings settings) {
            var baseCommand = "az lab custom-image show";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab environment create".
        /// Create an environment in a lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabEnvironment")]
        public dynamic LabEnvironmentCreate(LabEnvironmentCreateSettings settings) {
            var baseCommand = "az lab environment create";
            AppendIfNonNull(ref baseCommand, "--arm-template", settings.ArmTemplate);
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--artifact-source-name", settings.ArtifactSourceName);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab environment delete".
        /// Delete an environment from a lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabEnvironment")]
        public dynamic LabEnvironmentDelete(LabEnvironmentDeleteSettings settings) {
            var baseCommand = "az lab environment delete";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab environment list".
        /// List environments in a lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabEnvironment")]
        public dynamic LabEnvironmentList(LabEnvironmentListSettings settings) {
            var baseCommand = "az lab environment list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab environment show".
        /// Get the details for an environment of a lab.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabEnvironment")]
        public dynamic LabEnvironmentShow(LabEnvironmentShowSettings settings) {
            var baseCommand = "az lab environment show";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab formula delete".
        /// Delete formula.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabFormula")]
        public dynamic LabFormulaDelete(LabFormulaDeleteSettings settings) {
            var baseCommand = "az lab formula delete";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab formula export-artifacts".
        /// Export artifacts from a formula.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabFormula")]
        public dynamic LabFormulaExportArtifacts(LabFormulaExportArtifactsSettings settings) {
            var baseCommand = "az lab formula export-artifacts";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab formula list".
        /// List formulas in a given lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabFormula")]
        public dynamic LabFormulaList(LabFormulaListSettings settings) {
            var baseCommand = "az lab formula list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab formula show".
        /// Show formulae from an Azure DevTest Lab.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabFormula")]
        public dynamic LabFormulaShow(LabFormulaShowSettings settings) {
            var baseCommand = "az lab formula show";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab gallery-image list".
        /// List gallery images in a given lab.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabGalleryImage")]
        public dynamic LabGalleryImageList(LabGalleryImageListSettings settings) {
            var baseCommand = "az lab gallery-image list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab secret delete".
        /// Delete secret.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabSecret")]
        public dynamic LabSecretDelete(LabSecretDeleteSettings settings) {
            var baseCommand = "az lab secret delete";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab secret list".
        /// List secrets in a given user profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabSecret")]
        public dynamic LabSecretList(LabSecretListSettings settings) {
            var baseCommand = "az lab secret list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab secret set".
        /// Set a secret for a lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabSecret")]
        public dynamic LabSecretSet(LabSecretSetSettings settings) {
            var baseCommand = "az lab secret set";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab secret show".
        /// Get secret.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabSecret")]
        public dynamic LabSecretShow(LabSecretShowSettings settings) {
            var baseCommand = "az lab secret show";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab vm apply-artifacts".
        /// Apply artifacts to a virtual machine in Azure DevTest Lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public dynamic LabVmApplyArtifacts(LabVmApplyArtifactsSettings settings) {
            var baseCommand = "az lab vm apply-artifacts";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--artifacts", settings.Artifacts);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab vm claim".
        /// Claim a virtual machine from the Lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public dynamic LabVmClaim(LabVmClaimSettings settings) {
            var baseCommand = "az lab vm claim";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab vm create".
        /// Create a VM in a lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public dynamic LabVmCreate(LabVmCreateSettings settings) {
            var baseCommand = "az lab vm create";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allow-claim", settings.AllowClaim);
            AppendIfNonNull(ref baseCommand, "--artifacts", settings.Artifacts);
            AppendIfNonNull(ref baseCommand, "--disk-type", settings.DiskType);
            AppendIfNonNull(ref baseCommand, "--expiration-date", settings.ExpirationDate);
            AppendIfNonNull(ref baseCommand, "--formula", settings.Formula);
            AppendIfNonNull(ref baseCommand, "--generate-ssh-keys", settings.GenerateSshKeys);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--image-type", settings.ImageType);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-username", settings.AdminUsername);
            AppendIfNonNull(ref baseCommand, "--authentication-type", settings.AuthenticationType);
            AppendIfNonNull(ref baseCommand, "--saved-secret", settings.SavedSecret);
            AppendIfNonNull(ref baseCommand, "--ssh-key", settings.SshKey);
            AppendIfNonNull(ref baseCommand, "--ip-configuration", settings.IpConfiguration);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab vm delete".
        /// Delete virtual machine.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public dynamic LabVmDelete(LabVmDeleteSettings settings) {
            var baseCommand = "az lab vm delete";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab vm list".
        /// List the VMs in an Azure DevTest Lab.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public dynamic LabVmList(LabVmListSettings settings) {
            var baseCommand = "az lab vm list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--claimable", settings.Claimable);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--order-by", settings.OrderBy);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--environment", settings.Environment);
            AppendIfNonNull(ref baseCommand, "--filters", settings.Filters);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab vm show".
        /// Get virtual machine.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public dynamic LabVmShow(LabVmShowSettings settings) {
            var baseCommand = "az lab vm show";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab vm start".
        /// Start a virtual machine.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public dynamic LabVmStart(LabVmStartSettings settings) {
            var baseCommand = "az lab vm start";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab vm stop".
        /// Stop a virtual machine This operation can take a while to complete.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVm")]
        public dynamic LabVmStop(LabVmStopSettings settings) {
            var baseCommand = "az lab vm stop";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab vnet get".
        /// Get virtual network.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVnet")]
        public dynamic LabVnetGet(LabVnetGetSettings settings) {
            var baseCommand = "az lab vnet get";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lab vnet list".
        /// List virtual networks in a given lab.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLabVnet")]
        public dynamic LabVnetList(LabVnetListSettings settings) {
            var baseCommand = "az lab vnet list";
            AppendIfNonNull(ref baseCommand, "--lab-name", settings.LabName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lock create".
        /// Create a lock.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLock")]
        public dynamic LockCreate(LockCreateSettings settings) {
            var baseCommand = "az lock create";
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lock delete".
        /// Delete a lock.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLock")]
        public dynamic LockDelete(LockDeleteSettings settings) {
            var baseCommand = "az lock delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lock list".
        /// List lock information.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLock")]
        public dynamic LockList(LockListSettings settings) {
            var baseCommand = "az lock list";
            AppendIfNonNull(ref baseCommand, "--filter-string", settings.FilterString);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lock show".
        /// Show the properties of a lock.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLock")]
        public dynamic LockShow(LockShowSettings settings) {
            var baseCommand = "az lock show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az lock update".
        /// Update a lock.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzLock")]
        public dynamic LockUpdate(LockUpdateSettings settings) {
            var baseCommand = "az lock update";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedapp create".
        /// Create a managed application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedapp")]
        public dynamic ManagedappCreate(ManagedappCreateSettings settings) {
            var baseCommand = "az managedapp create";
            AppendIfNonNull(ref baseCommand, "--kind", settings.Kind);
            AppendIfNonNull(ref baseCommand, "--managed-rg-id", settings.ManagedRgId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--managedapp-definition-id", settings.ManagedappDefinitionId);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--plan-name", settings.PlanName);
            AppendIfNonNull(ref baseCommand, "--plan-product", settings.PlanProduct);
            AppendIfNonNull(ref baseCommand, "--plan-publisher", settings.PlanPublisher);
            AppendIfNonNull(ref baseCommand, "--plan-version", settings.PlanVersion);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedapp delete".
        /// Delete a managed application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedapp")]
        public dynamic ManagedappDelete(ManagedappDeleteSettings settings) {
            var baseCommand = "az managedapp delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedapp list".
        /// List managed applications.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedapp")]
        public dynamic ManagedappList(ManagedappListSettings settings) {
            var baseCommand = "az managedapp list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedapp show".
        /// Gets a managed application.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedapp")]
        public dynamic ManagedappShow(ManagedappShowSettings settings) {
            var baseCommand = "az managedapp show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedapp definition create".
        /// Create a managed application definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedappDefinition")]
        public dynamic ManagedappDefinitionCreate(ManagedappDefinitionCreateSettings settings) {
            var baseCommand = "az managedapp definition create";
            AppendIfNonNull(ref baseCommand, "--authorizations", settings.Authorizations);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--lock-level", settings.LockLevel);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--create-ui-definition", settings.CreateUiDefinition);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--main-template", settings.MainTemplate);
            AppendIfNonNull(ref baseCommand, "--package-file-uri", settings.PackageFileUri);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedapp definition delete".
        /// Delete a managed application definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedappDefinition")]
        public dynamic ManagedappDefinitionDelete(ManagedappDefinitionDeleteSettings settings) {
            var baseCommand = "az managedapp definition delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedapp definition list".
        /// List managed application definitions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedappDefinition")]
        public dynamic ManagedappDefinitionList(ManagedappDefinitionListSettings settings) {
            var baseCommand = "az managedapp definition list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedapp definition show".
        /// Gets a managed application definition.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedappDefinition")]
        public dynamic ManagedappDefinitionShow(ManagedappDefinitionShowSettings settings) {
            var baseCommand = "az managedapp definition show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedservices assignment create".
        /// Creates a new registration assignment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesAssignment")]
        public dynamic ManagedservicesAssignmentCreate(ManagedservicesAssignmentCreateSettings settings) {
            var baseCommand = "az managedservices assignment create";
            AppendIfNonNull(ref baseCommand, "--definition", settings.Definition);
            AppendIfNonNull(ref baseCommand, "--assignment-id", settings.AssignmentId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedservices assignment delete".
        /// Deletes the registration assignment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesAssignment")]
        public dynamic ManagedservicesAssignmentDelete(ManagedservicesAssignmentDeleteSettings settings) {
            var baseCommand = "az managedservices assignment delete";
            AppendIfNonNull(ref baseCommand, "--assignment", settings.Assignment);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedservices assignment list".
        /// List all the registration assignments.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesAssignment")]
        public dynamic ManagedservicesAssignmentList(ManagedservicesAssignmentListSettings settings) {
            var baseCommand = "az managedservices assignment list";
            AppendIfNonNull(ref baseCommand, "--include-definition", settings.IncludeDefinition);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedservices assignment show".
        /// Gets a registration assignment.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesAssignment")]
        public dynamic ManagedservicesAssignmentShow(ManagedservicesAssignmentShowSettings settings) {
            var baseCommand = "az managedservices assignment show";
            AppendIfNonNull(ref baseCommand, "--assignment", settings.Assignment);
            AppendIfNonNull(ref baseCommand, "--include-definition", settings.IncludeDefinition);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedservices definition create".
        /// Creates a new registration definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesDefinition")]
        public dynamic ManagedservicesDefinitionCreate(ManagedservicesDefinitionCreateSettings settings) {
            var baseCommand = "az managedservices definition create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--principal-id", settings.PrincipalId);
            AppendIfNonNull(ref baseCommand, "--role-definition-id", settings.RoleDefinitionId);
            AppendIfNonNull(ref baseCommand, "--tenant-id", settings.TenantId);
            AppendIfNonNull(ref baseCommand, "--definition-id", settings.DefinitionId);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--plan-name", settings.PlanName);
            AppendIfNonNull(ref baseCommand, "--plan-product", settings.PlanProduct);
            AppendIfNonNull(ref baseCommand, "--plan-publisher", settings.PlanPublisher);
            AppendIfNonNull(ref baseCommand, "--plan-version", settings.PlanVersion);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedservices definition delete".
        /// Deletes a registration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesDefinition")]
        public dynamic ManagedservicesDefinitionDelete(ManagedservicesDefinitionDeleteSettings settings) {
            var baseCommand = "az managedservices definition delete";
            AppendIfNonNull(ref baseCommand, "--definition", settings.Definition);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedservices definition list".
        /// List all the registration definitions under the default scope or under the subscription provided.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesDefinition")]
        public dynamic ManagedservicesDefinitionList(ManagedservicesDefinitionListSettings settings) {
            var baseCommand = "az managedservices definition list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az managedservices definition show".
        /// Gets a registration definition.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzManagedservicesDefinition")]
        public dynamic ManagedservicesDefinitionShow(ManagedservicesDefinitionShowSettings settings) {
            var baseCommand = "az managedservices definition show";
            AppendIfNonNull(ref baseCommand, "--definition", settings.Definition);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az maps account create".
        /// Create a maps account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccount")]
        public dynamic MapsAccountCreate(MapsAccountCreateSettings settings) {
            var baseCommand = "az maps account create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--accept-tos", settings.AcceptTos);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az maps account delete".
        /// Delete a maps account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccount")]
        public dynamic MapsAccountDelete(MapsAccountDeleteSettings settings) {
            var baseCommand = "az maps account delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az maps account list".
        /// Show all maps accounts in a subscription or in a resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccount")]
        public dynamic MapsAccountList(MapsAccountListSettings settings) {
            var baseCommand = "az maps account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az maps account show".
        /// Show the details of a maps account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccount")]
        public dynamic MapsAccountShow(MapsAccountShowSettings settings) {
            var baseCommand = "az maps account show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az maps account update".
        /// Update the properties of a maps account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccount")]
        public dynamic MapsAccountUpdate(MapsAccountUpdateSettings settings) {
            var baseCommand = "az maps account update";
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az maps account keys list".
        /// List the keys to use with the Maps APIs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccountKeys")]
        public dynamic MapsAccountKeysList(MapsAccountKeysListSettings settings) {
            var baseCommand = "az maps account keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az maps account keys renew".
        /// Renew either the primary or secondary key for use with the Maps APIs.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMapsAccountKeys")]
        public dynamic MapsAccountKeysRenew(MapsAccountKeysRenewSettings settings) {
            var baseCommand = "az maps account keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb db create".
        /// Create a MariaDB database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbDb")]
        public dynamic MariadbDbCreate(MariadbDbCreateSettings settings) {
            var baseCommand = "az mariadb db create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--charset", settings.Charset);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb db delete".
        /// Delete a database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbDb")]
        public dynamic MariadbDbDelete(MariadbDbDeleteSettings settings) {
            var baseCommand = "az mariadb db delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb db list".
        /// List the databases for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbDb")]
        public dynamic MariadbDbList(MariadbDbListSettings settings) {
            var baseCommand = "az mariadb db list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb db show".
        /// Show the details of a database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbDb")]
        public dynamic MariadbDbShow(MariadbDbShowSettings settings) {
            var baseCommand = "az mariadb db show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server create".
        /// Create a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public dynamic MariadbServerCreate(MariadbServerCreateSettings settings) {
            var baseCommand = "az mariadb server create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--auto-grow", settings.AutoGrow);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--geo-redundant-backup", settings.GeoRedundantBackup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--ssl-enforcement", settings.SslEnforcement);
            AppendIfNonNull(ref baseCommand, "--storage-size", settings.StorageSize);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server delete".
        /// Delete a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public dynamic MariadbServerDelete(MariadbServerDeleteSettings settings) {
            var baseCommand = "az mariadb server delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server georestore".
        /// Geo-restore a server from backup.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public dynamic MariadbServerGeorestore(MariadbServerGeorestoreSettings settings) {
            var baseCommand = "az mariadb server georestore";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--geo-redundant-backup", settings.GeoRedundantBackup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server list".
        /// List available servers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public dynamic MariadbServerList(MariadbServerListSettings settings) {
            var baseCommand = "az mariadb server list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server restart".
        /// Restart a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public dynamic MariadbServerRestart(MariadbServerRestartSettings settings) {
            var baseCommand = "az mariadb server restart";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server restore".
        /// Restore a server from backup.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public dynamic MariadbServerRestore(MariadbServerRestoreSettings settings) {
            var baseCommand = "az mariadb server restore";
            AppendIfNonNull(ref baseCommand, "--restore-point-in-time", settings.RestorePointInTime);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server show".
        /// Get the details of a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public dynamic MariadbServerShow(MariadbServerShowSettings settings) {
            var baseCommand = "az mariadb server show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server update".
        /// Update a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public dynamic MariadbServerUpdate(MariadbServerUpdateSettings settings) {
            var baseCommand = "az mariadb server update";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--auto-grow", settings.AutoGrow);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--ssl-enforcement", settings.SslEnforcement);
            AppendIfNonNull(ref baseCommand, "--storage-size", settings.StorageSize);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server wait".
        /// Wait for server to satisfy certain conditions.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServer")]
        public dynamic MariadbServerWait(MariadbServerWaitSettings settings) {
            var baseCommand = "az mariadb server wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server configuration list".
        /// List the configuration values for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerConfiguration")]
        public dynamic MariadbServerConfigurationList(MariadbServerConfigurationListSettings settings) {
            var baseCommand = "az mariadb server configuration list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server configuration set".
        /// Update the configuration of a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerConfiguration")]
        public dynamic MariadbServerConfigurationSet(MariadbServerConfigurationSetSettings settings) {
            var baseCommand = "az mariadb server configuration set";
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server configuration show".
        /// Get the configuration for a server.".  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerConfiguration")]
        public dynamic MariadbServerConfigurationShow(MariadbServerConfigurationShowSettings settings) {
            var baseCommand = "az mariadb server configuration show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server firewall-rule create".
        /// Create a new firewall rule for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerFirewallRule")]
        public dynamic MariadbServerFirewallRuleCreate(MariadbServerFirewallRuleCreateSettings settings) {
            var baseCommand = "az mariadb server firewall-rule create";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server firewall-rule delete".
        /// Delete a firewall rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerFirewallRule")]
        public dynamic MariadbServerFirewallRuleDelete(MariadbServerFirewallRuleDeleteSettings settings) {
            var baseCommand = "az mariadb server firewall-rule delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server firewall-rule list".
        /// List all firewall rules for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerFirewallRule")]
        public dynamic MariadbServerFirewallRuleList(MariadbServerFirewallRuleListSettings settings) {
            var baseCommand = "az mariadb server firewall-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server firewall-rule show".
        /// Get the details of a firewall rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerFirewallRule")]
        public dynamic MariadbServerFirewallRuleShow(MariadbServerFirewallRuleShowSettings settings) {
            var baseCommand = "az mariadb server firewall-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server firewall-rule update".
        /// Update a firewall rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerFirewallRule")]
        public dynamic MariadbServerFirewallRuleUpdate(MariadbServerFirewallRuleUpdateSettings settings) {
            var baseCommand = "az mariadb server firewall-rule update";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server replica create".
        /// Create a read replica for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerReplica")]
        public dynamic MariadbServerReplicaCreate(MariadbServerReplicaCreateSettings settings) {
            var baseCommand = "az mariadb server replica create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server replica list".
        /// List all read replicas for a given server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerReplica")]
        public dynamic MariadbServerReplicaList(MariadbServerReplicaListSettings settings) {
            var baseCommand = "az mariadb server replica list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server replica stop".
        /// Stop replication to a read replica and make it a read/write server.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerReplica")]
        public dynamic MariadbServerReplicaStop(MariadbServerReplicaStopSettings settings) {
            var baseCommand = "az mariadb server replica stop";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server vnet-rule create".
        /// Create a virtual network rule to allows access to a MariaDB server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerVnetRule")]
        public dynamic MariadbServerVnetRuleCreate(MariadbServerVnetRuleCreateSettings settings) {
            var baseCommand = "az mariadb server vnet-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server vnet-rule delete".
        /// Deletes the virtual network rule with the given name.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerVnetRule")]
        public dynamic MariadbServerVnetRuleDelete(MariadbServerVnetRuleDeleteSettings settings) {
            var baseCommand = "az mariadb server vnet-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server vnet-rule list".
        /// Gets a list of virtual network rules in a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerVnetRule")]
        public dynamic MariadbServerVnetRuleList(MariadbServerVnetRuleListSettings settings) {
            var baseCommand = "az mariadb server vnet-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server vnet-rule show".
        /// Gets a virtual network rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerVnetRule")]
        public dynamic MariadbServerVnetRuleShow(MariadbServerVnetRuleShowSettings settings) {
            var baseCommand = "az mariadb server vnet-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server vnet-rule update".
        /// Update a virtual network rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerVnetRule")]
        public dynamic MariadbServerVnetRuleUpdate(MariadbServerVnetRuleUpdateSettings settings) {
            var baseCommand = "az mariadb server vnet-rule update";
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server-logs download".
        /// Download log files.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerLogs")]
        public dynamic MariadbServerLogsDownload(MariadbServerLogsDownloadSettings settings) {
            var baseCommand = "az mariadb server-logs download";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mariadb server-logs list".
        /// List log files for a server.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMariadbServerLogs")]
        public dynamic MariadbServerLogsList(MariadbServerLogsListSettings settings) {
            var baseCommand = "az mariadb server-logs list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--file-last-written", settings.FileLastWritten);
            AppendIfNonNull(ref baseCommand, "--filename-contains", settings.FilenameContains);
            AppendIfNonNull(ref baseCommand, "--max-file-size", settings.MaxFileSize);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor action-group create".
        /// Create a new action group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActionGroup")]
        public dynamic MonitorActionGroupCreate(MonitorActionGroupCreateSettings settings) {
            var baseCommand = "az monitor action-group create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--short-name", settings.ShortName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor action-group delete".
        /// Delete an action group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActionGroup")]
        public dynamic MonitorActionGroupDelete(MonitorActionGroupDeleteSettings settings) {
            var baseCommand = "az monitor action-group delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor action-group enable-receiver".
        /// Enable a receiver in an action group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActionGroup")]
        public dynamic MonitorActionGroupEnableReceiver(MonitorActionGroupEnableReceiverSettings settings) {
            var baseCommand = "az monitor action-group enable-receiver";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--action-group", settings.ActionGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor action-group list".
        /// List action groups under a resource group or the current subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActionGroup")]
        public dynamic MonitorActionGroupList(MonitorActionGroupListSettings settings) {
            var baseCommand = "az monitor action-group list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor action-group show".
        /// Show the details of an action group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActionGroup")]
        public dynamic MonitorActionGroupShow(MonitorActionGroupShowSettings settings) {
            var baseCommand = "az monitor action-group show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor action-group update".
        /// Update an action group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActionGroup")]
        public dynamic MonitorActionGroupUpdate(MonitorActionGroupUpdateSettings settings) {
            var baseCommand = "az monitor action-group update";
            AppendIfNonNull(ref baseCommand, "--short-name", settings.ShortName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add-action", settings.AddAction);
            AppendIfNonNull(ref baseCommand, "--remove-action", settings.RemoveAction);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor activity-log list".
        /// List and query activity log events.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLog")]
        public dynamic MonitorActivityLogList(MonitorActivityLogListSettings settings) {
            var baseCommand = "az monitor activity-log list";
            AppendIfNonNull(ref baseCommand, "--max-events", settings.MaxEvents);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--caller", settings.Caller);
            AppendIfNonNull(ref baseCommand, "--correlation-id", settings.CorrelationId);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-id", settings.ResourceId);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--end-time", settings.EndTime);
            AppendIfNonNull(ref baseCommand, "--offset", settings.Offset);
            AppendIfNonNull(ref baseCommand, "--start-time", settings.StartTime);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor activity-log list-categories".
        /// List the event categories of activity logs.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLog")]
        public dynamic MonitorActivityLogListCategories(MonitorActivityLogListCategoriesSettings settings) {
            var baseCommand = "az monitor activity-log list-categories";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor activity-log alert create".
        /// Create a default activity log alert.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlert")]
        public dynamic MonitorActivityLogAlertCreate(MonitorActivityLogAlertCreateSettings settings) {
            var baseCommand = "az monitor activity-log alert create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--action-group", settings.ActionGroup);
            AppendIfNonNull(ref baseCommand, "--condition", settings.Condition);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--disable", settings.Disable);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--webhook-properties", settings.WebhookProperties);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor activity-log alert delete".
        /// Delete an activity log alert.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlert")]
        public dynamic MonitorActivityLogAlertDelete(MonitorActivityLogAlertDeleteSettings settings) {
            var baseCommand = "az monitor activity-log alert delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor activity-log alert list".
        /// List activity log alerts under a resource group or the current subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlert")]
        public dynamic MonitorActivityLogAlertList(MonitorActivityLogAlertListSettings settings) {
            var baseCommand = "az monitor activity-log alert list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor activity-log alert show".
        /// Get an activity log alert.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlert")]
        public dynamic MonitorActivityLogAlertShow(MonitorActivityLogAlertShowSettings settings) {
            var baseCommand = "az monitor activity-log alert show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor activity-log alert update".
        /// Update the details of this activity log alert.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlert")]
        public dynamic MonitorActivityLogAlertUpdate(MonitorActivityLogAlertUpdateSettings settings) {
            var baseCommand = "az monitor activity-log alert update";
            AppendIfNonNull(ref baseCommand, "--condition", settings.Condition);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor activity-log alert action-group add".
        /// Add action groups to this activity log alert. It can also be used to overwrite existing webhook properties of particular action groups.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlertActionGroup")]
        public dynamic MonitorActivityLogAlertActionGroupAdd(MonitorActivityLogAlertActionGroupAddSettings settings) {
            var baseCommand = "az monitor activity-log alert action-group add";
            AppendIfNonNull(ref baseCommand, "--action-group", settings.ActionGroup);
            AppendIfNonNull(ref baseCommand, "--reset", settings.Reset);
            AppendIfNonNull(ref baseCommand, "--strict", settings.Strict);
            AppendIfNonNull(ref baseCommand, "--webhook-properties", settings.WebhookProperties);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor activity-log alert action-group remove".
        /// Remove action groups from this activity log alert.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlertActionGroup")]
        public dynamic MonitorActivityLogAlertActionGroupRemove(MonitorActivityLogAlertActionGroupRemoveSettings settings) {
            var baseCommand = "az monitor activity-log alert action-group remove";
            AppendIfNonNull(ref baseCommand, "--action-group", settings.ActionGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor activity-log alert scope add".
        /// Add scopes to this activity log alert.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlertScope")]
        public dynamic MonitorActivityLogAlertScopeAdd(MonitorActivityLogAlertScopeAddSettings settings) {
            var baseCommand = "az monitor activity-log alert scope add";
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--reset", settings.Reset);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor activity-log alert scope remove".
        /// Removes scopes from this activity log alert.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorActivityLogAlertScope")]
        public dynamic MonitorActivityLogAlertScopeRemove(MonitorActivityLogAlertScopeRemoveSettings settings) {
            var baseCommand = "az monitor activity-log alert scope remove";
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale create".
        /// Create new autoscale settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscale")]
        public dynamic MonitorAutoscaleCreate(MonitorAutoscaleCreateSettings settings) {
            var baseCommand = "az monitor autoscale create";
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--email-administrator", settings.EmailAdministrator);
            AppendIfNonNull(ref baseCommand, "--email-coadministrators", settings.EmailCoadministrators);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale delete".
        /// Deletes and autoscale setting.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscale")]
        public dynamic MonitorAutoscaleDelete(MonitorAutoscaleDeleteSettings settings) {
            var baseCommand = "az monitor autoscale delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale list".
        /// Lists the autoscale settings for a resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscale")]
        public dynamic MonitorAutoscaleList(MonitorAutoscaleListSettings settings) {
            var baseCommand = "az monitor autoscale list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale show".
        /// Show autoscale setting details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscale")]
        public dynamic MonitorAutoscaleShow(MonitorAutoscaleShowSettings settings) {
            var baseCommand = "az monitor autoscale show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale update".
        /// Update autoscale settings.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscale")]
        public dynamic MonitorAutoscaleUpdate(MonitorAutoscaleUpdateSettings settings) {
            var baseCommand = "az monitor autoscale update";
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--add-action", settings.AddAction);
            AppendIfNonNull(ref baseCommand, "--email-administrator", settings.EmailAdministrator);
            AppendIfNonNull(ref baseCommand, "--email-coadministrators", settings.EmailCoadministrators);
            AppendIfNonNull(ref baseCommand, "--remove-action", settings.RemoveAction);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale profile create".
        /// Create a fixed or recurring autoscale profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleProfile")]
        public dynamic MonitorAutoscaleProfileCreate(MonitorAutoscaleProfileCreateSettings settings) {
            var baseCommand = "az monitor autoscale profile create";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--copy-rules", settings.CopyRules);
            AppendIfNonNull(ref baseCommand, "--count", settings.Count);
            AppendIfNonNull(ref baseCommand, "--max-count", settings.MaxCount);
            AppendIfNonNull(ref baseCommand, "--min-count", settings.MinCount);
            AppendIfNonNull(ref baseCommand, "--timezone", settings.Timezone);
            AppendIfNonNull(ref baseCommand, "--end", settings.End);
            AppendIfNonNull(ref baseCommand, "--recurrence", settings.Recurrence);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale profile delete".
        /// Delete an autoscale profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleProfile")]
        public dynamic MonitorAutoscaleProfileDelete(MonitorAutoscaleProfileDeleteSettings settings) {
            var baseCommand = "az monitor autoscale profile delete";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale profile list".
        /// List autoscale profiles.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleProfile")]
        public dynamic MonitorAutoscaleProfileList(MonitorAutoscaleProfileListSettings settings) {
            var baseCommand = "az monitor autoscale profile list";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale profile list-timezones".
        /// Look up time zone information.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleProfile")]
        public dynamic MonitorAutoscaleProfileListTimezones(MonitorAutoscaleProfileListTimezonesSettings settings) {
            var baseCommand = "az monitor autoscale profile list-timezones";
            AppendIfNonNull(ref baseCommand, "--offset", settings.Offset);
            AppendIfNonNull(ref baseCommand, "--search-query", settings.SearchQuery);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale profile show".
        /// Show details of an autoscale profile.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleProfile")]
        public dynamic MonitorAutoscaleProfileShow(MonitorAutoscaleProfileShowSettings settings) {
            var baseCommand = "az monitor autoscale profile show";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale rule copy".
        /// Copy autoscale rules from one profile to another.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleRule")]
        public dynamic MonitorAutoscaleRuleCopy(MonitorAutoscaleRuleCopySettings settings) {
            var baseCommand = "az monitor autoscale rule copy";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--dest-schedule", settings.DestSchedule);
            AppendIfNonNull(ref baseCommand, "--index", settings.Index);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-schedule", settings.SourceSchedule);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale rule create".
        /// Add a new autoscale rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleRule")]
        public dynamic MonitorAutoscaleRuleCreate(MonitorAutoscaleRuleCreateSettings settings) {
            var baseCommand = "az monitor autoscale rule create";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--condition", settings.Condition);
            AppendIfNonNull(ref baseCommand, "--scale", settings.Scale);
            AppendIfNonNull(ref baseCommand, "--cooldown", settings.Cooldown);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--timegrain", settings.Timegrain);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale rule delete".
        /// Remove autoscale rules from a profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleRule")]
        public dynamic MonitorAutoscaleRuleDelete(MonitorAutoscaleRuleDeleteSettings settings) {
            var baseCommand = "az monitor autoscale rule delete";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--index", settings.Index);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor autoscale rule list".
        /// List autoscale rules for a profile.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorAutoscaleRule")]
        public dynamic MonitorAutoscaleRuleList(MonitorAutoscaleRuleListSettings settings) {
            var baseCommand = "az monitor autoscale rule list";
            AppendIfNonNull(ref baseCommand, "--autoscale-name", settings.AutoscaleName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor diagnostic-settings create".
        /// Create diagnostic settings for the specified resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettings")]
        public dynamic MonitorDiagnosticSettingsCreate(MonitorDiagnosticSettingsCreateSettings settings) {
            var baseCommand = "az monitor diagnostic-settings create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--event-hub", settings.EventHub);
            AppendIfNonNull(ref baseCommand, "--event-hub-rule", settings.EventHubRule);
            AppendIfNonNull(ref baseCommand, "--logs", settings.Logs);
            AppendIfNonNull(ref baseCommand, "--metrics", settings.Metrics);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--workspace", settings.Workspace);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor diagnostic-settings delete".
        /// Deletes existing diagnostic settings for the specified resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettings")]
        public dynamic MonitorDiagnosticSettingsDelete(MonitorDiagnosticSettingsDeleteSettings settings) {
            var baseCommand = "az monitor diagnostic-settings delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor diagnostic-settings list".
        /// Gets the active diagnostic settings list for the specified resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettings")]
        public dynamic MonitorDiagnosticSettingsList(MonitorDiagnosticSettingsListSettings settings) {
            var baseCommand = "az monitor diagnostic-settings list";
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor diagnostic-settings show".
        /// Gets the active diagnostic settings for the specified resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettings")]
        public dynamic MonitorDiagnosticSettingsShow(MonitorDiagnosticSettingsShowSettings settings) {
            var baseCommand = "az monitor diagnostic-settings show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor diagnostic-settings update".
        /// Update diagnostic settings.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettings")]
        public dynamic MonitorDiagnosticSettingsUpdate(MonitorDiagnosticSettingsUpdateSettings settings) {
            var baseCommand = "az monitor diagnostic-settings update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor diagnostic-settings categories list".
        /// Lists the diagnostic settings categories for the specified resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettingsCategories")]
        public dynamic MonitorDiagnosticSettingsCategoriesList(MonitorDiagnosticSettingsCategoriesListSettings settings) {
            var baseCommand = "az monitor diagnostic-settings categories list";
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor diagnostic-settings categories show".
        /// Gets the diagnostic settings category for the specified resource.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorDiagnosticSettingsCategories")]
        public dynamic MonitorDiagnosticSettingsCategoriesShow(MonitorDiagnosticSettingsCategoriesShowSettings settings) {
            var baseCommand = "az monitor diagnostic-settings categories show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-analytics workspace create".
        /// Create a workspace instance.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public dynamic MonitorLogAnalyticsWorkspaceCreate(MonitorLogAnalyticsWorkspaceCreateSettings settings) {
            var baseCommand = "az monitor log-analytics workspace create";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--retention-time", settings.RetentionTime);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-analytics workspace delete".
        /// Delete a workspace instance.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public dynamic MonitorLogAnalyticsWorkspaceDelete(MonitorLogAnalyticsWorkspaceDeleteSettings settings) {
            var baseCommand = "az monitor log-analytics workspace delete";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-analytics workspace get-schema".
        /// Get the schema for a given workspace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public dynamic MonitorLogAnalyticsWorkspaceGetSchema(MonitorLogAnalyticsWorkspaceGetSchemaSettings settings) {
            var baseCommand = "az monitor log-analytics workspace get-schema";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-analytics workspace get-shared-keys".
        /// Get the shared keys for a workspace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public dynamic MonitorLogAnalyticsWorkspaceGetSharedKeys(MonitorLogAnalyticsWorkspaceGetSharedKeysSettings settings) {
            var baseCommand = "az monitor log-analytics workspace get-shared-keys";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-analytics workspace list".
        /// Get a list of workspaces under a resource group or a subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public dynamic MonitorLogAnalyticsWorkspaceList(MonitorLogAnalyticsWorkspaceListSettings settings) {
            var baseCommand = "az monitor log-analytics workspace list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-analytics workspace list-management-groups".
        /// Get a list of management groups connected to a workspace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public dynamic MonitorLogAnalyticsWorkspaceListManagementGroups(MonitorLogAnalyticsWorkspaceListManagementGroupsSettings settings) {
            var baseCommand = "az monitor log-analytics workspace list-management-groups";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-analytics workspace list-usages".
        /// Get a list of usage metrics for a workspace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public dynamic MonitorLogAnalyticsWorkspaceListUsages(MonitorLogAnalyticsWorkspaceListUsagesSettings settings) {
            var baseCommand = "az monitor log-analytics workspace list-usages";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-analytics workspace show".
        /// Show a workspace instance.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public dynamic MonitorLogAnalyticsWorkspaceShow(MonitorLogAnalyticsWorkspaceShowSettings settings) {
            var baseCommand = "az monitor log-analytics workspace show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-analytics workspace update".
        /// Update a workspace instance.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspace")]
        public dynamic MonitorLogAnalyticsWorkspaceUpdate(MonitorLogAnalyticsWorkspaceUpdateSettings settings) {
            var baseCommand = "az monitor log-analytics workspace update";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--retention-time", settings.RetentionTime);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-analytics workspace pack disable".
        /// Disable an intelligence pack for a given workspace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspacePack")]
        public dynamic MonitorLogAnalyticsWorkspacePackDisable(MonitorLogAnalyticsWorkspacePackDisableSettings settings) {
            var baseCommand = "az monitor log-analytics workspace pack disable";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-analytics workspace pack enable".
        /// Enable an intelligence pack for a given workspace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspacePack")]
        public dynamic MonitorLogAnalyticsWorkspacePackEnable(MonitorLogAnalyticsWorkspacePackEnableSettings settings) {
            var baseCommand = "az monitor log-analytics workspace pack enable";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-analytics workspace pack list".
        /// List all the intelligence packs possible and whether they are enabled or disabled for a given workspace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogAnalyticsWorkspacePack")]
        public dynamic MonitorLogAnalyticsWorkspacePackList(MonitorLogAnalyticsWorkspacePackListSettings settings) {
            var baseCommand = "az monitor log-analytics workspace pack list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--workspace-name", settings.WorkspaceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-profiles create".
        /// Create a log profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogProfiles")]
        public dynamic MonitorLogProfilesCreate(MonitorLogProfilesCreateSettings settings) {
            var baseCommand = "az monitor log-profiles create";
            AppendIfNonNull(ref baseCommand, "--categories", settings.Categories);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--locations", settings.Locations);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--service-bus-rule-id", settings.ServiceBusRuleId);
            AppendIfNonNull(ref baseCommand, "--storage-account-id", settings.StorageAccountId);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--days", settings.Days);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-profiles delete".
        /// Deletes the log profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogProfiles")]
        public dynamic MonitorLogProfilesDelete(MonitorLogProfilesDeleteSettings settings) {
            var baseCommand = "az monitor log-profiles delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-profiles list".
        /// List the log profiles.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogProfiles")]
        public dynamic MonitorLogProfilesList(MonitorLogProfilesListSettings settings) {
            var baseCommand = "az monitor log-profiles list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-profiles show".
        /// Gets the log profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogProfiles")]
        public dynamic MonitorLogProfilesShow(MonitorLogProfilesShowSettings settings) {
            var baseCommand = "az monitor log-profiles show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor log-profiles update".
        /// Update a log profile.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorLogProfiles")]
        public dynamic MonitorLogProfilesUpdate(MonitorLogProfilesUpdateSettings settings) {
            var baseCommand = "az monitor log-profiles update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor metrics list".
        /// List the metric values for a resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetrics")]
        public dynamic MonitorMetricsList(MonitorMetricsListSettings settings) {
            var baseCommand = "az monitor metrics list";
            AppendIfNonNull(ref baseCommand, "--aggregation", settings.Aggregation);
            AppendIfNonNull(ref baseCommand, "--dimension", settings.Dimension);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--metrics", settings.Metrics);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--end-time", settings.EndTime);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--offset", settings.Offset);
            AppendIfNonNull(ref baseCommand, "--start-time", settings.StartTime);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor metrics list-definitions".
        /// Lists the metric definitions for the resource.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetrics")]
        public dynamic MonitorMetricsListDefinitions(MonitorMetricsListDefinitionsSettings settings) {
            var baseCommand = "az monitor metrics list-definitions";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-namespace", settings.ResourceNamespace);
            AppendIfNonNull(ref baseCommand, "--resource-parent", settings.ResourceParent);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor metrics alert create".
        /// Create a metric-based alert rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetricsAlert")]
        public dynamic MonitorMetricsAlertCreate(MonitorMetricsAlertCreateSettings settings) {
            var baseCommand = "az monitor metrics alert create";
            AppendIfNonNull(ref baseCommand, "--condition", settings.Condition);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scopes", settings.Scopes);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--auto-mitigate", settings.AutoMitigate);
            AppendIfNonNull(ref baseCommand, "--disabled", settings.Disabled);
            AppendIfNonNull(ref baseCommand, "--evaluation-frequency", settings.EvaluationFrequency);
            AppendIfNonNull(ref baseCommand, "--severity", settings.Severity);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--window-size", settings.WindowSize);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor metrics alert delete".
        /// Delete a metrics-based alert rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetricsAlert")]
        public dynamic MonitorMetricsAlertDelete(MonitorMetricsAlertDeleteSettings settings) {
            var baseCommand = "az monitor metrics alert delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor metrics alert list".
        /// List metric-based alert rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetricsAlert")]
        public dynamic MonitorMetricsAlertList(MonitorMetricsAlertListSettings settings) {
            var baseCommand = "az monitor metrics alert list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor metrics alert show".
        /// Show a metrics-based alert rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetricsAlert")]
        public dynamic MonitorMetricsAlertShow(MonitorMetricsAlertShowSettings settings) {
            var baseCommand = "az monitor metrics alert show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az monitor metrics alert update".
        /// Update a metric-based alert rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMonitorMetricsAlert")]
        public dynamic MonitorMetricsAlertUpdate(MonitorMetricsAlertUpdateSettings settings) {
            var baseCommand = "az monitor metrics alert update";
            AppendIfNonNull(ref baseCommand, "--auto-mitigate", settings.AutoMitigate);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--evaluation-frequency", settings.EvaluationFrequency);
            AppendIfNonNull(ref baseCommand, "--scopes", settings.Scopes);
            AppendIfNonNull(ref baseCommand, "--severity", settings.Severity);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--window-size", settings.WindowSize);
            AppendIfNonNull(ref baseCommand, "--add-action", settings.AddAction);
            AppendIfNonNull(ref baseCommand, "--remove-actions", settings.RemoveActions);
            AppendIfNonNull(ref baseCommand, "--add-condition", settings.AddCondition);
            AppendIfNonNull(ref baseCommand, "--remove-conditions", settings.RemoveConditions);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql db create".
        /// Create a MySQL database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlDb")]
        public dynamic MysqlDbCreate(MysqlDbCreateSettings settings) {
            var baseCommand = "az mysql db create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--charset", settings.Charset);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql db delete".
        /// Delete a database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlDb")]
        public dynamic MysqlDbDelete(MysqlDbDeleteSettings settings) {
            var baseCommand = "az mysql db delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql db list".
        /// List the databases for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlDb")]
        public dynamic MysqlDbList(MysqlDbListSettings settings) {
            var baseCommand = "az mysql db list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql db show".
        /// Show the details of a database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlDb")]
        public dynamic MysqlDbShow(MysqlDbShowSettings settings) {
            var baseCommand = "az mysql db show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server create".
        /// Create a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public dynamic MysqlServerCreate(MysqlServerCreateSettings settings) {
            var baseCommand = "az mysql server create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--auto-grow", settings.AutoGrow);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--geo-redundant-backup", settings.GeoRedundantBackup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--ssl-enforcement", settings.SslEnforcement);
            AppendIfNonNull(ref baseCommand, "--storage-size", settings.StorageSize);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server delete".
        /// Delete a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public dynamic MysqlServerDelete(MysqlServerDeleteSettings settings) {
            var baseCommand = "az mysql server delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server georestore".
        /// Geo-restore a server from backup.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public dynamic MysqlServerGeorestore(MysqlServerGeorestoreSettings settings) {
            var baseCommand = "az mysql server georestore";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--geo-redundant-backup", settings.GeoRedundantBackup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server list".
        /// List available servers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public dynamic MysqlServerList(MysqlServerListSettings settings) {
            var baseCommand = "az mysql server list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server restart".
        /// Restart a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public dynamic MysqlServerRestart(MysqlServerRestartSettings settings) {
            var baseCommand = "az mysql server restart";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server restore".
        /// Restore a server from backup.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public dynamic MysqlServerRestore(MysqlServerRestoreSettings settings) {
            var baseCommand = "az mysql server restore";
            AppendIfNonNull(ref baseCommand, "--restore-point-in-time", settings.RestorePointInTime);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server show".
        /// Get the details of a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public dynamic MysqlServerShow(MysqlServerShowSettings settings) {
            var baseCommand = "az mysql server show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server update".
        /// Update a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public dynamic MysqlServerUpdate(MysqlServerUpdateSettings settings) {
            var baseCommand = "az mysql server update";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--auto-grow", settings.AutoGrow);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--ssl-enforcement", settings.SslEnforcement);
            AppendIfNonNull(ref baseCommand, "--storage-size", settings.StorageSize);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server wait".
        /// Wait for server to satisfy certain conditions.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServer")]
        public dynamic MysqlServerWait(MysqlServerWaitSettings settings) {
            var baseCommand = "az mysql server wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server configuration list".
        /// List the configuration values for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerConfiguration")]
        public dynamic MysqlServerConfigurationList(MysqlServerConfigurationListSettings settings) {
            var baseCommand = "az mysql server configuration list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server configuration set".
        /// Update the configuration of a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerConfiguration")]
        public dynamic MysqlServerConfigurationSet(MysqlServerConfigurationSetSettings settings) {
            var baseCommand = "az mysql server configuration set";
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server configuration show".
        /// Get the configuration for a server.".  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerConfiguration")]
        public dynamic MysqlServerConfigurationShow(MysqlServerConfigurationShowSettings settings) {
            var baseCommand = "az mysql server configuration show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server firewall-rule create".
        /// Create a new firewall rule for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerFirewallRule")]
        public dynamic MysqlServerFirewallRuleCreate(MysqlServerFirewallRuleCreateSettings settings) {
            var baseCommand = "az mysql server firewall-rule create";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server firewall-rule delete".
        /// Delete a firewall rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerFirewallRule")]
        public dynamic MysqlServerFirewallRuleDelete(MysqlServerFirewallRuleDeleteSettings settings) {
            var baseCommand = "az mysql server firewall-rule delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server firewall-rule list".
        /// List all firewall rules for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerFirewallRule")]
        public dynamic MysqlServerFirewallRuleList(MysqlServerFirewallRuleListSettings settings) {
            var baseCommand = "az mysql server firewall-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server firewall-rule show".
        /// Get the details of a firewall rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerFirewallRule")]
        public dynamic MysqlServerFirewallRuleShow(MysqlServerFirewallRuleShowSettings settings) {
            var baseCommand = "az mysql server firewall-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server firewall-rule update".
        /// Update a firewall rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerFirewallRule")]
        public dynamic MysqlServerFirewallRuleUpdate(MysqlServerFirewallRuleUpdateSettings settings) {
            var baseCommand = "az mysql server firewall-rule update";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server replica create".
        /// Create a read replica for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerReplica")]
        public dynamic MysqlServerReplicaCreate(MysqlServerReplicaCreateSettings settings) {
            var baseCommand = "az mysql server replica create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server replica list".
        /// List all read replicas for a given server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerReplica")]
        public dynamic MysqlServerReplicaList(MysqlServerReplicaListSettings settings) {
            var baseCommand = "az mysql server replica list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server replica stop".
        /// Stop replication to a read replica and make it a read/write server.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerReplica")]
        public dynamic MysqlServerReplicaStop(MysqlServerReplicaStopSettings settings) {
            var baseCommand = "az mysql server replica stop";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server vnet-rule create".
        /// Create a virtual network rule to allows access to a MySQL server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerVnetRule")]
        public dynamic MysqlServerVnetRuleCreate(MysqlServerVnetRuleCreateSettings settings) {
            var baseCommand = "az mysql server vnet-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server vnet-rule delete".
        /// Deletes the virtual network rule with the given name.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerVnetRule")]
        public dynamic MysqlServerVnetRuleDelete(MysqlServerVnetRuleDeleteSettings settings) {
            var baseCommand = "az mysql server vnet-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server vnet-rule list".
        /// Gets a list of virtual network rules in a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerVnetRule")]
        public dynamic MysqlServerVnetRuleList(MysqlServerVnetRuleListSettings settings) {
            var baseCommand = "az mysql server vnet-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server vnet-rule show".
        /// Gets a virtual network rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerVnetRule")]
        public dynamic MysqlServerVnetRuleShow(MysqlServerVnetRuleShowSettings settings) {
            var baseCommand = "az mysql server vnet-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server vnet-rule update".
        /// Update a virtual network rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerVnetRule")]
        public dynamic MysqlServerVnetRuleUpdate(MysqlServerVnetRuleUpdateSettings settings) {
            var baseCommand = "az mysql server vnet-rule update";
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server-logs download".
        /// Download log files.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerLogs")]
        public dynamic MysqlServerLogsDownload(MysqlServerLogsDownloadSettings settings) {
            var baseCommand = "az mysql server-logs download";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az mysql server-logs list".
        /// List log files for a server.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzMysqlServerLogs")]
        public dynamic MysqlServerLogsList(MysqlServerLogsListSettings settings) {
            var baseCommand = "az mysql server-logs list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--file-last-written", settings.FileLastWritten);
            AppendIfNonNull(ref baseCommand, "--filename-contains", settings.FilenameContains);
            AppendIfNonNull(ref baseCommand, "--max-file-size", settings.MaxFileSize);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles list-mount-targets".
        /// List the mount targets of an Azure NetApp Files (ANF) volume.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfiles")]
        public dynamic NetappfilesListMountTargets(NetappfilesListMountTargetsSettings settings) {
            var baseCommand = "az netappfiles list-mount-targets";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--volume-name", settings.VolumeName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles account create".
        /// Create a new Azure NetApp Files (ANF) account. Note that active directories are added using the subgroup commands.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccount")]
        public dynamic NetappfilesAccountCreate(NetappfilesAccountCreateSettings settings) {
            var baseCommand = "az netappfiles account create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles account delete".
        /// Delete the specified ANF account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccount")]
        public dynamic NetappfilesAccountDelete(NetappfilesAccountDeleteSettings settings) {
            var baseCommand = "az netappfiles account delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles account list".
        /// List ANF accounts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccount")]
        public dynamic NetappfilesAccountList(NetappfilesAccountListSettings settings) {
            var baseCommand = "az netappfiles account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles account show".
        /// Get the specified ANF account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccount")]
        public dynamic NetappfilesAccountShow(NetappfilesAccountShowSettings settings) {
            var baseCommand = "az netappfiles account show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles account update".
        /// Set/modify the tags for a specified ANF account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccount")]
        public dynamic NetappfilesAccountUpdate(NetappfilesAccountUpdateSettings settings) {
            var baseCommand = "az netappfiles account update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles account ad add".
        /// Add an active directory to the account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccountAd")]
        public dynamic NetappfilesAccountAdAdd(NetappfilesAccountAdAddSettings settings) {
            var baseCommand = "az netappfiles account ad add";
            AppendIfNonNull(ref baseCommand, "--dns", settings.Dns);
            AppendIfNonNull(ref baseCommand, "--domain", settings.Domain);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--smb-server-name", settings.SmbServerName);
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--organizational-unit", settings.OrganizationalUnit);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles account ad list".
        /// List the active directories of an account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccountAd")]
        public dynamic NetappfilesAccountAdList(NetappfilesAccountAdListSettings settings) {
            var baseCommand = "az netappfiles account ad list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles account ad remove".
        /// Remove an active directory from the account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesAccountAd")]
        public dynamic NetappfilesAccountAdRemove(NetappfilesAccountAdRemoveSettings settings) {
            var baseCommand = "az netappfiles account ad remove";
            AppendIfNonNull(ref baseCommand, "--active-directory", settings.ActiveDirectory);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles pool create".
        /// Create a new Azure NetApp Files (ANF) pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesPool")]
        public dynamic NetappfilesPoolCreate(NetappfilesPoolCreateSettings settings) {
            var baseCommand = "az netappfiles pool create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-level", settings.ServiceLevel);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles pool delete".
        /// Delete the specified ANF pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesPool")]
        public dynamic NetappfilesPoolDelete(NetappfilesPoolDeleteSettings settings) {
            var baseCommand = "az netappfiles pool delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles pool list".
        /// L:ist the ANF pools for the specified account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesPool")]
        public dynamic NetappfilesPoolList(NetappfilesPoolListSettings settings) {
            var baseCommand = "az netappfiles pool list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles pool show".
        /// Get the specified ANF pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesPool")]
        public dynamic NetappfilesPoolShow(NetappfilesPoolShowSettings settings) {
            var baseCommand = "az netappfiles pool show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles pool update".
        /// Update the tags of the specified ANF pool.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesPool")]
        public dynamic NetappfilesPoolUpdate(NetappfilesPoolUpdateSettings settings) {
            var baseCommand = "az netappfiles pool update";
            AppendIfNonNull(ref baseCommand, "--service-level", settings.ServiceLevel);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles snapshot create".
        /// Create a new Azure NetApp Files (ANF) snapshot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesSnapshot")]
        public dynamic NetappfilesSnapshotCreate(NetappfilesSnapshotCreateSettings settings) {
            var baseCommand = "az netappfiles snapshot create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--volume-name", settings.VolumeName);
            AppendIfNonNull(ref baseCommand, "--file-system-id", settings.FileSystemId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles snapshot delete".
        /// Delete the specified ANF snapshot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesSnapshot")]
        public dynamic NetappfilesSnapshotDelete(NetappfilesSnapshotDeleteSettings settings) {
            var baseCommand = "az netappfiles snapshot delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--volume-name", settings.VolumeName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles snapshot list".
        /// List the snapshots of an ANF volume.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesSnapshot")]
        public dynamic NetappfilesSnapshotList(NetappfilesSnapshotListSettings settings) {
            var baseCommand = "az netappfiles snapshot list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--volume-name", settings.VolumeName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles snapshot show".
        /// Get the specified ANF snapshot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesSnapshot")]
        public dynamic NetappfilesSnapshotShow(NetappfilesSnapshotShowSettings settings) {
            var baseCommand = "az netappfiles snapshot show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--volume-name", settings.VolumeName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles volume create".
        /// Create a new Azure NetApp Files (ANF) volume. Export policies are applied with the subgroup commands but note that volumes are always created with a default export policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolume")]
        public dynamic NetappfilesVolumeCreate(NetappfilesVolumeCreateSettings settings) {
            var baseCommand = "az netappfiles volume create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--usage-threshold", settings.UsageThreshold);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--protocol-types", settings.ProtocolTypes);
            AppendIfNonNull(ref baseCommand, "--service-level", settings.ServiceLevel);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles volume delete".
        /// Delete the specified ANF volume.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolume")]
        public dynamic NetappfilesVolumeDelete(NetappfilesVolumeDeleteSettings settings) {
            var baseCommand = "az netappfiles volume delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles volume list".
        /// List the ANF Pools for the specified account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolume")]
        public dynamic NetappfilesVolumeList(NetappfilesVolumeListSettings settings) {
            var baseCommand = "az netappfiles volume list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles volume show".
        /// Get the specified ANF volume.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolume")]
        public dynamic NetappfilesVolumeShow(NetappfilesVolumeShowSettings settings) {
            var baseCommand = "az netappfiles volume show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles volume update".
        /// Update the specified ANF volume with the values provided. Unspecified values will remain unchanged. Export policies are amended/created with the subgroup commands.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolume")]
        public dynamic NetappfilesVolumeUpdate(NetappfilesVolumeUpdateSettings settings) {
            var baseCommand = "az netappfiles volume update";
            AppendIfNonNull(ref baseCommand, "--protocol-types", settings.ProtocolTypes);
            AppendIfNonNull(ref baseCommand, "--service-level", settings.ServiceLevel);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--usage-threshold", settings.UsageThreshold);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles volume export-policy add".
        /// Add a new rule to the export policy for a volume.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolumeExportPolicy")]
        public dynamic NetappfilesVolumeExportPolicyAdd(NetappfilesVolumeExportPolicyAddSettings settings) {
            var baseCommand = "az netappfiles volume export-policy add";
            AppendIfNonNull(ref baseCommand, "--allowed-clients", settings.AllowedClients);
            AppendIfNonNull(ref baseCommand, "--cifs", settings.Cifs);
            AppendIfNonNull(ref baseCommand, "--nfsv3", settings.Nfsv3);
            AppendIfNonNull(ref baseCommand, "--nfsv41", settings.Nfsv41);
            AppendIfNonNull(ref baseCommand, "--rule-index", settings.RuleIndex);
            AppendIfNonNull(ref baseCommand, "--unix-read-only", settings.UnixReadOnly);
            AppendIfNonNull(ref baseCommand, "--unix-read-write", settings.UnixReadWrite);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles volume export-policy list".
        /// List the export policy rules for a volume.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolumeExportPolicy")]
        public dynamic NetappfilesVolumeExportPolicyList(NetappfilesVolumeExportPolicyListSettings settings) {
            var baseCommand = "az netappfiles volume export-policy list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az netappfiles volume export-policy remove".
        /// Remove a rule from the export policy for a volume by rule index. The current rules can be obtained by performing the subgroup list command.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetappfilesVolumeExportPolicy")]
        public dynamic NetappfilesVolumeExportPolicyRemove(NetappfilesVolumeExportPolicyRemoveSettings settings) {
            var baseCommand = "az netappfiles volume export-policy remove";
            AppendIfNonNull(ref baseCommand, "--rule-index", settings.RuleIndex);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--pool-name", settings.PoolName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network list-service-tags".
        /// List all service tags which are below to different resources.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetwork")]
        public dynamic NetworkListServiceTags(NetworkListServiceTagsSettings settings) {
            var baseCommand = "az network list-service-tags";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network list-usages".
        /// List the number of network resources in a region that are used against a subscription quota.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetwork")]
        public dynamic NetworkListUsages(NetworkListUsagesSettings settings) {
            var baseCommand = "az network list-usages";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway create".
        /// Create an application gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public dynamic NetworkApplicationGatewayCreate(NetworkApplicationGatewayCreateSettings settings) {
            var baseCommand = "az network application-gateway create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--custom-error-pages", settings.CustomErrorPages);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--max-capacity", settings.MaxCapacity);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--validate", settings.Validate);
            AppendIfNonNull(ref baseCommand, "--waf-policy", settings.WafPolicy);
            AppendIfNonNull(ref baseCommand, "--zones", settings.Zones);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--cert-password", settings.CertPassword);
            AppendIfNonNull(ref baseCommand, "--connection-draining-timeout", settings.ConnectionDrainingTimeout);
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--http-settings-cookie-based-affinity", settings.HttpSettingsCookieBasedAffinity);
            AppendIfNonNull(ref baseCommand, "--http-settings-port", settings.HttpSettingsPort);
            AppendIfNonNull(ref baseCommand, "--http-settings-protocol", settings.HttpSettingsProtocol);
            AppendIfNonNull(ref baseCommand, "--http2", settings.Http2);
            AppendIfNonNull(ref baseCommand, "--key-vault-secret-id", settings.KeyVaultSecretId);
            AppendIfNonNull(ref baseCommand, "--routing-rule-type", settings.RoutingRuleType);
            AppendIfNonNull(ref baseCommand, "--servers", settings.Servers);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--identity", settings.Identity);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address-allocation", settings.PublicIpAddressAllocation);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--subnet-address-prefix", settings.SubnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-address-prefix", settings.VnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway delete".
        /// Delete an application gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public dynamic NetworkApplicationGatewayDelete(NetworkApplicationGatewayDeleteSettings settings) {
            var baseCommand = "az network application-gateway delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway list".
        /// List application gateways.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public dynamic NetworkApplicationGatewayList(NetworkApplicationGatewayListSettings settings) {
            var baseCommand = "az network application-gateway list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway show".
        /// Get the details of an application gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public dynamic NetworkApplicationGatewayShow(NetworkApplicationGatewayShowSettings settings) {
            var baseCommand = "az network application-gateway show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway show-backend-health".
        /// Get information on the backend health of an application gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public dynamic NetworkApplicationGatewayShowBackendHealth(NetworkApplicationGatewayShowBackendHealthSettings settings) {
            var baseCommand = "az network application-gateway show-backend-health";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway start".
        /// Start an application gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public dynamic NetworkApplicationGatewayStart(NetworkApplicationGatewayStartSettings settings) {
            var baseCommand = "az network application-gateway start";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway stop".
        /// Stop an application gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public dynamic NetworkApplicationGatewayStop(NetworkApplicationGatewayStopSettings settings) {
            var baseCommand = "az network application-gateway stop";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway update".
        /// Update an application gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public dynamic NetworkApplicationGatewayUpdate(NetworkApplicationGatewayUpdateSettings settings) {
            var baseCommand = "az network application-gateway update";
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--custom-error-pages", settings.CustomErrorPages);
            AppendIfNonNull(ref baseCommand, "--http2", settings.Http2);
            AppendIfNonNull(ref baseCommand, "--max-capacity", settings.MaxCapacity);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway wait".
        /// Place the CLI in a waiting state until a condition of the application gateway is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGateway")]
        public dynamic NetworkApplicationGatewayWait(NetworkApplicationGatewayWaitSettings settings) {
            var baseCommand = "az network application-gateway wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway address-pool create".
        /// Create an address pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAddressPool")]
        public dynamic NetworkApplicationGatewayAddressPoolCreate(NetworkApplicationGatewayAddressPoolCreateSettings settings) {
            var baseCommand = "az network application-gateway address-pool create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--servers", settings.Servers);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway address-pool delete".
        /// Delete an address pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAddressPool")]
        public dynamic NetworkApplicationGatewayAddressPoolDelete(NetworkApplicationGatewayAddressPoolDeleteSettings settings) {
            var baseCommand = "az network application-gateway address-pool delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway address-pool list".
        /// List address pools.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAddressPool")]
        public dynamic NetworkApplicationGatewayAddressPoolList(NetworkApplicationGatewayAddressPoolListSettings settings) {
            var baseCommand = "az network application-gateway address-pool list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway address-pool show".
        /// Get the details of an address pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAddressPool")]
        public dynamic NetworkApplicationGatewayAddressPoolShow(NetworkApplicationGatewayAddressPoolShowSettings settings) {
            var baseCommand = "az network application-gateway address-pool show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway address-pool update".
        /// Update an address pool.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAddressPool")]
        public dynamic NetworkApplicationGatewayAddressPoolUpdate(NetworkApplicationGatewayAddressPoolUpdateSettings settings) {
            var baseCommand = "az network application-gateway address-pool update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--servers", settings.Servers);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway auth-cert create".
        /// Create an authorization certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAuthCert")]
        public dynamic NetworkApplicationGatewayAuthCertCreate(NetworkApplicationGatewayAuthCertCreateSettings settings) {
            var baseCommand = "az network application-gateway auth-cert create";
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway auth-cert delete".
        /// Delete an authorization certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAuthCert")]
        public dynamic NetworkApplicationGatewayAuthCertDelete(NetworkApplicationGatewayAuthCertDeleteSettings settings) {
            var baseCommand = "az network application-gateway auth-cert delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway auth-cert list".
        /// List authorization certificates.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAuthCert")]
        public dynamic NetworkApplicationGatewayAuthCertList(NetworkApplicationGatewayAuthCertListSettings settings) {
            var baseCommand = "az network application-gateway auth-cert list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway auth-cert show".
        /// Show an authorization certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAuthCert")]
        public dynamic NetworkApplicationGatewayAuthCertShow(NetworkApplicationGatewayAuthCertShowSettings settings) {
            var baseCommand = "az network application-gateway auth-cert show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway auth-cert update".
        /// Update an authorization certificate.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayAuthCert")]
        public dynamic NetworkApplicationGatewayAuthCertUpdate(NetworkApplicationGatewayAuthCertUpdateSettings settings) {
            var baseCommand = "az network application-gateway auth-cert update";
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway frontend-ip create".
        /// Create a frontend IP address.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendIp")]
        public dynamic NetworkApplicationGatewayFrontendIpCreate(NetworkApplicationGatewayFrontendIpCreateSettings settings) {
            var baseCommand = "az network application-gateway frontend-ip create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway frontend-ip delete".
        /// Delete a frontend IP address.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendIp")]
        public dynamic NetworkApplicationGatewayFrontendIpDelete(NetworkApplicationGatewayFrontendIpDeleteSettings settings) {
            var baseCommand = "az network application-gateway frontend-ip delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway frontend-ip list".
        /// List frontend IP addresses.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendIp")]
        public dynamic NetworkApplicationGatewayFrontendIpList(NetworkApplicationGatewayFrontendIpListSettings settings) {
            var baseCommand = "az network application-gateway frontend-ip list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway frontend-ip show".
        /// Get the details of a frontend IP address.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendIp")]
        public dynamic NetworkApplicationGatewayFrontendIpShow(NetworkApplicationGatewayFrontendIpShowSettings settings) {
            var baseCommand = "az network application-gateway frontend-ip show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway frontend-ip update".
        /// Update a frontend IP address.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendIp")]
        public dynamic NetworkApplicationGatewayFrontendIpUpdate(NetworkApplicationGatewayFrontendIpUpdateSettings settings) {
            var baseCommand = "az network application-gateway frontend-ip update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway frontend-port create".
        /// Create a frontend port.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendPort")]
        public dynamic NetworkApplicationGatewayFrontendPortCreate(NetworkApplicationGatewayFrontendPortCreateSettings settings) {
            var baseCommand = "az network application-gateway frontend-port create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway frontend-port delete".
        /// Delete a frontend port.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendPort")]
        public dynamic NetworkApplicationGatewayFrontendPortDelete(NetworkApplicationGatewayFrontendPortDeleteSettings settings) {
            var baseCommand = "az network application-gateway frontend-port delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway frontend-port list".
        /// List frontend ports.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendPort")]
        public dynamic NetworkApplicationGatewayFrontendPortList(NetworkApplicationGatewayFrontendPortListSettings settings) {
            var baseCommand = "az network application-gateway frontend-port list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway frontend-port show".
        /// Get the details of a frontend port.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendPort")]
        public dynamic NetworkApplicationGatewayFrontendPortShow(NetworkApplicationGatewayFrontendPortShowSettings settings) {
            var baseCommand = "az network application-gateway frontend-port show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway frontend-port update".
        /// Update a frontend port.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayFrontendPort")]
        public dynamic NetworkApplicationGatewayFrontendPortUpdate(NetworkApplicationGatewayFrontendPortUpdateSettings settings) {
            var baseCommand = "az network application-gateway frontend-port update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway http-listener create".
        /// Create an HTTP listener.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpListener")]
        public dynamic NetworkApplicationGatewayHttpListenerCreate(NetworkApplicationGatewayHttpListenerCreateSettings settings) {
            var baseCommand = "az network application-gateway http-listener create";
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--frontend-ip", settings.FrontendIp);
            AppendIfNonNull(ref baseCommand, "--host-name", settings.HostName);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ssl-cert", settings.SslCert);
            AppendIfNonNull(ref baseCommand, "--waf-policy", settings.WafPolicy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway http-listener delete".
        /// Delete an HTTP listener.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpListener")]
        public dynamic NetworkApplicationGatewayHttpListenerDelete(NetworkApplicationGatewayHttpListenerDeleteSettings settings) {
            var baseCommand = "az network application-gateway http-listener delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway http-listener list".
        /// List HTTP listeners.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpListener")]
        public dynamic NetworkApplicationGatewayHttpListenerList(NetworkApplicationGatewayHttpListenerListSettings settings) {
            var baseCommand = "az network application-gateway http-listener list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway http-listener show".
        /// Get the details of an HTTP listener.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpListener")]
        public dynamic NetworkApplicationGatewayHttpListenerShow(NetworkApplicationGatewayHttpListenerShowSettings settings) {
            var baseCommand = "az network application-gateway http-listener show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway http-listener update".
        /// Update an HTTP listener.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpListener")]
        public dynamic NetworkApplicationGatewayHttpListenerUpdate(NetworkApplicationGatewayHttpListenerUpdateSettings settings) {
            var baseCommand = "az network application-gateway http-listener update";
            AppendIfNonNull(ref baseCommand, "--frontend-ip", settings.FrontendIp);
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--host-name", settings.HostName);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ssl-cert", settings.SslCert);
            AppendIfNonNull(ref baseCommand, "--waf-policy", settings.WafPolicy);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway http-settings create".
        /// Create HTTP settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpSettings")]
        public dynamic NetworkApplicationGatewayHttpSettingsCreate(NetworkApplicationGatewayHttpSettingsCreateSettings settings) {
            var baseCommand = "az network application-gateway http-settings create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--affinity-cookie-name", settings.AffinityCookieName);
            AppendIfNonNull(ref baseCommand, "--auth-certs", settings.AuthCerts);
            AppendIfNonNull(ref baseCommand, "--connection-draining-timeout", settings.ConnectionDrainingTimeout);
            AppendIfNonNull(ref baseCommand, "--cookie-based-affinity", settings.CookieBasedAffinity);
            AppendIfNonNull(ref baseCommand, "--enable-probe", settings.EnableProbe);
            AppendIfNonNull(ref baseCommand, "--host-name", settings.HostName);
            AppendIfNonNull(ref baseCommand, "--host-name-from-backend-pool", settings.HostNameFromBackendPool);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--probe", settings.Probe);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--root-certs", settings.RootCerts);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway http-settings delete".
        /// Delete HTTP settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpSettings")]
        public dynamic NetworkApplicationGatewayHttpSettingsDelete(NetworkApplicationGatewayHttpSettingsDeleteSettings settings) {
            var baseCommand = "az network application-gateway http-settings delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway http-settings list".
        /// List HTTP settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpSettings")]
        public dynamic NetworkApplicationGatewayHttpSettingsList(NetworkApplicationGatewayHttpSettingsListSettings settings) {
            var baseCommand = "az network application-gateway http-settings list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway http-settings show".
        /// Get the details of a gateway's HTTP settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpSettings")]
        public dynamic NetworkApplicationGatewayHttpSettingsShow(NetworkApplicationGatewayHttpSettingsShowSettings settings) {
            var baseCommand = "az network application-gateway http-settings show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway http-settings update".
        /// Update HTTP settings.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayHttpSettings")]
        public dynamic NetworkApplicationGatewayHttpSettingsUpdate(NetworkApplicationGatewayHttpSettingsUpdateSettings settings) {
            var baseCommand = "az network application-gateway http-settings update";
            AppendIfNonNull(ref baseCommand, "--affinity-cookie-name", settings.AffinityCookieName);
            AppendIfNonNull(ref baseCommand, "--auth-certs", settings.AuthCerts);
            AppendIfNonNull(ref baseCommand, "--connection-draining-timeout", settings.ConnectionDrainingTimeout);
            AppendIfNonNull(ref baseCommand, "--cookie-based-affinity", settings.CookieBasedAffinity);
            AppendIfNonNull(ref baseCommand, "--enable-probe", settings.EnableProbe);
            AppendIfNonNull(ref baseCommand, "--host-name", settings.HostName);
            AppendIfNonNull(ref baseCommand, "--host-name-from-backend-pool", settings.HostNameFromBackendPool);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--probe", settings.Probe);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--root-certs", settings.RootCerts);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway identity assign".
        /// Assign a managed service identity to an application-gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayIdentity")]
        public dynamic NetworkApplicationGatewayIdentityAssign(NetworkApplicationGatewayIdentityAssignSettings settings) {
            var baseCommand = "az network application-gateway identity assign";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--identity", settings.Identity);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway identity remove".
        /// Remove the managed service identity of an application-gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayIdentity")]
        public dynamic NetworkApplicationGatewayIdentityRemove(NetworkApplicationGatewayIdentityRemoveSettings settings) {
            var baseCommand = "az network application-gateway identity remove";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway identity show".
        /// Show the managed service identity of an application-gateway.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayIdentity")]
        public dynamic NetworkApplicationGatewayIdentityShow(NetworkApplicationGatewayIdentityShowSettings settings) {
            var baseCommand = "az network application-gateway identity show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway probe create".
        /// Create a probe.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayProbe")]
        public dynamic NetworkApplicationGatewayProbeCreate(NetworkApplicationGatewayProbeCreateSettings settings) {
            var baseCommand = "az network application-gateway probe create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--host", settings.Host);
            AppendIfNonNull(ref baseCommand, "--host-name-from-http-settings", settings.HostNameFromHttpSettings);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--match-body", settings.MatchBody);
            AppendIfNonNull(ref baseCommand, "--match-status-codes", settings.MatchStatusCodes);
            AppendIfNonNull(ref baseCommand, "--min-servers", settings.MinServers);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--threshold", settings.Threshold);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway probe delete".
        /// Delete a probe.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayProbe")]
        public dynamic NetworkApplicationGatewayProbeDelete(NetworkApplicationGatewayProbeDeleteSettings settings) {
            var baseCommand = "az network application-gateway probe delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway probe list".
        /// List probes.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayProbe")]
        public dynamic NetworkApplicationGatewayProbeList(NetworkApplicationGatewayProbeListSettings settings) {
            var baseCommand = "az network application-gateway probe list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway probe show".
        /// Get the details of a probe.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayProbe")]
        public dynamic NetworkApplicationGatewayProbeShow(NetworkApplicationGatewayProbeShowSettings settings) {
            var baseCommand = "az network application-gateway probe show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway probe update".
        /// Update a probe.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayProbe")]
        public dynamic NetworkApplicationGatewayProbeUpdate(NetworkApplicationGatewayProbeUpdateSettings settings) {
            var baseCommand = "az network application-gateway probe update";
            AppendIfNonNull(ref baseCommand, "--host", settings.Host);
            AppendIfNonNull(ref baseCommand, "--host-name-from-http-settings", settings.HostNameFromHttpSettings);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--match-body", settings.MatchBody);
            AppendIfNonNull(ref baseCommand, "--match-status-codes", settings.MatchStatusCodes);
            AppendIfNonNull(ref baseCommand, "--min-servers", settings.MinServers);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--threshold", settings.Threshold);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway redirect-config create".
        /// Create a redirect configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRedirectConfig")]
        public dynamic NetworkApplicationGatewayRedirectConfigCreate(NetworkApplicationGatewayRedirectConfigCreateSettings settings) {
            var baseCommand = "az network application-gateway redirect-config create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--include-path", settings.IncludePath);
            AppendIfNonNull(ref baseCommand, "--include-query-string", settings.IncludeQueryString);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--target-listener", settings.TargetListener);
            AppendIfNonNull(ref baseCommand, "--target-url", settings.TargetUrl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway redirect-config delete".
        /// Delete a redirect configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRedirectConfig")]
        public dynamic NetworkApplicationGatewayRedirectConfigDelete(NetworkApplicationGatewayRedirectConfigDeleteSettings settings) {
            var baseCommand = "az network application-gateway redirect-config delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway redirect-config list".
        /// List redirect configurations.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRedirectConfig")]
        public dynamic NetworkApplicationGatewayRedirectConfigList(NetworkApplicationGatewayRedirectConfigListSettings settings) {
            var baseCommand = "az network application-gateway redirect-config list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway redirect-config show".
        /// Get the details of a redirect configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRedirectConfig")]
        public dynamic NetworkApplicationGatewayRedirectConfigShow(NetworkApplicationGatewayRedirectConfigShowSettings settings) {
            var baseCommand = "az network application-gateway redirect-config show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway redirect-config update".
        /// Update a redirect configuration.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRedirectConfig")]
        public dynamic NetworkApplicationGatewayRedirectConfigUpdate(NetworkApplicationGatewayRedirectConfigUpdateSettings settings) {
            var baseCommand = "az network application-gateway redirect-config update";
            AppendIfNonNull(ref baseCommand, "--include-path", settings.IncludePath);
            AppendIfNonNull(ref baseCommand, "--include-query-string", settings.IncludeQueryString);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--target-listener", settings.TargetListener);
            AppendIfNonNull(ref baseCommand, "--target-url", settings.TargetUrl);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule create".
        /// Create a rewrite rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public dynamic NetworkApplicationGatewayRewriteRuleCreate(NetworkApplicationGatewayRewriteRuleCreateSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--request-headers", settings.RequestHeaders);
            AppendIfNonNull(ref baseCommand, "--response-headers", settings.ResponseHeaders);
            AppendIfNonNull(ref baseCommand, "--sequence", settings.Sequence);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule delete".
        /// Delete a rewrite rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public dynamic NetworkApplicationGatewayRewriteRuleDelete(NetworkApplicationGatewayRewriteRuleDeleteSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule list".
        /// List rewrite rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public dynamic NetworkApplicationGatewayRewriteRuleList(NetworkApplicationGatewayRewriteRuleListSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule list-request-headers".
        /// Lists all available request headers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public dynamic NetworkApplicationGatewayRewriteRuleListRequestHeaders(NetworkApplicationGatewayRewriteRuleListRequestHeadersSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule list-request-headers";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule list-response-headers".
        /// Lists all available response headers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public dynamic NetworkApplicationGatewayRewriteRuleListResponseHeaders(NetworkApplicationGatewayRewriteRuleListResponseHeadersSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule list-response-headers";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule show".
        /// Get the details of a rewrite rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public dynamic NetworkApplicationGatewayRewriteRuleShow(NetworkApplicationGatewayRewriteRuleShowSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule update".
        /// Update a rewrite rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRule")]
        public dynamic NetworkApplicationGatewayRewriteRuleUpdate(NetworkApplicationGatewayRewriteRuleUpdateSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--request-headers", settings.RequestHeaders);
            AppendIfNonNull(ref baseCommand, "--response-headers", settings.ResponseHeaders);
            AppendIfNonNull(ref baseCommand, "--sequence", settings.Sequence);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule condition create".
        /// Create a rewrite rule condition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleCondition")]
        public dynamic NetworkApplicationGatewayRewriteRuleConditionCreate(NetworkApplicationGatewayRewriteRuleConditionCreateSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule condition create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--variable", settings.Variable);
            AppendIfNonNull(ref baseCommand, "--ignore-case", settings.IgnoreCase);
            AppendIfNonNull(ref baseCommand, "--negate", settings.Negate);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule condition delete".
        /// Delete a rewrite rule condition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleCondition")]
        public dynamic NetworkApplicationGatewayRewriteRuleConditionDelete(NetworkApplicationGatewayRewriteRuleConditionDeleteSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule condition delete";
            AppendIfNonNull(ref baseCommand, "--variable", settings.Variable);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule condition list".
        /// List rewrite rule conditions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleCondition")]
        public dynamic NetworkApplicationGatewayRewriteRuleConditionList(NetworkApplicationGatewayRewriteRuleConditionListSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule condition list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule condition list-server-variables".
        /// Lists all available server variables.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleCondition")]
        public dynamic NetworkApplicationGatewayRewriteRuleConditionListServerVariables(NetworkApplicationGatewayRewriteRuleConditionListServerVariablesSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule condition list-server-variables";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule condition show".
        /// Get the details of a rewrite rule condition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleCondition")]
        public dynamic NetworkApplicationGatewayRewriteRuleConditionShow(NetworkApplicationGatewayRewriteRuleConditionShowSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule condition show";
            AppendIfNonNull(ref baseCommand, "--variable", settings.Variable);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule condition update".
        /// Update a rewrite rule condition.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleCondition")]
        public dynamic NetworkApplicationGatewayRewriteRuleConditionUpdate(NetworkApplicationGatewayRewriteRuleConditionUpdateSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule condition update";
            AppendIfNonNull(ref baseCommand, "--variable", settings.Variable);
            AppendIfNonNull(ref baseCommand, "--ignore-case", settings.IgnoreCase);
            AppendIfNonNull(ref baseCommand, "--negate", settings.Negate);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--rule-set-name", settings.RuleSetName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule set create".
        /// Create a rewrite rule set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleSet")]
        public dynamic NetworkApplicationGatewayRewriteRuleSetCreate(NetworkApplicationGatewayRewriteRuleSetCreateSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule set create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule set delete".
        /// Delete a rewrite rule set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleSet")]
        public dynamic NetworkApplicationGatewayRewriteRuleSetDelete(NetworkApplicationGatewayRewriteRuleSetDeleteSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule set delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule set list".
        /// List rewrite rule sets.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleSet")]
        public dynamic NetworkApplicationGatewayRewriteRuleSetList(NetworkApplicationGatewayRewriteRuleSetListSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule set list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule set show".
        /// Get the details of a rewrite rule set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleSet")]
        public dynamic NetworkApplicationGatewayRewriteRuleSetShow(NetworkApplicationGatewayRewriteRuleSetShowSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule set show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rewrite-rule set update".
        /// Update a rewrite rule set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRewriteRuleSet")]
        public dynamic NetworkApplicationGatewayRewriteRuleSetUpdate(NetworkApplicationGatewayRewriteRuleSetUpdateSettings settings) {
            var baseCommand = "az network application-gateway rewrite-rule set update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway root-cert create".
        /// Upload a trusted root certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRootCert")]
        public dynamic NetworkApplicationGatewayRootCertCreate(NetworkApplicationGatewayRootCertCreateSettings settings) {
            var baseCommand = "az network application-gateway root-cert create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--keyvault-secret", settings.KeyvaultSecret);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway root-cert delete".
        /// Delete a trusted root certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRootCert")]
        public dynamic NetworkApplicationGatewayRootCertDelete(NetworkApplicationGatewayRootCertDeleteSettings settings) {
            var baseCommand = "az network application-gateway root-cert delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway root-cert list".
        /// List trusted root certificates.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRootCert")]
        public dynamic NetworkApplicationGatewayRootCertList(NetworkApplicationGatewayRootCertListSettings settings) {
            var baseCommand = "az network application-gateway root-cert list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway root-cert show".
        /// Get the details of a trusted root certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRootCert")]
        public dynamic NetworkApplicationGatewayRootCertShow(NetworkApplicationGatewayRootCertShowSettings settings) {
            var baseCommand = "az network application-gateway root-cert show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway root-cert update".
        /// Update a trusted root certificate.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRootCert")]
        public dynamic NetworkApplicationGatewayRootCertUpdate(NetworkApplicationGatewayRootCertUpdateSettings settings) {
            var baseCommand = "az network application-gateway root-cert update";
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--keyvault-secret", settings.KeyvaultSecret);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rule create".
        /// Create a rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRule")]
        public dynamic NetworkApplicationGatewayRuleCreate(NetworkApplicationGatewayRuleCreateSettings settings) {
            var baseCommand = "az network application-gateway rule create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--http-listener", settings.HttpListener);
            AppendIfNonNull(ref baseCommand, "--http-settings", settings.HttpSettings);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--redirect-config", settings.RedirectConfig);
            AppendIfNonNull(ref baseCommand, "--rule-type", settings.RuleType);
            AppendIfNonNull(ref baseCommand, "--url-path-map", settings.UrlPathMap);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rule delete".
        /// Delete a rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRule")]
        public dynamic NetworkApplicationGatewayRuleDelete(NetworkApplicationGatewayRuleDeleteSettings settings) {
            var baseCommand = "az network application-gateway rule delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rule list".
        /// List rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRule")]
        public dynamic NetworkApplicationGatewayRuleList(NetworkApplicationGatewayRuleListSettings settings) {
            var baseCommand = "az network application-gateway rule list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rule show".
        /// Get the details of a rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRule")]
        public dynamic NetworkApplicationGatewayRuleShow(NetworkApplicationGatewayRuleShowSettings settings) {
            var baseCommand = "az network application-gateway rule show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway rule update".
        /// Update a rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayRule")]
        public dynamic NetworkApplicationGatewayRuleUpdate(NetworkApplicationGatewayRuleUpdateSettings settings) {
            var baseCommand = "az network application-gateway rule update";
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--http-listener", settings.HttpListener);
            AppendIfNonNull(ref baseCommand, "--http-settings", settings.HttpSettings);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--redirect-config", settings.RedirectConfig);
            AppendIfNonNull(ref baseCommand, "--rule-type", settings.RuleType);
            AppendIfNonNull(ref baseCommand, "--url-path-map", settings.UrlPathMap);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway ssl-cert create".
        /// Upload an SSL certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslCert")]
        public dynamic NetworkApplicationGatewaySslCertCreate(NetworkApplicationGatewaySslCertCreateSettings settings) {
            var baseCommand = "az network application-gateway ssl-cert create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--cert-password", settings.CertPassword);
            AppendIfNonNull(ref baseCommand, "--key-vault-secret-id", settings.KeyVaultSecretId);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway ssl-cert delete".
        /// Delete an SSL certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslCert")]
        public dynamic NetworkApplicationGatewaySslCertDelete(NetworkApplicationGatewaySslCertDeleteSettings settings) {
            var baseCommand = "az network application-gateway ssl-cert delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway ssl-cert list".
        /// List SSL certificates.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslCert")]
        public dynamic NetworkApplicationGatewaySslCertList(NetworkApplicationGatewaySslCertListSettings settings) {
            var baseCommand = "az network application-gateway ssl-cert list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway ssl-cert show".
        /// Get the details of an SSL certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslCert")]
        public dynamic NetworkApplicationGatewaySslCertShow(NetworkApplicationGatewaySslCertShowSettings settings) {
            var baseCommand = "az network application-gateway ssl-cert show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway ssl-cert update".
        /// Update an SSL certificate.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslCert")]
        public dynamic NetworkApplicationGatewaySslCertUpdate(NetworkApplicationGatewaySslCertUpdateSettings settings) {
            var baseCommand = "az network application-gateway ssl-cert update";
            AppendIfNonNull(ref baseCommand, "--cert-file", settings.CertFile);
            AppendIfNonNull(ref baseCommand, "--cert-password", settings.CertPassword);
            AppendIfNonNull(ref baseCommand, "--key-vault-secret-id", settings.KeyVaultSecretId);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway ssl-policy list-options".
        /// Lists available SSL options for configuring SSL policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslPolicy")]
        public dynamic NetworkApplicationGatewaySslPolicyListOptions(NetworkApplicationGatewaySslPolicyListOptionsSettings settings) {
            var baseCommand = "az network application-gateway ssl-policy list-options";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway ssl-policy set".
        /// Update or clear SSL policy settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslPolicy")]
        public dynamic NetworkApplicationGatewaySslPolicySet(NetworkApplicationGatewaySslPolicySetSettings settings) {
            var baseCommand = "az network application-gateway ssl-policy set";
            AppendIfNonNull(ref baseCommand, "--cipher-suites", settings.CipherSuites);
            AppendIfNonNull(ref baseCommand, "--disabled-ssl-protocols", settings.DisabledSslProtocols);
            AppendIfNonNull(ref baseCommand, "--min-protocol-version", settings.MinProtocolVersion);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--policy-type", settings.PolicyType);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway ssl-policy show".
        /// Get the details of gateway's SSL policy settings.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslPolicy")]
        public dynamic NetworkApplicationGatewaySslPolicyShow(NetworkApplicationGatewaySslPolicyShowSettings settings) {
            var baseCommand = "az network application-gateway ssl-policy show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway ssl-policy predefined list".
        /// Lists all SSL predefined policies for configuring SSL policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslPolicyPredefined")]
        public dynamic NetworkApplicationGatewaySslPolicyPredefinedList(NetworkApplicationGatewaySslPolicyPredefinedListSettings settings) {
            var baseCommand = "az network application-gateway ssl-policy predefined list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway ssl-policy predefined show".
        /// Gets SSL predefined policy with the specified policy name.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewaySslPolicyPredefined")]
        public dynamic NetworkApplicationGatewaySslPolicyPredefinedShow(NetworkApplicationGatewaySslPolicyPredefinedShowSettings settings) {
            var baseCommand = "az network application-gateway ssl-policy predefined show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway url-path-map create".
        /// Create a URL path map.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMap")]
        public dynamic NetworkApplicationGatewayUrlPathMapCreate(NetworkApplicationGatewayUrlPathMapCreateSettings settings) {
            var baseCommand = "az network application-gateway url-path-map create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--default-address-pool", settings.DefaultAddressPool);
            AppendIfNonNull(ref baseCommand, "--default-http-settings", settings.DefaultHttpSettings);
            AppendIfNonNull(ref baseCommand, "--default-redirect-config", settings.DefaultRedirectConfig);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--paths", settings.Paths);
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--http-settings", settings.HttpSettings);
            AppendIfNonNull(ref baseCommand, "--redirect-config", settings.RedirectConfig);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway url-path-map delete".
        /// Delete a URL path map.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMap")]
        public dynamic NetworkApplicationGatewayUrlPathMapDelete(NetworkApplicationGatewayUrlPathMapDeleteSettings settings) {
            var baseCommand = "az network application-gateway url-path-map delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway url-path-map list".
        /// List URL path maps.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMap")]
        public dynamic NetworkApplicationGatewayUrlPathMapList(NetworkApplicationGatewayUrlPathMapListSettings settings) {
            var baseCommand = "az network application-gateway url-path-map list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway url-path-map show".
        /// Get the details of a URL path map.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMap")]
        public dynamic NetworkApplicationGatewayUrlPathMapShow(NetworkApplicationGatewayUrlPathMapShowSettings settings) {
            var baseCommand = "az network application-gateway url-path-map show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway url-path-map update".
        /// Update a URL path map.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMap")]
        public dynamic NetworkApplicationGatewayUrlPathMapUpdate(NetworkApplicationGatewayUrlPathMapUpdateSettings settings) {
            var baseCommand = "az network application-gateway url-path-map update";
            AppendIfNonNull(ref baseCommand, "--default-address-pool", settings.DefaultAddressPool);
            AppendIfNonNull(ref baseCommand, "--default-http-settings", settings.DefaultHttpSettings);
            AppendIfNonNull(ref baseCommand, "--default-redirect-config", settings.DefaultRedirectConfig);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway url-path-map rule create".
        /// Create a rule for a URL path map.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMapRule")]
        public dynamic NetworkApplicationGatewayUrlPathMapRuleCreate(NetworkApplicationGatewayUrlPathMapRuleCreateSettings settings) {
            var baseCommand = "az network application-gateway url-path-map rule create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path-map-name", settings.PathMapName);
            AppendIfNonNull(ref baseCommand, "--paths", settings.Paths);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--http-settings", settings.HttpSettings);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--redirect-config", settings.RedirectConfig);
            AppendIfNonNull(ref baseCommand, "--waf-policy", settings.WafPolicy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway url-path-map rule delete".
        /// Delete a rule of a URL path map.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayUrlPathMapRule")]
        public dynamic NetworkApplicationGatewayUrlPathMapRuleDelete(NetworkApplicationGatewayUrlPathMapRuleDeleteSettings settings) {
            var baseCommand = "az network application-gateway url-path-map rule delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path-map-name", settings.PathMapName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-config list-rule-sets".
        /// Get information on available WAF rule sets, rule groups, and rule IDs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafConfig")]
        public dynamic NetworkApplicationGatewayWafConfigListRuleSets(NetworkApplicationGatewayWafConfigListRuleSetsSettings settings) {
            var baseCommand = "az network application-gateway waf-config list-rule-sets";
            AppendIfNonNull(ref baseCommand, "--group", settings.Group);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-config set".
        /// Update the firewall configuration of a web application.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafConfig")]
        public dynamic NetworkApplicationGatewayWafConfigSet(NetworkApplicationGatewayWafConfigSetSettings settings) {
            var baseCommand = "az network application-gateway waf-config set";
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--disabled-rule-groups", settings.DisabledRuleGroups);
            AppendIfNonNull(ref baseCommand, "--disabled-rules", settings.DisabledRules);
            AppendIfNonNull(ref baseCommand, "--exclusion", settings.Exclusion);
            AppendIfNonNull(ref baseCommand, "--file-upload-limit", settings.FileUploadLimit);
            AppendIfNonNull(ref baseCommand, "--firewall-mode", settings.FirewallMode);
            AppendIfNonNull(ref baseCommand, "--max-request-body-size", settings.MaxRequestBodySize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--request-body-check", settings.RequestBodyCheck);
            AppendIfNonNull(ref baseCommand, "--rule-set-type", settings.RuleSetType);
            AppendIfNonNull(ref baseCommand, "--rule-set-version", settings.RuleSetVersion);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-config show".
        /// Get the firewall configuration of a web application.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafConfig")]
        public dynamic NetworkApplicationGatewayWafConfigShow(NetworkApplicationGatewayWafConfigShowSettings settings) {
            var baseCommand = "az network application-gateway waf-config show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy create".
        /// Create an application gateway WAF policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicy")]
        public dynamic NetworkApplicationGatewayWafPolicyCreate(NetworkApplicationGatewayWafPolicyCreateSettings settings) {
            var baseCommand = "az network application-gateway waf-policy create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy delete".
        /// Delete an application gateway WAF policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicy")]
        public dynamic NetworkApplicationGatewayWafPolicyDelete(NetworkApplicationGatewayWafPolicyDeleteSettings settings) {
            var baseCommand = "az network application-gateway waf-policy delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy list".
        /// List application gateway WAF policies.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicy")]
        public dynamic NetworkApplicationGatewayWafPolicyList(NetworkApplicationGatewayWafPolicyListSettings settings) {
            var baseCommand = "az network application-gateway waf-policy list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy show".
        /// Get the details of an application gateway WAF policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicy")]
        public dynamic NetworkApplicationGatewayWafPolicyShow(NetworkApplicationGatewayWafPolicyShowSettings settings) {
            var baseCommand = "az network application-gateway waf-policy show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy update".
        /// Update an application gateway WAF policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicy")]
        public dynamic NetworkApplicationGatewayWafPolicyUpdate(NetworkApplicationGatewayWafPolicyUpdateSettings settings) {
            var baseCommand = "az network application-gateway waf-policy update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy wait".
        /// Place the CLI in a waiting state until a condition of the application gateway WAF policy is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicy")]
        public dynamic NetworkApplicationGatewayWafPolicyWait(NetworkApplicationGatewayWafPolicyWaitSettings settings) {
            var baseCommand = "az network application-gateway waf-policy wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule create".
        /// Create an application gateway WAF policy custom rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRule")]
        public dynamic NetworkApplicationGatewayWafPolicyCustomRuleCreate(NetworkApplicationGatewayWafPolicyCustomRuleCreateSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule create";
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-type", settings.RuleType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule delete".
        /// Delete an application gateway WAF policy custom rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRule")]
        public dynamic NetworkApplicationGatewayWafPolicyCustomRuleDelete(NetworkApplicationGatewayWafPolicyCustomRuleDeleteSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule list".
        /// List application gateway WAF policy custom rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRule")]
        public dynamic NetworkApplicationGatewayWafPolicyCustomRuleList(NetworkApplicationGatewayWafPolicyCustomRuleListSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule list";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule show".
        /// Get the details of an application gateway WAF policy custom rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRule")]
        public dynamic NetworkApplicationGatewayWafPolicyCustomRuleShow(NetworkApplicationGatewayWafPolicyCustomRuleShowSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule update".
        /// Update an application gateway WAF policy custom rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRule")]
        public dynamic NetworkApplicationGatewayWafPolicyCustomRuleUpdate(NetworkApplicationGatewayWafPolicyCustomRuleUpdateSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule update";
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--rule-type", settings.RuleType);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule match-condition add".
        /// A match condition to an application gateway WAF policy custom rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRuleMatchCondition")]
        public dynamic NetworkApplicationGatewayWafPolicyCustomRuleMatchConditionAdd(NetworkApplicationGatewayWafPolicyCustomRuleMatchConditionAddSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule match-condition add";
            AppendIfNonNull(ref baseCommand, "--match-variables", settings.MatchVariables);
            AppendIfNonNull(ref baseCommand, "--operator", settings.Operator);
            AppendIfNonNull(ref baseCommand, "--values", settings.Values);
            AppendIfNonNull(ref baseCommand, "--negate", settings.Negate);
            AppendIfNonNull(ref baseCommand, "--transforms", settings.Transforms);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule match-condition list".
        /// List application gateway WAF policy custom rule match conditions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRuleMatchCondition")]
        public dynamic NetworkApplicationGatewayWafPolicyCustomRuleMatchConditionList(NetworkApplicationGatewayWafPolicyCustomRuleMatchConditionListSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule match-condition list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy custom-rule match-condition remove".
        /// Remove a match condition from an application gateway WAF policy custom rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyCustomRuleMatchCondition")]
        public dynamic NetworkApplicationGatewayWafPolicyCustomRuleMatchConditionRemove(NetworkApplicationGatewayWafPolicyCustomRuleMatchConditionRemoveSettings settings) {
            var baseCommand = "az network application-gateway waf-policy custom-rule match-condition remove";
            AppendIfNonNull(ref baseCommand, "--index", settings.Index);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule exclusion add".
        /// Add an OWASP CRS exclusion rule to the WAF policy managed rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleExclusion")]
        public dynamic NetworkApplicationGatewayWafPolicyManagedRuleExclusionAdd(NetworkApplicationGatewayWafPolicyManagedRuleExclusionAddSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule exclusion add";
            AppendIfNonNull(ref baseCommand, "--match-variable", settings.MatchVariable);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--selector", settings.Selector);
            AppendIfNonNull(ref baseCommand, "--selector-match-operator", settings.SelectorMatchOperator);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule exclusion list".
        /// List all OWASP CRS exclusion rules that are applied on a Waf policy managed rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleExclusion")]
        public dynamic NetworkApplicationGatewayWafPolicyManagedRuleExclusionList(NetworkApplicationGatewayWafPolicyManagedRuleExclusionListSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule exclusion list";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule exclusion remove".
        /// List all OWASP CRS exclusion rules that are applied on a Waf policy managed rules.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleExclusion")]
        public dynamic NetworkApplicationGatewayWafPolicyManagedRuleExclusionRemove(NetworkApplicationGatewayWafPolicyManagedRuleExclusionRemoveSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule exclusion remove";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule rule-set add".
        /// Add managed rule set to the WAF policy managed rules. For rule set and rules, please visit: https://docs.microsoft.com/en-us/azure/web-application-firewall/ag/application- gateway-crs-rulegroups-rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSet")]
        public dynamic NetworkApplicationGatewayWafPolicyManagedRuleRuleSetAdd(NetworkApplicationGatewayWafPolicyManagedRuleRuleSetAddSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule rule-set add";
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rules", settings.Rules);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule rule-set list".
        /// List all managed rule set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSet")]
        public dynamic NetworkApplicationGatewayWafPolicyManagedRuleRuleSetList(NetworkApplicationGatewayWafPolicyManagedRuleRuleSetListSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule rule-set list";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule rule-set remove".
        /// Remove a managed rule set by rule set group name if rule_group_name is specified. Otherwise, remove all rule set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSet")]
        public dynamic NetworkApplicationGatewayWafPolicyManagedRuleRuleSetRemove(NetworkApplicationGatewayWafPolicyManagedRuleRuleSetRemoveSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule rule-set remove";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy managed-rule rule-set update".
        /// Update(Override) existing rule set of a WAF policy managed rules. For rule set and rules, please visit: https://docs.microsoft.com/en-us/azure/web-application- firewall/ag/application-gateway-crs-rulegroups-rules.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyManagedRuleRuleSet")]
        public dynamic NetworkApplicationGatewayWafPolicyManagedRuleRuleSetUpdate(NetworkApplicationGatewayWafPolicyManagedRuleRuleSetUpdateSettings settings) {
            var baseCommand = "az network application-gateway waf-policy managed-rule rule-set update";
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--rules", settings.Rules);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy policy-setting list".
        /// List properties of a web application firewall global configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyPolicySetting")]
        public dynamic NetworkApplicationGatewayWafPolicyPolicySettingList(NetworkApplicationGatewayWafPolicyPolicySettingListSettings settings) {
            var baseCommand = "az network application-gateway waf-policy policy-setting list";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network application-gateway waf-policy policy-setting update".
        /// Update properties of a web application firewall global configuration.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkApplicationGatewayWafPolicyPolicySetting")]
        public dynamic NetworkApplicationGatewayWafPolicyPolicySettingUpdate(NetworkApplicationGatewayWafPolicyPolicySettingUpdateSettings settings) {
            var baseCommand = "az network application-gateway waf-policy policy-setting update";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--file-upload-limit-in-mb", settings.FileUploadLimitInMb);
            AppendIfNonNull(ref baseCommand, "--max-request-body-size-in-kb", settings.MaxRequestBodySizeInKb);
            AppendIfNonNull(ref baseCommand, "--mode", settings.Mode);
            AppendIfNonNull(ref baseCommand, "--request-body-check", settings.RequestBodyCheck);
            AppendIfNonNull(ref baseCommand, "--state", settings.State);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network asg create".
        /// Create an application security group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkAsg")]
        public dynamic NetworkAsgCreate(NetworkAsgCreateSettings settings) {
            var baseCommand = "az network asg create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network asg delete".
        /// Delete an application security group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkAsg")]
        public dynamic NetworkAsgDelete(NetworkAsgDeleteSettings settings) {
            var baseCommand = "az network asg delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network asg list".
        /// List all application security groups in a subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkAsg")]
        public dynamic NetworkAsgList(NetworkAsgListSettings settings) {
            var baseCommand = "az network asg list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network asg show".
        /// Get details of an application security group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkAsg")]
        public dynamic NetworkAsgShow(NetworkAsgShowSettings settings) {
            var baseCommand = "az network asg show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network asg update".
        /// Update an application security group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkAsg")]
        public dynamic NetworkAsgUpdate(NetworkAsgUpdateSettings settings) {
            var baseCommand = "az network asg update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network ddos-protection create".
        /// Create a DDoS protection plan.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDdosProtection")]
        public dynamic NetworkDdosProtectionCreate(NetworkDdosProtectionCreateSettings settings) {
            var baseCommand = "az network ddos-protection create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vnets", settings.Vnets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network ddos-protection delete".
        /// Delete a DDoS protection plan.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDdosProtection")]
        public dynamic NetworkDdosProtectionDelete(NetworkDdosProtectionDeleteSettings settings) {
            var baseCommand = "az network ddos-protection delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network ddos-protection list".
        /// List DDoS protection plans.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDdosProtection")]
        public dynamic NetworkDdosProtectionList(NetworkDdosProtectionListSettings settings) {
            var baseCommand = "az network ddos-protection list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network ddos-protection show".
        /// Show details of a DDoS protection plan.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDdosProtection")]
        public dynamic NetworkDdosProtectionShow(NetworkDdosProtectionShowSettings settings) {
            var baseCommand = "az network ddos-protection show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network ddos-protection update".
        /// Update a DDoS protection plan.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDdosProtection")]
        public dynamic NetworkDdosProtectionUpdate(NetworkDdosProtectionUpdateSettings settings) {
            var baseCommand = "az network ddos-protection update";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vnets", settings.Vnets);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns list-references".
        /// Returns the DNS records specified by the referencing targetResourceIds.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDns")]
        public dynamic NetworkDnsListReferences(NetworkDnsListReferencesSettings settings) {
            var baseCommand = "az network dns list-references";
            AppendIfNonNull(ref baseCommand, "--target-resources", settings.TargetResources);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set list".
        /// List all record sets within a DNS zone.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSet")]
        public dynamic NetworkDnsRecordSetList(NetworkDnsRecordSetListSettings settings) {
            var baseCommand = "az network dns record-set list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set a add-record".
        /// Add an A record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public dynamic NetworkDnsRecordSetAAddRecord(NetworkDnsRecordSetAAddRecordSettings settings) {
            var baseCommand = "az network dns record-set a add-record";
            AppendIfNonNull(ref baseCommand, "--ipv4-address", settings.Ipv4Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set a create".
        /// Create an empty A record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public dynamic NetworkDnsRecordSetACreate(NetworkDnsRecordSetACreateSettings settings) {
            var baseCommand = "az network dns record-set a create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set a delete".
        /// Delete an A record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public dynamic NetworkDnsRecordSetADelete(NetworkDnsRecordSetADeleteSettings settings) {
            var baseCommand = "az network dns record-set a delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set a list".
        /// List all A record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public dynamic NetworkDnsRecordSetAList(NetworkDnsRecordSetAListSettings settings) {
            var baseCommand = "az network dns record-set a list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set a remove-record".
        /// Remove an A record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public dynamic NetworkDnsRecordSetARemoveRecord(NetworkDnsRecordSetARemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set a remove-record";
            AppendIfNonNull(ref baseCommand, "--ipv4-address", settings.Ipv4Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set a show".
        /// Get the details of an A record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public dynamic NetworkDnsRecordSetAShow(NetworkDnsRecordSetAShowSettings settings) {
            var baseCommand = "az network dns record-set a show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set a update".
        /// Update an A record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetA")]
        public dynamic NetworkDnsRecordSetAUpdate(NetworkDnsRecordSetAUpdateSettings settings) {
            var baseCommand = "az network dns record-set a update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set aaaa add-record".
        /// Add an AAAA record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public dynamic NetworkDnsRecordSetAaaaAddRecord(NetworkDnsRecordSetAaaaAddRecordSettings settings) {
            var baseCommand = "az network dns record-set aaaa add-record";
            AppendIfNonNull(ref baseCommand, "--ipv6-address", settings.Ipv6Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set aaaa create".
        /// Create an empty AAAA record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public dynamic NetworkDnsRecordSetAaaaCreate(NetworkDnsRecordSetAaaaCreateSettings settings) {
            var baseCommand = "az network dns record-set aaaa create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set aaaa delete".
        /// Delete an AAAA record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public dynamic NetworkDnsRecordSetAaaaDelete(NetworkDnsRecordSetAaaaDeleteSettings settings) {
            var baseCommand = "az network dns record-set aaaa delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set aaaa list".
        /// List all AAAA record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public dynamic NetworkDnsRecordSetAaaaList(NetworkDnsRecordSetAaaaListSettings settings) {
            var baseCommand = "az network dns record-set aaaa list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set aaaa remove-record".
        /// Remove AAAA record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public dynamic NetworkDnsRecordSetAaaaRemoveRecord(NetworkDnsRecordSetAaaaRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set aaaa remove-record";
            AppendIfNonNull(ref baseCommand, "--ipv6-address", settings.Ipv6Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set aaaa show".
        /// Get the details of an AAAA record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public dynamic NetworkDnsRecordSetAaaaShow(NetworkDnsRecordSetAaaaShowSettings settings) {
            var baseCommand = "az network dns record-set aaaa show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set aaaa update".
        /// Update an AAAA record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetAaaa")]
        public dynamic NetworkDnsRecordSetAaaaUpdate(NetworkDnsRecordSetAaaaUpdateSettings settings) {
            var baseCommand = "az network dns record-set aaaa update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set caa add-record".
        /// Add a CAA record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public dynamic NetworkDnsRecordSetCaaAddRecord(NetworkDnsRecordSetCaaAddRecordSettings settings) {
            var baseCommand = "az network dns record-set caa add-record";
            AppendIfNonNull(ref baseCommand, "--flags", settings.Flags);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tag", settings.Tag);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set caa create".
        /// Create an empty CAA record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public dynamic NetworkDnsRecordSetCaaCreate(NetworkDnsRecordSetCaaCreateSettings settings) {
            var baseCommand = "az network dns record-set caa create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set caa delete".
        /// Delete a CAA record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public dynamic NetworkDnsRecordSetCaaDelete(NetworkDnsRecordSetCaaDeleteSettings settings) {
            var baseCommand = "az network dns record-set caa delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set caa list".
        /// List all CAA record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public dynamic NetworkDnsRecordSetCaaList(NetworkDnsRecordSetCaaListSettings settings) {
            var baseCommand = "az network dns record-set caa list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set caa remove-record".
        /// Remove a CAA record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public dynamic NetworkDnsRecordSetCaaRemoveRecord(NetworkDnsRecordSetCaaRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set caa remove-record";
            AppendIfNonNull(ref baseCommand, "--flags", settings.Flags);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tag", settings.Tag);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set caa show".
        /// Get the details of a CAA record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public dynamic NetworkDnsRecordSetCaaShow(NetworkDnsRecordSetCaaShowSettings settings) {
            var baseCommand = "az network dns record-set caa show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set caa update".
        /// Update a CAA record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCaa")]
        public dynamic NetworkDnsRecordSetCaaUpdate(NetworkDnsRecordSetCaaUpdateSettings settings) {
            var baseCommand = "az network dns record-set caa update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set cname create".
        /// Create an empty CNAME record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCname")]
        public dynamic NetworkDnsRecordSetCnameCreate(NetworkDnsRecordSetCnameCreateSettings settings) {
            var baseCommand = "az network dns record-set cname create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set cname delete".
        /// Delete a CNAME record set and its associated record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCname")]
        public dynamic NetworkDnsRecordSetCnameDelete(NetworkDnsRecordSetCnameDeleteSettings settings) {
            var baseCommand = "az network dns record-set cname delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set cname list".
        /// List the CNAME record set in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCname")]
        public dynamic NetworkDnsRecordSetCnameList(NetworkDnsRecordSetCnameListSettings settings) {
            var baseCommand = "az network dns record-set cname list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set cname remove-record".
        /// Remove a CNAME record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCname")]
        public dynamic NetworkDnsRecordSetCnameRemoveRecord(NetworkDnsRecordSetCnameRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set cname remove-record";
            AppendIfNonNull(ref baseCommand, "--cname", settings.Cname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set cname set-record".
        /// Set the value of a CNAME record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCname")]
        public dynamic NetworkDnsRecordSetCnameSetRecord(NetworkDnsRecordSetCnameSetRecordSettings settings) {
            var baseCommand = "az network dns record-set cname set-record";
            AppendIfNonNull(ref baseCommand, "--cname", settings.Cname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set cname show".
        /// Get the details of a CNAME record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetCname")]
        public dynamic NetworkDnsRecordSetCnameShow(NetworkDnsRecordSetCnameShowSettings settings) {
            var baseCommand = "az network dns record-set cname show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set mx add-record".
        /// Add an MX record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public dynamic NetworkDnsRecordSetMxAddRecord(NetworkDnsRecordSetMxAddRecordSettings settings) {
            var baseCommand = "az network dns record-set mx add-record";
            AppendIfNonNull(ref baseCommand, "--exchange", settings.Exchange);
            AppendIfNonNull(ref baseCommand, "--preference", settings.Preference);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set mx create".
        /// Create an empty MX record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public dynamic NetworkDnsRecordSetMxCreate(NetworkDnsRecordSetMxCreateSettings settings) {
            var baseCommand = "az network dns record-set mx create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set mx delete".
        /// Delete an MX record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public dynamic NetworkDnsRecordSetMxDelete(NetworkDnsRecordSetMxDeleteSettings settings) {
            var baseCommand = "az network dns record-set mx delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set mx list".
        /// List all MX record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public dynamic NetworkDnsRecordSetMxList(NetworkDnsRecordSetMxListSettings settings) {
            var baseCommand = "az network dns record-set mx list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set mx remove-record".
        /// Remove an MX record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public dynamic NetworkDnsRecordSetMxRemoveRecord(NetworkDnsRecordSetMxRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set mx remove-record";
            AppendIfNonNull(ref baseCommand, "--exchange", settings.Exchange);
            AppendIfNonNull(ref baseCommand, "--preference", settings.Preference);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set mx show".
        /// Get the details of an MX record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public dynamic NetworkDnsRecordSetMxShow(NetworkDnsRecordSetMxShowSettings settings) {
            var baseCommand = "az network dns record-set mx show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set mx update".
        /// Update an MX record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetMx")]
        public dynamic NetworkDnsRecordSetMxUpdate(NetworkDnsRecordSetMxUpdateSettings settings) {
            var baseCommand = "az network dns record-set mx update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ns add-record".
        /// Add an NS record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public dynamic NetworkDnsRecordSetNsAddRecord(NetworkDnsRecordSetNsAddRecordSettings settings) {
            var baseCommand = "az network dns record-set ns add-record";
            AppendIfNonNull(ref baseCommand, "--nsdname", settings.Nsdname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--subscriptionid", settings.Subscriptionid);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ns create".
        /// Create an empty NS record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public dynamic NetworkDnsRecordSetNsCreate(NetworkDnsRecordSetNsCreateSettings settings) {
            var baseCommand = "az network dns record-set ns create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ns delete".
        /// Delete an NS record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public dynamic NetworkDnsRecordSetNsDelete(NetworkDnsRecordSetNsDeleteSettings settings) {
            var baseCommand = "az network dns record-set ns delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ns list".
        /// List all NS record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public dynamic NetworkDnsRecordSetNsList(NetworkDnsRecordSetNsListSettings settings) {
            var baseCommand = "az network dns record-set ns list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ns remove-record".
        /// Remove an NS record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public dynamic NetworkDnsRecordSetNsRemoveRecord(NetworkDnsRecordSetNsRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set ns remove-record";
            AppendIfNonNull(ref baseCommand, "--nsdname", settings.Nsdname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ns show".
        /// Get the details of an NS record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public dynamic NetworkDnsRecordSetNsShow(NetworkDnsRecordSetNsShowSettings settings) {
            var baseCommand = "az network dns record-set ns show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ns update".
        /// Update an NS record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetNs")]
        public dynamic NetworkDnsRecordSetNsUpdate(NetworkDnsRecordSetNsUpdateSettings settings) {
            var baseCommand = "az network dns record-set ns update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ptr add-record".
        /// Add a PTR record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public dynamic NetworkDnsRecordSetPtrAddRecord(NetworkDnsRecordSetPtrAddRecordSettings settings) {
            var baseCommand = "az network dns record-set ptr add-record";
            AppendIfNonNull(ref baseCommand, "--ptrdname", settings.Ptrdname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ptr create".
        /// Create an empty PTR record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public dynamic NetworkDnsRecordSetPtrCreate(NetworkDnsRecordSetPtrCreateSettings settings) {
            var baseCommand = "az network dns record-set ptr create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ptr delete".
        /// Delete a PTR record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public dynamic NetworkDnsRecordSetPtrDelete(NetworkDnsRecordSetPtrDeleteSettings settings) {
            var baseCommand = "az network dns record-set ptr delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ptr list".
        /// List all PTR record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public dynamic NetworkDnsRecordSetPtrList(NetworkDnsRecordSetPtrListSettings settings) {
            var baseCommand = "az network dns record-set ptr list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ptr remove-record".
        /// Remove a PTR record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public dynamic NetworkDnsRecordSetPtrRemoveRecord(NetworkDnsRecordSetPtrRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set ptr remove-record";
            AppendIfNonNull(ref baseCommand, "--ptrdname", settings.Ptrdname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ptr show".
        /// Get the details of a PTR record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public dynamic NetworkDnsRecordSetPtrShow(NetworkDnsRecordSetPtrShowSettings settings) {
            var baseCommand = "az network dns record-set ptr show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set ptr update".
        /// Update a PTR record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetPtr")]
        public dynamic NetworkDnsRecordSetPtrUpdate(NetworkDnsRecordSetPtrUpdateSettings settings) {
            var baseCommand = "az network dns record-set ptr update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set soa show".
        /// Get the details of an SOA record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSoa")]
        public dynamic NetworkDnsRecordSetSoaShow(NetworkDnsRecordSetSoaShowSettings settings) {
            var baseCommand = "az network dns record-set soa show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set soa update".
        /// Update properties of an SOA record.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSoa")]
        public dynamic NetworkDnsRecordSetSoaUpdate(NetworkDnsRecordSetSoaUpdateSettings settings) {
            var baseCommand = "az network dns record-set soa update";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--expire-time", settings.ExpireTime);
            AppendIfNonNull(ref baseCommand, "--host", settings.Host);
            AppendIfNonNull(ref baseCommand, "--minimum-ttl", settings.MinimumTtl);
            AppendIfNonNull(ref baseCommand, "--refresh-time", settings.RefreshTime);
            AppendIfNonNull(ref baseCommand, "--retry-time", settings.RetryTime);
            AppendIfNonNull(ref baseCommand, "--serial-number", settings.SerialNumber);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set srv add-record".
        /// Add an SRV record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public dynamic NetworkDnsRecordSetSrvAddRecord(NetworkDnsRecordSetSrvAddRecordSettings settings) {
            var baseCommand = "az network dns record-set srv add-record";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--weight", settings.Weight);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set srv create".
        /// Create an empty SRV record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public dynamic NetworkDnsRecordSetSrvCreate(NetworkDnsRecordSetSrvCreateSettings settings) {
            var baseCommand = "az network dns record-set srv create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set srv delete".
        /// Delete an SRV record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public dynamic NetworkDnsRecordSetSrvDelete(NetworkDnsRecordSetSrvDeleteSettings settings) {
            var baseCommand = "az network dns record-set srv delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set srv list".
        /// List all SRV record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public dynamic NetworkDnsRecordSetSrvList(NetworkDnsRecordSetSrvListSettings settings) {
            var baseCommand = "az network dns record-set srv list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set srv remove-record".
        /// Remove an SRV record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public dynamic NetworkDnsRecordSetSrvRemoveRecord(NetworkDnsRecordSetSrvRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set srv remove-record";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--weight", settings.Weight);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set srv show".
        /// Get the details of an SRV record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public dynamic NetworkDnsRecordSetSrvShow(NetworkDnsRecordSetSrvShowSettings settings) {
            var baseCommand = "az network dns record-set srv show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set srv update".
        /// Update an SRV record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetSrv")]
        public dynamic NetworkDnsRecordSetSrvUpdate(NetworkDnsRecordSetSrvUpdateSettings settings) {
            var baseCommand = "az network dns record-set srv update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set txt add-record".
        /// Add a TXT record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public dynamic NetworkDnsRecordSetTxtAddRecord(NetworkDnsRecordSetTxtAddRecordSettings settings) {
            var baseCommand = "az network dns record-set txt add-record";
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set txt create".
        /// Create an empty TXT record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public dynamic NetworkDnsRecordSetTxtCreate(NetworkDnsRecordSetTxtCreateSettings settings) {
            var baseCommand = "az network dns record-set txt create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set txt delete".
        /// Delete a TXT record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public dynamic NetworkDnsRecordSetTxtDelete(NetworkDnsRecordSetTxtDeleteSettings settings) {
            var baseCommand = "az network dns record-set txt delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set txt list".
        /// List all TXT record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public dynamic NetworkDnsRecordSetTxtList(NetworkDnsRecordSetTxtListSettings settings) {
            var baseCommand = "az network dns record-set txt list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set txt remove-record".
        /// Remove a TXT record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public dynamic NetworkDnsRecordSetTxtRemoveRecord(NetworkDnsRecordSetTxtRemoveRecordSettings settings) {
            var baseCommand = "az network dns record-set txt remove-record";
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set txt show".
        /// Get the details of a TXT record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public dynamic NetworkDnsRecordSetTxtShow(NetworkDnsRecordSetTxtShowSettings settings) {
            var baseCommand = "az network dns record-set txt show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns record-set txt update".
        /// Update a TXT record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsRecordSetTxt")]
        public dynamic NetworkDnsRecordSetTxtUpdate(NetworkDnsRecordSetTxtUpdateSettings settings) {
            var baseCommand = "az network dns record-set txt update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--target-resource", settings.TargetResource);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns zone create".
        /// Create a DNS zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public dynamic NetworkDnsZoneCreate(NetworkDnsZoneCreateSettings settings) {
            var baseCommand = "az network dns zone create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--parent-name", settings.ParentName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-type", settings.ZoneType);
            AppendIfNonNull(ref baseCommand, "--registration-vnets", settings.RegistrationVnets);
            AppendIfNonNull(ref baseCommand, "--resolution-vnets", settings.ResolutionVnets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns zone delete".
        /// Delete a DNS zone and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public dynamic NetworkDnsZoneDelete(NetworkDnsZoneDeleteSettings settings) {
            var baseCommand = "az network dns zone delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns zone export".
        /// Export a DNS zone as a DNS zone file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public dynamic NetworkDnsZoneExport(NetworkDnsZoneExportSettings settings) {
            var baseCommand = "az network dns zone export";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--file-name", settings.FileName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns zone import".
        /// Create a DNS zone using a DNS zone file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public dynamic NetworkDnsZoneImport(NetworkDnsZoneImportSettings settings) {
            var baseCommand = "az network dns zone import";
            AppendIfNonNull(ref baseCommand, "--file-name", settings.FileName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns zone list".
        /// List DNS zones.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public dynamic NetworkDnsZoneList(NetworkDnsZoneListSettings settings) {
            var baseCommand = "az network dns zone list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns zone show".
        /// Get a DNS zone parameters. Does not show DNS records within the zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public dynamic NetworkDnsZoneShow(NetworkDnsZoneShowSettings settings) {
            var baseCommand = "az network dns zone show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network dns zone update".
        /// Update a DNS zone properties. Does not modify DNS records within the zone.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkDnsZone")]
        public dynamic NetworkDnsZoneUpdate(NetworkDnsZoneUpdateSettings settings) {
            var baseCommand = "az network dns zone update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-type", settings.ZoneType);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--registration-vnets", settings.RegistrationVnets);
            AppendIfNonNull(ref baseCommand, "--resolution-vnets", settings.ResolutionVnets);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route create".
        /// Create an ExpressRoute circuit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public dynamic NetworkExpressRouteCreate(NetworkExpressRouteCreateSettings settings) {
            var baseCommand = "az network express-route create";
            AppendIfNonNull(ref baseCommand, "--bandwidth", settings.Bandwidth);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--peering-location", settings.PeeringLocation);
            AppendIfNonNull(ref baseCommand, "--provider", settings.Provider);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allow-classic-operations", settings.AllowClassicOperations);
            AppendIfNonNull(ref baseCommand, "--allow-global-reach", settings.AllowGlobalReach);
            AppendIfNonNull(ref baseCommand, "--express-route-port", settings.ExpressRoutePort);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-family", settings.SkuFamily);
            AppendIfNonNull(ref baseCommand, "--sku-tier", settings.SkuTier);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route delete".
        /// Delete an ExpressRoute circuit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public dynamic NetworkExpressRouteDelete(NetworkExpressRouteDeleteSettings settings) {
            var baseCommand = "az network express-route delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route get-stats".
        /// Get the statistics of an ExpressRoute circuit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public dynamic NetworkExpressRouteGetStats(NetworkExpressRouteGetStatsSettings settings) {
            var baseCommand = "az network express-route get-stats";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route list".
        /// List all ExpressRoute circuits for the current subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public dynamic NetworkExpressRouteList(NetworkExpressRouteListSettings settings) {
            var baseCommand = "az network express-route list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route list-arp-tables".
        /// Show the current Address Resolution Protocol (ARP) table of an ExpressRoute circuit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public dynamic NetworkExpressRouteListArpTables(NetworkExpressRouteListArpTablesSettings settings) {
            var baseCommand = "az network express-route list-arp-tables";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route list-route-tables".
        /// Show the current routing table of an ExpressRoute circuit peering.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public dynamic NetworkExpressRouteListRouteTables(NetworkExpressRouteListRouteTablesSettings settings) {
            var baseCommand = "az network express-route list-route-tables";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route list-service-providers".
        /// List available ExpressRoute service providers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public dynamic NetworkExpressRouteListServiceProviders(NetworkExpressRouteListServiceProvidersSettings settings) {
            var baseCommand = "az network express-route list-service-providers";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route show".
        /// Get the details of an ExpressRoute circuit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public dynamic NetworkExpressRouteShow(NetworkExpressRouteShowSettings settings) {
            var baseCommand = "az network express-route show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route update".
        /// Update settings of an ExpressRoute circuit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public dynamic NetworkExpressRouteUpdate(NetworkExpressRouteUpdateSettings settings) {
            var baseCommand = "az network express-route update";
            AppendIfNonNull(ref baseCommand, "--allow-classic-operations", settings.AllowClassicOperations);
            AppendIfNonNull(ref baseCommand, "--allow-global-reach", settings.AllowGlobalReach);
            AppendIfNonNull(ref baseCommand, "--bandwidth", settings.Bandwidth);
            AppendIfNonNull(ref baseCommand, "--express-route-port", settings.ExpressRoutePort);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--peering-location", settings.PeeringLocation);
            AppendIfNonNull(ref baseCommand, "--provider", settings.Provider);
            AppendIfNonNull(ref baseCommand, "--sku-family", settings.SkuFamily);
            AppendIfNonNull(ref baseCommand, "--sku-tier", settings.SkuTier);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route wait".
        /// Place the CLI in a waiting state until a condition of the ExpressRoute is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoute")]
        public dynamic NetworkExpressRouteWait(NetworkExpressRouteWaitSettings settings) {
            var baseCommand = "az network express-route wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route auth create".
        /// Create a new link authorization for an ExpressRoute circuit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteAuth")]
        public dynamic NetworkExpressRouteAuthCreate(NetworkExpressRouteAuthCreateSettings settings) {
            var baseCommand = "az network express-route auth create";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route auth delete".
        /// Delete a link authorization of an ExpressRoute circuit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteAuth")]
        public dynamic NetworkExpressRouteAuthDelete(NetworkExpressRouteAuthDeleteSettings settings) {
            var baseCommand = "az network express-route auth delete";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route auth list".
        /// List link authorizations of an ExpressRoute circuit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteAuth")]
        public dynamic NetworkExpressRouteAuthList(NetworkExpressRouteAuthListSettings settings) {
            var baseCommand = "az network express-route auth list";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route auth show".
        /// Get the details of a link authorization of an ExpressRoute circuit.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteAuth")]
        public dynamic NetworkExpressRouteAuthShow(NetworkExpressRouteAuthShowSettings settings) {
            var baseCommand = "az network express-route auth show";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route gateway create".
        /// Create an ExpressRoute gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGateway")]
        public dynamic NetworkExpressRouteGatewayCreate(NetworkExpressRouteGatewayCreateSettings settings) {
            var baseCommand = "az network express-route gateway create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--virtual-hub", settings.VirtualHub);
            AppendIfNonNull(ref baseCommand, "--max-val", settings.MaxVal);
            AppendIfNonNull(ref baseCommand, "--min-val", settings.MinVal);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route gateway delete".
        /// Delete an ExpressRoute gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGateway")]
        public dynamic NetworkExpressRouteGatewayDelete(NetworkExpressRouteGatewayDeleteSettings settings) {
            var baseCommand = "az network express-route gateway delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route gateway list".
        /// List ExpressRoute gateways.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGateway")]
        public dynamic NetworkExpressRouteGatewayList(NetworkExpressRouteGatewayListSettings settings) {
            var baseCommand = "az network express-route gateway list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route gateway show".
        /// Get the details of an ExpressRoute gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGateway")]
        public dynamic NetworkExpressRouteGatewayShow(NetworkExpressRouteGatewayShowSettings settings) {
            var baseCommand = "az network express-route gateway show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route gateway update".
        /// Update settings of an ExpressRoute gateway.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGateway")]
        public dynamic NetworkExpressRouteGatewayUpdate(NetworkExpressRouteGatewayUpdateSettings settings) {
            var baseCommand = "az network express-route gateway update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--max-val", settings.MaxVal);
            AppendIfNonNull(ref baseCommand, "--min-val", settings.MinVal);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route gateway connection create".
        /// Create an ExpressRoute gateway connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGatewayConnection")]
        public dynamic NetworkExpressRouteGatewayConnectionCreate(NetworkExpressRouteGatewayConnectionCreateSettings settings) {
            var baseCommand = "az network express-route gateway connection create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--authorization-key", settings.AuthorizationKey);
            AppendIfNonNull(ref baseCommand, "--internet-security", settings.InternetSecurity);
            AppendIfNonNull(ref baseCommand, "--routing-weight", settings.RoutingWeight);
            AppendIfNonNull(ref baseCommand, "--peering", settings.Peering);
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route gateway connection delete".
        /// Delete an ExpressRoute gateway connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGatewayConnection")]
        public dynamic NetworkExpressRouteGatewayConnectionDelete(NetworkExpressRouteGatewayConnectionDeleteSettings settings) {
            var baseCommand = "az network express-route gateway connection delete";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route gateway connection list".
        /// List ExpressRoute gateway connections.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGatewayConnection")]
        public dynamic NetworkExpressRouteGatewayConnectionList(NetworkExpressRouteGatewayConnectionListSettings settings) {
            var baseCommand = "az network express-route gateway connection list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route gateway connection show".
        /// Get the details of an ExpressRoute gateway connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGatewayConnection")]
        public dynamic NetworkExpressRouteGatewayConnectionShow(NetworkExpressRouteGatewayConnectionShowSettings settings) {
            var baseCommand = "az network express-route gateway connection show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route gateway connection update".
        /// Update an ExpressRoute gateway connection.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRouteGatewayConnection")]
        public dynamic NetworkExpressRouteGatewayConnectionUpdate(NetworkExpressRouteGatewayConnectionUpdateSettings settings) {
            var baseCommand = "az network express-route gateway connection update";
            AppendIfNonNull(ref baseCommand, "--authorization-key", settings.AuthorizationKey);
            AppendIfNonNull(ref baseCommand, "--internet-security", settings.InternetSecurity);
            AppendIfNonNull(ref baseCommand, "--routing-weight", settings.RoutingWeight);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--peering", settings.Peering);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route peering create".
        /// Create peering settings for an ExpressRoute circuit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeering")]
        public dynamic NetworkExpressRoutePeeringCreate(NetworkExpressRoutePeeringCreateSettings settings) {
            var baseCommand = "az network express-route peering create";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--peer-asn", settings.PeerAsn);
            AppendIfNonNull(ref baseCommand, "--peering-type", settings.PeeringType);
            AppendIfNonNull(ref baseCommand, "--primary-peer-subnet", settings.PrimaryPeerSubnet);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--secondary-peer-subnet", settings.SecondaryPeerSubnet);
            AppendIfNonNull(ref baseCommand, "--vlan-id", settings.VlanId);
            AppendIfNonNull(ref baseCommand, "--shared-key", settings.SharedKey);
            AppendIfNonNull(ref baseCommand, "--advertised-public-prefixes", settings.AdvertisedPublicPrefixes);
            AppendIfNonNull(ref baseCommand, "--customer-asn", settings.CustomerAsn);
            AppendIfNonNull(ref baseCommand, "--legacy-mode", settings.LegacyMode);
            AppendIfNonNull(ref baseCommand, "--route-filter", settings.RouteFilter);
            AppendIfNonNull(ref baseCommand, "--routing-registry-name", settings.RoutingRegistryName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route peering delete".
        /// Delete peering settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeering")]
        public dynamic NetworkExpressRoutePeeringDelete(NetworkExpressRoutePeeringDeleteSettings settings) {
            var baseCommand = "az network express-route peering delete";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route peering list".
        /// List peering settings of an ExpressRoute circuit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeering")]
        public dynamic NetworkExpressRoutePeeringList(NetworkExpressRoutePeeringListSettings settings) {
            var baseCommand = "az network express-route peering list";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route peering show".
        /// Get the details of an express route peering.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeering")]
        public dynamic NetworkExpressRoutePeeringShow(NetworkExpressRoutePeeringShowSettings settings) {
            var baseCommand = "az network express-route peering show";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route peering update".
        /// Update peering settings of an ExpressRoute circuit.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeering")]
        public dynamic NetworkExpressRoutePeeringUpdate(NetworkExpressRoutePeeringUpdateSettings settings) {
            var baseCommand = "az network express-route peering update";
            AppendIfNonNull(ref baseCommand, "--peer-asn", settings.PeerAsn);
            AppendIfNonNull(ref baseCommand, "--primary-peer-subnet", settings.PrimaryPeerSubnet);
            AppendIfNonNull(ref baseCommand, "--secondary-peer-subnet", settings.SecondaryPeerSubnet);
            AppendIfNonNull(ref baseCommand, "--shared-key", settings.SharedKey);
            AppendIfNonNull(ref baseCommand, "--vlan-id", settings.VlanId);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--advertised-public-prefixes", settings.AdvertisedPublicPrefixes);
            AppendIfNonNull(ref baseCommand, "--customer-asn", settings.CustomerAsn);
            AppendIfNonNull(ref baseCommand, "--ip-version", settings.IpVersion);
            AppendIfNonNull(ref baseCommand, "--legacy-mode", settings.LegacyMode);
            AppendIfNonNull(ref baseCommand, "--route-filter", settings.RouteFilter);
            AppendIfNonNull(ref baseCommand, "--routing-registry-name", settings.RoutingRegistryName);
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route peering connection create".
        /// Create connections between two ExpressRoute circuits.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeeringConnection")]
        public dynamic NetworkExpressRoutePeeringConnectionCreate(NetworkExpressRoutePeeringConnectionCreateSettings settings) {
            var baseCommand = "az network express-route peering connection create";
            AppendIfNonNull(ref baseCommand, "--address-prefix", settings.AddressPrefix);
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--peer-circuit", settings.PeerCircuit);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--authorization-key", settings.AuthorizationKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route peering connection delete".
        /// Delete an ExpressRoute circuit connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeeringConnection")]
        public dynamic NetworkExpressRoutePeeringConnectionDelete(NetworkExpressRoutePeeringConnectionDeleteSettings settings) {
            var baseCommand = "az network express-route peering connection delete";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route peering connection show".
        /// Get the details of an ExpressRoute circuit connection.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeeringConnection")]
        public dynamic NetworkExpressRoutePeeringConnectionShow(NetworkExpressRoutePeeringConnectionShowSettings settings) {
            var baseCommand = "az network express-route peering connection show";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route peering peer-connection list".
        /// Gets all global reach peer connections associated with a private peering in an express route circuit.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeeringPeerConnection")]
        public dynamic NetworkExpressRoutePeeringPeerConnectionList(NetworkExpressRoutePeeringPeerConnectionListSettings settings) {
            var baseCommand = "az network express-route peering peer-connection list";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route peering peer-connection show".
        /// Gets the specified Peer Express Route Circuit Connection from the specified express route circuit.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePeeringPeerConnection")]
        public dynamic NetworkExpressRoutePeeringPeerConnectionShow(NetworkExpressRoutePeeringPeerConnectionShowSettings settings) {
            var baseCommand = "az network express-route peering peer-connection show";
            AppendIfNonNull(ref baseCommand, "--circuit-name", settings.CircuitName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--peering-name", settings.PeeringName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port create".
        /// Create an ExpressRoute port.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePort")]
        public dynamic NetworkExpressRoutePortCreate(NetworkExpressRoutePortCreateSettings settings) {
            var baseCommand = "az network express-route port create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--bandwidth", settings.Bandwidth);
            AppendIfNonNull(ref baseCommand, "--encapsulation", settings.Encapsulation);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--peering-location", settings.PeeringLocation);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port delete".
        /// Delete an ExpressRoute port.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePort")]
        public dynamic NetworkExpressRoutePortDelete(NetworkExpressRoutePortDeleteSettings settings) {
            var baseCommand = "az network express-route port delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port list".
        /// List ExpressRoute ports.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePort")]
        public dynamic NetworkExpressRoutePortList(NetworkExpressRoutePortListSettings settings) {
            var baseCommand = "az network express-route port list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port show".
        /// Get the details of an ExpressRoute port.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePort")]
        public dynamic NetworkExpressRoutePortShow(NetworkExpressRoutePortShowSettings settings) {
            var baseCommand = "az network express-route port show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port update".
        /// Update settings of an ExpressRoute port.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePort")]
        public dynamic NetworkExpressRoutePortUpdate(NetworkExpressRoutePortUpdateSettings settings) {
            var baseCommand = "az network express-route port update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port identity assign".
        /// Assign a managed service identity to an ExpressRoute Port.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortIdentity")]
        public dynamic NetworkExpressRoutePortIdentityAssign(NetworkExpressRoutePortIdentityAssignSettings settings) {
            var baseCommand = "az network express-route port identity assign";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--identity", settings.Identity);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port identity remove".
        /// Remove the managed service identity of an ExpressRoute Port.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortIdentity")]
        public dynamic NetworkExpressRoutePortIdentityRemove(NetworkExpressRoutePortIdentityRemoveSettings settings) {
            var baseCommand = "az network express-route port identity remove";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port identity show".
        /// Show the managed service identity of an ExpressRoute Port.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortIdentity")]
        public dynamic NetworkExpressRoutePortIdentityShow(NetworkExpressRoutePortIdentityShowSettings settings) {
            var baseCommand = "az network express-route port identity show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port link list".
        /// List ExpressRoute links.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortLink")]
        public dynamic NetworkExpressRoutePortLinkList(NetworkExpressRoutePortLinkListSettings settings) {
            var baseCommand = "az network express-route port link list";
            AppendIfNonNull(ref baseCommand, "--port-name", settings.PortName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port link show".
        /// Get the details of an ExpressRoute link.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortLink")]
        public dynamic NetworkExpressRoutePortLinkShow(NetworkExpressRoutePortLinkShowSettings settings) {
            var baseCommand = "az network express-route port link show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--port-name", settings.PortName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port link update".
        /// Manage MACsec configuration of an ExpressRoute Link.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortLink")]
        public dynamic NetworkExpressRoutePortLinkUpdate(NetworkExpressRoutePortLinkUpdateSettings settings) {
            var baseCommand = "az network express-route port link update";
            AppendIfNonNull(ref baseCommand, "--admin-state", settings.AdminState);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--macsec-cak-secret-identifier", settings.MacsecCakSecretIdentifier);
            AppendIfNonNull(ref baseCommand, "--macsec-cipher", settings.MacsecCipher);
            AppendIfNonNull(ref baseCommand, "--macsec-ckn-secret-identifier", settings.MacsecCknSecretIdentifier);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--port-name", settings.PortName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port location list".
        /// List ExpressRoute port locations.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortLocation")]
        public dynamic NetworkExpressRoutePortLocationList(NetworkExpressRoutePortLocationListSettings settings) {
            var baseCommand = "az network express-route port location list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network express-route port location show".
        /// Get the details of an ExpressRoute port location.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkExpressRoutePortLocation")]
        public dynamic NetworkExpressRoutePortLocationShow(NetworkExpressRoutePortLocationShowSettings settings) {
            var baseCommand = "az network express-route port location show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb create".
        /// Create a load balancer.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLb")]
        public dynamic NetworkLbCreate(NetworkLbCreateSettings settings) {
            var baseCommand = "az network lb create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--backend-pool-name", settings.BackendPoolName);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-zone", settings.FrontendIpZone);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--private-ip-address-version", settings.PrivateIpAddressVersion);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--validate", settings.Validate);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address-allocation", settings.PublicIpAddressAllocation);
            AppendIfNonNull(ref baseCommand, "--public-ip-dns-name", settings.PublicIpDnsName);
            AppendIfNonNull(ref baseCommand, "--public-ip-zone", settings.PublicIpZone);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--subnet-address-prefix", settings.SubnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-address-prefix", settings.VnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb delete".
        /// Delete a load balancer.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLb")]
        public dynamic NetworkLbDelete(NetworkLbDeleteSettings settings) {
            var baseCommand = "az network lb delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb list".
        /// List load balancers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLb")]
        public dynamic NetworkLbList(NetworkLbListSettings settings) {
            var baseCommand = "az network lb list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb show".
        /// Get the details of a load balancer.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLb")]
        public dynamic NetworkLbShow(NetworkLbShowSettings settings) {
            var baseCommand = "az network lb show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb update".
        /// Update a load balancer.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLb")]
        public dynamic NetworkLbUpdate(NetworkLbUpdateSettings settings) {
            var baseCommand = "az network lb update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb address-pool create".
        /// Create an address pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbAddressPool")]
        public dynamic NetworkLbAddressPoolCreate(NetworkLbAddressPoolCreateSettings settings) {
            var baseCommand = "az network lb address-pool create";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb address-pool delete".
        /// Delete an address pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbAddressPool")]
        public dynamic NetworkLbAddressPoolDelete(NetworkLbAddressPoolDeleteSettings settings) {
            var baseCommand = "az network lb address-pool delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb address-pool list".
        /// List address pools.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbAddressPool")]
        public dynamic NetworkLbAddressPoolList(NetworkLbAddressPoolListSettings settings) {
            var baseCommand = "az network lb address-pool list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb address-pool show".
        /// Get the details of an address pool.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbAddressPool")]
        public dynamic NetworkLbAddressPoolShow(NetworkLbAddressPoolShowSettings settings) {
            var baseCommand = "az network lb address-pool show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb frontend-ip create".
        /// Create a frontend IP address.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbFrontendIp")]
        public dynamic NetworkLbFrontendIpCreate(NetworkLbFrontendIpCreateSettings settings) {
            var baseCommand = "az network lb frontend-ip create";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--private-ip-address-version", settings.PrivateIpAddressVersion);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-prefix", settings.PublicIpPrefix);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb frontend-ip delete".
        /// Delete a frontend IP address.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbFrontendIp")]
        public dynamic NetworkLbFrontendIpDelete(NetworkLbFrontendIpDeleteSettings settings) {
            var baseCommand = "az network lb frontend-ip delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb frontend-ip list".
        /// List frontend IP addresses.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbFrontendIp")]
        public dynamic NetworkLbFrontendIpList(NetworkLbFrontendIpListSettings settings) {
            var baseCommand = "az network lb frontend-ip list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb frontend-ip show".
        /// Get the details of a frontend IP address.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbFrontendIp")]
        public dynamic NetworkLbFrontendIpShow(NetworkLbFrontendIpShowSettings settings) {
            var baseCommand = "az network lb frontend-ip show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb frontend-ip update".
        /// Update a frontend IP address.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbFrontendIp")]
        public dynamic NetworkLbFrontendIpUpdate(NetworkLbFrontendIpUpdateSettings settings) {
            var baseCommand = "az network lb frontend-ip update";
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-prefix", settings.PublicIpPrefix);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb inbound-nat-pool create".
        /// Create an inbound NAT address pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatPool")]
        public dynamic NetworkLbInboundNatPoolCreate(NetworkLbInboundNatPoolCreateSettings settings) {
            var baseCommand = "az network lb inbound-nat-pool create";
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--frontend-port-range-end", settings.FrontendPortRangeEnd);
            AppendIfNonNull(ref baseCommand, "--frontend-port-range-start", settings.FrontendPortRangeStart);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--floating-ip", settings.FloatingIp);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb inbound-nat-pool delete".
        /// Delete an inbound NAT address pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatPool")]
        public dynamic NetworkLbInboundNatPoolDelete(NetworkLbInboundNatPoolDeleteSettings settings) {
            var baseCommand = "az network lb inbound-nat-pool delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb inbound-nat-pool list".
        /// List inbound NAT address pools.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatPool")]
        public dynamic NetworkLbInboundNatPoolList(NetworkLbInboundNatPoolListSettings settings) {
            var baseCommand = "az network lb inbound-nat-pool list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb inbound-nat-pool show".
        /// Get the details of an inbound NAT address pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatPool")]
        public dynamic NetworkLbInboundNatPoolShow(NetworkLbInboundNatPoolShowSettings settings) {
            var baseCommand = "az network lb inbound-nat-pool show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb inbound-nat-pool update".
        /// Update an inbound NAT address pool.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatPool")]
        public dynamic NetworkLbInboundNatPoolUpdate(NetworkLbInboundNatPoolUpdateSettings settings) {
            var baseCommand = "az network lb inbound-nat-pool update";
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--floating-ip", settings.FloatingIp);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--frontend-port-range-end", settings.FrontendPortRangeEnd);
            AppendIfNonNull(ref baseCommand, "--frontend-port-range-start", settings.FrontendPortRangeStart);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb inbound-nat-rule create".
        /// Create an inbound NAT rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatRule")]
        public dynamic NetworkLbInboundNatRuleCreate(NetworkLbInboundNatRuleCreateSettings settings) {
            var baseCommand = "az network lb inbound-nat-rule create";
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--floating-ip", settings.FloatingIp);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb inbound-nat-rule delete".
        /// Delete an inbound NAT rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatRule")]
        public dynamic NetworkLbInboundNatRuleDelete(NetworkLbInboundNatRuleDeleteSettings settings) {
            var baseCommand = "az network lb inbound-nat-rule delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb inbound-nat-rule list".
        /// List inbound NAT rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatRule")]
        public dynamic NetworkLbInboundNatRuleList(NetworkLbInboundNatRuleListSettings settings) {
            var baseCommand = "az network lb inbound-nat-rule list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb inbound-nat-rule show".
        /// Get the details of an inbound NAT rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatRule")]
        public dynamic NetworkLbInboundNatRuleShow(NetworkLbInboundNatRuleShowSettings settings) {
            var baseCommand = "az network lb inbound-nat-rule show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb inbound-nat-rule update".
        /// Update an inbound NAT rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbInboundNatRule")]
        public dynamic NetworkLbInboundNatRuleUpdate(NetworkLbInboundNatRuleUpdateSettings settings) {
            var baseCommand = "az network lb inbound-nat-rule update";
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--floating-ip", settings.FloatingIp);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb outbound-rule create".
        /// Create an outbound-rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbOutboundRule")]
        public dynamic NetworkLbOutboundRuleCreate(NetworkLbOutboundRuleCreateSettings settings) {
            var baseCommand = "az network lb outbound-rule create";
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-configs", settings.FrontendIpConfigs);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--outbound-ports", settings.OutboundPorts);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb outbound-rule delete".
        /// Delete an outbound-rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbOutboundRule")]
        public dynamic NetworkLbOutboundRuleDelete(NetworkLbOutboundRuleDeleteSettings settings) {
            var baseCommand = "az network lb outbound-rule delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb outbound-rule list".
        /// List outbound rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbOutboundRule")]
        public dynamic NetworkLbOutboundRuleList(NetworkLbOutboundRuleListSettings settings) {
            var baseCommand = "az network lb outbound-rule list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb outbound-rule show".
        /// Get the details of an outbound rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbOutboundRule")]
        public dynamic NetworkLbOutboundRuleShow(NetworkLbOutboundRuleShowSettings settings) {
            var baseCommand = "az network lb outbound-rule show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb outbound-rule update".
        /// Update an outbound-rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbOutboundRule")]
        public dynamic NetworkLbOutboundRuleUpdate(NetworkLbOutboundRuleUpdateSettings settings) {
            var baseCommand = "az network lb outbound-rule update";
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-configs", settings.FrontendIpConfigs);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--outbound-ports", settings.OutboundPorts);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb probe create".
        /// Create a probe.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbProbe")]
        public dynamic NetworkLbProbeCreate(NetworkLbProbeCreateSettings settings) {
            var baseCommand = "az network lb probe create";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--threshold", settings.Threshold);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb probe delete".
        /// Delete a probe.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbProbe")]
        public dynamic NetworkLbProbeDelete(NetworkLbProbeDeleteSettings settings) {
            var baseCommand = "az network lb probe delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb probe list".
        /// List probes.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbProbe")]
        public dynamic NetworkLbProbeList(NetworkLbProbeListSettings settings) {
            var baseCommand = "az network lb probe list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb probe show".
        /// Get the details of a probe.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbProbe")]
        public dynamic NetworkLbProbeShow(NetworkLbProbeShowSettings settings) {
            var baseCommand = "az network lb probe show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb probe update".
        /// Update a probe.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbProbe")]
        public dynamic NetworkLbProbeUpdate(NetworkLbProbeUpdateSettings settings) {
            var baseCommand = "az network lb probe update";
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--threshold", settings.Threshold);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb rule create".
        /// Create a load balancing rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbRule")]
        public dynamic NetworkLbRuleCreate(NetworkLbRuleCreateSettings settings) {
            var baseCommand = "az network lb rule create";
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--backend-pool-name", settings.BackendPoolName);
            AppendIfNonNull(ref baseCommand, "--disable-outbound-snat", settings.DisableOutboundSnat);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--floating-ip", settings.FloatingIp);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--load-distribution", settings.LoadDistribution);
            AppendIfNonNull(ref baseCommand, "--probe-name", settings.ProbeName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb rule delete".
        /// Delete a load balancing rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbRule")]
        public dynamic NetworkLbRuleDelete(NetworkLbRuleDeleteSettings settings) {
            var baseCommand = "az network lb rule delete";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb rule list".
        /// List load balancing rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbRule")]
        public dynamic NetworkLbRuleList(NetworkLbRuleListSettings settings) {
            var baseCommand = "az network lb rule list";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb rule show".
        /// Get the details of a load balancing rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbRule")]
        public dynamic NetworkLbRuleShow(NetworkLbRuleShowSettings settings) {
            var baseCommand = "az network lb rule show";
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network lb rule update".
        /// Update a load balancing rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLbRule")]
        public dynamic NetworkLbRuleUpdate(NetworkLbRuleUpdateSettings settings) {
            var baseCommand = "az network lb rule update";
            AppendIfNonNull(ref baseCommand, "--backend-pool-name", settings.BackendPoolName);
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--disable-outbound-snat", settings.DisableOutboundSnat);
            AppendIfNonNull(ref baseCommand, "--enable-tcp-reset", settings.EnableTcpReset);
            AppendIfNonNull(ref baseCommand, "--floating-ip", settings.FloatingIp);
            AppendIfNonNull(ref baseCommand, "--frontend-ip-name", settings.FrontendIpName);
            AppendIfNonNull(ref baseCommand, "--frontend-port", settings.FrontendPort);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--load-distribution", settings.LoadDistribution);
            AppendIfNonNull(ref baseCommand, "--probe-name", settings.ProbeName);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network local-gateway create".
        /// Create a local VPN gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLocalGateway")]
        public dynamic NetworkLocalGatewayCreate(NetworkLocalGatewayCreateSettings settings) {
            var baseCommand = "az network local-gateway create";
            AppendIfNonNull(ref baseCommand, "--gateway-ip-address", settings.GatewayIpAddress);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--local-address-prefixes", settings.LocalAddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--asn", settings.Asn);
            AppendIfNonNull(ref baseCommand, "--bgp-peering-address", settings.BgpPeeringAddress);
            AppendIfNonNull(ref baseCommand, "--peer-weight", settings.PeerWeight);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network local-gateway delete".
        /// Delete a local VPN gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLocalGateway")]
        public dynamic NetworkLocalGatewayDelete(NetworkLocalGatewayDeleteSettings settings) {
            var baseCommand = "az network local-gateway delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network local-gateway list".
        /// List all local VPN gateways in a resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLocalGateway")]
        public dynamic NetworkLocalGatewayList(NetworkLocalGatewayListSettings settings) {
            var baseCommand = "az network local-gateway list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network local-gateway show".
        /// Get the details of a local VPN gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLocalGateway")]
        public dynamic NetworkLocalGatewayShow(NetworkLocalGatewayShowSettings settings) {
            var baseCommand = "az network local-gateway show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network local-gateway update".
        /// Update a local VPN gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLocalGateway")]
        public dynamic NetworkLocalGatewayUpdate(NetworkLocalGatewayUpdateSettings settings) {
            var baseCommand = "az network local-gateway update";
            AppendIfNonNull(ref baseCommand, "--gateway-ip-address", settings.GatewayIpAddress);
            AppendIfNonNull(ref baseCommand, "--local-address-prefixes", settings.LocalAddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--asn", settings.Asn);
            AppendIfNonNull(ref baseCommand, "--bgp-peering-address", settings.BgpPeeringAddress);
            AppendIfNonNull(ref baseCommand, "--peer-weight", settings.PeerWeight);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network local-gateway wait".
        /// Place the CLI in a waiting state until a condition of the local gateway is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkLocalGateway")]
        public dynamic NetworkLocalGatewayWait(NetworkLocalGatewayWaitSettings settings) {
            var baseCommand = "az network local-gateway wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nat gateway create".
        /// Create a NAT gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNatGateway")]
        public dynamic NetworkNatGatewayCreate(NetworkNatGatewayCreateSettings settings) {
            var baseCommand = "az network nat gateway create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--public-ip-addresses", settings.PublicIpAddresses);
            AppendIfNonNull(ref baseCommand, "--public-ip-prefixes", settings.PublicIpPrefixes);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nat gateway delete".
        /// Delete a NAT gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNatGateway")]
        public dynamic NetworkNatGatewayDelete(NetworkNatGatewayDeleteSettings settings) {
            var baseCommand = "az network nat gateway delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nat gateway list".
        /// List NAT gateways.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNatGateway")]
        public dynamic NetworkNatGatewayList(NetworkNatGatewayListSettings settings) {
            var baseCommand = "az network nat gateway list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nat gateway show".
        /// Show details of a NAT gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNatGateway")]
        public dynamic NetworkNatGatewayShow(NetworkNatGatewayShowSettings settings) {
            var baseCommand = "az network nat gateway show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nat gateway update".
        /// Update a NAT gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNatGateway")]
        public dynamic NetworkNatGatewayUpdate(NetworkNatGatewayUpdateSettings settings) {
            var baseCommand = "az network nat gateway update";
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--public-ip-addresses", settings.PublicIpAddresses);
            AppendIfNonNull(ref baseCommand, "--public-ip-prefixes", settings.PublicIpPrefixes);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nat gateway wait".
        /// Place the CLI in a waiting state until a condition of the NAT gateway is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNatGateway")]
        public dynamic NetworkNatGatewayWait(NetworkNatGatewayWaitSettings settings) {
            var baseCommand = "az network nat gateway wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic create".
        /// Create a network interface.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public dynamic NetworkNicCreate(NetworkNicCreateSettings settings) {
            var baseCommand = "az network nic create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--accelerated-networking", settings.AcceleratedNetworking);
            AppendIfNonNull(ref baseCommand, "--application-security-groups", settings.ApplicationSecurityGroups);
            AppendIfNonNull(ref baseCommand, "--ip-forwarding", settings.IpForwarding);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--network-security-group", settings.NetworkSecurityGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--private-ip-address-version", settings.PrivateIpAddressVersion);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--app-gateway-address-pools", settings.AppGatewayAddressPools);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--dns-servers", settings.DnsServers);
            AppendIfNonNull(ref baseCommand, "--internal-dns-name", settings.InternalDnsName);
            AppendIfNonNull(ref baseCommand, "--lb-address-pools", settings.LbAddressPools);
            AppendIfNonNull(ref baseCommand, "--lb-inbound-nat-rules", settings.LbInboundNatRules);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic delete".
        /// Delete a network interface.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public dynamic NetworkNicDelete(NetworkNicDeleteSettings settings) {
            var baseCommand = "az network nic delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic list".
        /// List network interfaces.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public dynamic NetworkNicList(NetworkNicListSettings settings) {
            var baseCommand = "az network nic list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic list-effective-nsg".
        /// List all effective network security groups applied to a network interface.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public dynamic NetworkNicListEffectiveNsg(NetworkNicListEffectiveNsgSettings settings) {
            var baseCommand = "az network nic list-effective-nsg";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic show".
        /// Get the details of a network interface.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public dynamic NetworkNicShow(NetworkNicShowSettings settings) {
            var baseCommand = "az network nic show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic show-effective-route-table".
        /// Show the effective route table applied to a network interface.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public dynamic NetworkNicShowEffectiveRouteTable(NetworkNicShowEffectiveRouteTableSettings settings) {
            var baseCommand = "az network nic show-effective-route-table";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic update".
        /// Update a network interface.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public dynamic NetworkNicUpdate(NetworkNicUpdateSettings settings) {
            var baseCommand = "az network nic update";
            AppendIfNonNull(ref baseCommand, "--accelerated-networking", settings.AcceleratedNetworking);
            AppendIfNonNull(ref baseCommand, "--ip-forwarding", settings.IpForwarding);
            AppendIfNonNull(ref baseCommand, "--network-security-group", settings.NetworkSecurityGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--dns-servers", settings.DnsServers);
            AppendIfNonNull(ref baseCommand, "--internal-dns-name", settings.InternalDnsName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic wait".
        /// Place the CLI in a waiting state until a condition of the network interface is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNic")]
        public dynamic NetworkNicWait(NetworkNicWaitSettings settings) {
            var baseCommand = "az network nic wait";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic ip-config create".
        /// Create an IP configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfig")]
        public dynamic NetworkNicIpConfigCreate(NetworkNicIpConfigCreateSettings settings) {
            var baseCommand = "az network nic ip-config create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--application-security-groups", settings.ApplicationSecurityGroups);
            AppendIfNonNull(ref baseCommand, "--make-primary", settings.MakePrimary);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--private-ip-address-version", settings.PrivateIpAddressVersion);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--app-gateway-address-pools", settings.AppGatewayAddressPools);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--lb-address-pools", settings.LbAddressPools);
            AppendIfNonNull(ref baseCommand, "--lb-inbound-nat-rules", settings.LbInboundNatRules);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic ip-config delete".
        /// Delete an IP configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfig")]
        public dynamic NetworkNicIpConfigDelete(NetworkNicIpConfigDeleteSettings settings) {
            var baseCommand = "az network nic ip-config delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic ip-config list".
        /// List the IP configurations of a NIC.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfig")]
        public dynamic NetworkNicIpConfigList(NetworkNicIpConfigListSettings settings) {
            var baseCommand = "az network nic ip-config list";
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic ip-config show".
        /// Show the details of an IP configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfig")]
        public dynamic NetworkNicIpConfigShow(NetworkNicIpConfigShowSettings settings) {
            var baseCommand = "az network nic ip-config show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic ip-config update".
        /// Update an IP configuration.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfig")]
        public dynamic NetworkNicIpConfigUpdate(NetworkNicIpConfigUpdateSettings settings) {
            var baseCommand = "az network nic ip-config update";
            AppendIfNonNull(ref baseCommand, "--application-security-groups", settings.ApplicationSecurityGroups);
            AppendIfNonNull(ref baseCommand, "--make-primary", settings.MakePrimary);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--private-ip-address-version", settings.PrivateIpAddressVersion);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--app-gateway-address-pools", settings.AppGatewayAddressPools);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--lb-address-pools", settings.LbAddressPools);
            AppendIfNonNull(ref baseCommand, "--lb-inbound-nat-rules", settings.LbInboundNatRules);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic ip-config address-pool add".
        /// Add an address pool to an IP configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfigAddressPool")]
        public dynamic NetworkNicIpConfigAddressPoolAdd(NetworkNicIpConfigAddressPoolAddSettings settings) {
            var baseCommand = "az network nic ip-config address-pool add";
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--ip-config-name", settings.IpConfigName);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic ip-config address-pool remove".
        /// Remove an address pool of an IP configuration.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfigAddressPool")]
        public dynamic NetworkNicIpConfigAddressPoolRemove(NetworkNicIpConfigAddressPoolRemoveSettings settings) {
            var baseCommand = "az network nic ip-config address-pool remove";
            AppendIfNonNull(ref baseCommand, "--address-pool", settings.AddressPool);
            AppendIfNonNull(ref baseCommand, "--ip-config-name", settings.IpConfigName);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic ip-config inbound-nat-rule add".
        /// Add an inbound NAT rule to an IP configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfigInboundNatRule")]
        public dynamic NetworkNicIpConfigInboundNatRuleAdd(NetworkNicIpConfigInboundNatRuleAddSettings settings) {
            var baseCommand = "az network nic ip-config inbound-nat-rule add";
            AppendIfNonNull(ref baseCommand, "--inbound-nat-rule", settings.InboundNatRule);
            AppendIfNonNull(ref baseCommand, "--ip-config-name", settings.IpConfigName);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nic ip-config inbound-nat-rule remove".
        /// Remove an inbound NAT rule of an IP configuration.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNicIpConfigInboundNatRule")]
        public dynamic NetworkNicIpConfigInboundNatRuleRemove(NetworkNicIpConfigInboundNatRuleRemoveSettings settings) {
            var baseCommand = "az network nic ip-config inbound-nat-rule remove";
            AppendIfNonNull(ref baseCommand, "--inbound-nat-rule", settings.InboundNatRule);
            AppendIfNonNull(ref baseCommand, "--ip-config-name", settings.IpConfigName);
            AppendIfNonNull(ref baseCommand, "--nic-name", settings.NicName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nsg create".
        /// Create a network security group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsg")]
        public dynamic NetworkNsgCreate(NetworkNsgCreateSettings settings) {
            var baseCommand = "az network nsg create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nsg delete".
        /// Delete a network security group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsg")]
        public dynamic NetworkNsgDelete(NetworkNsgDeleteSettings settings) {
            var baseCommand = "az network nsg delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nsg list".
        /// List network security groups.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsg")]
        public dynamic NetworkNsgList(NetworkNsgListSettings settings) {
            var baseCommand = "az network nsg list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nsg show".
        /// Get information about a network security group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsg")]
        public dynamic NetworkNsgShow(NetworkNsgShowSettings settings) {
            var baseCommand = "az network nsg show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nsg update".
        /// Update a network security group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsg")]
        public dynamic NetworkNsgUpdate(NetworkNsgUpdateSettings settings) {
            var baseCommand = "az network nsg update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nsg rule create".
        /// Create a network security group rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsgRule")]
        public dynamic NetworkNsgRuleCreate(NetworkNsgRuleCreateSettings settings) {
            var baseCommand = "az network nsg rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nsg-name", settings.NsgName);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--access", settings.Access);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--direction", settings.Direction);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--destination-address-prefixes", settings.DestinationAddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--destination-asgs", settings.DestinationAsgs);
            AppendIfNonNull(ref baseCommand, "--destination-port-ranges", settings.DestinationPortRanges);
            AppendIfNonNull(ref baseCommand, "--source-address-prefixes", settings.SourceAddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--source-asgs", settings.SourceAsgs);
            AppendIfNonNull(ref baseCommand, "--source-port-ranges", settings.SourcePortRanges);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nsg rule delete".
        /// Delete a network security group rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsgRule")]
        public dynamic NetworkNsgRuleDelete(NetworkNsgRuleDeleteSettings settings) {
            var baseCommand = "az network nsg rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nsg-name", settings.NsgName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nsg rule list".
        /// List all rules in a network security group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsgRule")]
        public dynamic NetworkNsgRuleList(NetworkNsgRuleListSettings settings) {
            var baseCommand = "az network nsg rule list";
            AppendIfNonNull(ref baseCommand, "--nsg-name", settings.NsgName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--include-default", settings.IncludeDefault);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nsg rule show".
        /// Get the details of a network security group rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsgRule")]
        public dynamic NetworkNsgRuleShow(NetworkNsgRuleShowSettings settings) {
            var baseCommand = "az network nsg rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nsg-name", settings.NsgName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network nsg rule update".
        /// Update a network security group rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkNsgRule")]
        public dynamic NetworkNsgRuleUpdate(NetworkNsgRuleUpdateSettings settings) {
            var baseCommand = "az network nsg rule update";
            AppendIfNonNull(ref baseCommand, "--access", settings.Access);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--direction", settings.Direction);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--destination-address-prefixes", settings.DestinationAddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--destination-asgs", settings.DestinationAsgs);
            AppendIfNonNull(ref baseCommand, "--destination-port-ranges", settings.DestinationPortRanges);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--nsg-name", settings.NsgName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--source-address-prefixes", settings.SourceAddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--source-asgs", settings.SourceAsgs);
            AppendIfNonNull(ref baseCommand, "--source-port-ranges", settings.SourcePortRanges);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns link vnet create".
        /// Create a virtual network link to the specified Private DNS zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsLinkVnet")]
        public dynamic NetworkPrivateDnsLinkVnetCreate(NetworkPrivateDnsLinkVnetCreateSettings settings) {
            var baseCommand = "az network private-dns link vnet create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--registration-enabled", settings.RegistrationEnabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--virtual-network", settings.VirtualNetwork);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns link vnet delete".
        /// Delete a virtual network link to the specified Private DNS zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsLinkVnet")]
        public dynamic NetworkPrivateDnsLinkVnetDelete(NetworkPrivateDnsLinkVnetDeleteSettings settings) {
            var baseCommand = "az network private-dns link vnet delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns link vnet list".
        /// List the virtual network links to the specified Private DNS zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsLinkVnet")]
        public dynamic NetworkPrivateDnsLinkVnetList(NetworkPrivateDnsLinkVnetListSettings settings) {
            var baseCommand = "az network private-dns link vnet list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns link vnet show".
        /// Get a virtual network link to the specified Private DNS zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsLinkVnet")]
        public dynamic NetworkPrivateDnsLinkVnetShow(NetworkPrivateDnsLinkVnetShowSettings settings) {
            var baseCommand = "az network private-dns link vnet show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns link vnet update".
        /// Update a virtual network link's properties. Does not modify virtual network within the link.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsLinkVnet")]
        public dynamic NetworkPrivateDnsLinkVnetUpdate(NetworkPrivateDnsLinkVnetUpdateSettings settings) {
            var baseCommand = "az network private-dns link vnet update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--registration-enabled", settings.RegistrationEnabled);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns link vnet wait".
        /// Place the CLI in a waiting state until a condition of the virtual network link to the specified Private DNS zone is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsLinkVnet")]
        public dynamic NetworkPrivateDnsLinkVnetWait(NetworkPrivateDnsLinkVnetWaitSettings settings) {
            var baseCommand = "az network private-dns link vnet wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set list".
        /// List all record sets within a Private DNS zone.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSet")]
        public dynamic NetworkPrivateDnsRecordSetList(NetworkPrivateDnsRecordSetListSettings settings) {
            var baseCommand = "az network private-dns record-set list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set a add-record".
        /// Add an A record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public dynamic NetworkPrivateDnsRecordSetAAddRecord(NetworkPrivateDnsRecordSetAAddRecordSettings settings) {
            var baseCommand = "az network private-dns record-set a add-record";
            AppendIfNonNull(ref baseCommand, "--ipv4-address", settings.Ipv4Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set a create".
        /// Create an empty A record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public dynamic NetworkPrivateDnsRecordSetACreate(NetworkPrivateDnsRecordSetACreateSettings settings) {
            var baseCommand = "az network private-dns record-set a create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set a delete".
        /// Delete an A record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public dynamic NetworkPrivateDnsRecordSetADelete(NetworkPrivateDnsRecordSetADeleteSettings settings) {
            var baseCommand = "az network private-dns record-set a delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set a list".
        /// List all A record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public dynamic NetworkPrivateDnsRecordSetAList(NetworkPrivateDnsRecordSetAListSettings settings) {
            var baseCommand = "az network private-dns record-set a list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set a remove-record".
        /// Remove an A record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public dynamic NetworkPrivateDnsRecordSetARemoveRecord(NetworkPrivateDnsRecordSetARemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set a remove-record";
            AppendIfNonNull(ref baseCommand, "--ipv4-address", settings.Ipv4Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set a show".
        /// Get the details of an A record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public dynamic NetworkPrivateDnsRecordSetAShow(NetworkPrivateDnsRecordSetAShowSettings settings) {
            var baseCommand = "az network private-dns record-set a show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set a update".
        /// Update an A record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetA")]
        public dynamic NetworkPrivateDnsRecordSetAUpdate(NetworkPrivateDnsRecordSetAUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set a update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa add-record".
        /// Add an AAAA record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public dynamic NetworkPrivateDnsRecordSetAaaaAddRecord(NetworkPrivateDnsRecordSetAaaaAddRecordSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa add-record";
            AppendIfNonNull(ref baseCommand, "--ipv6-address", settings.Ipv6Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa create".
        /// Create an empty AAAA record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public dynamic NetworkPrivateDnsRecordSetAaaaCreate(NetworkPrivateDnsRecordSetAaaaCreateSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa delete".
        /// Delete an AAAA record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public dynamic NetworkPrivateDnsRecordSetAaaaDelete(NetworkPrivateDnsRecordSetAaaaDeleteSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa list".
        /// List all AAAA record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public dynamic NetworkPrivateDnsRecordSetAaaaList(NetworkPrivateDnsRecordSetAaaaListSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa remove-record".
        /// Remove AAAA record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public dynamic NetworkPrivateDnsRecordSetAaaaRemoveRecord(NetworkPrivateDnsRecordSetAaaaRemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa remove-record";
            AppendIfNonNull(ref baseCommand, "--ipv6-address", settings.Ipv6Address);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa show".
        /// Get the details of an AAAA record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public dynamic NetworkPrivateDnsRecordSetAaaaShow(NetworkPrivateDnsRecordSetAaaaShowSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set aaaa update".
        /// Update an AAAA record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetAaaa")]
        public dynamic NetworkPrivateDnsRecordSetAaaaUpdate(NetworkPrivateDnsRecordSetAaaaUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set aaaa update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set cname create".
        /// Create an empty CNAME record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public dynamic NetworkPrivateDnsRecordSetCnameCreate(NetworkPrivateDnsRecordSetCnameCreateSettings settings) {
            var baseCommand = "az network private-dns record-set cname create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set cname delete".
        /// Delete a CNAME record set and its associated record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public dynamic NetworkPrivateDnsRecordSetCnameDelete(NetworkPrivateDnsRecordSetCnameDeleteSettings settings) {
            var baseCommand = "az network private-dns record-set cname delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set cname list".
        /// List the CNAME record set in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public dynamic NetworkPrivateDnsRecordSetCnameList(NetworkPrivateDnsRecordSetCnameListSettings settings) {
            var baseCommand = "az network private-dns record-set cname list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set cname remove-record".
        /// Remove a CNAME record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public dynamic NetworkPrivateDnsRecordSetCnameRemoveRecord(NetworkPrivateDnsRecordSetCnameRemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set cname remove-record";
            AppendIfNonNull(ref baseCommand, "--cname", settings.Cname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set cname set-record".
        /// Set the value of a CNAME record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public dynamic NetworkPrivateDnsRecordSetCnameSetRecord(NetworkPrivateDnsRecordSetCnameSetRecordSettings settings) {
            var baseCommand = "az network private-dns record-set cname set-record";
            AppendIfNonNull(ref baseCommand, "--cname", settings.Cname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set cname show".
        /// Get the details of a CNAME record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public dynamic NetworkPrivateDnsRecordSetCnameShow(NetworkPrivateDnsRecordSetCnameShowSettings settings) {
            var baseCommand = "az network private-dns record-set cname show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set cname update".
        /// Update a CNAME record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetCname")]
        public dynamic NetworkPrivateDnsRecordSetCnameUpdate(NetworkPrivateDnsRecordSetCnameUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set cname update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set mx add-record".
        /// Add an MX record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public dynamic NetworkPrivateDnsRecordSetMxAddRecord(NetworkPrivateDnsRecordSetMxAddRecordSettings settings) {
            var baseCommand = "az network private-dns record-set mx add-record";
            AppendIfNonNull(ref baseCommand, "--exchange", settings.Exchange);
            AppendIfNonNull(ref baseCommand, "--preference", settings.Preference);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set mx create".
        /// Create an empty MX record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public dynamic NetworkPrivateDnsRecordSetMxCreate(NetworkPrivateDnsRecordSetMxCreateSettings settings) {
            var baseCommand = "az network private-dns record-set mx create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set mx delete".
        /// Delete an MX record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public dynamic NetworkPrivateDnsRecordSetMxDelete(NetworkPrivateDnsRecordSetMxDeleteSettings settings) {
            var baseCommand = "az network private-dns record-set mx delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set mx list".
        /// List all MX record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public dynamic NetworkPrivateDnsRecordSetMxList(NetworkPrivateDnsRecordSetMxListSettings settings) {
            var baseCommand = "az network private-dns record-set mx list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set mx remove-record".
        /// Remove an MX record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public dynamic NetworkPrivateDnsRecordSetMxRemoveRecord(NetworkPrivateDnsRecordSetMxRemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set mx remove-record";
            AppendIfNonNull(ref baseCommand, "--exchange", settings.Exchange);
            AppendIfNonNull(ref baseCommand, "--preference", settings.Preference);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set mx show".
        /// Get the details of an MX record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public dynamic NetworkPrivateDnsRecordSetMxShow(NetworkPrivateDnsRecordSetMxShowSettings settings) {
            var baseCommand = "az network private-dns record-set mx show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set mx update".
        /// Update an MX record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetMx")]
        public dynamic NetworkPrivateDnsRecordSetMxUpdate(NetworkPrivateDnsRecordSetMxUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set mx update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set ptr add-record".
        /// Add a PTR record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public dynamic NetworkPrivateDnsRecordSetPtrAddRecord(NetworkPrivateDnsRecordSetPtrAddRecordSettings settings) {
            var baseCommand = "az network private-dns record-set ptr add-record";
            AppendIfNonNull(ref baseCommand, "--ptrdname", settings.Ptrdname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set ptr create".
        /// Create an empty PTR record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public dynamic NetworkPrivateDnsRecordSetPtrCreate(NetworkPrivateDnsRecordSetPtrCreateSettings settings) {
            var baseCommand = "az network private-dns record-set ptr create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set ptr delete".
        /// Delete a PTR record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public dynamic NetworkPrivateDnsRecordSetPtrDelete(NetworkPrivateDnsRecordSetPtrDeleteSettings settings) {
            var baseCommand = "az network private-dns record-set ptr delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set ptr list".
        /// List all PTR record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public dynamic NetworkPrivateDnsRecordSetPtrList(NetworkPrivateDnsRecordSetPtrListSettings settings) {
            var baseCommand = "az network private-dns record-set ptr list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set ptr remove-record".
        /// Remove a PTR record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public dynamic NetworkPrivateDnsRecordSetPtrRemoveRecord(NetworkPrivateDnsRecordSetPtrRemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set ptr remove-record";
            AppendIfNonNull(ref baseCommand, "--ptrdname", settings.Ptrdname);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set ptr show".
        /// Get the details of a PTR record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public dynamic NetworkPrivateDnsRecordSetPtrShow(NetworkPrivateDnsRecordSetPtrShowSettings settings) {
            var baseCommand = "az network private-dns record-set ptr show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set ptr update".
        /// Update a PTR record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetPtr")]
        public dynamic NetworkPrivateDnsRecordSetPtrUpdate(NetworkPrivateDnsRecordSetPtrUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set ptr update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set soa show".
        /// Get the details of an SOA record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSoa")]
        public dynamic NetworkPrivateDnsRecordSetSoaShow(NetworkPrivateDnsRecordSetSoaShowSettings settings) {
            var baseCommand = "az network private-dns record-set soa show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set soa update".
        /// Update properties of an SOA record.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSoa")]
        public dynamic NetworkPrivateDnsRecordSetSoaUpdate(NetworkPrivateDnsRecordSetSoaUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set soa update";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--expire-time", settings.ExpireTime);
            AppendIfNonNull(ref baseCommand, "--host", settings.Host);
            AppendIfNonNull(ref baseCommand, "--minimum-ttl", settings.MinimumTtl);
            AppendIfNonNull(ref baseCommand, "--refresh-time", settings.RefreshTime);
            AppendIfNonNull(ref baseCommand, "--retry-time", settings.RetryTime);
            AppendIfNonNull(ref baseCommand, "--serial-number", settings.SerialNumber);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set srv add-record".
        /// Add an SRV record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public dynamic NetworkPrivateDnsRecordSetSrvAddRecord(NetworkPrivateDnsRecordSetSrvAddRecordSettings settings) {
            var baseCommand = "az network private-dns record-set srv add-record";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--weight", settings.Weight);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set srv create".
        /// Create an empty SRV record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public dynamic NetworkPrivateDnsRecordSetSrvCreate(NetworkPrivateDnsRecordSetSrvCreateSettings settings) {
            var baseCommand = "az network private-dns record-set srv create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set srv delete".
        /// Delete an SRV record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public dynamic NetworkPrivateDnsRecordSetSrvDelete(NetworkPrivateDnsRecordSetSrvDeleteSettings settings) {
            var baseCommand = "az network private-dns record-set srv delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set srv list".
        /// List all SRV record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public dynamic NetworkPrivateDnsRecordSetSrvList(NetworkPrivateDnsRecordSetSrvListSettings settings) {
            var baseCommand = "az network private-dns record-set srv list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set srv remove-record".
        /// Remove an SRV record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public dynamic NetworkPrivateDnsRecordSetSrvRemoveRecord(NetworkPrivateDnsRecordSetSrvRemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set srv remove-record";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--weight", settings.Weight);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set srv show".
        /// Get the details of an SRV record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public dynamic NetworkPrivateDnsRecordSetSrvShow(NetworkPrivateDnsRecordSetSrvShowSettings settings) {
            var baseCommand = "az network private-dns record-set srv show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set srv update".
        /// Update an SRV record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetSrv")]
        public dynamic NetworkPrivateDnsRecordSetSrvUpdate(NetworkPrivateDnsRecordSetSrvUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set srv update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set txt add-record".
        /// Add a TXT record.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public dynamic NetworkPrivateDnsRecordSetTxtAddRecord(NetworkPrivateDnsRecordSetTxtAddRecordSettings settings) {
            var baseCommand = "az network private-dns record-set txt add-record";
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set txt create".
        /// Create an empty TXT record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public dynamic NetworkPrivateDnsRecordSetTxtCreate(NetworkPrivateDnsRecordSetTxtCreateSettings settings) {
            var baseCommand = "az network private-dns record-set txt create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set txt delete".
        /// Delete a TXT record set and all associated records.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public dynamic NetworkPrivateDnsRecordSetTxtDelete(NetworkPrivateDnsRecordSetTxtDeleteSettings settings) {
            var baseCommand = "az network private-dns record-set txt delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set txt list".
        /// List all TXT record sets in a zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public dynamic NetworkPrivateDnsRecordSetTxtList(NetworkPrivateDnsRecordSetTxtListSettings settings) {
            var baseCommand = "az network private-dns record-set txt list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set txt remove-record".
        /// Remove a TXT record from its record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public dynamic NetworkPrivateDnsRecordSetTxtRemoveRecord(NetworkPrivateDnsRecordSetTxtRemoveRecordSettings settings) {
            var baseCommand = "az network private-dns record-set txt remove-record";
            AppendIfNonNull(ref baseCommand, "--record-set-name", settings.RecordSetName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--keep-empty-record-set", settings.KeepEmptyRecordSet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set txt show".
        /// Get the details of a TXT record set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public dynamic NetworkPrivateDnsRecordSetTxtShow(NetworkPrivateDnsRecordSetTxtShowSettings settings) {
            var baseCommand = "az network private-dns record-set txt show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns record-set txt update".
        /// Update a TXT record set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsRecordSetTxt")]
        public dynamic NetworkPrivateDnsRecordSetTxtUpdate(NetworkPrivateDnsRecordSetTxtUpdateSettings settings) {
            var baseCommand = "az network private-dns record-set txt update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--zone-name", settings.ZoneName);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns zone create".
        /// Create a Private DNS zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsZone")]
        public dynamic NetworkPrivateDnsZoneCreate(NetworkPrivateDnsZoneCreateSettings settings) {
            var baseCommand = "az network private-dns zone create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns zone delete".
        /// Delete a Private DNS zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsZone")]
        public dynamic NetworkPrivateDnsZoneDelete(NetworkPrivateDnsZoneDeleteSettings settings) {
            var baseCommand = "az network private-dns zone delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns zone list".
        /// List Private DNS zones.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsZone")]
        public dynamic NetworkPrivateDnsZoneList(NetworkPrivateDnsZoneListSettings settings) {
            var baseCommand = "az network private-dns zone list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns zone show".
        /// Get a Private DNS zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsZone")]
        public dynamic NetworkPrivateDnsZoneShow(NetworkPrivateDnsZoneShowSettings settings) {
            var baseCommand = "az network private-dns zone show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns zone update".
        /// Update a Private DNS zone's properties. Does not modify Private DNS records or virtual network links within the zone.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsZone")]
        public dynamic NetworkPrivateDnsZoneUpdate(NetworkPrivateDnsZoneUpdateSettings settings) {
            var baseCommand = "az network private-dns zone update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-dns zone wait".
        /// Place the CLI in a waiting state until a condition of the Private DNS zone is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateDnsZone")]
        public dynamic NetworkPrivateDnsZoneWait(NetworkPrivateDnsZoneWaitSettings settings) {
            var baseCommand = "az network private-dns zone wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-endpoint create".
        /// Create a private endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateEndpoint")]
        public dynamic NetworkPrivateEndpointCreate(NetworkPrivateEndpointCreateSettings settings) {
            var baseCommand = "az network private-endpoint create";
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--private-connection-resource-id", settings.PrivateConnectionResourceId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--group-ids", settings.GroupIds);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--manual-request", settings.ManualRequest);
            AppendIfNonNull(ref baseCommand, "--request-message", settings.RequestMessage);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-endpoint delete".
        /// Delete a private endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateEndpoint")]
        public dynamic NetworkPrivateEndpointDelete(NetworkPrivateEndpointDeleteSettings settings) {
            var baseCommand = "az network private-endpoint delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-endpoint list".
        /// List private endpoints.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateEndpoint")]
        public dynamic NetworkPrivateEndpointList(NetworkPrivateEndpointListSettings settings) {
            var baseCommand = "az network private-endpoint list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-endpoint list-types".
        /// Returns all of the resource types that can be linked to a Private Endpoint in this subscription in this region.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateEndpoint")]
        public dynamic NetworkPrivateEndpointListTypes(NetworkPrivateEndpointListTypesSettings settings) {
            var baseCommand = "az network private-endpoint list-types";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-endpoint show".
        /// Get the details of a private endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateEndpoint")]
        public dynamic NetworkPrivateEndpointShow(NetworkPrivateEndpointShowSettings settings) {
            var baseCommand = "az network private-endpoint show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-endpoint update".
        /// Update a private endpoint.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateEndpoint")]
        public dynamic NetworkPrivateEndpointUpdate(NetworkPrivateEndpointUpdateSettings settings) {
            var baseCommand = "az network private-endpoint update";
            AppendIfNonNull(ref baseCommand, "--request-message", settings.RequestMessage);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-link-service create".
        /// Create a private link service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkService")]
        public dynamic NetworkPrivateLinkServiceCreate(NetworkPrivateLinkServiceCreateSettings settings) {
            var baseCommand = "az network private-link-service create";
            AppendIfNonNull(ref baseCommand, "--lb-frontend-ip-configs", settings.LbFrontendIpConfigs);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--auto-approval", settings.AutoApproval);
            AppendIfNonNull(ref baseCommand, "--fqdns", settings.Fqdns);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--visibility", settings.Visibility);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--private-ip-address-version", settings.PrivateIpAddressVersion);
            AppendIfNonNull(ref baseCommand, "--private-ip-allocation-method", settings.PrivateIpAllocationMethod);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-link-service delete".
        /// Delete a private link service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkService")]
        public dynamic NetworkPrivateLinkServiceDelete(NetworkPrivateLinkServiceDeleteSettings settings) {
            var baseCommand = "az network private-link-service delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-link-service list".
        /// List private link services.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkService")]
        public dynamic NetworkPrivateLinkServiceList(NetworkPrivateLinkServiceListSettings settings) {
            var baseCommand = "az network private-link-service list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-link-service show".
        /// Get the details of a private link service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkService")]
        public dynamic NetworkPrivateLinkServiceShow(NetworkPrivateLinkServiceShowSettings settings) {
            var baseCommand = "az network private-link-service show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-link-service update".
        /// Update a private link service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkService")]
        public dynamic NetworkPrivateLinkServiceUpdate(NetworkPrivateLinkServiceUpdateSettings settings) {
            var baseCommand = "az network private-link-service update";
            AppendIfNonNull(ref baseCommand, "--auto-approval", settings.AutoApproval);
            AppendIfNonNull(ref baseCommand, "--fqdns", settings.Fqdns);
            AppendIfNonNull(ref baseCommand, "--lb-frontend-ip-configs", settings.LbFrontendIpConfigs);
            AppendIfNonNull(ref baseCommand, "--lb-name", settings.LbName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--visibility", settings.Visibility);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-link-service connection delete".
        /// Delete a private link service endpoint connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkServiceConnection")]
        public dynamic NetworkPrivateLinkServiceConnectionDelete(NetworkPrivateLinkServiceConnectionDeleteSettings settings) {
            var baseCommand = "az network private-link-service connection delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network private-link-service connection update".
        /// Update a private link service endpoint connection.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPrivateLinkServiceConnection")]
        public dynamic NetworkPrivateLinkServiceConnectionUpdate(NetworkPrivateLinkServiceConnectionUpdateSettings settings) {
            var baseCommand = "az network private-link-service connection update";
            AppendIfNonNull(ref baseCommand, "--connection-status", settings.ConnectionStatus);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--action-required", settings.ActionRequired);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network profile delete".
        /// Delete a network profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkProfile")]
        public dynamic NetworkProfileDelete(NetworkProfileDeleteSettings settings) {
            var baseCommand = "az network profile delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network profile list".
        /// List network profiles.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkProfile")]
        public dynamic NetworkProfileList(NetworkProfileListSettings settings) {
            var baseCommand = "az network profile list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network profile show".
        /// Get the details of a network profile.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkProfile")]
        public dynamic NetworkProfileShow(NetworkProfileShowSettings settings) {
            var baseCommand = "az network profile show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network public-ip create".
        /// Create a public IP address.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIp")]
        public dynamic NetworkPublicIpCreate(NetworkPublicIpCreateSettings settings) {
            var baseCommand = "az network public-ip create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allocation-method", settings.AllocationMethod);
            AppendIfNonNull(ref baseCommand, "--dns-name", settings.DnsName);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--ip-tags", settings.IpTags);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--public-ip-prefix", settings.PublicIpPrefix);
            AppendIfNonNull(ref baseCommand, "--reverse-fqdn", settings.ReverseFqdn);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network public-ip delete".
        /// Delete a public IP address.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIp")]
        public dynamic NetworkPublicIpDelete(NetworkPublicIpDeleteSettings settings) {
            var baseCommand = "az network public-ip delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network public-ip list".
        /// List public IP addresses.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIp")]
        public dynamic NetworkPublicIpList(NetworkPublicIpListSettings settings) {
            var baseCommand = "az network public-ip list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network public-ip show".
        /// Get the details of a public IP address.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIp")]
        public dynamic NetworkPublicIpShow(NetworkPublicIpShowSettings settings) {
            var baseCommand = "az network public-ip show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network public-ip update".
        /// Update a public IP address.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIp")]
        public dynamic NetworkPublicIpUpdate(NetworkPublicIpUpdateSettings settings) {
            var baseCommand = "az network public-ip update";
            AppendIfNonNull(ref baseCommand, "--allocation-method", settings.AllocationMethod);
            AppendIfNonNull(ref baseCommand, "--dns-name", settings.DnsName);
            AppendIfNonNull(ref baseCommand, "--idle-timeout", settings.IdleTimeout);
            AppendIfNonNull(ref baseCommand, "--ip-tags", settings.IpTags);
            AppendIfNonNull(ref baseCommand, "--public-ip-prefix", settings.PublicIpPrefix);
            AppendIfNonNull(ref baseCommand, "--reverse-fqdn", settings.ReverseFqdn);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network public-ip prefix create".
        /// Create a public IP prefix resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIpPrefix")]
        public dynamic NetworkPublicIpPrefixCreate(NetworkPublicIpPrefixCreateSettings settings) {
            var baseCommand = "az network public-ip prefix create";
            AppendIfNonNull(ref baseCommand, "--length", settings.Length);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network public-ip prefix delete".
        /// Delete a public IP prefix resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIpPrefix")]
        public dynamic NetworkPublicIpPrefixDelete(NetworkPublicIpPrefixDeleteSettings settings) {
            var baseCommand = "az network public-ip prefix delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network public-ip prefix list".
        /// List public IP prefix resources.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIpPrefix")]
        public dynamic NetworkPublicIpPrefixList(NetworkPublicIpPrefixListSettings settings) {
            var baseCommand = "az network public-ip prefix list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network public-ip prefix show".
        /// Get the details of a public IP prefix resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIpPrefix")]
        public dynamic NetworkPublicIpPrefixShow(NetworkPublicIpPrefixShowSettings settings) {
            var baseCommand = "az network public-ip prefix show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network public-ip prefix update".
        /// Update a public IP prefix resource.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkPublicIpPrefix")]
        public dynamic NetworkPublicIpPrefixUpdate(NetworkPublicIpPrefixUpdateSettings settings) {
            var baseCommand = "az network public-ip prefix update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-filter create".
        /// Create a route filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilter")]
        public dynamic NetworkRouteFilterCreate(NetworkRouteFilterCreateSettings settings) {
            var baseCommand = "az network route-filter create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-filter delete".
        /// Delete a route filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilter")]
        public dynamic NetworkRouteFilterDelete(NetworkRouteFilterDeleteSettings settings) {
            var baseCommand = "az network route-filter delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-filter list".
        /// List route filters.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilter")]
        public dynamic NetworkRouteFilterList(NetworkRouteFilterListSettings settings) {
            var baseCommand = "az network route-filter list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-filter show".
        /// Get the details of a route filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilter")]
        public dynamic NetworkRouteFilterShow(NetworkRouteFilterShowSettings settings) {
            var baseCommand = "az network route-filter show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-filter update".
        /// Update a route filter.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilter")]
        public dynamic NetworkRouteFilterUpdate(NetworkRouteFilterUpdateSettings settings) {
            var baseCommand = "az network route-filter update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-filter rule create".
        /// Create a rule in a route filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilterRule")]
        public dynamic NetworkRouteFilterRuleCreate(NetworkRouteFilterRuleCreateSettings settings) {
            var baseCommand = "az network route-filter rule create";
            AppendIfNonNull(ref baseCommand, "--access", settings.Access);
            AppendIfNonNull(ref baseCommand, "--communities", settings.Communities);
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-filter rule delete".
        /// Delete a rule from a route filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilterRule")]
        public dynamic NetworkRouteFilterRuleDelete(NetworkRouteFilterRuleDeleteSettings settings) {
            var baseCommand = "az network route-filter rule delete";
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-filter rule list".
        /// List rules in a route filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilterRule")]
        public dynamic NetworkRouteFilterRuleList(NetworkRouteFilterRuleListSettings settings) {
            var baseCommand = "az network route-filter rule list";
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-filter rule list-service-communities".
        /// Gets all the available BGP service communities.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilterRule")]
        public dynamic NetworkRouteFilterRuleListServiceCommunities(NetworkRouteFilterRuleListServiceCommunitiesSettings settings) {
            var baseCommand = "az network route-filter rule list-service-communities";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-filter rule show".
        /// Get the details of a rule in a route filter.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilterRule")]
        public dynamic NetworkRouteFilterRuleShow(NetworkRouteFilterRuleShowSettings settings) {
            var baseCommand = "az network route-filter rule show";
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-filter rule update".
        /// Update a rule in a route filter.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteFilterRule")]
        public dynamic NetworkRouteFilterRuleUpdate(NetworkRouteFilterRuleUpdateSettings settings) {
            var baseCommand = "az network route-filter rule update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--filter-name", settings.FilterName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-table create".
        /// Create a route table.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTable")]
        public dynamic NetworkRouteTableCreate(NetworkRouteTableCreateSettings settings) {
            var baseCommand = "az network route-table create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--disable-bgp-route-propagation", settings.DisableBgpRoutePropagation);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-table delete".
        /// Delete a route table.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTable")]
        public dynamic NetworkRouteTableDelete(NetworkRouteTableDeleteSettings settings) {
            var baseCommand = "az network route-table delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-table list".
        /// List route tables.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTable")]
        public dynamic NetworkRouteTableList(NetworkRouteTableListSettings settings) {
            var baseCommand = "az network route-table list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-table show".
        /// Get the details of a route table.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTable")]
        public dynamic NetworkRouteTableShow(NetworkRouteTableShowSettings settings) {
            var baseCommand = "az network route-table show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-table update".
        /// Update a route table.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTable")]
        public dynamic NetworkRouteTableUpdate(NetworkRouteTableUpdateSettings settings) {
            var baseCommand = "az network route-table update";
            AppendIfNonNull(ref baseCommand, "--disable-bgp-route-propagation", settings.DisableBgpRoutePropagation);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-table route create".
        /// Create a route in a route table.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTableRoute")]
        public dynamic NetworkRouteTableRouteCreate(NetworkRouteTableRouteCreateSettings settings) {
            var baseCommand = "az network route-table route create";
            AppendIfNonNull(ref baseCommand, "--address-prefix", settings.AddressPrefix);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--next-hop-type", settings.NextHopType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--route-table-name", settings.RouteTableName);
            AppendIfNonNull(ref baseCommand, "--next-hop-ip-address", settings.NextHopIpAddress);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-table route delete".
        /// Delete a route from a route table.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTableRoute")]
        public dynamic NetworkRouteTableRouteDelete(NetworkRouteTableRouteDeleteSettings settings) {
            var baseCommand = "az network route-table route delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--route-table-name", settings.RouteTableName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-table route list".
        /// List routes in a route table.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTableRoute")]
        public dynamic NetworkRouteTableRouteList(NetworkRouteTableRouteListSettings settings) {
            var baseCommand = "az network route-table route list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--route-table-name", settings.RouteTableName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-table route show".
        /// Get the details of a route in a route table.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTableRoute")]
        public dynamic NetworkRouteTableRouteShow(NetworkRouteTableRouteShowSettings settings) {
            var baseCommand = "az network route-table route show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--route-table-name", settings.RouteTableName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network route-table route update".
        /// Update a route in a route table.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkRouteTableRoute")]
        public dynamic NetworkRouteTableRouteUpdate(NetworkRouteTableRouteUpdateSettings settings) {
            var baseCommand = "az network route-table route update";
            AppendIfNonNull(ref baseCommand, "--address-prefix", settings.AddressPrefix);
            AppendIfNonNull(ref baseCommand, "--next-hop-ip-address", settings.NextHopIpAddress);
            AppendIfNonNull(ref baseCommand, "--next-hop-type", settings.NextHopType);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--route-table-name", settings.RouteTableName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network service-endpoint list".
        /// List what values of endpoint services are available for use.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpoint")]
        public dynamic NetworkServiceEndpointList(NetworkServiceEndpointListSettings settings) {
            var baseCommand = "az network service-endpoint list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network service-endpoint policy create".
        /// Create a service endpoint policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicy")]
        public dynamic NetworkServiceEndpointPolicyCreate(NetworkServiceEndpointPolicyCreateSettings settings) {
            var baseCommand = "az network service-endpoint policy create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network service-endpoint policy delete".
        /// Delete a service endpoint policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicy")]
        public dynamic NetworkServiceEndpointPolicyDelete(NetworkServiceEndpointPolicyDeleteSettings settings) {
            var baseCommand = "az network service-endpoint policy delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network service-endpoint policy list".
        /// List service endpoint policies.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicy")]
        public dynamic NetworkServiceEndpointPolicyList(NetworkServiceEndpointPolicyListSettings settings) {
            var baseCommand = "az network service-endpoint policy list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network service-endpoint policy show".
        /// Get the details of a service endpoint policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicy")]
        public dynamic NetworkServiceEndpointPolicyShow(NetworkServiceEndpointPolicyShowSettings settings) {
            var baseCommand = "az network service-endpoint policy show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network service-endpoint policy update".
        /// Update a service endpoint policy.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicy")]
        public dynamic NetworkServiceEndpointPolicyUpdate(NetworkServiceEndpointPolicyUpdateSettings settings) {
            var baseCommand = "az network service-endpoint policy update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network service-endpoint policy-definition create".
        /// Create a service endpoint policy definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicyDefinition")]
        public dynamic NetworkServiceEndpointPolicyDefinitionCreate(NetworkServiceEndpointPolicyDefinitionCreateSettings settings) {
            var baseCommand = "az network service-endpoint policy-definition create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service", settings.Service);
            AppendIfNonNull(ref baseCommand, "--service-resources", settings.ServiceResources);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network service-endpoint policy-definition delete".
        /// Delete a service endpoint policy definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicyDefinition")]
        public dynamic NetworkServiceEndpointPolicyDefinitionDelete(NetworkServiceEndpointPolicyDefinitionDeleteSettings settings) {
            var baseCommand = "az network service-endpoint policy-definition delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network service-endpoint policy-definition list".
        /// List service endpoint policy definitions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicyDefinition")]
        public dynamic NetworkServiceEndpointPolicyDefinitionList(NetworkServiceEndpointPolicyDefinitionListSettings settings) {
            var baseCommand = "az network service-endpoint policy-definition list";
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network service-endpoint policy-definition show".
        /// Get the details of a service endpoint policy definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicyDefinition")]
        public dynamic NetworkServiceEndpointPolicyDefinitionShow(NetworkServiceEndpointPolicyDefinitionShowSettings settings) {
            var baseCommand = "az network service-endpoint policy-definition show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network service-endpoint policy-definition update".
        /// Update a service endpoint policy definition.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkServiceEndpointPolicyDefinition")]
        public dynamic NetworkServiceEndpointPolicyDefinitionUpdate(NetworkServiceEndpointPolicyDefinitionUpdateSettings settings) {
            var baseCommand = "az network service-endpoint policy-definition update";
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--service", settings.Service);
            AppendIfNonNull(ref baseCommand, "--service-resources", settings.ServiceResources);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network traffic-manager endpoint create".
        /// Create a traffic manager endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerEndpoint")]
        public dynamic NetworkTrafficManagerEndpointCreate(NetworkTrafficManagerEndpointCreateSettings settings) {
            var baseCommand = "az network traffic-manager endpoint create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--custom-headers", settings.CustomHeaders);
            AppendIfNonNull(ref baseCommand, "--endpoint-location", settings.EndpointLocation);
            AppendIfNonNull(ref baseCommand, "--endpoint-monitor-status", settings.EndpointMonitorStatus);
            AppendIfNonNull(ref baseCommand, "--endpoint-status", settings.EndpointStatus);
            AppendIfNonNull(ref baseCommand, "--geo-mapping", settings.GeoMapping);
            AppendIfNonNull(ref baseCommand, "--min-child-endpoints", settings.MinChildEndpoints);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--subnets", settings.Subnets);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--target-resource-id", settings.TargetResourceId);
            AppendIfNonNull(ref baseCommand, "--weight", settings.Weight);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network traffic-manager endpoint delete".
        /// Delete a traffic manager endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerEndpoint")]
        public dynamic NetworkTrafficManagerEndpointDelete(NetworkTrafficManagerEndpointDeleteSettings settings) {
            var baseCommand = "az network traffic-manager endpoint delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network traffic-manager endpoint list".
        /// List traffic manager endpoints.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerEndpoint")]
        public dynamic NetworkTrafficManagerEndpointList(NetworkTrafficManagerEndpointListSettings settings) {
            var baseCommand = "az network traffic-manager endpoint list";
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network traffic-manager endpoint show".
        /// Get the details of a traffic manager endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerEndpoint")]
        public dynamic NetworkTrafficManagerEndpointShow(NetworkTrafficManagerEndpointShowSettings settings) {
            var baseCommand = "az network traffic-manager endpoint show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network traffic-manager endpoint show-geographic-hierarchy".
        /// Get the default geographic hierarchy used by the geographic traffic routing method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerEndpoint")]
        public dynamic NetworkTrafficManagerEndpointShowGeographicHierarchy(NetworkTrafficManagerEndpointShowGeographicHierarchySettings settings) {
            var baseCommand = "az network traffic-manager endpoint show-geographic-hierarchy";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network traffic-manager endpoint update".
        /// Update a traffic manager endpoint.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerEndpoint")]
        public dynamic NetworkTrafficManagerEndpointUpdate(NetworkTrafficManagerEndpointUpdateSettings settings) {
            var baseCommand = "az network traffic-manager endpoint update";
            AppendIfNonNull(ref baseCommand, "--custom-headers", settings.CustomHeaders);
            AppendIfNonNull(ref baseCommand, "--endpoint-location", settings.EndpointLocation);
            AppendIfNonNull(ref baseCommand, "--endpoint-monitor-status", settings.EndpointMonitorStatus);
            AppendIfNonNull(ref baseCommand, "--endpoint-status", settings.EndpointStatus);
            AppendIfNonNull(ref baseCommand, "--geo-mapping", settings.GeoMapping);
            AppendIfNonNull(ref baseCommand, "--min-child-endpoints", settings.MinChildEndpoints);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--subnets", settings.Subnets);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--target-resource-id", settings.TargetResourceId);
            AppendIfNonNull(ref baseCommand, "--weight", settings.Weight);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--profile-name", settings.ProfileName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network traffic-manager profile check-dns".
        /// Check the availability of a relative DNS name.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerProfile")]
        public dynamic NetworkTrafficManagerProfileCheckDns(NetworkTrafficManagerProfileCheckDnsSettings settings) {
            var baseCommand = "az network traffic-manager profile check-dns";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network traffic-manager profile create".
        /// Create a traffic manager profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerProfile")]
        public dynamic NetworkTrafficManagerProfileCreate(NetworkTrafficManagerProfileCreateSettings settings) {
            var baseCommand = "az network traffic-manager profile create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--routing-method", settings.RoutingMethod);
            AppendIfNonNull(ref baseCommand, "--unique-dns-name", settings.UniqueDnsName);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--custom-headers", settings.CustomHeaders);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--max-failures", settings.MaxFailures);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--status-code-ranges", settings.StatusCodeRanges);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network traffic-manager profile delete".
        /// Delete a traffic manager profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerProfile")]
        public dynamic NetworkTrafficManagerProfileDelete(NetworkTrafficManagerProfileDeleteSettings settings) {
            var baseCommand = "az network traffic-manager profile delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network traffic-manager profile list".
        /// List traffic manager profiles.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerProfile")]
        public dynamic NetworkTrafficManagerProfileList(NetworkTrafficManagerProfileListSettings settings) {
            var baseCommand = "az network traffic-manager profile list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network traffic-manager profile show".
        /// Get the details of a traffic manager profile.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerProfile")]
        public dynamic NetworkTrafficManagerProfileShow(NetworkTrafficManagerProfileShowSettings settings) {
            var baseCommand = "az network traffic-manager profile show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network traffic-manager profile update".
        /// Update a traffic manager profile.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkTrafficManagerProfile")]
        public dynamic NetworkTrafficManagerProfileUpdate(NetworkTrafficManagerProfileUpdateSettings settings) {
            var baseCommand = "az network traffic-manager profile update";
            AppendIfNonNull(ref baseCommand, "--routing-method", settings.RoutingMethod);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--ttl", settings.Ttl);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--custom-headers", settings.CustomHeaders);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--max-failures", settings.MaxFailures);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--status-code-ranges", settings.StatusCodeRanges);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet check-ip-address".
        /// Check if a private IP address is available for use within a virtual network.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public dynamic NetworkVnetCheckIpAddress(NetworkVnetCheckIpAddressSettings settings) {
            var baseCommand = "az network vnet check-ip-address";
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet create".
        /// Create a virtual network.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public dynamic NetworkVnetCreate(NetworkVnetCreateSettings settings) {
            var baseCommand = "az network vnet create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--address-prefixes", settings.AddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--ddos-protection", settings.DdosProtection);
            AppendIfNonNull(ref baseCommand, "--ddos-protection-plan", settings.DdosProtectionPlan);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--dns-servers", settings.DnsServers);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vm-protection", settings.VmProtection);
            AppendIfNonNull(ref baseCommand, "--subnet-name", settings.SubnetName);
            AppendIfNonNull(ref baseCommand, "--subnet-prefixes", settings.SubnetPrefixes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet delete".
        /// Delete a virtual network.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public dynamic NetworkVnetDelete(NetworkVnetDeleteSettings settings) {
            var baseCommand = "az network vnet delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet list".
        /// List virtual networks.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public dynamic NetworkVnetList(NetworkVnetListSettings settings) {
            var baseCommand = "az network vnet list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet list-endpoint-services".
        /// List which services support VNET service tunneling in a given region.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public dynamic NetworkVnetListEndpointServices(NetworkVnetListEndpointServicesSettings settings) {
            var baseCommand = "az network vnet list-endpoint-services";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet show".
        /// Get the details of a virtual network.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public dynamic NetworkVnetShow(NetworkVnetShowSettings settings) {
            var baseCommand = "az network vnet show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet update".
        /// Update a virtual network.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnet")]
        public dynamic NetworkVnetUpdate(NetworkVnetUpdateSettings settings) {
            var baseCommand = "az network vnet update";
            AppendIfNonNull(ref baseCommand, "--address-prefixes", settings.AddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--ddos-protection", settings.DdosProtection);
            AppendIfNonNull(ref baseCommand, "--ddos-protection-plan", settings.DdosProtectionPlan);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--dns-servers", settings.DnsServers);
            AppendIfNonNull(ref baseCommand, "--vm-protection", settings.VmProtection);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet peering create".
        /// Create a virtual network peering connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetPeering")]
        public dynamic NetworkVnetPeeringCreate(NetworkVnetPeeringCreateSettings settings) {
            var baseCommand = "az network vnet peering create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--remote-vnet", settings.RemoteVnet);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--allow-forwarded-traffic", settings.AllowForwardedTraffic);
            AppendIfNonNull(ref baseCommand, "--allow-gateway-transit", settings.AllowGatewayTransit);
            AppendIfNonNull(ref baseCommand, "--allow-vnet-access", settings.AllowVnetAccess);
            AppendIfNonNull(ref baseCommand, "--use-remote-gateways", settings.UseRemoteGateways);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet peering delete".
        /// Delete a peering.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetPeering")]
        public dynamic NetworkVnetPeeringDelete(NetworkVnetPeeringDeleteSettings settings) {
            var baseCommand = "az network vnet peering delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet peering list".
        /// List peerings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetPeering")]
        public dynamic NetworkVnetPeeringList(NetworkVnetPeeringListSettings settings) {
            var baseCommand = "az network vnet peering list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet peering show".
        /// Show details of a peering.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetPeering")]
        public dynamic NetworkVnetPeeringShow(NetworkVnetPeeringShowSettings settings) {
            var baseCommand = "az network vnet peering show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet peering update".
        /// Update a peering.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetPeering")]
        public dynamic NetworkVnetPeeringUpdate(NetworkVnetPeeringUpdateSettings settings) {
            var baseCommand = "az network vnet peering update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet subnet create".
        /// Create a subnet and associate an existing NSG and route table.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetSubnet")]
        public dynamic NetworkVnetSubnetCreate(NetworkVnetSubnetCreateSettings settings) {
            var baseCommand = "az network vnet subnet create";
            AppendIfNonNull(ref baseCommand, "--address-prefixes", settings.AddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--defer", settings.Defer);
            AppendIfNonNull(ref baseCommand, "--delegations", settings.Delegations);
            AppendIfNonNull(ref baseCommand, "--nat-gateway", settings.NatGateway);
            AppendIfNonNull(ref baseCommand, "--network-security-group", settings.NetworkSecurityGroup);
            AppendIfNonNull(ref baseCommand, "--route-table", settings.RouteTable);
            AppendIfNonNull(ref baseCommand, "--service-endpoint-policy", settings.ServiceEndpointPolicy);
            AppendIfNonNull(ref baseCommand, "--service-endpoints", settings.ServiceEndpoints);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet subnet delete".
        /// Delete a subnet.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetSubnet")]
        public dynamic NetworkVnetSubnetDelete(NetworkVnetSubnetDeleteSettings settings) {
            var baseCommand = "az network vnet subnet delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet subnet list".
        /// List the subnets in a virtual network.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetSubnet")]
        public dynamic NetworkVnetSubnetList(NetworkVnetSubnetListSettings settings) {
            var baseCommand = "az network vnet subnet list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet subnet list-available-delegations".
        /// List the services available for subnet delegation.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetSubnet")]
        public dynamic NetworkVnetSubnetListAvailableDelegations(NetworkVnetSubnetListAvailableDelegationsSettings settings) {
            var baseCommand = "az network vnet subnet list-available-delegations";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet subnet show".
        /// Show details of a subnet.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetSubnet")]
        public dynamic NetworkVnetSubnetShow(NetworkVnetSubnetShowSettings settings) {
            var baseCommand = "az network vnet subnet show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet subnet update".
        /// Update a subnet.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetSubnet")]
        public dynamic NetworkVnetSubnetUpdate(NetworkVnetSubnetUpdateSettings settings) {
            var baseCommand = "az network vnet subnet update";
            AppendIfNonNull(ref baseCommand, "--address-prefixes", settings.AddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--delegations", settings.Delegations);
            AppendIfNonNull(ref baseCommand, "--disable-private-endpoint-network-policies", settings.DisablePrivateEndpointNetworkPolicies);
            AppendIfNonNull(ref baseCommand, "--disable-private-link-service-network-policies", settings.DisablePrivateLinkServiceNetworkPolicies);
            AppendIfNonNull(ref baseCommand, "--nat-gateway", settings.NatGateway);
            AppendIfNonNull(ref baseCommand, "--network-security-group", settings.NetworkSecurityGroup);
            AppendIfNonNull(ref baseCommand, "--route-table", settings.RouteTable);
            AppendIfNonNull(ref baseCommand, "--service-endpoint-policy", settings.ServiceEndpointPolicy);
            AppendIfNonNull(ref baseCommand, "--service-endpoints", settings.ServiceEndpoints);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway create".
        /// Create a virtual network gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public dynamic NetworkVnetGatewayCreate(NetworkVnetGatewayCreateSettings settings) {
            var baseCommand = "az network vnet-gateway create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--public-ip-addresses", settings.PublicIpAddresses);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--gateway-default-site", settings.GatewayDefaultSite);
            AppendIfNonNull(ref baseCommand, "--gateway-type", settings.GatewayType);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vpn-type", settings.VpnType);
            AppendIfNonNull(ref baseCommand, "--asn", settings.Asn);
            AppendIfNonNull(ref baseCommand, "--bgp-peering-address", settings.BgpPeeringAddress);
            AppendIfNonNull(ref baseCommand, "--peer-weight", settings.PeerWeight);
            AppendIfNonNull(ref baseCommand, "--address-prefixes", settings.AddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--client-protocol", settings.ClientProtocol);
            AppendIfNonNull(ref baseCommand, "--custom-routes", settings.CustomRoutes);
            AppendIfNonNull(ref baseCommand, "--radius-secret", settings.RadiusSecret);
            AppendIfNonNull(ref baseCommand, "--radius-server", settings.RadiusServer);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway delete".
        /// Delete a virtual network gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public dynamic NetworkVnetGatewayDelete(NetworkVnetGatewayDeleteSettings settings) {
            var baseCommand = "az network vnet-gateway delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway list".
        /// List virtual network gateways.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public dynamic NetworkVnetGatewayList(NetworkVnetGatewayListSettings settings) {
            var baseCommand = "az network vnet-gateway list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway list-advertised-routes".
        /// List the routes of a virtual network gateway advertised to the specified peer.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public dynamic NetworkVnetGatewayListAdvertisedRoutes(NetworkVnetGatewayListAdvertisedRoutesSettings settings) {
            var baseCommand = "az network vnet-gateway list-advertised-routes";
            AppendIfNonNull(ref baseCommand, "--peer", settings.Peer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway list-bgp-peer-status".
        /// Retrieve the status of BGP peers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public dynamic NetworkVnetGatewayListBgpPeerStatus(NetworkVnetGatewayListBgpPeerStatusSettings settings) {
            var baseCommand = "az network vnet-gateway list-bgp-peer-status";
            AppendIfNonNull(ref baseCommand, "--peer", settings.Peer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway list-learned-routes".
        /// This operation retrieves a list of routes the virtual network gateway has learned, including routes learned from BGP peers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public dynamic NetworkVnetGatewayListLearnedRoutes(NetworkVnetGatewayListLearnedRoutesSettings settings) {
            var baseCommand = "az network vnet-gateway list-learned-routes";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway reset".
        /// Reset a virtual network gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public dynamic NetworkVnetGatewayReset(NetworkVnetGatewayResetSettings settings) {
            var baseCommand = "az network vnet-gateway reset";
            AppendIfNonNull(ref baseCommand, "--gateway-vip", settings.GatewayVip);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway show".
        /// Get the details of a virtual network gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public dynamic NetworkVnetGatewayShow(NetworkVnetGatewayShowSettings settings) {
            var baseCommand = "az network vnet-gateway show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway update".
        /// Update a virtual network gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public dynamic NetworkVnetGatewayUpdate(NetworkVnetGatewayUpdateSettings settings) {
            var baseCommand = "az network vnet-gateway update";
            AppendIfNonNull(ref baseCommand, "--gateway-default-site", settings.GatewayDefaultSite);
            AppendIfNonNull(ref baseCommand, "--gateway-type", settings.GatewayType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--public-ip-addresses", settings.PublicIpAddresses);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--vpn-type", settings.VpnType);
            AppendIfNonNull(ref baseCommand, "--asn", settings.Asn);
            AppendIfNonNull(ref baseCommand, "--bgp-peering-address", settings.BgpPeeringAddress);
            AppendIfNonNull(ref baseCommand, "--enable-bgp", settings.EnableBgp);
            AppendIfNonNull(ref baseCommand, "--peer-weight", settings.PeerWeight);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--address-prefixes", settings.AddressPrefixes);
            AppendIfNonNull(ref baseCommand, "--client-protocol", settings.ClientProtocol);
            AppendIfNonNull(ref baseCommand, "--custom-routes", settings.CustomRoutes);
            AppendIfNonNull(ref baseCommand, "--radius-secret", settings.RadiusSecret);
            AppendIfNonNull(ref baseCommand, "--radius-server", settings.RadiusServer);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway wait".
        /// Place the CLI in a waiting state until a condition of the virtual network gateway is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGateway")]
        public dynamic NetworkVnetGatewayWait(NetworkVnetGatewayWaitSettings settings) {
            var baseCommand = "az network vnet-gateway wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway aad assign".
        /// Assign/Update AAD(Azure Active Directory) authentication to a virtual network gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayAad")]
        public dynamic NetworkVnetGatewayAadAssign(NetworkVnetGatewayAadAssignSettings settings) {
            var baseCommand = "az network vnet-gateway aad assign";
            AppendIfNonNull(ref baseCommand, "--audience", settings.Audience);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--issuer", settings.Issuer);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tenant", settings.Tenant);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway aad remove".
        /// Remove AAD(Azure Active Directory) authentication from a virtual network gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayAad")]
        public dynamic NetworkVnetGatewayAadRemove(NetworkVnetGatewayAadRemoveSettings settings) {
            var baseCommand = "az network vnet-gateway aad remove";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway aad show".
        /// Show AAD(Azure Active Directory) authentication of a virtual network gateway.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayAad")]
        public dynamic NetworkVnetGatewayAadShow(NetworkVnetGatewayAadShowSettings settings) {
            var baseCommand = "az network vnet-gateway aad show";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway ipsec-policy add".
        /// Add a virtual network gateway IPSec policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayIpsecPolicy")]
        public dynamic NetworkVnetGatewayIpsecPolicyAdd(NetworkVnetGatewayIpsecPolicyAddSettings settings) {
            var baseCommand = "az network vnet-gateway ipsec-policy add";
            AppendIfNonNull(ref baseCommand, "--dh-group", settings.DhGroup);
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--ike-encryption", settings.IkeEncryption);
            AppendIfNonNull(ref baseCommand, "--ike-integrity", settings.IkeIntegrity);
            AppendIfNonNull(ref baseCommand, "--ipsec-encryption", settings.IpsecEncryption);
            AppendIfNonNull(ref baseCommand, "--ipsec-integrity", settings.IpsecIntegrity);
            AppendIfNonNull(ref baseCommand, "--pfs-group", settings.PfsGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sa-lifetime", settings.SaLifetime);
            AppendIfNonNull(ref baseCommand, "--sa-max-size", settings.SaMaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway ipsec-policy clear".
        /// Delete all IPsec policies on a virtual network gateway.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayIpsecPolicy")]
        public dynamic NetworkVnetGatewayIpsecPolicyClear(NetworkVnetGatewayIpsecPolicyClearSettings settings) {
            var baseCommand = "az network vnet-gateway ipsec-policy clear";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway ipsec-policy list".
        /// List IPSec policies associated with a virtual network gateway.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayIpsecPolicy")]
        public dynamic NetworkVnetGatewayIpsecPolicyList(NetworkVnetGatewayIpsecPolicyListSettings settings) {
            var baseCommand = "az network vnet-gateway ipsec-policy list";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway revoked-cert create".
        /// Revoke a certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayRevokedCert")]
        public dynamic NetworkVnetGatewayRevokedCertCreate(NetworkVnetGatewayRevokedCertCreateSettings settings) {
            var baseCommand = "az network vnet-gateway revoked-cert create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--thumbprint", settings.Thumbprint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway revoked-cert delete".
        /// Delete a revoked certificate.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayRevokedCert")]
        public dynamic NetworkVnetGatewayRevokedCertDelete(NetworkVnetGatewayRevokedCertDeleteSettings settings) {
            var baseCommand = "az network vnet-gateway revoked-cert delete";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway root-cert create".
        /// Upload a root certificate.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayRootCert")]
        public dynamic NetworkVnetGatewayRootCertCreate(NetworkVnetGatewayRootCertCreateSettings settings) {
            var baseCommand = "az network vnet-gateway root-cert create";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--public-cert-data", settings.PublicCertData);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway root-cert delete".
        /// Delete a root certificate.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayRootCert")]
        public dynamic NetworkVnetGatewayRootCertDelete(NetworkVnetGatewayRootCertDeleteSettings settings) {
            var baseCommand = "az network vnet-gateway root-cert delete";
            AppendIfNonNull(ref baseCommand, "--gateway-name", settings.GatewayName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway vpn-client generate".
        /// Generate VPN client configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayVpnClient")]
        public dynamic NetworkVnetGatewayVpnClientGenerate(NetworkVnetGatewayVpnClientGenerateSettings settings) {
            var baseCommand = "az network vnet-gateway vpn-client generate";
            AppendIfNonNull(ref baseCommand, "--authentication-method", settings.AuthenticationMethod);
            AppendIfNonNull(ref baseCommand, "--client-root-certificates", settings.ClientRootCertificates);
            AppendIfNonNull(ref baseCommand, "--processor-architecture", settings.ProcessorArchitecture);
            AppendIfNonNull(ref baseCommand, "--radius-server-auth-certificate", settings.RadiusServerAuthCertificate);
            AppendIfNonNull(ref baseCommand, "--use-legacy", settings.UseLegacy);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vnet-gateway vpn-client show-url".
        /// Retrieve a pre-generated VPN client configuration.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVnetGatewayVpnClient")]
        public dynamic NetworkVnetGatewayVpnClientShowUrl(NetworkVnetGatewayVpnClientShowUrlSettings settings) {
            var baseCommand = "az network vnet-gateway vpn-client show-url";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vpn-connection create".
        /// Create a VPN connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnection")]
        public dynamic NetworkVpnConnectionCreate(NetworkVpnConnectionCreateSettings settings) {
            var baseCommand = "az network vpn-connection create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vnet-gateway1", settings.VnetGateway1);
            AppendIfNonNull(ref baseCommand, "--authorization-key", settings.AuthorizationKey);
            AppendIfNonNull(ref baseCommand, "--enable-bgp", settings.EnableBgp);
            AppendIfNonNull(ref baseCommand, "--express-route-gateway-bypass", settings.ExpressRouteGatewayBypass);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--routing-weight", settings.RoutingWeight);
            AppendIfNonNull(ref baseCommand, "--shared-key", settings.SharedKey);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--use-policy-based-traffic-selectors", settings.UsePolicyBasedTrafficSelectors);
            AppendIfNonNull(ref baseCommand, "--validate", settings.Validate);
            AppendIfNonNull(ref baseCommand, "--express-route-circuit2", settings.ExpressRouteCircuit2);
            AppendIfNonNull(ref baseCommand, "--local-gateway2", settings.LocalGateway2);
            AppendIfNonNull(ref baseCommand, "--vnet-gateway2", settings.VnetGateway2);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vpn-connection delete".
        /// Delete a VPN connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnection")]
        public dynamic NetworkVpnConnectionDelete(NetworkVpnConnectionDeleteSettings settings) {
            var baseCommand = "az network vpn-connection delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vpn-connection list".
        /// List all VPN connections in a resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnection")]
        public dynamic NetworkVpnConnectionList(NetworkVpnConnectionListSettings settings) {
            var baseCommand = "az network vpn-connection list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vpn-connection show".
        /// Get the details of a VPN connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnection")]
        public dynamic NetworkVpnConnectionShow(NetworkVpnConnectionShowSettings settings) {
            var baseCommand = "az network vpn-connection show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vpn-connection update".
        /// Update a VPN connection.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnection")]
        public dynamic NetworkVpnConnectionUpdate(NetworkVpnConnectionUpdateSettings settings) {
            var baseCommand = "az network vpn-connection update";
            AppendIfNonNull(ref baseCommand, "--enable-bgp", settings.EnableBgp);
            AppendIfNonNull(ref baseCommand, "--express-route-gateway-bypass", settings.ExpressRouteGatewayBypass);
            AppendIfNonNull(ref baseCommand, "--routing-weight", settings.RoutingWeight);
            AppendIfNonNull(ref baseCommand, "--shared-key", settings.SharedKey);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--use-policy-based-traffic-selectors", settings.UsePolicyBasedTrafficSelectors);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vpn-connection ipsec-policy add".
        /// Add a VPN connection IPSec policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnectionIpsecPolicy")]
        public dynamic NetworkVpnConnectionIpsecPolicyAdd(NetworkVpnConnectionIpsecPolicyAddSettings settings) {
            var baseCommand = "az network vpn-connection ipsec-policy add";
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--dh-group", settings.DhGroup);
            AppendIfNonNull(ref baseCommand, "--ike-encryption", settings.IkeEncryption);
            AppendIfNonNull(ref baseCommand, "--ike-integrity", settings.IkeIntegrity);
            AppendIfNonNull(ref baseCommand, "--ipsec-encryption", settings.IpsecEncryption);
            AppendIfNonNull(ref baseCommand, "--ipsec-integrity", settings.IpsecIntegrity);
            AppendIfNonNull(ref baseCommand, "--pfs-group", settings.PfsGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sa-lifetime", settings.SaLifetime);
            AppendIfNonNull(ref baseCommand, "--sa-max-size", settings.SaMaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vpn-connection ipsec-policy clear".
        /// Delete all IPsec policies on a VPN connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnectionIpsecPolicy")]
        public dynamic NetworkVpnConnectionIpsecPolicyClear(NetworkVpnConnectionIpsecPolicyClearSettings settings) {
            var baseCommand = "az network vpn-connection ipsec-policy clear";
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vpn-connection ipsec-policy list".
        /// List IPSec policies associated with a VPN connection.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnectionIpsecPolicy")]
        public dynamic NetworkVpnConnectionIpsecPolicyList(NetworkVpnConnectionIpsecPolicyListSettings settings) {
            var baseCommand = "az network vpn-connection ipsec-policy list";
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vpn-connection shared-key reset".
        /// Reset a VPN connection shared key.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnectionSharedKey")]
        public dynamic NetworkVpnConnectionSharedKeyReset(NetworkVpnConnectionSharedKeyResetSettings settings) {
            var baseCommand = "az network vpn-connection shared-key reset";
            AppendIfNonNull(ref baseCommand, "--key-length", settings.KeyLength);
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vpn-connection shared-key show".
        /// Retrieve a VPN connection shared key.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnectionSharedKey")]
        public dynamic NetworkVpnConnectionSharedKeyShow(NetworkVpnConnectionSharedKeyShowSettings settings) {
            var baseCommand = "az network vpn-connection shared-key show";
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vpn-connection shared-key update".
        /// Update a VPN connection shared key.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVpnConnectionSharedKey")]
        public dynamic NetworkVpnConnectionSharedKeyUpdate(NetworkVpnConnectionSharedKeyUpdateSettings settings) {
            var baseCommand = "az network vpn-connection shared-key update";
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--connection-name", settings.ConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vrouter create".
        /// Create a virtual router.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouter")]
        public dynamic NetworkVrouterCreate(NetworkVrouterCreateSettings settings) {
            var baseCommand = "az network vrouter create";
            AppendIfNonNull(ref baseCommand, "--hosted-gateway", settings.HostedGateway);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vrouter delete".
        /// Deletes the specified Virtual Router.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouter")]
        public dynamic NetworkVrouterDelete(NetworkVrouterDeleteSettings settings) {
            var baseCommand = "az network vrouter delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vrouter list".
        /// List all virtual routers under a subscription or a resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouter")]
        public dynamic NetworkVrouterList(NetworkVrouterListSettings settings) {
            var baseCommand = "az network vrouter list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vrouter show".
        /// Gets the specified Virtual Router.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouter")]
        public dynamic NetworkVrouterShow(NetworkVrouterShowSettings settings) {
            var baseCommand = "az network vrouter show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vrouter update".
        /// Update a virtual router.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouter")]
        public dynamic NetworkVrouterUpdate(NetworkVrouterUpdateSettings settings) {
            var baseCommand = "az network vrouter update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vrouter peering create".
        /// Create a virtual router peering.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouterPeering")]
        public dynamic NetworkVrouterPeeringCreate(NetworkVrouterPeeringCreateSettings settings) {
            var baseCommand = "az network vrouter peering create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--peer-asn", settings.PeerAsn);
            AppendIfNonNull(ref baseCommand, "--peer-ip", settings.PeerIp);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vrouter-name", settings.VrouterName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vrouter peering delete".
        /// Deletes the specified peering from a Virtual Router.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouterPeering")]
        public dynamic NetworkVrouterPeeringDelete(NetworkVrouterPeeringDeleteSettings settings) {
            var baseCommand = "az network vrouter peering delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vrouter-name", settings.VrouterName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vrouter peering list".
        /// Lists all Virtual Router Peerings in a Virtual Router resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouterPeering")]
        public dynamic NetworkVrouterPeeringList(NetworkVrouterPeeringListSettings settings) {
            var baseCommand = "az network vrouter peering list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vrouter-name", settings.VrouterName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vrouter peering show".
        /// Gets the specified Virtual Router Peering.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouterPeering")]
        public dynamic NetworkVrouterPeeringShow(NetworkVrouterPeeringShowSettings settings) {
            var baseCommand = "az network vrouter peering show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vrouter-name", settings.VrouterName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network vrouter peering update".
        /// Update a virtual router peering.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkVrouterPeering")]
        public dynamic NetworkVrouterPeeringUpdate(NetworkVrouterPeeringUpdateSettings settings) {
            var baseCommand = "az network vrouter peering update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vrouter-name", settings.VrouterName);
            AppendIfNonNull(ref baseCommand, "--peer-asn", settings.PeerAsn);
            AppendIfNonNull(ref baseCommand, "--peer-ip", settings.PeerIp);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher configure".
        /// Configure the Network Watcher service for different regions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public dynamic NetworkWatcherConfigure(NetworkWatcherConfigureSettings settings) {
            var baseCommand = "az network watcher configure";
            AppendIfNonNull(ref baseCommand, "--locations", settings.Locations);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher list".
        /// List Network Watchers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public dynamic NetworkWatcherList(NetworkWatcherListSettings settings) {
            var baseCommand = "az network watcher list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher run-configuration-diagnostic".
        /// Run a configuration diagnostic on a target resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public dynamic NetworkWatcherRunConfigurationDiagnostic(NetworkWatcherRunConfigurationDiagnosticSettings settings) {
            var baseCommand = "az network watcher run-configuration-diagnostic";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--direction", settings.Direction);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--queries", settings.Queries);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher show-next-hop".
        /// Get information on the 'next hop' of a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public dynamic NetworkWatcherShowNextHop(NetworkWatcherShowNextHopSettings settings) {
            var baseCommand = "az network watcher show-next-hop";
            AppendIfNonNull(ref baseCommand, "--dest-ip", settings.DestIp);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-ip", settings.SourceIp);
            AppendIfNonNull(ref baseCommand, "--vm", settings.Vm);
            AppendIfNonNull(ref baseCommand, "--nic", settings.Nic);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher show-security-group-view".
        /// Get detailed security information on a VM for the currently configured network security group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public dynamic NetworkWatcherShowSecurityGroupView(NetworkWatcherShowSecurityGroupViewSettings settings) {
            var baseCommand = "az network watcher show-security-group-view";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm", settings.Vm);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher show-topology".
        /// Get the network topology of a resource group, virtual network or subnet.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public dynamic NetworkWatcherShowTopology(NetworkWatcherShowTopologySettings settings) {
            var baseCommand = "az network watcher show-topology";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher test-connectivity".
        /// Test if a connection can be established between a Virtual Machine and a given endpoint.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public dynamic NetworkWatcherTestConnectivity(NetworkWatcherTestConnectivitySettings settings) {
            var baseCommand = "az network watcher test-connectivity";
            AppendIfNonNull(ref baseCommand, "--source-resource", settings.SourceResource);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-port", settings.SourcePort);
            AppendIfNonNull(ref baseCommand, "--dest-address", settings.DestAddress);
            AppendIfNonNull(ref baseCommand, "--dest-port", settings.DestPort);
            AppendIfNonNull(ref baseCommand, "--dest-resource", settings.DestResource);
            AppendIfNonNull(ref baseCommand, "--headers", settings.Headers);
            AppendIfNonNull(ref baseCommand, "--method", settings.Method);
            AppendIfNonNull(ref baseCommand, "--valid-status-codes", settings.ValidStatusCodes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher test-ip-flow".
        /// Test IP flow to/from a VM given the currently configured network security group rules.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcher")]
        public dynamic NetworkWatcherTestIpFlow(NetworkWatcherTestIpFlowSettings settings) {
            var baseCommand = "az network watcher test-ip-flow";
            AppendIfNonNull(ref baseCommand, "--direction", settings.Direction);
            AppendIfNonNull(ref baseCommand, "--local", settings.Local);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--remote", settings.Remote);
            AppendIfNonNull(ref baseCommand, "--vm", settings.Vm);
            AppendIfNonNull(ref baseCommand, "--nic", settings.Nic);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher connection-monitor create".
        /// Create a connection monitor.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public dynamic NetworkWatcherConnectionMonitorCreate(NetworkWatcherConnectionMonitorCreateSettings settings) {
            var baseCommand = "az network watcher connection-monitor create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--source-resource", settings.SourceResource);
            AppendIfNonNull(ref baseCommand, "--do-not-start", settings.DoNotStart);
            AppendIfNonNull(ref baseCommand, "--monitoring-interval", settings.MonitoringInterval);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-port", settings.SourcePort);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--dest-address", settings.DestAddress);
            AppendIfNonNull(ref baseCommand, "--dest-port", settings.DestPort);
            AppendIfNonNull(ref baseCommand, "--dest-resource", settings.DestResource);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher connection-monitor delete".
        /// Delete a connection monitor for the given region.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public dynamic NetworkWatcherConnectionMonitorDelete(NetworkWatcherConnectionMonitorDeleteSettings settings) {
            var baseCommand = "az network watcher connection-monitor delete";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher connection-monitor list".
        /// List connection monitors for the given region.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public dynamic NetworkWatcherConnectionMonitorList(NetworkWatcherConnectionMonitorListSettings settings) {
            var baseCommand = "az network watcher connection-monitor list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher connection-monitor query".
        /// Query a snapshot of the most recent connection state of a connection monitor.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public dynamic NetworkWatcherConnectionMonitorQuery(NetworkWatcherConnectionMonitorQuerySettings settings) {
            var baseCommand = "az network watcher connection-monitor query";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher connection-monitor show".
        /// Shows a connection monitor by name.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public dynamic NetworkWatcherConnectionMonitorShow(NetworkWatcherConnectionMonitorShowSettings settings) {
            var baseCommand = "az network watcher connection-monitor show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher connection-monitor start".
        /// Start the specified connection monitor.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public dynamic NetworkWatcherConnectionMonitorStart(NetworkWatcherConnectionMonitorStartSettings settings) {
            var baseCommand = "az network watcher connection-monitor start";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher connection-monitor stop".
        /// Stop the specified connection monitor.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherConnectionMonitor")]
        public dynamic NetworkWatcherConnectionMonitorStop(NetworkWatcherConnectionMonitorStopSettings settings) {
            var baseCommand = "az network watcher connection-monitor stop";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher flow-log configure".
        /// Configure flow logging on a network security group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherFlowLog")]
        public dynamic NetworkWatcherFlowLogConfigure(NetworkWatcherFlowLogConfigureSettings settings) {
            var baseCommand = "az network watcher flow-log configure";
            AppendIfNonNull(ref baseCommand, "--nsg", settings.Nsg);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--retention", settings.Retention);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--format", settings.Format);
            AppendIfNonNull(ref baseCommand, "--log-version", settings.LogVersion);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--traffic-analytics", settings.TrafficAnalytics);
            AppendIfNonNull(ref baseCommand, "--workspace", settings.Workspace);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher flow-log show".
        /// Get the flow log configuration of a network security group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherFlowLog")]
        public dynamic NetworkWatcherFlowLogShow(NetworkWatcherFlowLogShowSettings settings) {
            var baseCommand = "az network watcher flow-log show";
            AppendIfNonNull(ref baseCommand, "--nsg", settings.Nsg);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher packet-capture create".
        /// Create and start a packet capture session.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherPacketCapture")]
        public dynamic NetworkWatcherPacketCaptureCreate(NetworkWatcherPacketCaptureCreateSettings settings) {
            var baseCommand = "az network watcher packet-capture create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm", settings.Vm);
            AppendIfNonNull(ref baseCommand, "--capture-limit", settings.CaptureLimit);
            AppendIfNonNull(ref baseCommand, "--capture-size", settings.CaptureSize);
            AppendIfNonNull(ref baseCommand, "--filters", settings.Filters);
            AppendIfNonNull(ref baseCommand, "--time-limit", settings.TimeLimit);
            AppendIfNonNull(ref baseCommand, "--file-path", settings.FilePath);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--storage-path", settings.StoragePath);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher packet-capture delete".
        /// Delete a packet capture session.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherPacketCapture")]
        public dynamic NetworkWatcherPacketCaptureDelete(NetworkWatcherPacketCaptureDeleteSettings settings) {
            var baseCommand = "az network watcher packet-capture delete";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher packet-capture list".
        /// List all packet capture sessions within a resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherPacketCapture")]
        public dynamic NetworkWatcherPacketCaptureList(NetworkWatcherPacketCaptureListSettings settings) {
            var baseCommand = "az network watcher packet-capture list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher packet-capture show".
        /// Show details of a packet capture session.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherPacketCapture")]
        public dynamic NetworkWatcherPacketCaptureShow(NetworkWatcherPacketCaptureShowSettings settings) {
            var baseCommand = "az network watcher packet-capture show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher packet-capture show-status".
        /// Show the status of a packet capture session.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherPacketCapture")]
        public dynamic NetworkWatcherPacketCaptureShowStatus(NetworkWatcherPacketCaptureShowStatusSettings settings) {
            var baseCommand = "az network watcher packet-capture show-status";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher packet-capture stop".
        /// Stop a running packet capture session.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherPacketCapture")]
        public dynamic NetworkWatcherPacketCaptureStop(NetworkWatcherPacketCaptureStopSettings settings) {
            var baseCommand = "az network watcher packet-capture stop";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher troubleshooting show".
        /// Get the results of the last troubleshooting operation.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherTroubleshooting")]
        public dynamic NetworkWatcherTroubleshootingShow(NetworkWatcherTroubleshootingShowSettings settings) {
            var baseCommand = "az network watcher troubleshooting show";
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az network watcher troubleshooting start".
        /// Troubleshoot issues with VPN connections or gateway connectivity.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzNetworkWatcherTroubleshooting")]
        public dynamic NetworkWatcherTroubleshootingStart(NetworkWatcherTroubleshootingStartSettings settings) {
            var baseCommand = "az network watcher troubleshooting start";
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--storage-path", settings.StoragePath);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az openshift create".
        /// Create a new managed OpenShift cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzOpenshift")]
        public dynamic OpenshiftCreate(OpenshiftCreateSettings settings) {
            var baseCommand = "az openshift create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--aad-client-app-id", settings.AadClientAppId);
            AppendIfNonNull(ref baseCommand, "--aad-client-app-secret", settings.AadClientAppSecret);
            AppendIfNonNull(ref baseCommand, "--aad-tenant-id", settings.AadTenantId);
            AppendIfNonNull(ref baseCommand, "--compute-count", settings.ComputeCount);
            AppendIfNonNull(ref baseCommand, "--compute-vm-size", settings.ComputeVmSize);
            AppendIfNonNull(ref baseCommand, "--customer-admin-group-id", settings.CustomerAdminGroupId);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--subnet-prefix", settings.SubnetPrefix);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--vnet-peer", settings.VnetPeer);
            AppendIfNonNull(ref baseCommand, "--vnet-prefix", settings.VnetPrefix);
            AppendIfNonNull(ref baseCommand, "--workspace-resource-id", settings.WorkspaceResourceId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az openshift delete".
        /// Delete a managed OpenShift cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzOpenshift")]
        public dynamic OpenshiftDelete(OpenshiftDeleteSettings settings) {
            var baseCommand = "az openshift delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az openshift list".
        /// List managed OpenShift clusters.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzOpenshift")]
        public dynamic OpenshiftList(OpenshiftListSettings settings) {
            var baseCommand = "az openshift list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az openshift scale".
        /// Scale the compute pool in a managed OpenShift cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzOpenshift")]
        public dynamic OpenshiftScale(OpenshiftScaleSettings settings) {
            var baseCommand = "az openshift scale";
            AppendIfNonNull(ref baseCommand, "--compute-count", settings.ComputeCount);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az openshift show".
        /// Show the details for a managed OpenShift cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzOpenshift")]
        public dynamic OpenshiftShow(OpenshiftShowSettings settings) {
            var baseCommand = "az openshift show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az openshift wait".
        /// Wait for a managed OpenShift cluster to reach a desired state.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzOpenshift")]
        public dynamic OpenshiftWait(OpenshiftWaitSettings settings) {
            var baseCommand = "az openshift wait";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy assignment create".
        /// Create a resource policy assignment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignment")]
        public dynamic PolicyAssignmentCreate(PolicyAssignmentCreateSettings settings) {
            var baseCommand = "az policy assignment create";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--enforcement-mode", settings.EnforcementMode);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--not-scopes", settings.NotScopes);
            AppendIfNonNull(ref baseCommand, "--params", settings.Params);
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--policy-set-definition", settings.PolicySetDefinition);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--identity-scope", settings.IdentityScope);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy assignment delete".
        /// Delete a resource policy assignment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignment")]
        public dynamic PolicyAssignmentDelete(PolicyAssignmentDeleteSettings settings) {
            var baseCommand = "az policy assignment delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy assignment list".
        /// List resource policy assignments.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignment")]
        public dynamic PolicyAssignmentList(PolicyAssignmentListSettings settings) {
            var baseCommand = "az policy assignment list";
            AppendIfNonNull(ref baseCommand, "--disable-scope-strict-match", settings.DisableScopeStrictMatch);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy assignment show".
        /// Show a resource policy assignment.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignment")]
        public dynamic PolicyAssignmentShow(PolicyAssignmentShowSettings settings) {
            var baseCommand = "az policy assignment show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy assignment identity assign".
        /// Add a system assigned identity to a policy assignment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignmentIdentity")]
        public dynamic PolicyAssignmentIdentityAssign(PolicyAssignmentIdentityAssignSettings settings) {
            var baseCommand = "az policy assignment identity assign";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--identity-scope", settings.IdentityScope);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy assignment identity remove".
        /// Remove a managed identity from a policy assignment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignmentIdentity")]
        public dynamic PolicyAssignmentIdentityRemove(PolicyAssignmentIdentityRemoveSettings settings) {
            var baseCommand = "az policy assignment identity remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy assignment identity show".
        /// Show a policy assignment's managed identity.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyAssignmentIdentity")]
        public dynamic PolicyAssignmentIdentityShow(PolicyAssignmentIdentityShowSettings settings) {
            var baseCommand = "az policy assignment identity show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy definition create".
        /// Create a policy definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyDefinition")]
        public dynamic PolicyDefinitionCreate(PolicyDefinitionCreateSettings settings) {
            var baseCommand = "az policy definition create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--mode", settings.Mode);
            AppendIfNonNull(ref baseCommand, "--params", settings.Params);
            AppendIfNonNull(ref baseCommand, "--rules", settings.Rules);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy definition delete".
        /// Delete a policy definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyDefinition")]
        public dynamic PolicyDefinitionDelete(PolicyDefinitionDeleteSettings settings) {
            var baseCommand = "az policy definition delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy definition list".
        /// List policy definitions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyDefinition")]
        public dynamic PolicyDefinitionList(PolicyDefinitionListSettings settings) {
            var baseCommand = "az policy definition list";
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy definition show".
        /// Show a policy definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyDefinition")]
        public dynamic PolicyDefinitionShow(PolicyDefinitionShowSettings settings) {
            var baseCommand = "az policy definition show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy definition update".
        /// Update a policy definition.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyDefinition")]
        public dynamic PolicyDefinitionUpdate(PolicyDefinitionUpdateSettings settings) {
            var baseCommand = "az policy definition update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--mode", settings.Mode);
            AppendIfNonNull(ref baseCommand, "--params", settings.Params);
            AppendIfNonNull(ref baseCommand, "--rules", settings.Rules);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy event list".
        /// List policy events.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyEvent")]
        public dynamic PolicyEventList(PolicyEventListSettings settings) {
            var baseCommand = "az policy event list";
            AppendIfNonNull(ref baseCommand, "--apply", settings.Apply);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--from", settings.From);
            AppendIfNonNull(ref baseCommand, "--order-by", settings.OrderBy);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--to", settings.To);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--policy-assignment", settings.PolicyAssignment);
            AppendIfNonNull(ref baseCommand, "--policy-definition", settings.PolicyDefinition);
            AppendIfNonNull(ref baseCommand, "--policy-set-definition", settings.PolicySetDefinition);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy remediation cancel".
        /// Cancel a resource policy remediation.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyRemediation")]
        public dynamic PolicyRemediationCancel(PolicyRemediationCancelSettings settings) {
            var baseCommand = "az policy remediation cancel";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy remediation create".
        /// Create a resource policy remediation.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyRemediation")]
        public dynamic PolicyRemediationCreate(PolicyRemediationCreateSettings settings) {
            var baseCommand = "az policy remediation create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--policy-assignment", settings.PolicyAssignment);
            AppendIfNonNull(ref baseCommand, "--definition-reference-id", settings.DefinitionReferenceId);
            AppendIfNonNull(ref baseCommand, "--location-filters", settings.LocationFilters);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy remediation delete".
        /// Delete a resource policy remediation.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyRemediation")]
        public dynamic PolicyRemediationDelete(PolicyRemediationDeleteSettings settings) {
            var baseCommand = "az policy remediation delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy remediation list".
        /// List resource policy remediations.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyRemediation")]
        public dynamic PolicyRemediationList(PolicyRemediationListSettings settings) {
            var baseCommand = "az policy remediation list";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy remediation show".
        /// Show a resource policy remediation.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyRemediation")]
        public dynamic PolicyRemediationShow(PolicyRemediationShowSettings settings) {
            var baseCommand = "az policy remediation show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy remediation deployment list".
        /// Lists deployments for a resource policy remediation.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyRemediationDeployment")]
        public dynamic PolicyRemediationDeploymentList(PolicyRemediationDeploymentListSettings settings) {
            var baseCommand = "az policy remediation deployment list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy set-definition create".
        /// Create a policy set definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicySetDefinition")]
        public dynamic PolicySetDefinitionCreate(PolicySetDefinitionCreateSettings settings) {
            var baseCommand = "az policy set-definition create";
            AppendIfNonNull(ref baseCommand, "--definitions", settings.Definitions);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--params", settings.Params);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy set-definition delete".
        /// Delete a policy set definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicySetDefinition")]
        public dynamic PolicySetDefinitionDelete(PolicySetDefinitionDeleteSettings settings) {
            var baseCommand = "az policy set-definition delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy set-definition list".
        /// List policy set definitions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicySetDefinition")]
        public dynamic PolicySetDefinitionList(PolicySetDefinitionListSettings settings) {
            var baseCommand = "az policy set-definition list";
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy set-definition show".
        /// Show a policy set definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicySetDefinition")]
        public dynamic PolicySetDefinitionShow(PolicySetDefinitionShowSettings settings) {
            var baseCommand = "az policy set-definition show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy set-definition update".
        /// Update a policy set definition.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicySetDefinition")]
        public dynamic PolicySetDefinitionUpdate(PolicySetDefinitionUpdateSettings settings) {
            var baseCommand = "az policy set-definition update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--definitions", settings.Definitions);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--params", settings.Params);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy state list".
        /// List policy compliance states.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyState")]
        public dynamic PolicyStateList(PolicyStateListSettings settings) {
            var baseCommand = "az policy state list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--apply", settings.Apply);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--from", settings.From);
            AppendIfNonNull(ref baseCommand, "--order-by", settings.OrderBy);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--to", settings.To);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--policy-assignment", settings.PolicyAssignment);
            AppendIfNonNull(ref baseCommand, "--policy-definition", settings.PolicyDefinition);
            AppendIfNonNull(ref baseCommand, "--policy-set-definition", settings.PolicySetDefinition);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az policy state summarize".
        /// Summarize policy compliance states.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPolicyState")]
        public dynamic PolicyStateSummarize(PolicyStateSummarizeSettings settings) {
            var baseCommand = "az policy state summarize";
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--from", settings.From);
            AppendIfNonNull(ref baseCommand, "--to", settings.To);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--management-group", settings.ManagementGroup);
            AppendIfNonNull(ref baseCommand, "--policy-assignment", settings.PolicyAssignment);
            AppendIfNonNull(ref baseCommand, "--policy-definition", settings.PolicyDefinition);
            AppendIfNonNull(ref baseCommand, "--policy-set-definition", settings.PolicySetDefinition);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres db create".
        /// Create a PostgreSQL database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresDb")]
        public dynamic PostgresDbCreate(PostgresDbCreateSettings settings) {
            var baseCommand = "az postgres db create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--charset", settings.Charset);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres db delete".
        /// Delete a database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresDb")]
        public dynamic PostgresDbDelete(PostgresDbDeleteSettings settings) {
            var baseCommand = "az postgres db delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres db list".
        /// List the databases for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresDb")]
        public dynamic PostgresDbList(PostgresDbListSettings settings) {
            var baseCommand = "az postgres db list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres db show".
        /// Show the details of a database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresDb")]
        public dynamic PostgresDbShow(PostgresDbShowSettings settings) {
            var baseCommand = "az postgres db show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server create".
        /// Create a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public dynamic PostgresServerCreate(PostgresServerCreateSettings settings) {
            var baseCommand = "az postgres server create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--auto-grow", settings.AutoGrow);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--geo-redundant-backup", settings.GeoRedundantBackup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--ssl-enforcement", settings.SslEnforcement);
            AppendIfNonNull(ref baseCommand, "--storage-size", settings.StorageSize);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server delete".
        /// Delete a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public dynamic PostgresServerDelete(PostgresServerDeleteSettings settings) {
            var baseCommand = "az postgres server delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server georestore".
        /// Geo-restore a server from backup.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public dynamic PostgresServerGeorestore(PostgresServerGeorestoreSettings settings) {
            var baseCommand = "az postgres server georestore";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--geo-redundant-backup", settings.GeoRedundantBackup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server list".
        /// List available servers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public dynamic PostgresServerList(PostgresServerListSettings settings) {
            var baseCommand = "az postgres server list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server restart".
        /// Restart a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public dynamic PostgresServerRestart(PostgresServerRestartSettings settings) {
            var baseCommand = "az postgres server restart";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server restore".
        /// Restore a server from backup.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public dynamic PostgresServerRestore(PostgresServerRestoreSettings settings) {
            var baseCommand = "az postgres server restore";
            AppendIfNonNull(ref baseCommand, "--restore-point-in-time", settings.RestorePointInTime);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server show".
        /// Get the details of a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public dynamic PostgresServerShow(PostgresServerShowSettings settings) {
            var baseCommand = "az postgres server show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server update".
        /// Update a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public dynamic PostgresServerUpdate(PostgresServerUpdateSettings settings) {
            var baseCommand = "az postgres server update";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--auto-grow", settings.AutoGrow);
            AppendIfNonNull(ref baseCommand, "--backup-retention", settings.BackupRetention);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--ssl-enforcement", settings.SslEnforcement);
            AppendIfNonNull(ref baseCommand, "--storage-size", settings.StorageSize);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server wait".
        /// Wait for server to satisfy certain conditions.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServer")]
        public dynamic PostgresServerWait(PostgresServerWaitSettings settings) {
            var baseCommand = "az postgres server wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server configuration list".
        /// List the configuration values for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerConfiguration")]
        public dynamic PostgresServerConfigurationList(PostgresServerConfigurationListSettings settings) {
            var baseCommand = "az postgres server configuration list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server configuration set".
        /// Update the configuration of a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerConfiguration")]
        public dynamic PostgresServerConfigurationSet(PostgresServerConfigurationSetSettings settings) {
            var baseCommand = "az postgres server configuration set";
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server configuration show".
        /// Get the configuration for a server.".  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerConfiguration")]
        public dynamic PostgresServerConfigurationShow(PostgresServerConfigurationShowSettings settings) {
            var baseCommand = "az postgres server configuration show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server firewall-rule create".
        /// Create a new firewall rule for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerFirewallRule")]
        public dynamic PostgresServerFirewallRuleCreate(PostgresServerFirewallRuleCreateSettings settings) {
            var baseCommand = "az postgres server firewall-rule create";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server firewall-rule delete".
        /// Delete a firewall rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerFirewallRule")]
        public dynamic PostgresServerFirewallRuleDelete(PostgresServerFirewallRuleDeleteSettings settings) {
            var baseCommand = "az postgres server firewall-rule delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server firewall-rule list".
        /// List all firewall rules for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerFirewallRule")]
        public dynamic PostgresServerFirewallRuleList(PostgresServerFirewallRuleListSettings settings) {
            var baseCommand = "az postgres server firewall-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server firewall-rule show".
        /// Get the details of a firewall rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerFirewallRule")]
        public dynamic PostgresServerFirewallRuleShow(PostgresServerFirewallRuleShowSettings settings) {
            var baseCommand = "az postgres server firewall-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server firewall-rule update".
        /// Update a firewall rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerFirewallRule")]
        public dynamic PostgresServerFirewallRuleUpdate(PostgresServerFirewallRuleUpdateSettings settings) {
            var baseCommand = "az postgres server firewall-rule update";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server replica create".
        /// Create a read replica for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerReplica")]
        public dynamic PostgresServerReplicaCreate(PostgresServerReplicaCreateSettings settings) {
            var baseCommand = "az postgres server replica create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-server", settings.SourceServer);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku-name", settings.SkuName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server replica list".
        /// List all read replicas for a given server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerReplica")]
        public dynamic PostgresServerReplicaList(PostgresServerReplicaListSettings settings) {
            var baseCommand = "az postgres server replica list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server replica stop".
        /// Stop replication to a read replica and make it a read/write server.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerReplica")]
        public dynamic PostgresServerReplicaStop(PostgresServerReplicaStopSettings settings) {
            var baseCommand = "az postgres server replica stop";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server vnet-rule create".
        /// Create a virtual network rule to allows access to a PostgreSQL server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerVnetRule")]
        public dynamic PostgresServerVnetRuleCreate(PostgresServerVnetRuleCreateSettings settings) {
            var baseCommand = "az postgres server vnet-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server vnet-rule delete".
        /// Deletes the virtual network rule with the given name.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerVnetRule")]
        public dynamic PostgresServerVnetRuleDelete(PostgresServerVnetRuleDeleteSettings settings) {
            var baseCommand = "az postgres server vnet-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server vnet-rule list".
        /// Gets a list of virtual network rules in a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerVnetRule")]
        public dynamic PostgresServerVnetRuleList(PostgresServerVnetRuleListSettings settings) {
            var baseCommand = "az postgres server vnet-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server vnet-rule show".
        /// Gets a virtual network rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerVnetRule")]
        public dynamic PostgresServerVnetRuleShow(PostgresServerVnetRuleShowSettings settings) {
            var baseCommand = "az postgres server vnet-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server vnet-rule update".
        /// Update a virtual network rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerVnetRule")]
        public dynamic PostgresServerVnetRuleUpdate(PostgresServerVnetRuleUpdateSettings settings) {
            var baseCommand = "az postgres server vnet-rule update";
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server-logs download".
        /// Download log files.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerLogs")]
        public dynamic PostgresServerLogsDownload(PostgresServerLogsDownloadSettings settings) {
            var baseCommand = "az postgres server-logs download";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az postgres server-logs list".
        /// List log files for a server.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPostgresServerLogs")]
        public dynamic PostgresServerLogsList(PostgresServerLogsListSettings settings) {
            var baseCommand = "az postgres server-logs list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-name", settings.ServerName);
            AppendIfNonNull(ref baseCommand, "--file-last-written", settings.FileLastWritten);
            AppendIfNonNull(ref baseCommand, "--filename-contains", settings.FilenameContains);
            AppendIfNonNull(ref baseCommand, "--max-file-size", settings.MaxFileSize);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ppg create".
        /// Create a proximity placement group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPpg")]
        public dynamic PpgCreate(PpgCreateSettings settings) {
            var baseCommand = "az ppg create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ppg delete".
        /// Delete a proximity placement group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPpg")]
        public dynamic PpgDelete(PpgDeleteSettings settings) {
            var baseCommand = "az ppg delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ppg list".
        /// List proximity placement groups.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPpg")]
        public dynamic PpgList(PpgListSettings settings) {
            var baseCommand = "az ppg list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ppg show".
        /// Get a proximity placement group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPpg")]
        public dynamic PpgShow(PpgShowSettings settings) {
            var baseCommand = "az ppg show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--include-colocation-status", settings.IncludeColocationStatus);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az ppg update".
        /// Update a proximity placement group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzPpg")]
        public dynamic PpgUpdate(PpgUpdateSettings settings) {
            var baseCommand = "az ppg update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--include-colocation-status", settings.IncludeColocationStatus);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az provider list".
        /// Gets all resource providers for a subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzProvider")]
        public dynamic ProviderList(ProviderListSettings settings) {
            var baseCommand = "az provider list";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az provider register".
        /// Register a provider.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzProvider")]
        public dynamic ProviderRegister(ProviderRegisterSettings settings) {
            var baseCommand = "az provider register";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--wait", settings.Wait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az provider show".
        /// Gets the specified resource provider.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzProvider")]
        public dynamic ProviderShow(ProviderShowSettings settings) {
            var baseCommand = "az provider show";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az provider unregister".
        /// Unregister a provider.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzProvider")]
        public dynamic ProviderUnregister(ProviderUnregisterSettings settings) {
            var baseCommand = "az provider unregister";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--wait", settings.Wait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az provider operation list".
        /// Get operations from all providers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzProviderOperation")]
        public dynamic ProviderOperationList(ProviderOperationListSettings settings) {
            var baseCommand = "az provider operation list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az provider operation show".
        /// Get an individual provider's operations.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzProviderOperation")]
        public dynamic ProviderOperationShow(ProviderOperationShowSettings settings) {
            var baseCommand = "az provider operation show";
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis create".
        /// Create new Redis Cache instance.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public dynamic RedisCreate(RedisCreateSettings settings) {
            var baseCommand = "az redis create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--vm-size", settings.VmSize);
            AppendIfNonNull(ref baseCommand, "--enable-non-ssl-port", settings.EnableNonSslPort);
            AppendIfNonNull(ref baseCommand, "--minimum-tls-version", settings.MinimumTlsVersion);
            AppendIfNonNull(ref baseCommand, "--redis-configuration", settings.RedisConfiguration);
            AppendIfNonNull(ref baseCommand, "--shard-count", settings.ShardCount);
            AppendIfNonNull(ref baseCommand, "--static-ip", settings.StaticIp);
            AppendIfNonNull(ref baseCommand, "--subnet-id", settings.SubnetId);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--tenant-settings", settings.TenantSettings);
            AppendIfNonNull(ref baseCommand, "--zones", settings.Zones);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis delete".
        /// Deletes a Redis cache.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public dynamic RedisDelete(RedisDeleteSettings settings) {
            var baseCommand = "az redis delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis export".
        /// Export data stored in a Redis cache.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public dynamic RedisExport(RedisExportSettings settings) {
            var baseCommand = "az redis export";
            AppendIfNonNull(ref baseCommand, "--container", settings.Container);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--file-format", settings.FileFormat);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis force-reboot".
        /// Reboot specified Redis node(s).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public dynamic RedisForceReboot(RedisForceRebootSettings settings) {
            var baseCommand = "az redis force-reboot";
            AppendIfNonNull(ref baseCommand, "--reboot-type", settings.RebootType);
            AppendIfNonNull(ref baseCommand, "--shard-id", settings.ShardId);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis import".
        /// Import data into a Redis cache.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public dynamic RedisImport(RedisImportSettings settings) {
            var baseCommand = "az redis import";
            AppendIfNonNull(ref baseCommand, "--files", settings.Files);
            AppendIfNonNull(ref baseCommand, "--file-format", settings.FileFormat);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis list".
        /// List Redis Caches.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public dynamic RedisList(RedisListSettings settings) {
            var baseCommand = "az redis list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis list-keys".
        /// Retrieve a Redis cache's access keys.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public dynamic RedisListKeys(RedisListKeysSettings settings) {
            var baseCommand = "az redis list-keys";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis regenerate-keys".
        /// Regenerate Redis cache's access keys.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public dynamic RedisRegenerateKeys(RedisRegenerateKeysSettings settings) {
            var baseCommand = "az redis regenerate-keys";
            AppendIfNonNull(ref baseCommand, "--key-type", settings.KeyType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis show".
        /// Gets a Redis cache (resource description).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public dynamic RedisShow(RedisShowSettings settings) {
            var baseCommand = "az redis show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis update".
        /// Update a Redis cache.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedis")]
        public dynamic RedisUpdate(RedisUpdateSettings settings) {
            var baseCommand = "az redis update";
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--vm-size", settings.VmSize);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis firewall-rules create".
        /// Create a redis cache firewall rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisFirewallRules")]
        public dynamic RedisFirewallRulesCreate(RedisFirewallRulesCreateSettings settings) {
            var baseCommand = "az redis firewall-rules create";
            AppendIfNonNull(ref baseCommand, "--end-ip", settings.EndIp);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--start-ip", settings.StartIp);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis firewall-rules delete".
        /// Deletes a single firewall rule in a specified redis cache.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisFirewallRules")]
        public dynamic RedisFirewallRulesDelete(RedisFirewallRulesDeleteSettings settings) {
            var baseCommand = "az redis firewall-rules delete";
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis firewall-rules list".
        /// Gets all firewall rules in the specified redis cache.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisFirewallRules")]
        public dynamic RedisFirewallRulesList(RedisFirewallRulesListSettings settings) {
            var baseCommand = "az redis firewall-rules list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis firewall-rules show".
        /// Gets a single firewall rule in a specified redis cache.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisFirewallRules")]
        public dynamic RedisFirewallRulesShow(RedisFirewallRulesShowSettings settings) {
            var baseCommand = "az redis firewall-rules show";
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis firewall-rules update".
        /// Update a redis cache firewall rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisFirewallRules")]
        public dynamic RedisFirewallRulesUpdate(RedisFirewallRulesUpdateSettings settings) {
            var baseCommand = "az redis firewall-rules update";
            AppendIfNonNull(ref baseCommand, "--end-ip", settings.EndIp);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--start-ip", settings.StartIp);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis patch-schedule create".
        /// Create patching schedule for Redis cache.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisPatchSchedule")]
        public dynamic RedisPatchScheduleCreate(RedisPatchScheduleCreateSettings settings) {
            var baseCommand = "az redis patch-schedule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--schedule-entries", settings.ScheduleEntries);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis patch-schedule delete".
        /// Deletes the patching schedule of a redis cache (requires Premium SKU).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisPatchSchedule")]
        public dynamic RedisPatchScheduleDelete(RedisPatchScheduleDeleteSettings settings) {
            var baseCommand = "az redis patch-schedule delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis patch-schedule show".
        /// Gets the patching schedule of a redis cache (requires Premium SKU).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisPatchSchedule")]
        public dynamic RedisPatchScheduleShow(RedisPatchScheduleShowSettings settings) {
            var baseCommand = "az redis patch-schedule show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis patch-schedule update".
        /// Update the patching schedule for Redis cache.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisPatchSchedule")]
        public dynamic RedisPatchScheduleUpdate(RedisPatchScheduleUpdateSettings settings) {
            var baseCommand = "az redis patch-schedule update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--schedule-entries", settings.ScheduleEntries);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis server-link create".
        /// Adds a server link to the Redis cache (requires Premium SKU).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisServerLink")]
        public dynamic RedisServerLinkCreate(RedisServerLinkCreateSettings settings) {
            var baseCommand = "az redis server-link create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--replication-role", settings.ReplicationRole);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server-to-link", settings.ServerToLink);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis server-link delete".
        /// Deletes the linked server from a redis cache (requires Premium SKU).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisServerLink")]
        public dynamic RedisServerLinkDelete(RedisServerLinkDeleteSettings settings) {
            var baseCommand = "az redis server-link delete";
            AppendIfNonNull(ref baseCommand, "--linked-server-name", settings.LinkedServerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis server-link list".
        /// Gets the list of linked servers associated with this redis cache (requires Premium SKU).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisServerLink")]
        public dynamic RedisServerLinkList(RedisServerLinkListSettings settings) {
            var baseCommand = "az redis server-link list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az redis server-link show".
        /// Gets the detailed information about a linked server of a redis cache (requires Premium SKU).  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRedisServerLink")]
        public dynamic RedisServerLinkShow(RedisServerLinkShowSettings settings) {
            var baseCommand = "az redis server-link show";
            AppendIfNonNull(ref baseCommand, "--linked-server-name", settings.LinkedServerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay hyco create".
        /// Create the Relay Service Hybrid Connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHyco")]
        public dynamic RelayHycoCreate(RelayHycoCreateSettings settings) {
            var baseCommand = "az relay hyco create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--requires-client-authorization", settings.RequiresClientAuthorization);
            AppendIfNonNull(ref baseCommand, "--user-metadata", settings.UserMetadata);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay hyco delete".
        /// Deletes the Relay Service Hybrid Connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHyco")]
        public dynamic RelayHycoDelete(RelayHycoDeleteSettings settings) {
            var baseCommand = "az relay hyco delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay hyco list".
        /// List the Hybrid Connection by Relay Service Namepsace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHyco")]
        public dynamic RelayHycoList(RelayHycoListSettings settings) {
            var baseCommand = "az relay hyco list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay hyco show".
        /// Shows the Relay Service Hybrid Connection Details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHyco")]
        public dynamic RelayHycoShow(RelayHycoShowSettings settings) {
            var baseCommand = "az relay hyco show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay hyco update".
        /// Updates the Relay Service Hybrid Connection.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHyco")]
        public dynamic RelayHycoUpdate(RelayHycoUpdateSettings settings) {
            var baseCommand = "az relay hyco update";
            AppendIfNonNull(ref baseCommand, "--requires-client-authorization", settings.RequiresClientAuthorization);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--user-metadata", settings.UserMetadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay hyco authorization-rule create".
        /// Create Authorization Rule for given Relay Service Hybrid Connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRule")]
        public dynamic RelayHycoAuthorizationRuleCreate(RelayHycoAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az relay hyco authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay hyco authorization-rule delete".
        /// Deletes the Authorization Rule of the given Relay Service Hybrid Connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRule")]
        public dynamic RelayHycoAuthorizationRuleDelete(RelayHycoAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az relay hyco authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay hyco authorization-rule list".
        /// Shows list of Authorization Rule by Relay Service Hybrid Connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRule")]
        public dynamic RelayHycoAuthorizationRuleList(RelayHycoAuthorizationRuleListSettings settings) {
            var baseCommand = "az relay hyco authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay hyco authorization-rule show".
        /// Shows the details of Authorization Rule for given Relay Service Hybrid Connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRule")]
        public dynamic RelayHycoAuthorizationRuleShow(RelayHycoAuthorizationRuleShowSettings settings) {
            var baseCommand = "az relay hyco authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay hyco authorization-rule update".
        /// Create Authorization Rule for given Relay Service Hybrid Connection.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRule")]
        public dynamic RelayHycoAuthorizationRuleUpdate(RelayHycoAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az relay hyco authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay hyco authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for Relay Service Hybrid Connection.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRuleKeys")]
        public dynamic RelayHycoAuthorizationRuleKeysList(RelayHycoAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az relay hyco authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay hyco authorization-rule keys renew".
        /// Regenerate keys of Authorization Rule for Relay Service Hybrid Connection.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayHycoAuthorizationRuleKeys")]
        public dynamic RelayHycoAuthorizationRuleKeysRenew(RelayHycoAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az relay hyco authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--hybrid-connection-name", settings.HybridConnectionName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace create".
        /// Create a Relay Service Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespace")]
        public dynamic RelayNamespaceCreate(RelayNamespaceCreateSettings settings) {
            var baseCommand = "az relay namespace create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace delete".
        /// Deletes the Relay Service Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespace")]
        public dynamic RelayNamespaceDelete(RelayNamespaceDeleteSettings settings) {
            var baseCommand = "az relay namespace delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace exists".
        /// Check for the availability of the given name for the Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespace")]
        public dynamic RelayNamespaceExists(RelayNamespaceExistsSettings settings) {
            var baseCommand = "az relay namespace exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace list".
        /// List the Relay Service Namespaces.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespace")]
        public dynamic RelayNamespaceList(RelayNamespaceListSettings settings) {
            var baseCommand = "az relay namespace list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace show".
        /// Shows the Relay Service Namespace details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespace")]
        public dynamic RelayNamespaceShow(RelayNamespaceShowSettings settings) {
            var baseCommand = "az relay namespace show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace update".
        /// Updates a Relay Service Namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespace")]
        public dynamic RelayNamespaceUpdate(RelayNamespaceUpdateSettings settings) {
            var baseCommand = "az relay namespace update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace authorization-rule create".
        /// Create Authorization Rule for the given Relay Service Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRule")]
        public dynamic RelayNamespaceAuthorizationRuleCreate(RelayNamespaceAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az relay namespace authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace authorization-rule delete".
        /// Deletes the Authorization Rule of the Relay Service Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRule")]
        public dynamic RelayNamespaceAuthorizationRuleDelete(RelayNamespaceAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az relay namespace authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace authorization-rule list".
        /// Shows the list of Authorization Rule by Relay Service Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRule")]
        public dynamic RelayNamespaceAuthorizationRuleList(RelayNamespaceAuthorizationRuleListSettings settings) {
            var baseCommand = "az relay namespace authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace authorization-rule show".
        /// Shows the details of Relay Service Namespace Authorization Rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRule")]
        public dynamic RelayNamespaceAuthorizationRuleShow(RelayNamespaceAuthorizationRuleShowSettings settings) {
            var baseCommand = "az relay namespace authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace authorization-rule update".
        /// Updates Authorization Rule for the given Relay Service Namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRule")]
        public dynamic RelayNamespaceAuthorizationRuleUpdate(RelayNamespaceAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az relay namespace authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for Relay Service Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRuleKeys")]
        public dynamic RelayNamespaceAuthorizationRuleKeysList(RelayNamespaceAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az relay namespace authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay namespace authorization-rule keys renew".
        /// Regenerate keys of Authorization Rule for the Relay Service Namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayNamespaceAuthorizationRuleKeys")]
        public dynamic RelayNamespaceAuthorizationRuleKeysRenew(RelayNamespaceAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az relay namespace authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay wcfrelay create".
        /// Create the Relay Service WCF Relay.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelay")]
        public dynamic RelayWcfrelayCreate(RelayWcfrelayCreateSettings settings) {
            var baseCommand = "az relay wcfrelay create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-type", settings.RelayType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--requires-client-authorization", settings.RequiresClientAuthorization);
            AppendIfNonNull(ref baseCommand, "--requires-transport-security", settings.RequiresTransportSecurity);
            AppendIfNonNull(ref baseCommand, "--user-metadata", settings.UserMetadata);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay wcfrelay delete".
        /// Deletes the Relay Service WCF Relay.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelay")]
        public dynamic RelayWcfrelayDelete(RelayWcfrelayDeleteSettings settings) {
            var baseCommand = "az relay wcfrelay delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay wcfrelay list".
        /// List the WCF Relay by Relay Service Namepsace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelay")]
        public dynamic RelayWcfrelayList(RelayWcfrelayListSettings settings) {
            var baseCommand = "az relay wcfrelay list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay wcfrelay show".
        /// Shows the Relay Service WCF Relay Details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelay")]
        public dynamic RelayWcfrelayShow(RelayWcfrelayShowSettings settings) {
            var baseCommand = "az relay wcfrelay show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay wcfrelay update".
        /// Updates existing Relay Service WCF Relay.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelay")]
        public dynamic RelayWcfrelayUpdate(RelayWcfrelayUpdateSettings settings) {
            var baseCommand = "az relay wcfrelay update";
            AppendIfNonNull(ref baseCommand, "--relay-type", settings.RelayType);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--user-metadata", settings.UserMetadata);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule create".
        /// Create Authorization Rule for the given Relay Service WCF Relay.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRule")]
        public dynamic RelayWcfrelayAuthorizationRuleCreate(RelayWcfrelayAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule delete".
        /// Delete the Authorization Rule of Relay Service WCF Relay.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRule")]
        public dynamic RelayWcfrelayAuthorizationRuleDelete(RelayWcfrelayAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule list".
        /// List of Authorization Rule by Relay Service WCF Relay.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRule")]
        public dynamic RelayWcfrelayAuthorizationRuleList(RelayWcfrelayAuthorizationRuleListSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule show".
        /// Show properties of Authorization Rule for the given Relay Service WCF Relay.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRule")]
        public dynamic RelayWcfrelayAuthorizationRuleShow(RelayWcfrelayAuthorizationRuleShowSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule update".
        /// Update Authorization Rule for the given Relay Service WCF Relay.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRule")]
        public dynamic RelayWcfrelayAuthorizationRuleUpdate(RelayWcfrelayAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for the given Relay Service WCF Relay.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRuleKeys")]
        public dynamic RelayWcfrelayAuthorizationRuleKeysList(RelayWcfrelayAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az relay wcfrelay authorization-rule keys renew".
        /// Regenerate keys of Authorization Rule for Relay Service WCF Relay.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRelayWcfrelayAuthorizationRuleKeys")]
        public dynamic RelayWcfrelayAuthorizationRuleKeysRenew(RelayWcfrelayAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az relay wcfrelay authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--relay-name", settings.RelayName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az reservations catalog show".
        /// Get catalog of available reservation.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsCatalog")]
        public dynamic ReservationsCatalogShow(ReservationsCatalogShowSettings settings) {
            var baseCommand = "az reservations catalog show";
            AppendIfNonNull(ref baseCommand, "--reserved-resource-type", settings.ReservedResourceType);
            AppendIfNonNull(ref baseCommand, "--subscription-id", settings.SubscriptionId);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az reservations reservation list".
        /// Get all reservations.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservation")]
        public dynamic ReservationsReservationList(ReservationsReservationListSettings settings) {
            var baseCommand = "az reservations reservation list";
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az reservations reservation list-history".
        /// Get history of a reservation.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservation")]
        public dynamic ReservationsReservationListHistory(ReservationsReservationListHistorySettings settings) {
            var baseCommand = "az reservations reservation list-history";
            AppendIfNonNull(ref baseCommand, "--reservation-id", settings.ReservationId);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az reservations reservation merge".
        /// Merge two reservations.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservation")]
        public dynamic ReservationsReservationMerge(ReservationsReservationMergeSettings settings) {
            var baseCommand = "az reservations reservation merge";
            AppendIfNonNull(ref baseCommand, "--reservation-id-1", settings.ReservationId1);
            AppendIfNonNull(ref baseCommand, "--reservation-id-2", settings.ReservationId2);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az reservations reservation show".
        /// Get details of a reservation.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservation")]
        public dynamic ReservationsReservationShow(ReservationsReservationShowSettings settings) {
            var baseCommand = "az reservations reservation show";
            AppendIfNonNull(ref baseCommand, "--reservation-id", settings.ReservationId);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az reservations reservation split".
        /// Split a reservation.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservation")]
        public dynamic ReservationsReservationSplit(ReservationsReservationSplitSettings settings) {
            var baseCommand = "az reservations reservation split";
            AppendIfNonNull(ref baseCommand, "--quantity-1", settings.Quantity1);
            AppendIfNonNull(ref baseCommand, "--quantity-2", settings.Quantity2);
            AppendIfNonNull(ref baseCommand, "--reservation-id", settings.ReservationId);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az reservations reservation update".
        /// Updates the applied scopes of the reservation.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservation")]
        public dynamic ReservationsReservationUpdate(ReservationsReservationUpdateSettings settings) {
            var baseCommand = "az reservations reservation update";
            AppendIfNonNull(ref baseCommand, "--applied-scope-type", settings.AppliedScopeType);
            AppendIfNonNull(ref baseCommand, "--reservation-id", settings.ReservationId);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--applied-scopes", settings.AppliedScopes);
            AppendIfNonNull(ref baseCommand, "--instance-flexibility", settings.InstanceFlexibility);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az reservations reservation-order calculate".
        /// Calculate price for a reservation order.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservationOrder")]
        public dynamic ReservationsReservationOrderCalculate(ReservationsReservationOrderCalculateSettings settings) {
            var baseCommand = "az reservations reservation-order calculate";
            AppendIfNonNull(ref baseCommand, "--applied-scope-type", settings.AppliedScopeType);
            AppendIfNonNull(ref baseCommand, "--billing-scope", settings.BillingScope);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--quantity", settings.Quantity);
            AppendIfNonNull(ref baseCommand, "--reserved-resource-type", settings.ReservedResourceType);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--term", settings.Term);
            AppendIfNonNull(ref baseCommand, "--applied-scope", settings.AppliedScope);
            AppendIfNonNull(ref baseCommand, "--billing-plan", settings.BillingPlan);
            AppendIfNonNull(ref baseCommand, "--instance-flexibility", settings.InstanceFlexibility);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--renew", settings.Renew);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az reservations reservation-order list".
        /// Get all reservation orders.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservationOrder")]
        public dynamic ReservationsReservationOrderList(ReservationsReservationOrderListSettings settings) {
            var baseCommand = "az reservations reservation-order list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az reservations reservation-order purchase".
        /// Purchase reservation order.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservationOrder")]
        public dynamic ReservationsReservationOrderPurchase(ReservationsReservationOrderPurchaseSettings settings) {
            var baseCommand = "az reservations reservation-order purchase";
            AppendIfNonNull(ref baseCommand, "--applied-scope-type", settings.AppliedScopeType);
            AppendIfNonNull(ref baseCommand, "--billing-scope", settings.BillingScope);
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--quantity", settings.Quantity);
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--reserved-resource-type", settings.ReservedResourceType);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--term", settings.Term);
            AppendIfNonNull(ref baseCommand, "--applied-scope", settings.AppliedScope);
            AppendIfNonNull(ref baseCommand, "--billing-plan", settings.BillingPlan);
            AppendIfNonNull(ref baseCommand, "--instance-flexibility", settings.InstanceFlexibility);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--renew", settings.Renew);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az reservations reservation-order show".
        /// Get a specific reservation order.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservationOrder")]
        public dynamic ReservationsReservationOrderShow(ReservationsReservationOrderShowSettings settings) {
            var baseCommand = "az reservations reservation-order show";
            AppendIfNonNull(ref baseCommand, "--reservation-order-id", settings.ReservationOrderId);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az reservations reservation-order-id list".
        /// Get list of applicable reservation order ids.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzReservationsReservationOrderId")]
        public dynamic ReservationsReservationOrderIdList(ReservationsReservationOrderIdListSettings settings) {
            var baseCommand = "az reservations reservation-order-id list";
            AppendIfNonNull(ref baseCommand, "--subscription-id", settings.SubscriptionId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource create".
        /// Create a resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public dynamic ResourceCreate(ResourceCreateSettings settings) {
            var baseCommand = "az resource create";
            AppendIfNonNull(ref baseCommand, "--properties", settings.Properties);
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--is-full-object", settings.IsFullObject);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource delete".
        /// Delete a resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public dynamic ResourceDelete(ResourceDeleteSettings settings) {
            var baseCommand = "az resource delete";
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource invoke-action".
        /// Invoke an action on the resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public dynamic ResourceInvokeAction(ResourceInvokeActionSettings settings) {
            var baseCommand = "az resource invoke-action";
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--request-body", settings.RequestBody);
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource list".
        /// List resources.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public dynamic ResourceList(ResourceListSettings settings) {
            var baseCommand = "az resource list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tag", settings.Tag);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource move".
        /// Moves resources from one resource group to another(can be under different subscription).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public dynamic ResourceMove(ResourceMoveSettings settings) {
            var baseCommand = "az resource move";
            AppendIfNonNull(ref baseCommand, "--destination-group", settings.DestinationGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--destination-subscription-id", settings.DestinationSubscriptionId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource show".
        /// Get the details of a resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public dynamic ResourceShow(ResourceShowSettings settings) {
            var baseCommand = "az resource show";
            AppendIfNonNull(ref baseCommand, "--include-response-body", settings.IncludeResponseBody);
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource tag".
        /// Tag a resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public dynamic ResourceTag(ResourceTagSettings settings) {
            var baseCommand = "az resource tag";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource update".
        /// Update a resource.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public dynamic ResourceUpdate(ResourceUpdateSettings settings) {
            var baseCommand = "az resource update";
            AppendIfNonNull(ref baseCommand, "--include-response-body", settings.IncludeResponseBody);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource wait".
        /// Place the CLI in a waiting state until a condition of a resources is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResource")]
        public dynamic ResourceWait(ResourceWaitSettings settings) {
            var baseCommand = "az resource wait";
            AppendIfNonNull(ref baseCommand, "--include-response-body", settings.IncludeResponseBody);
            AppendIfNonNull(ref baseCommand, "--api-version", settings.ApiVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource link create".
        /// Create a new link between resources.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLink")]
        public dynamic ResourceLinkCreate(ResourceLinkCreateSettings settings) {
            var baseCommand = "az resource link create";
            AppendIfNonNull(ref baseCommand, "--link", settings.Link);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource link delete".
        /// Delete a link between resources.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLink")]
        public dynamic ResourceLinkDelete(ResourceLinkDeleteSettings settings) {
            var baseCommand = "az resource link delete";
            AppendIfNonNull(ref baseCommand, "--link", settings.Link);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource link list".
        /// List resource links.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLink")]
        public dynamic ResourceLinkList(ResourceLinkListSettings settings) {
            var baseCommand = "az resource link list";
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource link show".
        /// Gets a resource link with the specified ID.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLink")]
        public dynamic ResourceLinkShow(ResourceLinkShowSettings settings) {
            var baseCommand = "az resource link show";
            AppendIfNonNull(ref baseCommand, "--link", settings.Link);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource link update".
        /// Update link between resources.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLink")]
        public dynamic ResourceLinkUpdate(ResourceLinkUpdateSettings settings) {
            var baseCommand = "az resource link update";
            AppendIfNonNull(ref baseCommand, "--link", settings.Link);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--target", settings.Target);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource lock create".
        /// Create a resource-level lock.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLock")]
        public dynamic ResourceLockCreate(ResourceLockCreateSettings settings) {
            var baseCommand = "az resource lock create";
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource lock delete".
        /// Delete a resource-level lock.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLock")]
        public dynamic ResourceLockDelete(ResourceLockDeleteSettings settings) {
            var baseCommand = "az resource lock delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource lock list".
        /// List lock information in the resource-level.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLock")]
        public dynamic ResourceLockList(ResourceLockListSettings settings) {
            var baseCommand = "az resource lock list";
            AppendIfNonNull(ref baseCommand, "--filter-string", settings.FilterString);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource lock show".
        /// Show the details of a resource-level lock.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLock")]
        public dynamic ResourceLockShow(ResourceLockShowSettings settings) {
            var baseCommand = "az resource lock show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az resource lock update".
        /// Update a resource-level lock.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzResourceLock")]
        public dynamic ResourceLockUpdate(ResourceLockUpdateSettings settings) {
            var baseCommand = "az resource lock update";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--lock-type", settings.LockType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--notes", settings.Notes);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--parent", settings.Parent);
            AppendIfNonNull(ref baseCommand, "--resource", settings.Resource);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az role assignment create".
        /// Create a new role assignment for a user, group, or service principal.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleAssignment")]
        public dynamic RoleAssignmentCreate(RoleAssignmentCreateSettings settings) {
            var baseCommand = "az role assignment create";
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--assignee", settings.Assignee);
            AppendIfNonNull(ref baseCommand, "--assignee-object-id", settings.AssigneeObjectId);
            AppendIfNonNull(ref baseCommand, "--assignee-principal-type", settings.AssigneePrincipalType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az role assignment delete".
        /// Delete role assignments.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleAssignment")]
        public dynamic RoleAssignmentDelete(RoleAssignmentDeleteSettings settings) {
            var baseCommand = "az role assignment delete";
            AppendIfNonNull(ref baseCommand, "--assignee", settings.Assignee);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--include-inherited", settings.IncludeInherited);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az role assignment list".
        /// List role assignments.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleAssignment")]
        public dynamic RoleAssignmentList(RoleAssignmentListSettings settings) {
            var baseCommand = "az role assignment list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--assignee", settings.Assignee);
            AppendIfNonNull(ref baseCommand, "--include-classic-administrators", settings.IncludeClassicAdministrators);
            AppendIfNonNull(ref baseCommand, "--include-groups", settings.IncludeGroups);
            AppendIfNonNull(ref baseCommand, "--include-inherited", settings.IncludeInherited);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az role assignment list-changelogs".
        /// List changelogs for role assignments.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleAssignment")]
        public dynamic RoleAssignmentListChangelogs(RoleAssignmentListChangelogsSettings settings) {
            var baseCommand = "az role assignment list-changelogs";
            AppendIfNonNull(ref baseCommand, "--end-time", settings.EndTime);
            AppendIfNonNull(ref baseCommand, "--start-time", settings.StartTime);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az role definition create".
        /// Create a custom role definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleDefinition")]
        public dynamic RoleDefinitionCreate(RoleDefinitionCreateSettings settings) {
            var baseCommand = "az role definition create";
            AppendIfNonNull(ref baseCommand, "--role-definition", settings.RoleDefinition);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az role definition delete".
        /// Delete a role definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleDefinition")]
        public dynamic RoleDefinitionDelete(RoleDefinitionDeleteSettings settings) {
            var baseCommand = "az role definition delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--custom-role-only", settings.CustomRoleOnly);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az role definition list".
        /// List role definitions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleDefinition")]
        public dynamic RoleDefinitionList(RoleDefinitionListSettings settings) {
            var baseCommand = "az role definition list";
            AppendIfNonNull(ref baseCommand, "--custom-role-only", settings.CustomRoleOnly);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az role definition update".
        /// Update a role definition.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzRoleDefinition")]
        public dynamic RoleDefinitionUpdate(RoleDefinitionUpdateSettings settings) {
            var baseCommand = "az role definition update";
            AppendIfNonNull(ref baseCommand, "--role-definition", settings.RoleDefinition);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az search admin-key renew".
        /// Regenerates either the primary or secondary admin API key.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchAdminKey")]
        public dynamic SearchAdminKeyRenew(SearchAdminKeyRenewSettings settings) {
            var baseCommand = "az search admin-key renew";
            AppendIfNonNull(ref baseCommand, "--key-kind", settings.KeyKind);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az search admin-key show".
        /// Gets the primary and secondary admin API keys for the specified Azure Search service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchAdminKey")]
        public dynamic SearchAdminKeyShow(SearchAdminKeyShowSettings settings) {
            var baseCommand = "az search admin-key show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az search query-key create".
        /// Generates a new query key for the specified Search service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchQueryKey")]
        public dynamic SearchQueryKeyCreate(SearchQueryKeyCreateSettings settings) {
            var baseCommand = "az search query-key create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az search query-key delete".
        /// Deletes the specified query key.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchQueryKey")]
        public dynamic SearchQueryKeyDelete(SearchQueryKeyDeleteSettings settings) {
            var baseCommand = "az search query-key delete";
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az search query-key list".
        /// Returns the list of query API keys for the given Azure Search service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchQueryKey")]
        public dynamic SearchQueryKeyList(SearchQueryKeyListSettings settings) {
            var baseCommand = "az search query-key list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--service-name", settings.ServiceName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az search service create".
        /// Creates a Search service in the given resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchService")]
        public dynamic SearchServiceCreate(SearchServiceCreateSettings settings) {
            var baseCommand = "az search service create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--partition-count", settings.PartitionCount);
            AppendIfNonNull(ref baseCommand, "--replica-count", settings.ReplicaCount);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az search service delete".
        /// Deletes a Search service in the given resource group, along with its associated resources.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchService")]
        public dynamic SearchServiceDelete(SearchServiceDeleteSettings settings) {
            var baseCommand = "az search service delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az search service list".
        /// Gets a list of all Search services in the given resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchService")]
        public dynamic SearchServiceList(SearchServiceListSettings settings) {
            var baseCommand = "az search service list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az search service show".
        /// Gets the Search service with the given name in the given resource group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchService")]
        public dynamic SearchServiceShow(SearchServiceShowSettings settings) {
            var baseCommand = "az search service show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az search service update".
        /// Update partition and replica of the given search service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSearchService")]
        public dynamic SearchServiceUpdate(SearchServiceUpdateSettings settings) {
            var baseCommand = "az search service update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--partition-count", settings.PartitionCount);
            AppendIfNonNull(ref baseCommand, "--replica-count", settings.ReplicaCount);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security alert list".
        /// List security alerts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityAlert")]
        public dynamic SecurityAlertList(SecurityAlertListSettings settings) {
            var baseCommand = "az security alert list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security alert show".
        /// Shows a security alert.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityAlert")]
        public dynamic SecurityAlertShow(SecurityAlertShowSettings settings) {
            var baseCommand = "az security alert show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security alert update".
        /// Updates a security alert status.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityAlert")]
        public dynamic SecurityAlertUpdate(SecurityAlertUpdateSettings settings) {
            var baseCommand = "az security alert update";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security auto-provisioning-setting list".
        /// List the auto provisioning settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityAutoProvisioningSetting")]
        public dynamic SecurityAutoProvisioningSettingList(SecurityAutoProvisioningSettingListSettings settings) {
            var baseCommand = "az security auto-provisioning-setting list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security auto-provisioning-setting show".
        /// Shows an auto provisioning setting.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityAutoProvisioningSetting")]
        public dynamic SecurityAutoProvisioningSettingShow(SecurityAutoProvisioningSettingShowSettings settings) {
            var baseCommand = "az security auto-provisioning-setting show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security auto-provisioning-setting update".
        /// Updates your automatic provisioning settings on the subscription.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityAutoProvisioningSetting")]
        public dynamic SecurityAutoProvisioningSettingUpdate(SecurityAutoProvisioningSettingUpdateSettings settings) {
            var baseCommand = "az security auto-provisioning-setting update";
            AppendIfNonNull(ref baseCommand, "--auto-provision", settings.AutoProvision);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security contact create".
        /// Creates a security contact.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityContact")]
        public dynamic SecurityContactCreate(SecurityContactCreateSettings settings) {
            var baseCommand = "az security contact create";
            AppendIfNonNull(ref baseCommand, "--email", settings.Email);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--alert-notifications", settings.AlertNotifications);
            AppendIfNonNull(ref baseCommand, "--alerts-admins", settings.AlertsAdmins);
            AppendIfNonNull(ref baseCommand, "--phone", settings.Phone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security contact delete".
        /// Deletes a security contact.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityContact")]
        public dynamic SecurityContactDelete(SecurityContactDeleteSettings settings) {
            var baseCommand = "az security contact delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security contact list".
        /// List security contact.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityContact")]
        public dynamic SecurityContactList(SecurityContactListSettings settings) {
            var baseCommand = "az security contact list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security contact show".
        /// Shows a security contact.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityContact")]
        public dynamic SecurityContactShow(SecurityContactShowSettings settings) {
            var baseCommand = "az security contact show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security discovered-security-solution list".
        /// List the discovered security solutions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityDiscoveredSecuritySolution")]
        public dynamic SecurityDiscoveredSecuritySolutionList(SecurityDiscoveredSecuritySolutionListSettings settings) {
            var baseCommand = "az security discovered-security-solution list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security discovered-security-solution show".
        /// Shows a discovered security solution.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityDiscoveredSecuritySolution")]
        public dynamic SecurityDiscoveredSecuritySolutionShow(SecurityDiscoveredSecuritySolutionShowSettings settings) {
            var baseCommand = "az security discovered-security-solution show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security external-security-solution list".
        /// List the external security solutions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityExternalSecuritySolution")]
        public dynamic SecurityExternalSecuritySolutionList(SecurityExternalSecuritySolutionListSettings settings) {
            var baseCommand = "az security external-security-solution list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security external-security-solution show".
        /// Shows an external security solution.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityExternalSecuritySolution")]
        public dynamic SecurityExternalSecuritySolutionShow(SecurityExternalSecuritySolutionShowSettings settings) {
            var baseCommand = "az security external-security-solution show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security jit-policy list".
        /// List your Just in Time network access policies.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityJitPolicy")]
        public dynamic SecurityJitPolicyList(SecurityJitPolicyListSettings settings) {
            var baseCommand = "az security jit-policy list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security jit-policy show".
        /// Shows a Just in Time network access policy.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityJitPolicy")]
        public dynamic SecurityJitPolicyShow(SecurityJitPolicyShowSettings settings) {
            var baseCommand = "az security jit-policy show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security location list".
        /// Shows the Azure Security Center Home region location.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityLocation")]
        public dynamic SecurityLocationList(SecurityLocationListSettings settings) {
            var baseCommand = "az security location list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security location show".
        /// Shows the Azure Security Center Home region location.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityLocation")]
        public dynamic SecurityLocationShow(SecurityLocationShowSettings settings) {
            var baseCommand = "az security location show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security pricing create".
        /// Updates the Azure Security Center Pricing tier for the subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityPricing")]
        public dynamic SecurityPricingCreate(SecurityPricingCreateSettings settings) {
            var baseCommand = "az security pricing create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security pricing list".
        /// Shows the Azure Security Center Pricing tier for the subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityPricing")]
        public dynamic SecurityPricingList(SecurityPricingListSettings settings) {
            var baseCommand = "az security pricing list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security pricing show".
        /// Shows the Azure Security Center Pricing tier for the subscription.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityPricing")]
        public dynamic SecurityPricingShow(SecurityPricingShowSettings settings) {
            var baseCommand = "az security pricing show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security setting list".
        /// List security settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecuritySetting")]
        public dynamic SecuritySettingList(SecuritySettingListSettings settings) {
            var baseCommand = "az security setting list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security setting show".
        /// Shows a security setting.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecuritySetting")]
        public dynamic SecuritySettingShow(SecuritySettingShowSettings settings) {
            var baseCommand = "az security setting show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security task list".
        /// List security tasks (recommendations).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityTask")]
        public dynamic SecurityTaskList(SecurityTaskListSettings settings) {
            var baseCommand = "az security task list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security task show".
        /// Shows a security task (recommendation).  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityTask")]
        public dynamic SecurityTaskShow(SecurityTaskShowSettings settings) {
            var baseCommand = "az security task show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security topology list".
        /// Shows the network topology in your subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityTopology")]
        public dynamic SecurityTopologyList(SecurityTopologyListSettings settings) {
            var baseCommand = "az security topology list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security topology show".
        /// Shows the network topology in your subscription.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityTopology")]
        public dynamic SecurityTopologyShow(SecurityTopologyShowSettings settings) {
            var baseCommand = "az security topology show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security workspace-setting create".
        /// Creates a workspace settings in your subscription - these settings let you control which workspace will hold your security data.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityWorkspaceSetting")]
        public dynamic SecurityWorkspaceSettingCreate(SecurityWorkspaceSettingCreateSettings settings) {
            var baseCommand = "az security workspace-setting create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--target-workspace", settings.TargetWorkspace);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security workspace-setting delete".
        /// Deletes the workspace settings in your subscription - this will make the security events on the subscription be reported to the default workspace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityWorkspaceSetting")]
        public dynamic SecurityWorkspaceSettingDelete(SecurityWorkspaceSettingDeleteSettings settings) {
            var baseCommand = "az security workspace-setting delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security workspace-setting list".
        /// Shows the workspace settings in your subscription - these settings let you control which workspace will hold your security data.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityWorkspaceSetting")]
        public dynamic SecurityWorkspaceSettingList(SecurityWorkspaceSettingListSettings settings) {
            var baseCommand = "az security workspace-setting list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az security workspace-setting show".
        /// Shows the workspace settings in your subscription - these settings let you control which workspace will hold your security data.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSecurityWorkspaceSetting")]
        public dynamic SecurityWorkspaceSettingShow(SecurityWorkspaceSettingShowSettings settings) {
            var baseCommand = "az security workspace-setting show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus georecovery-alias break-pair".
        /// Disables Service Bus Geo-Disaster Recovery Configuration Alias and stops replicating changes from primary to secondary namespaces.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public dynamic ServicebusGeorecoveryAliasBreakPair(ServicebusGeorecoveryAliasBreakPairSettings settings) {
            var baseCommand = "az servicebus georecovery-alias break-pair";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus georecovery-alias delete".
        /// Deletes Service Bus Geo-Disaster Recovery Configuration Alias request accepted.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public dynamic ServicebusGeorecoveryAliasDelete(ServicebusGeorecoveryAliasDeleteSettings settings) {
            var baseCommand = "az servicebus georecovery-alias delete";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus georecovery-alias exists".
        /// Check if Geo Recovery Alias Name is available.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public dynamic ServicebusGeorecoveryAliasExists(ServicebusGeorecoveryAliasExistsSettings settings) {
            var baseCommand = "az servicebus georecovery-alias exists";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus georecovery-alias fail-over".
        /// Invokes Service Bus Geo-Disaster Recovery Configuration Alias failover and re-configure the alias to point to the secondary namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public dynamic ServicebusGeorecoveryAliasFailOver(ServicebusGeorecoveryAliasFailOverSettings settings) {
            var baseCommand = "az servicebus georecovery-alias fail-over";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus georecovery-alias list".
        /// Gets all Alias(Disaster Recovery configurations).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public dynamic ServicebusGeorecoveryAliasList(ServicebusGeorecoveryAliasListSettings settings) {
            var baseCommand = "az servicebus georecovery-alias list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus georecovery-alias set".
        /// Sets Service Bus Geo-Disaster Recovery Configuration Alias for the give Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public dynamic ServicebusGeorecoveryAliasSet(ServicebusGeorecoveryAliasSetSettings settings) {
            var baseCommand = "az servicebus georecovery-alias set";
            AppendIfNonNull(ref baseCommand, "--partner-namespace", settings.PartnerNamespace);
            AppendIfNonNull(ref baseCommand, "--alternate-name", settings.AlternateName);
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus georecovery-alias show".
        /// Shows properties of Service Bus Geo-Disaster Recovery Configuration Alias for Primay/Secondary Namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAlias")]
        public dynamic ServicebusGeorecoveryAliasShow(ServicebusGeorecoveryAliasShowSettings settings) {
            var baseCommand = "az servicebus georecovery-alias show";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus georecovery-alias authorization-rule list".
        /// Shows the list of Authorization Rule by Service Bus Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAliasAuthorizationRule")]
        public dynamic ServicebusGeorecoveryAliasAuthorizationRuleList(ServicebusGeorecoveryAliasAuthorizationRuleListSettings settings) {
            var baseCommand = "az servicebus georecovery-alias authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus georecovery-alias authorization-rule show".
        /// Gets an authorization rule for a namespace by rule name.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAliasAuthorizationRule")]
        public dynamic ServicebusGeorecoveryAliasAuthorizationRuleShow(ServicebusGeorecoveryAliasAuthorizationRuleShowSettings settings) {
            var baseCommand = "az servicebus georecovery-alias authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus georecovery-alias authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for the Service Bus Namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusGeorecoveryAliasAuthorizationRuleKeys")]
        public dynamic ServicebusGeorecoveryAliasAuthorizationRuleKeysList(ServicebusGeorecoveryAliasAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az servicebus georecovery-alias authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--alias", settings.Alias);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus migration abort".
        /// Disable the Service Bus Migration of Standard to Premium namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusMigration")]
        public dynamic ServicebusMigrationAbort(ServicebusMigrationAbortSettings settings) {
            var baseCommand = "az servicebus migration abort";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus migration complete".
        /// Completes the Service Bus Migration of Standard to Premium namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusMigration")]
        public dynamic ServicebusMigrationComplete(ServicebusMigrationCompleteSettings settings) {
            var baseCommand = "az servicebus migration complete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus migration show".
        /// Shows properties of properties of Service Bus Migration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusMigration")]
        public dynamic ServicebusMigrationShow(ServicebusMigrationShowSettings settings) {
            var baseCommand = "az servicebus migration show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus migration start".
        /// Create and Start Service Bus Migration of Standard to Premium namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusMigration")]
        public dynamic ServicebusMigrationStart(ServicebusMigrationStartSettings settings) {
            var baseCommand = "az servicebus migration start";
            AppendIfNonNull(ref baseCommand, "--post-migration-name", settings.PostMigrationName);
            AppendIfNonNull(ref baseCommand, "--target-namespace", settings.TargetNamespace);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace create".
        /// Create a Service Bus Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespace")]
        public dynamic ServicebusNamespaceCreate(ServicebusNamespaceCreateSettings settings) {
            var baseCommand = "az servicebus namespace create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace delete".
        /// Deletes the Service Bus Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespace")]
        public dynamic ServicebusNamespaceDelete(ServicebusNamespaceDeleteSettings settings) {
            var baseCommand = "az servicebus namespace delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace exists".
        /// Check for the availability of the given name for the Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespace")]
        public dynamic ServicebusNamespaceExists(ServicebusNamespaceExistsSettings settings) {
            var baseCommand = "az servicebus namespace exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace list".
        /// List the Service Bus Namespaces.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespace")]
        public dynamic ServicebusNamespaceList(ServicebusNamespaceListSettings settings) {
            var baseCommand = "az servicebus namespace list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace show".
        /// Shows the Service Bus Namespace details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespace")]
        public dynamic ServicebusNamespaceShow(ServicebusNamespaceShowSettings settings) {
            var baseCommand = "az servicebus namespace show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace update".
        /// Updates a Service Bus Namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespace")]
        public dynamic ServicebusNamespaceUpdate(ServicebusNamespaceUpdateSettings settings) {
            var baseCommand = "az servicebus namespace update";
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule create".
        /// Create Authorization Rule for the given Service Bus Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRule")]
        public dynamic ServicebusNamespaceAuthorizationRuleCreate(ServicebusNamespaceAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule delete".
        /// Deletes the Authorization Rule of the Service Bus Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRule")]
        public dynamic ServicebusNamespaceAuthorizationRuleDelete(ServicebusNamespaceAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule list".
        /// Shows the list of Authorization Rule by Service Bus Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRule")]
        public dynamic ServicebusNamespaceAuthorizationRuleList(ServicebusNamespaceAuthorizationRuleListSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule show".
        /// Shows the details of Service Bus Namespace Authorization Rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRule")]
        public dynamic ServicebusNamespaceAuthorizationRuleShow(ServicebusNamespaceAuthorizationRuleShowSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule update".
        /// Updates Authorization Rule for the given Service Bus Namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRule")]
        public dynamic ServicebusNamespaceAuthorizationRuleUpdate(ServicebusNamespaceAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for Service Bus Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRuleKeys")]
        public dynamic ServicebusNamespaceAuthorizationRuleKeysList(ServicebusNamespaceAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace authorization-rule keys renew".
        /// Regenerate keys of Authorization Rule for the Service Bus Namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceAuthorizationRuleKeys")]
        public dynamic ServicebusNamespaceAuthorizationRuleKeysRenew(ServicebusNamespaceAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az servicebus namespace authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace network-rule add".
        /// Add a network rule for a namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceNetworkRule")]
        public dynamic ServicebusNamespaceNetworkRuleAdd(ServicebusNamespaceNetworkRuleAddSettings settings) {
            var baseCommand = "az servicebus namespace network-rule add";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace network-rule list".
        /// Show properties of Network rule of the given Namespace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceNetworkRule")]
        public dynamic ServicebusNamespaceNetworkRuleList(ServicebusNamespaceNetworkRuleListSettings settings) {
            var baseCommand = "az servicebus namespace network-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus namespace network-rule remove".
        /// Remove network rule for a namespace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusNamespaceNetworkRule")]
        public dynamic ServicebusNamespaceNetworkRuleRemove(ServicebusNamespaceNetworkRuleRemoveSettings settings) {
            var baseCommand = "az servicebus namespace network-rule remove";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus queue create".
        /// Create the Service Bus Queue.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueue")]
        public dynamic ServicebusQueueCreate(ServicebusQueueCreateSettings settings) {
            var baseCommand = "az servicebus queue create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--auto-delete-on-idle", settings.AutoDeleteOnIdle);
            AppendIfNonNull(ref baseCommand, "--default-message-time-to-live", settings.DefaultMessageTimeToLive);
            AppendIfNonNull(ref baseCommand, "--duplicate-detection-history-time-window", settings.DuplicateDetectionHistoryTimeWindow);
            AppendIfNonNull(ref baseCommand, "--enable-batched-operations", settings.EnableBatchedOperations);
            AppendIfNonNull(ref baseCommand, "--enable-dead-lettering-on-message-expiration", settings.EnableDeadLetteringOnMessageExpiration);
            AppendIfNonNull(ref baseCommand, "--enable-duplicate-detection", settings.EnableDuplicateDetection);
            AppendIfNonNull(ref baseCommand, "--enable-express", settings.EnableExpress);
            AppendIfNonNull(ref baseCommand, "--enable-partitioning", settings.EnablePartitioning);
            AppendIfNonNull(ref baseCommand, "--enable-session", settings.EnableSession);
            AppendIfNonNull(ref baseCommand, "--forward-dead-lettered-messages-to", settings.ForwardDeadLetteredMessagesTo);
            AppendIfNonNull(ref baseCommand, "--forward-to", settings.ForwardTo);
            AppendIfNonNull(ref baseCommand, "--lock-duration", settings.LockDuration);
            AppendIfNonNull(ref baseCommand, "--max-delivery-count", settings.MaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus queue delete".
        /// Deletes the Service Bus Queue.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueue")]
        public dynamic ServicebusQueueDelete(ServicebusQueueDeleteSettings settings) {
            var baseCommand = "az servicebus queue delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus queue list".
        /// List the Queue by Service Bus Namepsace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueue")]
        public dynamic ServicebusQueueList(ServicebusQueueListSettings settings) {
            var baseCommand = "az servicebus queue list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus queue show".
        /// Shows the Service Bus Queue Details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueue")]
        public dynamic ServicebusQueueShow(ServicebusQueueShowSettings settings) {
            var baseCommand = "az servicebus queue show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus queue update".
        /// Updates existing Service Bus Queue.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueue")]
        public dynamic ServicebusQueueUpdate(ServicebusQueueUpdateSettings settings) {
            var baseCommand = "az servicebus queue update";
            AppendIfNonNull(ref baseCommand, "--auto-delete-on-idle", settings.AutoDeleteOnIdle);
            AppendIfNonNull(ref baseCommand, "--default-message-time-to-live", settings.DefaultMessageTimeToLive);
            AppendIfNonNull(ref baseCommand, "--duplicate-detection-history-time-window", settings.DuplicateDetectionHistoryTimeWindow);
            AppendIfNonNull(ref baseCommand, "--enable-batched-operations", settings.EnableBatchedOperations);
            AppendIfNonNull(ref baseCommand, "--enable-dead-lettering-on-message-expiration", settings.EnableDeadLetteringOnMessageExpiration);
            AppendIfNonNull(ref baseCommand, "--enable-duplicate-detection", settings.EnableDuplicateDetection);
            AppendIfNonNull(ref baseCommand, "--enable-express", settings.EnableExpress);
            AppendIfNonNull(ref baseCommand, "--enable-partitioning", settings.EnablePartitioning);
            AppendIfNonNull(ref baseCommand, "--enable-session", settings.EnableSession);
            AppendIfNonNull(ref baseCommand, "--forward-dead-lettered-messages-to", settings.ForwardDeadLetteredMessagesTo);
            AppendIfNonNull(ref baseCommand, "--forward-to", settings.ForwardTo);
            AppendIfNonNull(ref baseCommand, "--lock-duration", settings.LockDuration);
            AppendIfNonNull(ref baseCommand, "--max-delivery-count", settings.MaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule create".
        /// Create Authorization Rule for the given Service Bus Queue.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRule")]
        public dynamic ServicebusQueueAuthorizationRuleCreate(ServicebusQueueAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule delete".
        /// Delete the Authorization Rule of Service Bus Queue.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRule")]
        public dynamic ServicebusQueueAuthorizationRuleDelete(ServicebusQueueAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule list".
        /// List of Authorization Rule by Service Bus Queue.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRule")]
        public dynamic ServicebusQueueAuthorizationRuleList(ServicebusQueueAuthorizationRuleListSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule show".
        /// Show properties of Authorization Rule for the given Service Bus Queue.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRule")]
        public dynamic ServicebusQueueAuthorizationRuleShow(ServicebusQueueAuthorizationRuleShowSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule update".
        /// Update Authorization Rule for the given Service Bus Queue.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRule")]
        public dynamic ServicebusQueueAuthorizationRuleUpdate(ServicebusQueueAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for the given Service Bus Queue.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRuleKeys")]
        public dynamic ServicebusQueueAuthorizationRuleKeysList(ServicebusQueueAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus queue authorization-rule keys renew".
        /// Regenerate keys of Authorization Rule for Service Bus Queue.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusQueueAuthorizationRuleKeys")]
        public dynamic ServicebusQueueAuthorizationRuleKeysRenew(ServicebusQueueAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az servicebus queue authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic create".
        /// Create the Service Bus Topic.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopic")]
        public dynamic ServicebusTopicCreate(ServicebusTopicCreateSettings settings) {
            var baseCommand = "az servicebus topic create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--auto-delete-on-idle", settings.AutoDeleteOnIdle);
            AppendIfNonNull(ref baseCommand, "--default-message-time-to-live", settings.DefaultMessageTimeToLive);
            AppendIfNonNull(ref baseCommand, "--duplicate-detection-history-time-window", settings.DuplicateDetectionHistoryTimeWindow);
            AppendIfNonNull(ref baseCommand, "--enable-batched-operations", settings.EnableBatchedOperations);
            AppendIfNonNull(ref baseCommand, "--enable-duplicate-detection", settings.EnableDuplicateDetection);
            AppendIfNonNull(ref baseCommand, "--enable-express", settings.EnableExpress);
            AppendIfNonNull(ref baseCommand, "--enable-ordering", settings.EnableOrdering);
            AppendIfNonNull(ref baseCommand, "--enable-partitioning", settings.EnablePartitioning);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic delete".
        /// Deletes the Service Bus Topic.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopic")]
        public dynamic ServicebusTopicDelete(ServicebusTopicDeleteSettings settings) {
            var baseCommand = "az servicebus topic delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic list".
        /// List the Topic by Service Bus Namepsace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopic")]
        public dynamic ServicebusTopicList(ServicebusTopicListSettings settings) {
            var baseCommand = "az servicebus topic list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic show".
        /// Shows the Service Bus Topic Details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopic")]
        public dynamic ServicebusTopicShow(ServicebusTopicShowSettings settings) {
            var baseCommand = "az servicebus topic show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic update".
        /// Updates the Service Bus Topic.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopic")]
        public dynamic ServicebusTopicUpdate(ServicebusTopicUpdateSettings settings) {
            var baseCommand = "az servicebus topic update";
            AppendIfNonNull(ref baseCommand, "--auto-delete-on-idle", settings.AutoDeleteOnIdle);
            AppendIfNonNull(ref baseCommand, "--default-message-time-to-live", settings.DefaultMessageTimeToLive);
            AppendIfNonNull(ref baseCommand, "--duplicate-detection-history-time-window", settings.DuplicateDetectionHistoryTimeWindow);
            AppendIfNonNull(ref baseCommand, "--enable-batched-operations", settings.EnableBatchedOperations);
            AppendIfNonNull(ref baseCommand, "--enable-duplicate-detection", settings.EnableDuplicateDetection);
            AppendIfNonNull(ref baseCommand, "--enable-express", settings.EnableExpress);
            AppendIfNonNull(ref baseCommand, "--enable-ordering", settings.EnableOrdering);
            AppendIfNonNull(ref baseCommand, "--enable-partitioning", settings.EnablePartitioning);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule create".
        /// Create Authorization Rule for given Service Bus Topic.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRule")]
        public dynamic ServicebusTopicAuthorizationRuleCreate(ServicebusTopicAuthorizationRuleCreateSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule delete".
        /// Deletes the Authorization Rule of the given Service Bus Topic.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRule")]
        public dynamic ServicebusTopicAuthorizationRuleDelete(ServicebusTopicAuthorizationRuleDeleteSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule list".
        /// Shows list of Authorization Rule by Service Bus Topic.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRule")]
        public dynamic ServicebusTopicAuthorizationRuleList(ServicebusTopicAuthorizationRuleListSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule show".
        /// Shows the details of Authorization Rule for given Service Bus Topic.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRule")]
        public dynamic ServicebusTopicAuthorizationRuleShow(ServicebusTopicAuthorizationRuleShowSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule update".
        /// Create Authorization Rule for given Service Bus Topic.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRule")]
        public dynamic ServicebusTopicAuthorizationRuleUpdate(ServicebusTopicAuthorizationRuleUpdateSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule update";
            AppendIfNonNull(ref baseCommand, "--rights", settings.Rights);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule keys list".
        /// List the keys and connection strings of Authorization Rule for Service Bus Topic.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRuleKeys")]
        public dynamic ServicebusTopicAuthorizationRuleKeysList(ServicebusTopicAuthorizationRuleKeysListSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule keys list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic authorization-rule keys renew".
        /// Regenerate keys of Authorization Rule for Service Bus Topic.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicAuthorizationRuleKeys")]
        public dynamic ServicebusTopicAuthorizationRuleKeysRenew(ServicebusTopicAuthorizationRuleKeysRenewSettings settings) {
            var baseCommand = "az servicebus topic authorization-rule keys renew";
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-value", settings.KeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic subscription create".
        /// Create the ServiceBus Subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscription")]
        public dynamic ServicebusTopicSubscriptionCreate(ServicebusTopicSubscriptionCreateSettings settings) {
            var baseCommand = "az servicebus topic subscription create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--auto-delete-on-idle", settings.AutoDeleteOnIdle);
            AppendIfNonNull(ref baseCommand, "--dead-letter-on-filter-exceptions", settings.DeadLetterOnFilterExceptions);
            AppendIfNonNull(ref baseCommand, "--default-message-time-to-live", settings.DefaultMessageTimeToLive);
            AppendIfNonNull(ref baseCommand, "--enable-batched-operations", settings.EnableBatchedOperations);
            AppendIfNonNull(ref baseCommand, "--enable-dead-lettering-on-message-expiration", settings.EnableDeadLetteringOnMessageExpiration);
            AppendIfNonNull(ref baseCommand, "--enable-session", settings.EnableSession);
            AppendIfNonNull(ref baseCommand, "--forward-dead-lettered-messages-to", settings.ForwardDeadLetteredMessagesTo);
            AppendIfNonNull(ref baseCommand, "--forward-to", settings.ForwardTo);
            AppendIfNonNull(ref baseCommand, "--lock-duration", settings.LockDuration);
            AppendIfNonNull(ref baseCommand, "--max-delivery-count", settings.MaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic subscription delete".
        /// Deletes the Service Bus Subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscription")]
        public dynamic ServicebusTopicSubscriptionDelete(ServicebusTopicSubscriptionDeleteSettings settings) {
            var baseCommand = "az servicebus topic subscription delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic subscription list".
        /// List the Subscription by Service Bus Topic.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscription")]
        public dynamic ServicebusTopicSubscriptionList(ServicebusTopicSubscriptionListSettings settings) {
            var baseCommand = "az servicebus topic subscription list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic subscription show".
        /// Shows Service Bus Subscription Details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscription")]
        public dynamic ServicebusTopicSubscriptionShow(ServicebusTopicSubscriptionShowSettings settings) {
            var baseCommand = "az servicebus topic subscription show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic subscription update".
        /// Updates the ServiceBus Subscription.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscription")]
        public dynamic ServicebusTopicSubscriptionUpdate(ServicebusTopicSubscriptionUpdateSettings settings) {
            var baseCommand = "az servicebus topic subscription update";
            AppendIfNonNull(ref baseCommand, "--auto-delete-on-idle", settings.AutoDeleteOnIdle);
            AppendIfNonNull(ref baseCommand, "--dead-letter-on-filter-exceptions", settings.DeadLetterOnFilterExceptions);
            AppendIfNonNull(ref baseCommand, "--default-message-time-to-live", settings.DefaultMessageTimeToLive);
            AppendIfNonNull(ref baseCommand, "--enable-batched-operations", settings.EnableBatchedOperations);
            AppendIfNonNull(ref baseCommand, "--enable-dead-lettering-on-message-expiration", settings.EnableDeadLetteringOnMessageExpiration);
            AppendIfNonNull(ref baseCommand, "--enable-session", settings.EnableSession);
            AppendIfNonNull(ref baseCommand, "--forward-dead-lettered-messages-to", settings.ForwardDeadLetteredMessagesTo);
            AppendIfNonNull(ref baseCommand, "--forward-to", settings.ForwardTo);
            AppendIfNonNull(ref baseCommand, "--lock-duration", settings.LockDuration);
            AppendIfNonNull(ref baseCommand, "--max-delivery-count", settings.MaxDeliveryCount);
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic subscription rule create".
        /// Create the ServiceBus Rule for Subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscriptionRule")]
        public dynamic ServicebusTopicSubscriptionRuleCreate(ServicebusTopicSubscriptionRuleCreateSettings settings) {
            var baseCommand = "az servicebus topic subscription rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription-name", settings.SubscriptionName);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--action-compatibility-level", settings.ActionCompatibilityLevel);
            AppendIfNonNull(ref baseCommand, "--action-sql-expression", settings.ActionSqlExpression);
            AppendIfNonNull(ref baseCommand, "--enable-action-preprocessing", settings.EnableActionPreprocessing);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--correlation-id", settings.CorrelationId);
            AppendIfNonNull(ref baseCommand, "--enable-correlation-preprocessing", settings.EnableCorrelationPreprocessing);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--message-id", settings.MessageId);
            AppendIfNonNull(ref baseCommand, "--reply-to", settings.ReplyTo);
            AppendIfNonNull(ref baseCommand, "--reply-to-session-id", settings.ReplyToSessionId);
            AppendIfNonNull(ref baseCommand, "--session-id", settings.SessionId);
            AppendIfNonNull(ref baseCommand, "--to", settings.To);
            AppendIfNonNull(ref baseCommand, "--enable-sql-preprocessing", settings.EnableSqlPreprocessing);
            AppendIfNonNull(ref baseCommand, "--filter-sql-expression", settings.FilterSqlExpression);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic subscription rule delete".
        /// Deletes the ServiceBus Rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscriptionRule")]
        public dynamic ServicebusTopicSubscriptionRuleDelete(ServicebusTopicSubscriptionRuleDeleteSettings settings) {
            var baseCommand = "az servicebus topic subscription rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--subscription-name", settings.SubscriptionName);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic subscription rule list".
        /// List the ServiceBus Rule by Subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscriptionRule")]
        public dynamic ServicebusTopicSubscriptionRuleList(ServicebusTopicSubscriptionRuleListSettings settings) {
            var baseCommand = "az servicebus topic subscription rule list";
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription-name", settings.SubscriptionName);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic subscription rule show".
        /// Shows ServiceBus Rule Details.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscriptionRule")]
        public dynamic ServicebusTopicSubscriptionRuleShow(ServicebusTopicSubscriptionRuleShowSettings settings) {
            var baseCommand = "az servicebus topic subscription rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--subscription-name", settings.SubscriptionName);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az servicebus topic subscription rule update".
        /// Updates the ServiceBus Rule for Subscription.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzServicebusTopicSubscriptionRule")]
        public dynamic ServicebusTopicSubscriptionRuleUpdate(ServicebusTopicSubscriptionRuleUpdateSettings settings) {
            var baseCommand = "az servicebus topic subscription rule update";
            AppendIfNonNull(ref baseCommand, "--action-compatibility-level", settings.ActionCompatibilityLevel);
            AppendIfNonNull(ref baseCommand, "--action-sql-expression", settings.ActionSqlExpression);
            AppendIfNonNull(ref baseCommand, "--enable-action-preprocessing", settings.EnableActionPreprocessing);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--correlation-id", settings.CorrelationId);
            AppendIfNonNull(ref baseCommand, "--enable-correlation-preprocessing", settings.EnableCorrelationPreprocessing);
            AppendIfNonNull(ref baseCommand, "--label", settings.Label);
            AppendIfNonNull(ref baseCommand, "--message-id", settings.MessageId);
            AppendIfNonNull(ref baseCommand, "--reply-to", settings.ReplyTo);
            AppendIfNonNull(ref baseCommand, "--reply-to-session-id", settings.ReplyToSessionId);
            AppendIfNonNull(ref baseCommand, "--session-id", settings.SessionId);
            AppendIfNonNull(ref baseCommand, "--to", settings.To);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace-name", settings.NamespaceName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--subscription-name", settings.SubscriptionName);
            AppendIfNonNull(ref baseCommand, "--topic-name", settings.TopicName);
            AppendIfNonNull(ref baseCommand, "--enable-sql-preprocessing", settings.EnableSqlPreprocessing);
            AppendIfNonNull(ref baseCommand, "--filter-sql-expression", settings.FilterSqlExpression);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf application certificate add".
        /// Add a new certificate to the Virtual Machine Scale Sets that make up the cluster to be used by hosted applications.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfApplicationCertificate")]
        public dynamic SfApplicationCertificateAdd(SfApplicationCertificateAddSettings settings) {
            var baseCommand = "az sf application certificate add";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--certificate-file", settings.CertificateFile);
            AppendIfNonNull(ref baseCommand, "--certificate-output-folder", settings.CertificateOutputFolder);
            AppendIfNonNull(ref baseCommand, "--certificate-password", settings.CertificatePassword);
            AppendIfNonNull(ref baseCommand, "--certificate-subject-name", settings.CertificateSubjectName);
            AppendIfNonNull(ref baseCommand, "--secret-identifier", settings.SecretIdentifier);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--vault-resource-group", settings.VaultResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster create".
        /// Create a new Azure Service Fabric cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfCluster")]
        public dynamic SfClusterCreate(SfClusterCreateSettings settings) {
            var baseCommand = "az sf cluster create";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--certificate-file", settings.CertificateFile);
            AppendIfNonNull(ref baseCommand, "--certificate-output-folder", settings.CertificateOutputFolder);
            AppendIfNonNull(ref baseCommand, "--certificate-password", settings.CertificatePassword);
            AppendIfNonNull(ref baseCommand, "--certificate-subject-name", settings.CertificateSubjectName);
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--cluster-size", settings.ClusterSize);
            AppendIfNonNull(ref baseCommand, "--os", settings.Os);
            AppendIfNonNull(ref baseCommand, "--parameter-file", settings.ParameterFile);
            AppendIfNonNull(ref baseCommand, "--secret-identifier", settings.SecretIdentifier);
            AppendIfNonNull(ref baseCommand, "--template-file", settings.TemplateFile);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--vault-resource-group", settings.VaultResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-password", settings.VmPassword);
            AppendIfNonNull(ref baseCommand, "--vm-sku", settings.VmSku);
            AppendIfNonNull(ref baseCommand, "--vm-user-name", settings.VmUserName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster list".
        /// List cluster resources.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfCluster")]
        public dynamic SfClusterList(SfClusterListSettings settings) {
            var baseCommand = "az sf cluster list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster show".
        /// Get cluster resource.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfCluster")]
        public dynamic SfClusterShow(SfClusterShowSettings settings) {
            var baseCommand = "az sf cluster show";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster certificate add".
        /// Add a secondary cluster certificate to the cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterCertificate")]
        public dynamic SfClusterCertificateAdd(SfClusterCertificateAddSettings settings) {
            var baseCommand = "az sf cluster certificate add";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--certificate-file", settings.CertificateFile);
            AppendIfNonNull(ref baseCommand, "--certificate-output-folder", settings.CertificateOutputFolder);
            AppendIfNonNull(ref baseCommand, "--certificate-password", settings.CertificatePassword);
            AppendIfNonNull(ref baseCommand, "--certificate-subject-name", settings.CertificateSubjectName);
            AppendIfNonNull(ref baseCommand, "--secret-identifier", settings.SecretIdentifier);
            AppendIfNonNull(ref baseCommand, "--vault-name", settings.VaultName);
            AppendIfNonNull(ref baseCommand, "--vault-resource-group", settings.VaultResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster certificate remove".
        /// Remove a certificate from a cluster.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterCertificate")]
        public dynamic SfClusterCertificateRemove(SfClusterCertificateRemoveSettings settings) {
            var baseCommand = "az sf cluster certificate remove";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--thumbprint", settings.Thumbprint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster client-certificate add".
        /// Add a common name or certificate thumbprint to the cluster for client authentication.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterClientCertificate")]
        public dynamic SfClusterClientCertificateAdd(SfClusterClientCertificateAddSettings settings) {
            var baseCommand = "az sf cluster client-certificate add";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--admin-client-thumbprints", settings.AdminClientThumbprints);
            AppendIfNonNull(ref baseCommand, "--certificate-common-name", settings.CertificateCommonName);
            AppendIfNonNull(ref baseCommand, "--certificate-issuer-thumbprint", settings.CertificateIssuerThumbprint);
            AppendIfNonNull(ref baseCommand, "--client-certificate-common-names", settings.ClientCertificateCommonNames);
            AppendIfNonNull(ref baseCommand, "--is-admin", settings.IsAdmin);
            AppendIfNonNull(ref baseCommand, "--readonly-client-thumbprints", settings.ReadonlyClientThumbprints);
            AppendIfNonNull(ref baseCommand, "--thumbprint", settings.Thumbprint);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster client-certificate remove".
        /// Remove client certificates or subject names used for authentication.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterClientCertificate")]
        public dynamic SfClusterClientCertificateRemove(SfClusterClientCertificateRemoveSettings settings) {
            var baseCommand = "az sf cluster client-certificate remove";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--certificate-common-name", settings.CertificateCommonName);
            AppendIfNonNull(ref baseCommand, "--certificate-issuer-thumbprint", settings.CertificateIssuerThumbprint);
            AppendIfNonNull(ref baseCommand, "--client-certificate-common-names", settings.ClientCertificateCommonNames);
            AppendIfNonNull(ref baseCommand, "--thumbprints", settings.Thumbprints);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster durability update".
        /// Update the durability tier or VM SKU of a node type in the cluster.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterDurability")]
        public dynamic SfClusterDurabilityUpdate(SfClusterDurabilityUpdateSettings settings) {
            var baseCommand = "az sf cluster durability update";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--durability-level", settings.DurabilityLevel);
            AppendIfNonNull(ref baseCommand, "--node-type", settings.NodeType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster node add".
        /// Add nodes to a node type in a cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterNode")]
        public dynamic SfClusterNodeAdd(SfClusterNodeAddSettings settings) {
            var baseCommand = "az sf cluster node add";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--node-type", settings.NodeType);
            AppendIfNonNull(ref baseCommand, "--number-of-nodes-to-add", settings.NumberOfNodesToAdd);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster node remove".
        /// Remove nodes from a node type in a cluster.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterNode")]
        public dynamic SfClusterNodeRemove(SfClusterNodeRemoveSettings settings) {
            var baseCommand = "az sf cluster node remove";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--node-type", settings.NodeType);
            AppendIfNonNull(ref baseCommand, "--number-of-nodes-to-remove", settings.NumberOfNodesToRemove);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster node-type add".
        /// Add a new node type to a cluster.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterNodeType")]
        public dynamic SfClusterNodeTypeAdd(SfClusterNodeTypeAddSettings settings) {
            var baseCommand = "az sf cluster node-type add";
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--node-type", settings.NodeType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-password", settings.VmPassword);
            AppendIfNonNull(ref baseCommand, "--vm-user-name", settings.VmUserName);
            AppendIfNonNull(ref baseCommand, "--durability-level", settings.DurabilityLevel);
            AppendIfNonNull(ref baseCommand, "--vm-sku", settings.VmSku);
            AppendIfNonNull(ref baseCommand, "--vm-tier", settings.VmTier);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster reliability update".
        /// Update the reliability tier for the primary node in a cluster.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterReliability")]
        public dynamic SfClusterReliabilityUpdate(SfClusterReliabilityUpdateSettings settings) {
            var baseCommand = "az sf cluster reliability update";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--reliability-level", settings.ReliabilityLevel);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--auto-add-node", settings.AutoAddNode);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster setting remove".
        /// Remove settings from a cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterSetting")]
        public dynamic SfClusterSettingRemove(SfClusterSettingRemoveSettings settings) {
            var baseCommand = "az sf cluster setting remove";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--parameter", settings.Parameter);
            AppendIfNonNull(ref baseCommand, "--section", settings.Section);
            AppendIfNonNull(ref baseCommand, "--settings-section-description", settings.SettingsSectionDescription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster setting set".
        /// Update the settings of a cluster.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterSetting")]
        public dynamic SfClusterSettingSet(SfClusterSettingSetSettings settings) {
            var baseCommand = "az sf cluster setting set";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--parameter", settings.Parameter);
            AppendIfNonNull(ref baseCommand, "--section", settings.Section);
            AppendIfNonNull(ref baseCommand, "--settings-section-description", settings.SettingsSectionDescription);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sf cluster upgrade-type set".
        /// Change the  upgrade type for a cluster.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSfClusterUpgradeType")]
        public dynamic SfClusterUpgradeTypeSet(SfClusterUpgradeTypeSetSettings settings) {
            var baseCommand = "az sf cluster upgrade-type set";
            AppendIfNonNull(ref baseCommand, "--cluster-name", settings.ClusterName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--upgrade-mode", settings.UpgradeMode);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig create".
        /// Create a share image gallery.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSig")]
        public dynamic SigCreate(SigCreateSettings settings) {
            var baseCommand = "az sig create";
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig delete".
        /// Delete a Shared Image Gallery.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSig")]
        public dynamic SigDelete(SigDeleteSettings settings) {
            var baseCommand = "az sig delete";
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig list".
        /// List share image galleries.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSig")]
        public dynamic SigList(SigListSettings settings) {
            var baseCommand = "az sig list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig show".
        /// Retrieves information about a Shared Image Gallery.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSig")]
        public dynamic SigShow(SigShowSettings settings) {
            var baseCommand = "az sig show";
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig update".
        /// Update a share image gallery.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSig")]
        public dynamic SigUpdate(SigUpdateSettings settings) {
            var baseCommand = "az sig update";
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig image-definition create".
        /// Create a gallery image definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageDefinition")]
        public dynamic SigImageDefinitionCreate(SigImageDefinitionCreateSettings settings) {
            var baseCommand = "az sig image-definition create";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--disallowed-disk-types", settings.DisallowedDiskTypes);
            AppendIfNonNull(ref baseCommand, "--end-of-life-date", settings.EndOfLifeDate);
            AppendIfNonNull(ref baseCommand, "--eula", settings.Eula);
            AppendIfNonNull(ref baseCommand, "--hyper-v-generation", settings.HyperVGeneration);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--os-state", settings.OsState);
            AppendIfNonNull(ref baseCommand, "--privacy-statement-uri", settings.PrivacyStatementUri);
            AppendIfNonNull(ref baseCommand, "--release-note-uri", settings.ReleaseNoteUri);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--plan-name", settings.PlanName);
            AppendIfNonNull(ref baseCommand, "--plan-product", settings.PlanProduct);
            AppendIfNonNull(ref baseCommand, "--plan-publisher", settings.PlanPublisher);
            AppendIfNonNull(ref baseCommand, "--maximum-cpu-core", settings.MaximumCpuCore);
            AppendIfNonNull(ref baseCommand, "--maximum-memory", settings.MaximumMemory);
            AppendIfNonNull(ref baseCommand, "--minimum-cpu-core", settings.MinimumCpuCore);
            AppendIfNonNull(ref baseCommand, "--minimum-memory", settings.MinimumMemory);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig image-definition delete".
        /// Delete a gallery image.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageDefinition")]
        public dynamic SigImageDefinitionDelete(SigImageDefinitionDeleteSettings settings) {
            var baseCommand = "az sig image-definition delete";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig image-definition list".
        /// List gallery Image Definitions in a gallery.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageDefinition")]
        public dynamic SigImageDefinitionList(SigImageDefinitionListSettings settings) {
            var baseCommand = "az sig image-definition list";
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig image-definition show".
        /// Retrieves information about a gallery Image Definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageDefinition")]
        public dynamic SigImageDefinitionShow(SigImageDefinitionShowSettings settings) {
            var baseCommand = "az sig image-definition show";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig image-definition update".
        /// Update a share image defintiion.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageDefinition")]
        public dynamic SigImageDefinitionUpdate(SigImageDefinitionUpdateSettings settings) {
            var baseCommand = "az sig image-definition update";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig image-version create".
        /// Create a new image version.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageVersion")]
        public dynamic SigImageVersionCreate(SigImageVersionCreateSettings settings) {
            var baseCommand = "az sig image-version create";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-image-version", settings.GalleryImageVersion);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--data-snapshots", settings.DataSnapshots);
            AppendIfNonNull(ref baseCommand, "--end-of-life-date", settings.EndOfLifeDate);
            AppendIfNonNull(ref baseCommand, "--exclude-from-latest", settings.ExcludeFromLatest);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--managed-image", settings.ManagedImage);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--os-snapshot", settings.OsSnapshot);
            AppendIfNonNull(ref baseCommand, "--replica-count", settings.ReplicaCount);
            AppendIfNonNull(ref baseCommand, "--storage-account-type", settings.StorageAccountType);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--target-regions", settings.TargetRegions);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig image-version delete".
        /// Delete a gallery Image Version.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageVersion")]
        public dynamic SigImageVersionDelete(SigImageVersionDeleteSettings settings) {
            var baseCommand = "az sig image-version delete";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-image-version", settings.GalleryImageVersion);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig image-version list".
        /// List gallery Image Versions in a gallery Image Definition.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageVersion")]
        public dynamic SigImageVersionList(SigImageVersionListSettings settings) {
            var baseCommand = "az sig image-version list";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig image-version show".
        /// Retrieves information about a gallery Image Version.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageVersion")]
        public dynamic SigImageVersionShow(SigImageVersionShowSettings settings) {
            var baseCommand = "az sig image-version show";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-image-version", settings.GalleryImageVersion);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig image-version update".
        /// Update a share image version.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageVersion")]
        public dynamic SigImageVersionUpdate(SigImageVersionUpdateSettings settings) {
            var baseCommand = "az sig image-version update";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-image-version", settings.GalleryImageVersion);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--replica-count", settings.ReplicaCount);
            AppendIfNonNull(ref baseCommand, "--target-regions", settings.TargetRegions);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sig image-version wait".
        /// Wait for image version related operation.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSigImageVersion")]
        public dynamic SigImageVersionWait(SigImageVersionWaitSettings settings) {
            var baseCommand = "az sig image-version wait";
            AppendIfNonNull(ref baseCommand, "--gallery-image-definition", settings.GalleryImageDefinition);
            AppendIfNonNull(ref baseCommand, "--gallery-image-version", settings.GalleryImageVersion);
            AppendIfNonNull(ref baseCommand, "--gallery-name", settings.GalleryName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az signalr create".
        /// Creates a SignalR Service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalr")]
        public dynamic SignalrCreate(SignalrCreateSettings settings) {
            var baseCommand = "az signalr create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--service-mode", settings.ServiceMode);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--unit-count", settings.UnitCount);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az signalr delete".
        /// Deletes a SignalR Service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalr")]
        public dynamic SignalrDelete(SignalrDeleteSettings settings) {
            var baseCommand = "az signalr delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az signalr list".
        /// Lists all the SignalR Service under the current subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalr")]
        public dynamic SignalrList(SignalrListSettings settings) {
            var baseCommand = "az signalr list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az signalr restart".
        /// Restart an existing SignalR Service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalr")]
        public dynamic SignalrRestart(SignalrRestartSettings settings) {
            var baseCommand = "az signalr restart";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az signalr show".
        /// Get the details of a SignalR Service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalr")]
        public dynamic SignalrShow(SignalrShowSettings settings) {
            var baseCommand = "az signalr show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az signalr update".
        /// Update an existing SignalR Service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalr")]
        public dynamic SignalrUpdate(SignalrUpdateSettings settings) {
            var baseCommand = "az signalr update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--service-mode", settings.ServiceMode);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--unit-count", settings.UnitCount);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az signalr cors add".
        /// Add allowed origins to a SignalR Service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalrCors")]
        public dynamic SignalrCorsAdd(SignalrCorsAddSettings settings) {
            var baseCommand = "az signalr cors add";
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az signalr cors list".
        /// List allowed origins of a SignalR Service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalrCors")]
        public dynamic SignalrCorsList(SignalrCorsListSettings settings) {
            var baseCommand = "az signalr cors list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az signalr cors remove".
        /// Remove allowed origins from a SignalR Service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalrCors")]
        public dynamic SignalrCorsRemove(SignalrCorsRemoveSettings settings) {
            var baseCommand = "az signalr cors remove";
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az signalr key list".
        /// List the access keys for a SignalR Service.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalrKey")]
        public dynamic SignalrKeyList(SignalrKeyListSettings settings) {
            var baseCommand = "az signalr key list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az signalr key renew".
        /// Regenerate the access key for a SignalR Service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSignalrKey")]
        public dynamic SignalrKeyRenew(SignalrKeyRenewSettings settings) {
            var baseCommand = "az signalr key renew";
            AppendIfNonNull(ref baseCommand, "--key-type", settings.KeyType);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az snapshot create".
        /// Create a snapshot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public dynamic SnapshotCreate(SnapshotCreateSettings settings) {
            var baseCommand = "az snapshot create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--for-upload", settings.ForUpload);
            AppendIfNonNull(ref baseCommand, "--hyper-v-generation", settings.HyperVGeneration);
            AppendIfNonNull(ref baseCommand, "--incremental", settings.Incremental);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--size-gb", settings.SizeGb);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--source-storage-account-id", settings.SourceStorageAccountId);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az snapshot delete".
        /// Deletes a snapshot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public dynamic SnapshotDelete(SnapshotDeleteSettings settings) {
            var baseCommand = "az snapshot delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az snapshot grant-access".
        /// Grant read access to a snapshot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public dynamic SnapshotGrantAccess(SnapshotGrantAccessSettings settings) {
            var baseCommand = "az snapshot grant-access";
            AppendIfNonNull(ref baseCommand, "--duration-in-seconds", settings.DurationInSeconds);
            AppendIfNonNull(ref baseCommand, "--access-level", settings.AccessLevel);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az snapshot list".
        /// List snapshots.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public dynamic SnapshotList(SnapshotListSettings settings) {
            var baseCommand = "az snapshot list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az snapshot revoke-access".
        /// Revoke read access to a snapshot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public dynamic SnapshotRevokeAccess(SnapshotRevokeAccessSettings settings) {
            var baseCommand = "az snapshot revoke-access";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az snapshot show".
        /// Gets information about a snapshot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public dynamic SnapshotShow(SnapshotShowSettings settings) {
            var baseCommand = "az snapshot show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az snapshot update".
        /// Update a snapshot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public dynamic SnapshotUpdate(SnapshotUpdateSettings settings) {
            var baseCommand = "az snapshot update";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az snapshot wait".
        /// Place the CLI in a waiting state until a condition of a snapshot is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSnapshot")]
        public dynamic SnapshotWait(SnapshotWaitSettings settings) {
            var baseCommand = "az snapshot wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql list-usages".
        /// Gets all subscription usage metrics in a given location.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSql")]
        public dynamic SqlListUsages(SqlListUsagesSettings settings) {
            var baseCommand = "az sql list-usages";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql show-usage".
        /// Gets a subscription usage metric.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSql")]
        public dynamic SqlShowUsage(SqlShowUsageSettings settings) {
            var baseCommand = "az sql show-usage";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--usage", settings.Usage);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db copy".
        /// Create a copy of a database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbCopy(SqlDbCopySettings settings) {
            var baseCommand = "az sql db copy";
            AppendIfNonNull(ref baseCommand, "--dest-name", settings.DestName);
            AppendIfNonNull(ref baseCommand, "--dest-resource-group", settings.DestResourceGroup);
            AppendIfNonNull(ref baseCommand, "--dest-server", settings.DestServer);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--auto-pause-delay", settings.AutoPauseDelay);
            AppendIfNonNull(ref baseCommand, "--compute-model", settings.ComputeModel);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db create".
        /// Create a database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbCreate(SqlDbCreateSettings settings) {
            var baseCommand = "az sql db create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--catalog-collation", settings.CatalogCollation);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--sample-name", settings.SampleName);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--auto-pause-delay", settings.AutoPauseDelay);
            AppendIfNonNull(ref baseCommand, "--compute-model", settings.ComputeModel);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db delete".
        /// Delete a database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbDelete(SqlDbDeleteSettings settings) {
            var baseCommand = "az sql db delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db export".
        /// Export a database to a bacpac.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbExport(SqlDbExportSettings settings) {
            var baseCommand = "az sql db export";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--storage-key", settings.StorageKey);
            AppendIfNonNull(ref baseCommand, "--storage-key-type", settings.StorageKeyType);
            AppendIfNonNull(ref baseCommand, "--storage-uri", settings.StorageUri);
            AppendIfNonNull(ref baseCommand, "--auth-type", settings.AuthType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db import".
        /// Imports a bacpac into an existing database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbImport(SqlDbImportSettings settings) {
            var baseCommand = "az sql db import";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--storage-key", settings.StorageKey);
            AppendIfNonNull(ref baseCommand, "--storage-key-type", settings.StorageKeyType);
            AppendIfNonNull(ref baseCommand, "--storage-uri", settings.StorageUri);
            AppendIfNonNull(ref baseCommand, "--auth-type", settings.AuthType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db list".
        /// List databases a server or elastic pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbList(SqlDbListSettings settings) {
            var baseCommand = "az sql db list";
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db list-deleted".
        /// Gets a list of deleted databases that can be restored.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbListDeleted(SqlDbListDeletedSettings settings) {
            var baseCommand = "az sql db list-deleted";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db list-editions".
        /// Show database editions available for the currently active subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbListEditions(SqlDbListEditionsSettings settings) {
            var baseCommand = "az sql db list-editions";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--available", settings.Available);
            AppendIfNonNull(ref baseCommand, "--show-details", settings.ShowDetails);
            AppendIfNonNull(ref baseCommand, "--dtu", settings.Dtu);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--vcores", settings.Vcores);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db list-usages".
        /// Returns database usages.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbListUsages(SqlDbListUsagesSettings settings) {
            var baseCommand = "az sql db list-usages";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db rename".
        /// Rename a database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbRename(SqlDbRenameSettings settings) {
            var baseCommand = "az sql db rename";
            AppendIfNonNull(ref baseCommand, "--new-name", settings.NewName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db restore".
        /// Create a new database by restoring from a backup.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbRestore(SqlDbRestoreSettings settings) {
            var baseCommand = "az sql db restore";
            AppendIfNonNull(ref baseCommand, "--dest-name", settings.DestName);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--deleted-time", settings.DeletedTime);
            AppendIfNonNull(ref baseCommand, "--time", settings.Time);
            AppendIfNonNull(ref baseCommand, "--auto-pause-delay", settings.AutoPauseDelay);
            AppendIfNonNull(ref baseCommand, "--compute-model", settings.ComputeModel);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db show".
        /// Get the details for a database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbShow(SqlDbShowSettings settings) {
            var baseCommand = "az sql db show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db show-connection-string".
        /// Generates a connection string to a database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbShowConnectionString(SqlDbShowConnectionStringSettings settings) {
            var baseCommand = "az sql db show-connection-string";
            AppendIfNonNull(ref baseCommand, "--client", settings.Client);
            AppendIfNonNull(ref baseCommand, "--auth-type", settings.AuthType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db update".
        /// Update a database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDb")]
        public dynamic SqlDbUpdate(SqlDbUpdateSettings settings) {
            var baseCommand = "az sql db update";
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--auto-pause-delay", settings.AutoPauseDelay);
            AppendIfNonNull(ref baseCommand, "--compute-model", settings.ComputeModel);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db audit-policy show".
        /// Gets a database's blob auditing policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbAuditPolicy")]
        public dynamic SqlDbAuditPolicyShow(SqlDbAuditPolicyShowSettings settings) {
            var baseCommand = "az sql db audit-policy show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db audit-policy update".
        /// Update a database's auditing policy.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbAuditPolicy")]
        public dynamic SqlDbAuditPolicyUpdate(SqlDbAuditPolicyUpdateSettings settings) {
            var baseCommand = "az sql db audit-policy update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--actions", settings.Actions);
            AppendIfNonNull(ref baseCommand, "--retention-days", settings.RetentionDays);
            AppendIfNonNull(ref baseCommand, "--state", settings.State);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--storage-endpoint", settings.StorageEndpoint);
            AppendIfNonNull(ref baseCommand, "--storage-key", settings.StorageKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db op cancel".
        /// Cancels the asynchronous operation on the database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbOp")]
        public dynamic SqlDbOpCancel(SqlDbOpCancelSettings settings) {
            var baseCommand = "az sql db op cancel";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--database", settings.Database);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db op list".
        /// Gets a list of operations performed on the database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbOp")]
        public dynamic SqlDbOpList(SqlDbOpListSettings settings) {
            var baseCommand = "az sql db op list";
            AppendIfNonNull(ref baseCommand, "--database", settings.Database);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db replica create".
        /// Create a database as a readable secondary replica of an existing database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbReplica")]
        public dynamic SqlDbReplicaCreate(SqlDbReplicaCreateSettings settings) {
            var baseCommand = "az sql db replica create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--partner-server", settings.PartnerServer);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--partner-resource-group", settings.PartnerResourceGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--auto-pause-delay", settings.AutoPauseDelay);
            AppendIfNonNull(ref baseCommand, "--compute-model", settings.ComputeModel);
            AppendIfNonNull(ref baseCommand, "--min-capacity", settings.MinCapacity);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db replica delete-link".
        /// Permanently stop data replication between two database replicas.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbReplica")]
        public dynamic SqlDbReplicaDeleteLink(SqlDbReplicaDeleteLinkSettings settings) {
            var baseCommand = "az sql db replica delete-link";
            AppendIfNonNull(ref baseCommand, "--partner-server", settings.PartnerServer);
            AppendIfNonNull(ref baseCommand, "--partner-resource-group", settings.PartnerResourceGroup);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db replica list-links".
        /// List the replicas of a database and their replication status.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbReplica")]
        public dynamic SqlDbReplicaListLinks(SqlDbReplicaListLinksSettings settings) {
            var baseCommand = "az sql db replica list-links";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db replica set-primary".
        /// Set the primary replica database by failing over from the current primary replica database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbReplica")]
        public dynamic SqlDbReplicaSetPrimary(SqlDbReplicaSetPrimarySettings settings) {
            var baseCommand = "az sql db replica set-primary";
            AppendIfNonNull(ref baseCommand, "--allow-data-loss", settings.AllowDataLoss);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db tde list-activity".
        /// Returns a database's transparent data encryption operation result.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbTde")]
        public dynamic SqlDbTdeListActivity(SqlDbTdeListActivitySettings settings) {
            var baseCommand = "az sql db tde list-activity";
            AppendIfNonNull(ref baseCommand, "--database", settings.Database);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db tde set".
        /// Sets a database's transparent data encryption configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbTde")]
        public dynamic SqlDbTdeSet(SqlDbTdeSetSettings settings) {
            var baseCommand = "az sql db tde set";
            AppendIfNonNull(ref baseCommand, "--status", settings.Status);
            AppendIfNonNull(ref baseCommand, "--database", settings.Database);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db tde show".
        /// Gets a database's transparent data encryption configuration.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbTde")]
        public dynamic SqlDbTdeShow(SqlDbTdeShowSettings settings) {
            var baseCommand = "az sql db tde show";
            AppendIfNonNull(ref baseCommand, "--database", settings.Database);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db threat-policy show".
        /// Gets a database's threat detection policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbThreatPolicy")]
        public dynamic SqlDbThreatPolicyShow(SqlDbThreatPolicyShowSettings settings) {
            var baseCommand = "az sql db threat-policy show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql db threat-policy update".
        /// Update a database's threat detection policy.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDbThreatPolicy")]
        public dynamic SqlDbThreatPolicyUpdate(SqlDbThreatPolicyUpdateSettings settings) {
            var baseCommand = "az sql db threat-policy update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--email-account-admins", settings.EmailAccountAdmins);
            AppendIfNonNull(ref baseCommand, "--email-addresses", settings.EmailAddresses);
            AppendIfNonNull(ref baseCommand, "--disabled-alerts", settings.DisabledAlerts);
            AppendIfNonNull(ref baseCommand, "--retention-days", settings.RetentionDays);
            AppendIfNonNull(ref baseCommand, "--state", settings.State);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--storage-endpoint", settings.StorageEndpoint);
            AppendIfNonNull(ref baseCommand, "--storage-key", settings.StorageKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql dw create".
        /// Create a data warehouse.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public dynamic SqlDwCreate(SqlDwCreateSettings settings) {
            var baseCommand = "az sql dw create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql dw delete".
        /// Delete a data warehouse.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public dynamic SqlDwDelete(SqlDwDeleteSettings settings) {
            var baseCommand = "az sql dw delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql dw list".
        /// List data warehouses for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public dynamic SqlDwList(SqlDwListSettings settings) {
            var baseCommand = "az sql dw list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql dw pause".
        /// Pauses a datawarehouse.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public dynamic SqlDwPause(SqlDwPauseSettings settings) {
            var baseCommand = "az sql dw pause";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql dw resume".
        /// Resumes a datawarehouse.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public dynamic SqlDwResume(SqlDwResumeSettings settings) {
            var baseCommand = "az sql dw resume";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql dw show".
        /// Get the details for a data warehouse.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public dynamic SqlDwShow(SqlDwShowSettings settings) {
            var baseCommand = "az sql dw show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql dw update".
        /// Update a data warehouse.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlDw")]
        public dynamic SqlDwUpdate(SqlDwUpdateSettings settings) {
            var baseCommand = "az sql dw update";
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--service-objective", settings.ServiceObjective);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql elastic-pool create".
        /// Create an elastic pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public dynamic SqlElasticPoolCreate(SqlElasticPoolCreateSettings settings) {
            var baseCommand = "az sql elastic-pool create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--db-dtu-max", settings.DbDtuMax);
            AppendIfNonNull(ref baseCommand, "--db-dtu-min", settings.DbDtuMin);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql elastic-pool delete".
        /// Deletes an elastic pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public dynamic SqlElasticPoolDelete(SqlElasticPoolDeleteSettings settings) {
            var baseCommand = "az sql elastic-pool delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql elastic-pool list".
        /// Gets all elastic pools in a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public dynamic SqlElasticPoolList(SqlElasticPoolListSettings settings) {
            var baseCommand = "az sql elastic-pool list";
            AppendIfNonNull(ref baseCommand, "--skip", settings.Skip);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql elastic-pool list-dbs".
        /// Gets a list of databases in an elastic pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public dynamic SqlElasticPoolListDbs(SqlElasticPoolListDbsSettings settings) {
            var baseCommand = "az sql elastic-pool list-dbs";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql elastic-pool list-editions".
        /// List elastic pool editions available for the active subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public dynamic SqlElasticPoolListEditions(SqlElasticPoolListEditionsSettings settings) {
            var baseCommand = "az sql elastic-pool list-editions";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--available", settings.Available);
            AppendIfNonNull(ref baseCommand, "--show-details", settings.ShowDetails);
            AppendIfNonNull(ref baseCommand, "--dtu", settings.Dtu);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--vcores", settings.Vcores);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql elastic-pool show".
        /// Gets an elastic pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public dynamic SqlElasticPoolShow(SqlElasticPoolShowSettings settings) {
            var baseCommand = "az sql elastic-pool show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql elastic-pool update".
        /// Update an elastic pool.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPool")]
        public dynamic SqlElasticPoolUpdate(SqlElasticPoolUpdateSettings settings) {
            var baseCommand = "az sql elastic-pool update";
            AppendIfNonNull(ref baseCommand, "--db-dtu-max", settings.DbDtuMax);
            AppendIfNonNull(ref baseCommand, "--db-dtu-min", settings.DbDtuMin);
            AppendIfNonNull(ref baseCommand, "--max-size", settings.MaxSize);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--zone-redundant", settings.ZoneRedundant);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql elastic-pool op cancel".
        /// Cancels the asynchronous operation on the elastic pool.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPoolOp")]
        public dynamic SqlElasticPoolOpCancel(SqlElasticPoolOpCancelSettings settings) {
            var baseCommand = "az sql elastic-pool op cancel";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql elastic-pool op list".
        /// Gets a list of operations performed on the elastic pool.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlElasticPoolOp")]
        public dynamic SqlElasticPoolOpList(SqlElasticPoolOpListSettings settings) {
            var baseCommand = "az sql elastic-pool op list";
            AppendIfNonNull(ref baseCommand, "--elastic-pool", settings.ElasticPool);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql failover-group create".
        /// Creates a failover group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlFailoverGroup")]
        public dynamic SqlFailoverGroupCreate(SqlFailoverGroupCreateSettings settings) {
            var baseCommand = "az sql failover-group create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--partner-server", settings.PartnerServer);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--add-db", settings.AddDb);
            AppendIfNonNull(ref baseCommand, "--failover-policy", settings.FailoverPolicy);
            AppendIfNonNull(ref baseCommand, "--grace-period", settings.GracePeriod);
            AppendIfNonNull(ref baseCommand, "--partner-resource-group", settings.PartnerResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql failover-group delete".
        /// Deletes a failover group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlFailoverGroup")]
        public dynamic SqlFailoverGroupDelete(SqlFailoverGroupDeleteSettings settings) {
            var baseCommand = "az sql failover-group delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql failover-group list".
        /// Lists the failover groups in a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlFailoverGroup")]
        public dynamic SqlFailoverGroupList(SqlFailoverGroupListSettings settings) {
            var baseCommand = "az sql failover-group list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql failover-group set-primary".
        /// Set the primary of the failover group by failing over all databases from the current primary server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlFailoverGroup")]
        public dynamic SqlFailoverGroupSetPrimary(SqlFailoverGroupSetPrimarySettings settings) {
            var baseCommand = "az sql failover-group set-primary";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--allow-data-loss", settings.AllowDataLoss);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql failover-group show".
        /// Gets a failover group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlFailoverGroup")]
        public dynamic SqlFailoverGroupShow(SqlFailoverGroupShowSettings settings) {
            var baseCommand = "az sql failover-group show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql failover-group update".
        /// Updates the failover group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlFailoverGroup")]
        public dynamic SqlFailoverGroupUpdate(SqlFailoverGroupUpdateSettings settings) {
            var baseCommand = "az sql failover-group update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--add-db", settings.AddDb);
            AppendIfNonNull(ref baseCommand, "--failover-policy", settings.FailoverPolicy);
            AppendIfNonNull(ref baseCommand, "--grace-period", settings.GracePeriod);
            AppendIfNonNull(ref baseCommand, "--remove-db", settings.RemoveDb);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql instance-failover-group create".
        /// Creates an instance failover group between two connected managed instances.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlInstanceFailoverGroup")]
        public dynamic SqlInstanceFailoverGroupCreate(SqlInstanceFailoverGroupCreateSettings settings) {
            var baseCommand = "az sql instance-failover-group create";
            AppendIfNonNull(ref baseCommand, "--mi", settings.Mi);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--partner-mi", settings.PartnerMi);
            AppendIfNonNull(ref baseCommand, "--partner-resource-group", settings.PartnerResourceGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--failover-policy", settings.FailoverPolicy);
            AppendIfNonNull(ref baseCommand, "--grace-period", settings.GracePeriod);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql instance-failover-group delete".
        /// Deletes a failover group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlInstanceFailoverGroup")]
        public dynamic SqlInstanceFailoverGroupDelete(SqlInstanceFailoverGroupDeleteSettings settings) {
            var baseCommand = "az sql instance-failover-group delete";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql instance-failover-group set-primary".
        /// Set the primary of the instance failover group by failing over all databases from the current primary managed instance.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlInstanceFailoverGroup")]
        public dynamic SqlInstanceFailoverGroupSetPrimary(SqlInstanceFailoverGroupSetPrimarySettings settings) {
            var baseCommand = "az sql instance-failover-group set-primary";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--allow-data-loss", settings.AllowDataLoss);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql instance-failover-group show".
        /// Gets a failover group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlInstanceFailoverGroup")]
        public dynamic SqlInstanceFailoverGroupShow(SqlInstanceFailoverGroupShowSettings settings) {
            var baseCommand = "az sql instance-failover-group show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql instance-failover-group update".
        /// Updates the instance failover group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlInstanceFailoverGroup")]
        public dynamic SqlInstanceFailoverGroupUpdate(SqlInstanceFailoverGroupUpdateSettings settings) {
            var baseCommand = "az sql instance-failover-group update";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--failover-policy", settings.FailoverPolicy);
            AppendIfNonNull(ref baseCommand, "--grace-period", settings.GracePeriod);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi create".
        /// Create a managed instance.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMi")]
        public dynamic SqlMiCreate(SqlMiCreateSettings settings) {
            var baseCommand = "az sql mi create";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--proxy-override", settings.ProxyOverride);
            AppendIfNonNull(ref baseCommand, "--public-data-endpoint-enabled", settings.PublicDataEndpointEnabled);
            AppendIfNonNull(ref baseCommand, "--storage", settings.Storage);
            AppendIfNonNull(ref baseCommand, "--timezone-id", settings.TimezoneId);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--edition", settings.Edition);
            AppendIfNonNull(ref baseCommand, "--family", settings.Family);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi delete".
        /// Delete a managed instance.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMi")]
        public dynamic SqlMiDelete(SqlMiDeleteSettings settings) {
            var baseCommand = "az sql mi delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi list".
        /// List available managed instances.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMi")]
        public dynamic SqlMiList(SqlMiListSettings settings) {
            var baseCommand = "az sql mi list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi show".
        /// Get the details for a managed instance.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMi")]
        public dynamic SqlMiShow(SqlMiShowSettings settings) {
            var baseCommand = "az sql mi show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi update".
        /// Update a managed instance.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMi")]
        public dynamic SqlMiUpdate(SqlMiUpdateSettings settings) {
            var baseCommand = "az sql mi update";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--proxy-override", settings.ProxyOverride);
            AppendIfNonNull(ref baseCommand, "--public-data-endpoint-enabled", settings.PublicDataEndpointEnabled);
            AppendIfNonNull(ref baseCommand, "--storage", settings.Storage);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--capacity", settings.Capacity);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi ad-admin create".
        /// Creates a new managed instance Active Directory administrator.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiAdAdmin")]
        public dynamic SqlMiAdAdminCreate(SqlMiAdAdminCreateSettings settings) {
            var baseCommand = "az sql mi ad-admin create";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi ad-admin delete".
        /// Deletes an existing managed instance Active Directory Administrator.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiAdAdmin")]
        public dynamic SqlMiAdAdminDelete(SqlMiAdAdminDeleteSettings settings) {
            var baseCommand = "az sql mi ad-admin delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi ad-admin list".
        /// Returns a list of managed instance Active Directory Administrators.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiAdAdmin")]
        public dynamic SqlMiAdAdminList(SqlMiAdAdminListSettings settings) {
            var baseCommand = "az sql mi ad-admin list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi ad-admin update".
        /// Updates an existing managed instance Active Directory administrator.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiAdAdmin")]
        public dynamic SqlMiAdAdminUpdate(SqlMiAdAdminUpdateSettings settings) {
            var baseCommand = "az sql mi ad-admin update";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi key create".
        /// Creates a SQL Instance key.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiKey")]
        public dynamic SqlMiKeyCreate(SqlMiKeyCreateSettings settings) {
            var baseCommand = "az sql mi key create";
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi key delete".
        /// Deletes a SQL Instance key.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiKey")]
        public dynamic SqlMiKeyDelete(SqlMiKeyDeleteSettings settings) {
            var baseCommand = "az sql mi key delete";
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi key list".
        /// Gets a list of managed instance keys.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiKey")]
        public dynamic SqlMiKeyList(SqlMiKeyListSettings settings) {
            var baseCommand = "az sql mi key list";
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi key show".
        /// Shows a SQL Instance key.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiKey")]
        public dynamic SqlMiKeyShow(SqlMiKeyShowSettings settings) {
            var baseCommand = "az sql mi key show";
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi tde-key set".
        /// Sets the SQL Instance's encryption protector.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiTdeKey")]
        public dynamic SqlMiTdeKeySet(SqlMiTdeKeySetSettings settings) {
            var baseCommand = "az sql mi tde-key set";
            AppendIfNonNull(ref baseCommand, "--server-key-type", settings.ServerKeyType);
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql mi tde-key show".
        /// Gets a managed instance encryption protector.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMiTdeKey")]
        public dynamic SqlMiTdeKeyShow(SqlMiTdeKeyShowSettings settings) {
            var baseCommand = "az sql mi tde-key show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql midb create".
        /// Create a managed database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMidb")]
        public dynamic SqlMidbCreate(SqlMidbCreateSettings settings) {
            var baseCommand = "az sql midb create";
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--collation", settings.Collation);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql midb delete".
        /// Delete a managed database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMidb")]
        public dynamic SqlMidbDelete(SqlMidbDeleteSettings settings) {
            var baseCommand = "az sql midb delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql midb list".
        /// List managed databases on a managed instance.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMidb")]
        public dynamic SqlMidbList(SqlMidbListSettings settings) {
            var baseCommand = "az sql midb list";
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql midb restore".
        /// Restore a managed database.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMidb")]
        public dynamic SqlMidbRestore(SqlMidbRestoreSettings settings) {
            var baseCommand = "az sql midb restore";
            AppendIfNonNull(ref baseCommand, "--dest-name", settings.DestName);
            AppendIfNonNull(ref baseCommand, "--dest-mi", settings.DestMi);
            AppendIfNonNull(ref baseCommand, "--dest-resource-group", settings.DestResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--time", settings.Time);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql midb show".
        /// Get the details for a managed database.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlMidb")]
        public dynamic SqlMidbShow(SqlMidbShowSettings settings) {
            var baseCommand = "az sql midb show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--managed-instance", settings.ManagedInstance);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server create".
        /// Create a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public dynamic SqlServerCreate(SqlServerCreateSettings settings) {
            var baseCommand = "az sql server create";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-user", settings.AdminUser);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server delete".
        /// Deletes a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public dynamic SqlServerDelete(SqlServerDeleteSettings settings) {
            var baseCommand = "az sql server delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server list".
        /// List available servers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public dynamic SqlServerList(SqlServerListSettings settings) {
            var baseCommand = "az sql server list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server list-usages".
        /// Returns server usages.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public dynamic SqlServerListUsages(SqlServerListUsagesSettings settings) {
            var baseCommand = "az sql server list-usages";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server show".
        /// Gets a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public dynamic SqlServerShow(SqlServerShowSettings settings) {
            var baseCommand = "az sql server show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server update".
        /// Update a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public dynamic SqlServerUpdate(SqlServerUpdateSettings settings) {
            var baseCommand = "az sql server update";
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--assign_identity", settings.Assign_Identity);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server wait".
        /// Place the CLI in a waiting state until a condition of the SQL server is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServer")]
        public dynamic SqlServerWait(SqlServerWaitSettings settings) {
            var baseCommand = "az sql server wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server ad-admin create".
        /// Create a new server Active Directory administrator.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerAdAdmin")]
        public dynamic SqlServerAdAdminCreate(SqlServerAdAdminCreateSettings settings) {
            var baseCommand = "az sql server ad-admin create";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server ad-admin delete".
        /// Deletes an existing server Active Directory Administrator.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerAdAdmin")]
        public dynamic SqlServerAdAdminDelete(SqlServerAdAdminDeleteSettings settings) {
            var baseCommand = "az sql server ad-admin delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server ad-admin list".
        /// Returns a list of server Administrators.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerAdAdmin")]
        public dynamic SqlServerAdAdminList(SqlServerAdAdminListSettings settings) {
            var baseCommand = "az sql server ad-admin list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server ad-admin update".
        /// Update an existing server Active Directory administrator.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerAdAdmin")]
        public dynamic SqlServerAdAdminUpdate(SqlServerAdAdminUpdateSettings settings) {
            var baseCommand = "az sql server ad-admin update";
            AppendIfNonNull(ref baseCommand, "--display-name", settings.DisplayName);
            AppendIfNonNull(ref baseCommand, "--object-id", settings.ObjectId);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server conn-policy show".
        /// Gets a server's secure connection policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerConnPolicy")]
        public dynamic SqlServerConnPolicyShow(SqlServerConnPolicyShowSettings settings) {
            var baseCommand = "az sql server conn-policy show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server conn-policy update".
        /// Updates a server's secure connection policy.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerConnPolicy")]
        public dynamic SqlServerConnPolicyUpdate(SqlServerConnPolicyUpdateSettings settings) {
            var baseCommand = "az sql server conn-policy update";
            AppendIfNonNull(ref baseCommand, "--connection-type", settings.ConnectionType);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server dns-alias create".
        /// Creates a server dns alias.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerDnsAlias")]
        public dynamic SqlServerDnsAliasCreate(SqlServerDnsAliasCreateSettings settings) {
            var baseCommand = "az sql server dns-alias create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server dns-alias delete".
        /// Deletes the server DNS alias with the given name.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerDnsAlias")]
        public dynamic SqlServerDnsAliasDelete(SqlServerDnsAliasDeleteSettings settings) {
            var baseCommand = "az sql server dns-alias delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server dns-alias list".
        /// Gets a list of server DNS aliases for a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerDnsAlias")]
        public dynamic SqlServerDnsAliasList(SqlServerDnsAliasListSettings settings) {
            var baseCommand = "az sql server dns-alias list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server dns-alias set".
        /// Sets a server to which DNS alias should point.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerDnsAlias")]
        public dynamic SqlServerDnsAliasSet(SqlServerDnsAliasSetSettings settings) {
            var baseCommand = "az sql server dns-alias set";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--original-server", settings.OriginalServer);
            AppendIfNonNull(ref baseCommand, "--original-resource-group", settings.OriginalResourceGroup);
            AppendIfNonNull(ref baseCommand, "--original-subscription-id", settings.OriginalSubscriptionId);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server dns-alias show".
        /// Gets a server DNS alias.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerDnsAlias")]
        public dynamic SqlServerDnsAliasShow(SqlServerDnsAliasShowSettings settings) {
            var baseCommand = "az sql server dns-alias show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server firewall-rule create".
        /// Create a firewall rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerFirewallRule")]
        public dynamic SqlServerFirewallRuleCreate(SqlServerFirewallRuleCreateSettings settings) {
            var baseCommand = "az sql server firewall-rule create";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server firewall-rule delete".
        /// Deletes a firewall rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerFirewallRule")]
        public dynamic SqlServerFirewallRuleDelete(SqlServerFirewallRuleDeleteSettings settings) {
            var baseCommand = "az sql server firewall-rule delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server firewall-rule list".
        /// List a server's firewall rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerFirewallRule")]
        public dynamic SqlServerFirewallRuleList(SqlServerFirewallRuleListSettings settings) {
            var baseCommand = "az sql server firewall-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server firewall-rule show".
        /// Shows the details for a firewall rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerFirewallRule")]
        public dynamic SqlServerFirewallRuleShow(SqlServerFirewallRuleShowSettings settings) {
            var baseCommand = "az sql server firewall-rule show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server firewall-rule update".
        /// Update a firewall rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerFirewallRule")]
        public dynamic SqlServerFirewallRuleUpdate(SqlServerFirewallRuleUpdateSettings settings) {
            var baseCommand = "az sql server firewall-rule update";
            AppendIfNonNull(ref baseCommand, "--end-ip-address", settings.EndIpAddress);
            AppendIfNonNull(ref baseCommand, "--start-ip-address", settings.StartIpAddress);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server key create".
        /// Creates a server key.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerKey")]
        public dynamic SqlServerKeyCreate(SqlServerKeyCreateSettings settings) {
            var baseCommand = "az sql server key create";
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server key delete".
        /// Deletes a server key.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerKey")]
        public dynamic SqlServerKeyDelete(SqlServerKeyDeleteSettings settings) {
            var baseCommand = "az sql server key delete";
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server key list".
        /// Gets a list of server keys.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerKey")]
        public dynamic SqlServerKeyList(SqlServerKeyListSettings settings) {
            var baseCommand = "az sql server key list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server key show".
        /// Shows a server key.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerKey")]
        public dynamic SqlServerKeyShow(SqlServerKeyShowSettings settings) {
            var baseCommand = "az sql server key show";
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server tde-key set".
        /// Sets the server's encryption protector.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerTdeKey")]
        public dynamic SqlServerTdeKeySet(SqlServerTdeKeySetSettings settings) {
            var baseCommand = "az sql server tde-key set";
            AppendIfNonNull(ref baseCommand, "--server-key-type", settings.ServerKeyType);
            AppendIfNonNull(ref baseCommand, "--kid", settings.Kid);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server tde-key show".
        /// Gets a server encryption protector.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerTdeKey")]
        public dynamic SqlServerTdeKeyShow(SqlServerTdeKeyShowSettings settings) {
            var baseCommand = "az sql server tde-key show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server vnet-rule create".
        /// Create a virtual network rule to allows access to an Azure SQL server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerVnetRule")]
        public dynamic SqlServerVnetRuleCreate(SqlServerVnetRuleCreateSettings settings) {
            var baseCommand = "az sql server vnet-rule create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server vnet-rule delete".
        /// Deletes the virtual network rule with the given name.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerVnetRule")]
        public dynamic SqlServerVnetRuleDelete(SqlServerVnetRuleDeleteSettings settings) {
            var baseCommand = "az sql server vnet-rule delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server vnet-rule list".
        /// Gets a list of virtual network rules in a server.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerVnetRule")]
        public dynamic SqlServerVnetRuleList(SqlServerVnetRuleListSettings settings) {
            var baseCommand = "az sql server vnet-rule list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server vnet-rule show".
        /// Gets a virtual network rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerVnetRule")]
        public dynamic SqlServerVnetRuleShow(SqlServerVnetRuleShowSettings settings) {
            var baseCommand = "az sql server vnet-rule show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql server vnet-rule update".
        /// Update a virtual network rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlServerVnetRule")]
        public dynamic SqlServerVnetRuleUpdate(SqlServerVnetRuleUpdateSettings settings) {
            var baseCommand = "az sql server vnet-rule update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--server", settings.Server);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql virtual-cluster delete".
        /// Delete a virtual cluster.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVirtualCluster")]
        public dynamic SqlVirtualClusterDelete(SqlVirtualClusterDeleteSettings settings) {
            var baseCommand = "az sql virtual-cluster delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql virtual-cluster list".
        /// List available virtual clusters.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVirtualCluster")]
        public dynamic SqlVirtualClusterList(SqlVirtualClusterListSettings settings) {
            var baseCommand = "az sql virtual-cluster list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql virtual-cluster show".
        /// Get the details for a virtual cluster.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVirtualCluster")]
        public dynamic SqlVirtualClusterShow(SqlVirtualClusterShowSettings settings) {
            var baseCommand = "az sql virtual-cluster show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm add-to-group".
        /// Adds SQL virtual machine to a SQL virtual machine group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public dynamic SqlVmAddToGroup(SqlVmAddToGroupSettings settings) {
            var baseCommand = "az sql vm add-to-group";
            AppendIfNonNull(ref baseCommand, "--sqlvm-group", settings.SqlvmGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--bootstrap-acc-pwd", settings.BootstrapAccPwd);
            AppendIfNonNull(ref baseCommand, "--operator-acc-pwd", settings.OperatorAccPwd);
            AppendIfNonNull(ref baseCommand, "--service-acc-pwd", settings.ServiceAccPwd);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm create".
        /// Creates a SQL virtual machine.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public dynamic SqlVmCreate(SqlVmCreateSettings settings) {
            var baseCommand = "az sql vm create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--sql-mgmt-type", settings.SqlMgmtType);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--enable-r-services", settings.EnableRServices);
            AppendIfNonNull(ref baseCommand, "--backup-pwd", settings.BackupPwd);
            AppendIfNonNull(ref baseCommand, "--backup-schedule-type", settings.BackupScheduleType);
            AppendIfNonNull(ref baseCommand, "--backup-system-dbs", settings.BackupSystemDbs);
            AppendIfNonNull(ref baseCommand, "--enable-auto-backup", settings.EnableAutoBackup);
            AppendIfNonNull(ref baseCommand, "--enable-encryption", settings.EnableEncryption);
            AppendIfNonNull(ref baseCommand, "--full-backup-duration", settings.FullBackupDuration);
            AppendIfNonNull(ref baseCommand, "--full-backup-frequency", settings.FullBackupFrequency);
            AppendIfNonNull(ref baseCommand, "--full-backup-start-hour", settings.FullBackupStartHour);
            AppendIfNonNull(ref baseCommand, "--log-backup-frequency", settings.LogBackupFrequency);
            AppendIfNonNull(ref baseCommand, "--retention-period", settings.RetentionPeriod);
            AppendIfNonNull(ref baseCommand, "--sa-key", settings.SaKey);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--day-of-week", settings.DayOfWeek);
            AppendIfNonNull(ref baseCommand, "--enable-auto-patching", settings.EnableAutoPatching);
            AppendIfNonNull(ref baseCommand, "--maintenance-window-duration", settings.MaintenanceWindowDuration);
            AppendIfNonNull(ref baseCommand, "--maintenance-window-start-hour", settings.MaintenanceWindowStartHour);
            AppendIfNonNull(ref baseCommand, "--credential-name", settings.CredentialName);
            AppendIfNonNull(ref baseCommand, "--enable-key-vault-credential", settings.EnableKeyVaultCredential);
            AppendIfNonNull(ref baseCommand, "--key-vault", settings.KeyVault);
            AppendIfNonNull(ref baseCommand, "--sp-name", settings.SpName);
            AppendIfNonNull(ref baseCommand, "--sp-secret", settings.SpSecret);
            AppendIfNonNull(ref baseCommand, "--connectivity-type", settings.ConnectivityType);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--sql-auth-update-pwd", settings.SqlAuthUpdatePwd);
            AppendIfNonNull(ref baseCommand, "--sql-auth-update-username", settings.SqlAuthUpdateUsername);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--image-offer", settings.ImageOffer);
            AppendIfNonNull(ref baseCommand, "--image-sku", settings.ImageSku);
            AppendIfNonNull(ref baseCommand, "--sql-workload-type", settings.SqlWorkloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm delete".
        /// Deletes a SQL virtual machine.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public dynamic SqlVmDelete(SqlVmDeleteSettings settings) {
            var baseCommand = "az sql vm delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm list".
        /// Lists all SQL virtual machines in a resource group or subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public dynamic SqlVmList(SqlVmListSettings settings) {
            var baseCommand = "az sql vm list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm remove-from-group".
        /// Remove SQL virtual machine from its current SQL virtual machine group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public dynamic SqlVmRemoveFromGroup(SqlVmRemoveFromGroupSettings settings) {
            var baseCommand = "az sql vm remove-from-group";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm show".
        /// Gets a SQL virtual machine.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public dynamic SqlVmShow(SqlVmShowSettings settings) {
            var baseCommand = "az sql vm show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm update".
        /// Updates the properties of a SQL virtual machine.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVm")]
        public dynamic SqlVmUpdate(SqlVmUpdateSettings settings) {
            var baseCommand = "az sql vm update";
            AppendIfNonNull(ref baseCommand, "--sql-mgmt-type", settings.SqlMgmtType);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--enable-r-services", settings.EnableRServices);
            AppendIfNonNull(ref baseCommand, "--backup-pwd", settings.BackupPwd);
            AppendIfNonNull(ref baseCommand, "--backup-schedule-type", settings.BackupScheduleType);
            AppendIfNonNull(ref baseCommand, "--backup-system-dbs", settings.BackupSystemDbs);
            AppendIfNonNull(ref baseCommand, "--enable-auto-backup", settings.EnableAutoBackup);
            AppendIfNonNull(ref baseCommand, "--enable-encryption", settings.EnableEncryption);
            AppendIfNonNull(ref baseCommand, "--full-backup-duration", settings.FullBackupDuration);
            AppendIfNonNull(ref baseCommand, "--full-backup-frequency", settings.FullBackupFrequency);
            AppendIfNonNull(ref baseCommand, "--full-backup-start-hour", settings.FullBackupStartHour);
            AppendIfNonNull(ref baseCommand, "--log-backup-frequency", settings.LogBackupFrequency);
            AppendIfNonNull(ref baseCommand, "--retention-period", settings.RetentionPeriod);
            AppendIfNonNull(ref baseCommand, "--sa-key", settings.SaKey);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--day-of-week", settings.DayOfWeek);
            AppendIfNonNull(ref baseCommand, "--enable-auto-patching", settings.EnableAutoPatching);
            AppendIfNonNull(ref baseCommand, "--maintenance-window-duration", settings.MaintenanceWindowDuration);
            AppendIfNonNull(ref baseCommand, "--maintenance-window-start-hour", settings.MaintenanceWindowStartHour);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--credential-name", settings.CredentialName);
            AppendIfNonNull(ref baseCommand, "--enable-key-vault-credential", settings.EnableKeyVaultCredential);
            AppendIfNonNull(ref baseCommand, "--key-vault", settings.KeyVault);
            AppendIfNonNull(ref baseCommand, "--sp-name", settings.SpName);
            AppendIfNonNull(ref baseCommand, "--sp-secret", settings.SpSecret);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--connectivity-type", settings.ConnectivityType);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--image-sku", settings.ImageSku);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--sql-workload-type", settings.SqlWorkloadType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm group create".
        /// Creates a SQL virtual machine group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroup")]
        public dynamic SqlVmGroupCreate(SqlVmGroupCreateSettings settings) {
            var baseCommand = "az sql vm group create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--image-offer", settings.ImageOffer);
            AppendIfNonNull(ref baseCommand, "--image-sku", settings.ImageSku);
            AppendIfNonNull(ref baseCommand, "--domain-fqdn", settings.DomainFqdn);
            AppendIfNonNull(ref baseCommand, "--operator-acc", settings.OperatorAcc);
            AppendIfNonNull(ref baseCommand, "--service-acc", settings.ServiceAcc);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--bootstrap-acc", settings.BootstrapAcc);
            AppendIfNonNull(ref baseCommand, "--fsw-path", settings.FswPath);
            AppendIfNonNull(ref baseCommand, "--ou-path", settings.OuPath);
            AppendIfNonNull(ref baseCommand, "--sa-key", settings.SaKey);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm group delete".
        /// Deletes a SQL virtual machine group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroup")]
        public dynamic SqlVmGroupDelete(SqlVmGroupDeleteSettings settings) {
            var baseCommand = "az sql vm group delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm group list".
        /// Lists all SQL virtual machine groups in a resource group or subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroup")]
        public dynamic SqlVmGroupList(SqlVmGroupListSettings settings) {
            var baseCommand = "az sql vm group list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm group show".
        /// Gets a SQL virtual machine group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroup")]
        public dynamic SqlVmGroupShow(SqlVmGroupShowSettings settings) {
            var baseCommand = "az sql vm group show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm group update".
        /// Updates a SQL virtual machine group if there are not SQL virtual machines attached to the group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroup")]
        public dynamic SqlVmGroupUpdate(SqlVmGroupUpdateSettings settings) {
            var baseCommand = "az sql vm group update";
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--bootstrap-acc", settings.BootstrapAcc);
            AppendIfNonNull(ref baseCommand, "--domain-fqdn", settings.DomainFqdn);
            AppendIfNonNull(ref baseCommand, "--fsw-path", settings.FswPath);
            AppendIfNonNull(ref baseCommand, "--operator-acc", settings.OperatorAcc);
            AppendIfNonNull(ref baseCommand, "--ou-path", settings.OuPath);
            AppendIfNonNull(ref baseCommand, "--sa-key", settings.SaKey);
            AppendIfNonNull(ref baseCommand, "--service-acc", settings.ServiceAcc);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm group ag-listener create".
        /// Creates an availability group listener.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroupAgListener")]
        public dynamic SqlVmGroupAgListenerCreate(SqlVmGroupAgListenerCreateSettings settings) {
            var baseCommand = "az sql vm group ag-listener create";
            AppendIfNonNull(ref baseCommand, "--ag-name", settings.AgName);
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--load-balancer", settings.LoadBalancer);
            AppendIfNonNull(ref baseCommand, "--probe-port", settings.ProbePort);
            AppendIfNonNull(ref baseCommand, "--sqlvms", settings.Sqlvms);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--public-ip", settings.PublicIp);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm group ag-listener delete".
        /// Deletes an availability group listener.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroupAgListener")]
        public dynamic SqlVmGroupAgListenerDelete(SqlVmGroupAgListenerDeleteSettings settings) {
            var baseCommand = "az sql vm group ag-listener delete";
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm group ag-listener list".
        /// Lists all availability group listeners in a SQL virtual machine group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroupAgListener")]
        public dynamic SqlVmGroupAgListenerList(SqlVmGroupAgListenerListSettings settings) {
            var baseCommand = "az sql vm group ag-listener list";
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm group ag-listener show".
        /// Gets an availability group listener.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroupAgListener")]
        public dynamic SqlVmGroupAgListenerShow(SqlVmGroupAgListenerShowSettings settings) {
            var baseCommand = "az sql vm group ag-listener show";
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az sql vm group ag-listener update".
        /// Updates an availability group listener.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzSqlVmGroupAgListener")]
        public dynamic SqlVmGroupAgListenerUpdate(SqlVmGroupAgListenerUpdateSettings settings) {
            var baseCommand = "az sql vm group ag-listener update";
            AppendIfNonNull(ref baseCommand, "--group-name", settings.GroupName);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--sqlvms", settings.Sqlvms);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage copy".
        /// Copy files or directories to or from Azure storage.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorage")]
        public dynamic StorageCopy(StorageCopySettings settings) {
            var baseCommand = "az storage copy";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--blob-type", settings.BlobType);
            AppendIfNonNull(ref baseCommand, "--preserve-s2s-access-tier", settings.PreserveS2sAccessTier);
            AppendIfNonNull(ref baseCommand, "--put-md5", settings.PutMd5);
            AppendIfNonNull(ref baseCommand, "--recursive", settings.Recursive);
            AppendIfNonNull(ref baseCommand, "--destination-account-name", settings.DestinationAccountName);
            AppendIfNonNull(ref baseCommand, "--destination-blob", settings.DestinationBlob);
            AppendIfNonNull(ref baseCommand, "--destination-container", settings.DestinationContainer);
            AppendIfNonNull(ref baseCommand, "--destination-file-path", settings.DestinationFilePath);
            AppendIfNonNull(ref baseCommand, "--destination-local-path", settings.DestinationLocalPath);
            AppendIfNonNull(ref baseCommand, "--destination-share", settings.DestinationShare);
            AppendIfNonNull(ref baseCommand, "--source-account-name", settings.SourceAccountName);
            AppendIfNonNull(ref baseCommand, "--source-blob", settings.SourceBlob);
            AppendIfNonNull(ref baseCommand, "--source-container", settings.SourceContainer);
            AppendIfNonNull(ref baseCommand, "--source-file-path", settings.SourceFilePath);
            AppendIfNonNull(ref baseCommand, "--source-local-path", settings.SourceLocalPath);
            AppendIfNonNull(ref baseCommand, "--source-share", settings.SourceShare);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage remove".
        /// Delete blobs or files from Azure Storage.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorage")]
        public dynamic StorageRemove(StorageRemoveSettings settings) {
            var baseCommand = "az storage remove";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--exclude", settings.Exclude);
            AppendIfNonNull(ref baseCommand, "--include", settings.Include);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--recursive", settings.Recursive);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account check-name".
        /// Checks that the storage account name is valid and is not already in use.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public dynamic StorageAccountCheckName(StorageAccountCheckNameSettings settings) {
            var baseCommand = "az storage account check-name";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account create".
        /// Create a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public dynamic StorageAccountCreate(StorageAccountCreateSettings settings) {
            var baseCommand = "az storage account create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--access-tier", settings.AccessTier);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--custom-domain", settings.CustomDomain);
            AppendIfNonNull(ref baseCommand, "--enable-files-aadds", settings.EnableFilesAadds);
            AppendIfNonNull(ref baseCommand, "--enable-files-adds", settings.EnableFilesAdds);
            AppendIfNonNull(ref baseCommand, "--enable-hierarchical-namespace", settings.EnableHierarchicalNamespace);
            AppendIfNonNull(ref baseCommand, "--enable-large-file-share", settings.EnableLargeFileShare);
            AppendIfNonNull(ref baseCommand, "--encryption-services", settings.EncryptionServices);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--kind", settings.Kind);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--azure-storage-sid", settings.AzureStorageSid);
            AppendIfNonNull(ref baseCommand, "--domain-guid", settings.DomainGuid);
            AppendIfNonNull(ref baseCommand, "--domain-name", settings.DomainName);
            AppendIfNonNull(ref baseCommand, "--domain-sid", settings.DomainSid);
            AppendIfNonNull(ref baseCommand, "--forest-name", settings.ForestName);
            AppendIfNonNull(ref baseCommand, "--net-bios-domain-name", settings.NetBiosDomainName);
            AppendIfNonNull(ref baseCommand, "--bypass", settings.Bypass);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account delete".
        /// Delete a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public dynamic StorageAccountDelete(StorageAccountDeleteSettings settings) {
            var baseCommand = "az storage account delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account generate-sas".
        /// Generates a shared access signature for the account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public dynamic StorageAccountGenerateSas(StorageAccountGenerateSasSettings settings) {
            var baseCommand = "az storage account generate-sas";
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--resource-types", settings.ResourceTypes);
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account list".
        /// List storage accounts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public dynamic StorageAccountList(StorageAccountListSettings settings) {
            var baseCommand = "az storage account list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account revoke-delegation-keys".
        /// Revoke all user delegation keys for a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public dynamic StorageAccountRevokeDelegationKeys(StorageAccountRevokeDelegationKeysSettings settings) {
            var baseCommand = "az storage account revoke-delegation-keys";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account show".
        /// Show storage account properties.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public dynamic StorageAccountShow(StorageAccountShowSettings settings) {
            var baseCommand = "az storage account show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account show-connection-string".
        /// Get the connection string for a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public dynamic StorageAccountShowConnectionString(StorageAccountShowConnectionStringSettings settings) {
            var baseCommand = "az storage account show-connection-string";
            AppendIfNonNull(ref baseCommand, "--blob-endpoint", settings.BlobEndpoint);
            AppendIfNonNull(ref baseCommand, "--file-endpoint", settings.FileEndpoint);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--queue-endpoint", settings.QueueEndpoint);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--table-endpoint", settings.TableEndpoint);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account show-usage".
        /// Show the current count and limit of the storage accounts under the subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public dynamic StorageAccountShowUsage(StorageAccountShowUsageSettings settings) {
            var baseCommand = "az storage account show-usage";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account update".
        /// Update the properties of a storage account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccount")]
        public dynamic StorageAccountUpdate(StorageAccountUpdateSettings settings) {
            var baseCommand = "az storage account update";
            AppendIfNonNull(ref baseCommand, "--access-tier", settings.AccessTier);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--custom-domain", settings.CustomDomain);
            AppendIfNonNull(ref baseCommand, "--enable-files-aadds", settings.EnableFilesAadds);
            AppendIfNonNull(ref baseCommand, "--enable-files-adds", settings.EnableFilesAdds);
            AppendIfNonNull(ref baseCommand, "--enable-large-file-share", settings.EnableLargeFileShare);
            AppendIfNonNull(ref baseCommand, "--encryption-services", settings.EncryptionServices);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--use-subdomain", settings.UseSubdomain);
            AppendIfNonNull(ref baseCommand, "--azure-storage-sid", settings.AzureStorageSid);
            AppendIfNonNull(ref baseCommand, "--domain-guid", settings.DomainGuid);
            AppendIfNonNull(ref baseCommand, "--domain-name", settings.DomainName);
            AppendIfNonNull(ref baseCommand, "--domain-sid", settings.DomainSid);
            AppendIfNonNull(ref baseCommand, "--forest-name", settings.ForestName);
            AppendIfNonNull(ref baseCommand, "--net-bios-domain-name", settings.NetBiosDomainName);
            AppendIfNonNull(ref baseCommand, "--encryption-key-name", settings.EncryptionKeyName);
            AppendIfNonNull(ref baseCommand, "--encryption-key-source", settings.EncryptionKeySource);
            AppendIfNonNull(ref baseCommand, "--encryption-key-vault", settings.EncryptionKeyVault);
            AppendIfNonNull(ref baseCommand, "--encryption-key-version", settings.EncryptionKeyVersion);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--bypass", settings.Bypass);
            AppendIfNonNull(ref baseCommand, "--default-action", settings.DefaultAction);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account keys list".
        /// List the access keys or Kerberos keys (if active directory enabled) for a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountKeys")]
        public dynamic StorageAccountKeysList(StorageAccountKeysListSettings settings) {
            var baseCommand = "az storage account keys list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--expand-key-type", settings.ExpandKeyType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account keys renew".
        /// Regenerate one of the access keys or Kerberos keys (if active directory enabled) for a storage account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountKeys")]
        public dynamic StorageAccountKeysRenew(StorageAccountKeysRenewSettings settings) {
            var baseCommand = "az storage account keys renew";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--key", settings.Key);
            AppendIfNonNull(ref baseCommand, "--key-type", settings.KeyType);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account management-policy create".
        /// Creates the data policy rules associated with the specified storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountManagementPolicy")]
        public dynamic StorageAccountManagementPolicyCreate(StorageAccountManagementPolicyCreateSettings settings) {
            var baseCommand = "az storage account management-policy create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--policy", settings.Policy);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account management-policy delete".
        /// Deletes the managementpolicy associated with the specified storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountManagementPolicy")]
        public dynamic StorageAccountManagementPolicyDelete(StorageAccountManagementPolicyDeleteSettings settings) {
            var baseCommand = "az storage account management-policy delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account management-policy show".
        /// Gets the managementpolicy associated with the specified storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountManagementPolicy")]
        public dynamic StorageAccountManagementPolicyShow(StorageAccountManagementPolicyShowSettings settings) {
            var baseCommand = "az storage account management-policy show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account management-policy update".
        /// Updates the data policy rules associated with the specified storage account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountManagementPolicy")]
        public dynamic StorageAccountManagementPolicyUpdate(StorageAccountManagementPolicyUpdateSettings settings) {
            var baseCommand = "az storage account management-policy update";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account network-rule add".
        /// Add a network rule.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountNetworkRule")]
        public dynamic StorageAccountNetworkRuleAdd(StorageAccountNetworkRuleAddSettings settings) {
            var baseCommand = "az storage account network-rule add";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account network-rule list".
        /// List network rules.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountNetworkRule")]
        public dynamic StorageAccountNetworkRuleList(StorageAccountNetworkRuleListSettings settings) {
            var baseCommand = "az storage account network-rule list";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage account network-rule remove".
        /// Remove a network rule.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageAccountNetworkRule")]
        public dynamic StorageAccountNetworkRuleRemove(StorageAccountNetworkRuleRemoveSettings settings) {
            var baseCommand = "az storage account network-rule remove";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob delete".
        /// Mark a blob or snapshot for deletion.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobDelete(StorageBlobDeleteSettings settings) {
            var baseCommand = "az storage blob delete";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--delete-snapshots", settings.DeleteSnapshots);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob delete-batch".
        /// Delete blobs from a blob container recursively.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobDeleteBatch(StorageBlobDeleteBatchSettings settings) {
            var baseCommand = "az storage blob delete-batch";
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--delete-snapshots", settings.DeleteSnapshots);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob download".
        /// Downloads a blob to a file path, with automatic chunking and progress notifications.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobDownload(StorageBlobDownloadSettings settings) {
            var baseCommand = "az storage blob download";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--end-range", settings.EndRange);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--open-mode", settings.OpenMode);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--socket-timeout", settings.SocketTimeout);
            AppendIfNonNull(ref baseCommand, "--start-range", settings.StartRange);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob download-batch".
        /// Download blobs from a blob container recursively.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobDownloadBatch(StorageBlobDownloadBatchSettings settings) {
            var baseCommand = "az storage blob download-batch";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--socket-timeout", settings.SocketTimeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob exists".
        /// Check for the existence of a blob in a container.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobExists(StorageBlobExistsSettings settings) {
            var baseCommand = "az storage blob exists";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob generate-sas".
        /// Generates a shared access signature for the blob.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobGenerateSas(StorageBlobGenerateSasSettings settings) {
            var baseCommand = "az storage blob generate-sas";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--as-user", settings.AsUser);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--cache-control", settings.CacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--full-uri", settings.FullUri);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob list".
        /// List blobs in a given container.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobList(StorageBlobListSettings settings) {
            var baseCommand = "az storage blob list";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--delimiter", settings.Delimiter);
            AppendIfNonNull(ref baseCommand, "--include", settings.Include);
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob set-tier".
        /// Set the block or page tiers on the blob.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobSetTier(StorageBlobSetTierSettings settings) {
            var baseCommand = "az storage blob set-tier";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob show".
        /// Get the details of a blob.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobShow(StorageBlobShowSettings settings) {
            var baseCommand = "az storage blob show";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob snapshot".
        /// Creates a read-only snapshot of a blob.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobSnapshot(StorageBlobSnapshotSettings settings) {
            var baseCommand = "az storage blob snapshot";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob sync".
        /// Sync blobs recursively to a storage blob container.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobSync(StorageBlobSyncSettings settings) {
            var baseCommand = "az storage blob sync";
            AppendIfNonNull(ref baseCommand, "--container", settings.Container);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob undelete".
        /// The undelete Blob operation restores the contents and metadata of soft deleted blob or snapshot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobUndelete(StorageBlobUndeleteSettings settings) {
            var baseCommand = "az storage blob undelete";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob update".
        /// Sets system properties on the blob.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobUpdate(StorageBlobUpdateSettings settings) {
            var baseCommand = "az storage blob update";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--clear-content-settings", settings.ClearContentSettings);
            AppendIfNonNull(ref baseCommand, "--content-cache-control", settings.ContentCacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-md5", settings.ContentMd5);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob upload".
        /// Upload a file to a storage blob.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobUpload(StorageBlobUploadSettings settings) {
            var baseCommand = "az storage blob upload";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--file", settings.File);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--content-cache-control", settings.ContentCacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-md5", settings.ContentMd5);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--maxsize-condition", settings.MaxsizeCondition);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--socket-timeout", settings.SocketTimeout);
            AppendIfNonNull(ref baseCommand, "--tier", settings.Tier);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob upload-batch".
        /// Upload files from a local directory to a blob container.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobUploadBatch(StorageBlobUploadBatchSettings settings) {
            var baseCommand = "az storage blob upload-batch";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--socket-timeout", settings.SocketTimeout);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--type", settings.Type);
            AppendIfNonNull(ref baseCommand, "--content-cache-control", settings.ContentCacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-md5", settings.ContentMd5);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--maxsize-condition", settings.MaxsizeCondition);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob url".
        /// Create the url to access a blob.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlob")]
        public dynamic StorageBlobUrl(StorageBlobUrlSettings settings) {
            var baseCommand = "az storage blob url";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob copy cancel".
        /// Aborts a pending copy_blob operation, and leaves a destination blob with zero length and full metadata.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobCopy")]
        public dynamic StorageBlobCopyCancel(StorageBlobCopyCancelSettings settings) {
            var baseCommand = "az storage blob copy cancel";
            AppendIfNonNull(ref baseCommand, "--copy-id", settings.CopyId);
            AppendIfNonNull(ref baseCommand, "--destination-blob", settings.DestinationBlob);
            AppendIfNonNull(ref baseCommand, "--destination-container", settings.DestinationContainer);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob copy start".
        /// Copies a blob asynchronously. Use `az storage blob show` to check the status of the blobs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobCopy")]
        public dynamic StorageBlobCopyStart(StorageBlobCopyStartSettings settings) {
            var baseCommand = "az storage blob copy start";
            AppendIfNonNull(ref baseCommand, "--destination-blob", settings.DestinationBlob);
            AppendIfNonNull(ref baseCommand, "--destination-container", settings.DestinationContainer);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--destination-lease-id", settings.DestinationLeaseId);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--requires-sync", settings.RequiresSync);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--source-account-key", settings.SourceAccountKey);
            AppendIfNonNull(ref baseCommand, "--source-account-name", settings.SourceAccountName);
            AppendIfNonNull(ref baseCommand, "--source-blob", settings.SourceBlob);
            AppendIfNonNull(ref baseCommand, "--source-container", settings.SourceContainer);
            AppendIfNonNull(ref baseCommand, "--source-lease-id", settings.SourceLeaseId);
            AppendIfNonNull(ref baseCommand, "--source-path", settings.SourcePath);
            AppendIfNonNull(ref baseCommand, "--source-sas", settings.SourceSas);
            AppendIfNonNull(ref baseCommand, "--source-share", settings.SourceShare);
            AppendIfNonNull(ref baseCommand, "--source-snapshot", settings.SourceSnapshot);
            AppendIfNonNull(ref baseCommand, "--source-uri", settings.SourceUri);
            AppendIfNonNull(ref baseCommand, "--destination-if-match", settings.DestinationIfMatch);
            AppendIfNonNull(ref baseCommand, "--destination-if-modified-since", settings.DestinationIfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--destination-if-none-match", settings.DestinationIfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--destination-if-unmodified-since", settings.DestinationIfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--source-if-match", settings.SourceIfMatch);
            AppendIfNonNull(ref baseCommand, "--source-if-modified-since", settings.SourceIfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--source-if-none-match", settings.SourceIfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--source-if-unmodified-since", settings.SourceIfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob copy start-batch".
        /// Copy multiple blobs or files to a blob container. Use `az storage blob show` to check the status of the blobs.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobCopy")]
        public dynamic StorageBlobCopyStartBatch(StorageBlobCopyStartBatchSettings settings) {
            var baseCommand = "az storage blob copy start-batch";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--destination-container", settings.DestinationContainer);
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--source-account-key", settings.SourceAccountKey);
            AppendIfNonNull(ref baseCommand, "--source-account-name", settings.SourceAccountName);
            AppendIfNonNull(ref baseCommand, "--source-container", settings.SourceContainer);
            AppendIfNonNull(ref baseCommand, "--source-sas", settings.SourceSas);
            AppendIfNonNull(ref baseCommand, "--source-share", settings.SourceShare);
            AppendIfNonNull(ref baseCommand, "--source-uri", settings.SourceUri);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob incremental-copy cancel".
        /// Aborts a pending copy_blob operation, and leaves a destination blob with zero length and full metadata.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobIncrementalCopy")]
        public dynamic StorageBlobIncrementalCopyCancel(StorageBlobIncrementalCopyCancelSettings settings) {
            var baseCommand = "az storage blob incremental-copy cancel";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--copy-id", settings.CopyId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob incremental-copy start".
        /// Copies an incremental copy of a blob asynchronously.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobIncrementalCopy")]
        public dynamic StorageBlobIncrementalCopyStart(StorageBlobIncrementalCopyStartSettings settings) {
            var baseCommand = "az storage blob incremental-copy start";
            AppendIfNonNull(ref baseCommand, "--destination-blob", settings.DestinationBlob);
            AppendIfNonNull(ref baseCommand, "--destination-container", settings.DestinationContainer);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--destination-lease-id", settings.DestinationLeaseId);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--source-account-key", settings.SourceAccountKey);
            AppendIfNonNull(ref baseCommand, "--source-account-name", settings.SourceAccountName);
            AppendIfNonNull(ref baseCommand, "--source-blob", settings.SourceBlob);
            AppendIfNonNull(ref baseCommand, "--source-container", settings.SourceContainer);
            AppendIfNonNull(ref baseCommand, "--source-lease-id", settings.SourceLeaseId);
            AppendIfNonNull(ref baseCommand, "--source-sas", settings.SourceSas);
            AppendIfNonNull(ref baseCommand, "--source-snapshot", settings.SourceSnapshot);
            AppendIfNonNull(ref baseCommand, "--source-uri", settings.SourceUri);
            AppendIfNonNull(ref baseCommand, "--destination-if-match", settings.DestinationIfMatch);
            AppendIfNonNull(ref baseCommand, "--destination-if-modified-since", settings.DestinationIfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--destination-if-none-match", settings.DestinationIfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--destination-if-unmodified-since", settings.DestinationIfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob lease acquire".
        /// Requests a new lease.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobLease")]
        public dynamic StorageBlobLeaseAcquire(StorageBlobLeaseAcquireSettings settings) {
            var baseCommand = "az storage blob lease acquire";
            AppendIfNonNull(ref baseCommand, "--blob-name", settings.BlobName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-duration", settings.LeaseDuration);
            AppendIfNonNull(ref baseCommand, "--proposed-lease-id", settings.ProposedLeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob lease break".
        /// Breaks the lease, if the blob has an active lease.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobLease")]
        public dynamic StorageBlobLeaseBreak(StorageBlobLeaseBreakSettings settings) {
            var baseCommand = "az storage blob lease break";
            AppendIfNonNull(ref baseCommand, "--blob-name", settings.BlobName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-break-period", settings.LeaseBreakPeriod);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob lease change".
        /// Changes the lease ID of an active lease.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobLease")]
        public dynamic StorageBlobLeaseChange(StorageBlobLeaseChangeSettings settings) {
            var baseCommand = "az storage blob lease change";
            AppendIfNonNull(ref baseCommand, "--blob-name", settings.BlobName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--proposed-lease-id", settings.ProposedLeaseId);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob lease release".
        /// Releases the lease.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobLease")]
        public dynamic StorageBlobLeaseRelease(StorageBlobLeaseReleaseSettings settings) {
            var baseCommand = "az storage blob lease release";
            AppendIfNonNull(ref baseCommand, "--blob-name", settings.BlobName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob lease renew".
        /// Renews the lease.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobLease")]
        public dynamic StorageBlobLeaseRenew(StorageBlobLeaseRenewSettings settings) {
            var baseCommand = "az storage blob lease renew";
            AppendIfNonNull(ref baseCommand, "--blob-name", settings.BlobName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob metadata show".
        /// Returns all user-defined metadata for the specified blob or snapshot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobMetadata")]
        public dynamic StorageBlobMetadataShow(StorageBlobMetadataShowSettings settings) {
            var baseCommand = "az storage blob metadata show";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob metadata update".
        /// Sets user-defined metadata for the specified blob as one or more name-value pairs.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobMetadata")]
        public dynamic StorageBlobMetadataUpdate(StorageBlobMetadataUpdateSettings settings) {
            var baseCommand = "az storage blob metadata update";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-none-match", settings.IfNoneMatch);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob service-properties show".
        /// Gets the properties of a storage account's Blob service, including Azure Storage Analytics.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobServiceProperties")]
        public dynamic StorageBlobServicePropertiesShow(StorageBlobServicePropertiesShowSettings settings) {
            var baseCommand = "az storage blob service-properties show";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob service-properties update".
        /// Update storage blob service properties.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobServiceProperties")]
        public dynamic StorageBlobServicePropertiesUpdate(StorageBlobServicePropertiesUpdateSettings settings) {
            var baseCommand = "az storage blob service-properties update";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--delete-retention", settings.DeleteRetention);
            AppendIfNonNull(ref baseCommand, "--delete-retention-period", settings.DeleteRetentionPeriod);
            AppendIfNonNull(ref baseCommand, "--404-document", settings.A404Document);
            AppendIfNonNull(ref baseCommand, "--index-document", settings.IndexDocument);
            AppendIfNonNull(ref baseCommand, "--static-website", settings.StaticWebsite);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob service-properties delete-policy show".
        /// Show the storage blob delete-policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobServicePropertiesDeletePolicy")]
        public dynamic StorageBlobServicePropertiesDeletePolicyShow(StorageBlobServicePropertiesDeletePolicyShowSettings settings) {
            var baseCommand = "az storage blob service-properties delete-policy show";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage blob service-properties delete-policy update".
        /// Update the storage blob delete-policy.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageBlobServicePropertiesDeletePolicy")]
        public dynamic StorageBlobServicePropertiesDeletePolicyUpdate(StorageBlobServicePropertiesDeletePolicyUpdateSettings settings) {
            var baseCommand = "az storage blob service-properties delete-policy update";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--days-retained", settings.DaysRetained);
            AppendIfNonNull(ref baseCommand, "--enable", settings.Enable);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container create".
        /// Create a container in a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public dynamic StorageContainerCreate(StorageContainerCreateSettings settings) {
            var baseCommand = "az storage container create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--fail-on-exist", settings.FailOnExist);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--public-access", settings.PublicAccess);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container delete".
        /// Marks the specified container for deletion.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public dynamic StorageContainerDelete(StorageContainerDeleteSettings settings) {
            var baseCommand = "az storage container delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--bypass-immutability-policy", settings.BypassImmutabilityPolicy);
            AppendIfNonNull(ref baseCommand, "--fail-not-exist", settings.FailNotExist);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container exists".
        /// Check for the existence of a storage container.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public dynamic StorageContainerExists(StorageContainerExistsSettings settings) {
            var baseCommand = "az storage container exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container generate-sas".
        /// Generate a SAS token for a storage container.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public dynamic StorageContainerGenerateSas(StorageContainerGenerateSasSettings settings) {
            var baseCommand = "az storage container generate-sas";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--as-user", settings.AsUser);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--cache-control", settings.CacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container list".
        /// List containers in a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public dynamic StorageContainerList(StorageContainerListSettings settings) {
            var baseCommand = "az storage container list";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--include-metadata", settings.IncludeMetadata);
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container set-permission".
        /// Sets the permissions for the specified container or stored access policies that may be used with Shared Access Signatures.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public dynamic StorageContainerSetPermission(StorageContainerSetPermissionSettings settings) {
            var baseCommand = "az storage container set-permission";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--public-access", settings.PublicAccess);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container show".
        /// Returns all user-defined metadata and system properties for the specified container.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public dynamic StorageContainerShow(StorageContainerShowSettings settings) {
            var baseCommand = "az storage container show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container show-permission".
        /// Gets the permissions for the specified container.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainer")]
        public dynamic StorageContainerShowPermission(StorageContainerShowPermissionSettings settings) {
            var baseCommand = "az storage container show-permission";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container immutability-policy create".
        /// Creates or updates an unlocked immutability policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerImmutabilityPolicy")]
        public dynamic StorageContainerImmutabilityPolicyCreate(StorageContainerImmutabilityPolicyCreateSettings settings) {
            var baseCommand = "az storage container immutability-policy create";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--period", settings.Period);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container immutability-policy delete".
        /// Aborts an unlocked immutability policy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerImmutabilityPolicy")]
        public dynamic StorageContainerImmutabilityPolicyDelete(StorageContainerImmutabilityPolicyDeleteSettings settings) {
            var baseCommand = "az storage container immutability-policy delete";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container immutability-policy extend".
        /// Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerImmutabilityPolicy")]
        public dynamic StorageContainerImmutabilityPolicyExtend(StorageContainerImmutabilityPolicyExtendSettings settings) {
            var baseCommand = "az storage container immutability-policy extend";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--period", settings.Period);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container immutability-policy lock".
        /// Sets the ImmutabilityPolicy to Locked state.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerImmutabilityPolicy")]
        public dynamic StorageContainerImmutabilityPolicyLock(StorageContainerImmutabilityPolicyLockSettings settings) {
            var baseCommand = "az storage container immutability-policy lock";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container immutability-policy show".
        /// Gets the existing immutability policy along with the corresponding ETag in response headers and body.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerImmutabilityPolicy")]
        public dynamic StorageContainerImmutabilityPolicyShow(StorageContainerImmutabilityPolicyShowSettings settings) {
            var baseCommand = "az storage container immutability-policy show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container lease acquire".
        /// Requests a new lease.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLease")]
        public dynamic StorageContainerLeaseAcquire(StorageContainerLeaseAcquireSettings settings) {
            var baseCommand = "az storage container lease acquire";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-duration", settings.LeaseDuration);
            AppendIfNonNull(ref baseCommand, "--proposed-lease-id", settings.ProposedLeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container lease break".
        /// Break the lease, if the container has an active lease.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLease")]
        public dynamic StorageContainerLeaseBreak(StorageContainerLeaseBreakSettings settings) {
            var baseCommand = "az storage container lease break";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-break-period", settings.LeaseBreakPeriod);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container lease change".
        /// Change the lease ID of an active lease.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLease")]
        public dynamic StorageContainerLeaseChange(StorageContainerLeaseChangeSettings settings) {
            var baseCommand = "az storage container lease change";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--proposed-lease-id", settings.ProposedLeaseId);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container lease release".
        /// Release the lease.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLease")]
        public dynamic StorageContainerLeaseRelease(StorageContainerLeaseReleaseSettings settings) {
            var baseCommand = "az storage container lease release";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container lease renew".
        /// Renews the lease.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLease")]
        public dynamic StorageContainerLeaseRenew(StorageContainerLeaseRenewSettings settings) {
            var baseCommand = "az storage container lease renew";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--if-unmodified-since", settings.IfUnmodifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container legal-hold clear".
        /// Clears legal hold tags.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLegalHold")]
        public dynamic StorageContainerLegalHoldClear(StorageContainerLegalHoldClearSettings settings) {
            var baseCommand = "az storage container legal-hold clear";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container legal-hold set".
        /// Sets legal hold tags.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLegalHold")]
        public dynamic StorageContainerLegalHoldSet(StorageContainerLegalHoldSetSettings settings) {
            var baseCommand = "az storage container legal-hold set";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container legal-hold show".
        /// Get the legal hold properties of a container.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerLegalHold")]
        public dynamic StorageContainerLegalHoldShow(StorageContainerLegalHoldShowSettings settings) {
            var baseCommand = "az storage container legal-hold show";
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container metadata show".
        /// Returns all user-defined metadata for the specified container.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerMetadata")]
        public dynamic StorageContainerMetadataShow(StorageContainerMetadataShowSettings settings) {
            var baseCommand = "az storage container metadata show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container metadata update".
        /// Sets one or more user-defined name-value pairs for the specified container.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerMetadata")]
        public dynamic StorageContainerMetadataUpdate(StorageContainerMetadataUpdateSettings settings) {
            var baseCommand = "az storage container metadata update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-modified-since", settings.IfModifiedSince);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container policy create".
        /// Create a stored access policy on the containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerPolicy")]
        public dynamic StorageContainerPolicyCreate(StorageContainerPolicyCreateSettings settings) {
            var baseCommand = "az storage container policy create";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container policy delete".
        /// Delete a stored access policy on a containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerPolicy")]
        public dynamic StorageContainerPolicyDelete(StorageContainerPolicyDeleteSettings settings) {
            var baseCommand = "az storage container policy delete";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container policy list".
        /// List stored access policies on a containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerPolicy")]
        public dynamic StorageContainerPolicyList(StorageContainerPolicyListSettings settings) {
            var baseCommand = "az storage container policy list";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container policy show".
        /// Show a stored access policy on a containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerPolicy")]
        public dynamic StorageContainerPolicyShow(StorageContainerPolicyShowSettings settings) {
            var baseCommand = "az storage container policy show";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage container policy update".
        /// Set a stored access policy on a containing object.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageContainerPolicy")]
        public dynamic StorageContainerPolicyUpdate(StorageContainerPolicyUpdateSettings settings) {
            var baseCommand = "az storage container policy update";
            AppendIfNonNull(ref baseCommand, "--container-name", settings.ContainerName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--lease-id", settings.LeaseId);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage cors add".
        /// Add a CORS rule to a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageCors")]
        public dynamic StorageCorsAdd(StorageCorsAddSettings settings) {
            var baseCommand = "az storage cors add";
            AppendIfNonNull(ref baseCommand, "--methods", settings.Methods);
            AppendIfNonNull(ref baseCommand, "--origins", settings.Origins);
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--allowed-headers", settings.AllowedHeaders);
            AppendIfNonNull(ref baseCommand, "--exposed-headers", settings.ExposedHeaders);
            AppendIfNonNull(ref baseCommand, "--max-age", settings.MaxAge);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage cors clear".
        /// Remove all CORS rules from a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageCors")]
        public dynamic StorageCorsClear(StorageCorsClearSettings settings) {
            var baseCommand = "az storage cors clear";
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage cors list".
        /// List all CORS rules for a storage account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageCors")]
        public dynamic StorageCorsList(StorageCorsListSettings settings) {
            var baseCommand = "az storage cors list";
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage directory create".
        /// Creates a new directory under the specified share or parent directory.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectory")]
        public dynamic StorageDirectoryCreate(StorageDirectoryCreateSettings settings) {
            var baseCommand = "az storage directory create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--fail-on-exist", settings.FailOnExist);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage directory delete".
        /// Deletes the specified empty directory.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectory")]
        public dynamic StorageDirectoryDelete(StorageDirectoryDeleteSettings settings) {
            var baseCommand = "az storage directory delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--fail-not-exist", settings.FailNotExist);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage directory exists".
        /// Check for the existence of a storage directory.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectory")]
        public dynamic StorageDirectoryExists(StorageDirectoryExistsSettings settings) {
            var baseCommand = "az storage directory exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage directory list".
        /// List directories in a share.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectory")]
        public dynamic StorageDirectoryList(StorageDirectoryListSettings settings) {
            var baseCommand = "az storage directory list";
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage directory show".
        /// Returns all user-defined metadata and system properties for the specified directory.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectory")]
        public dynamic StorageDirectoryShow(StorageDirectoryShowSettings settings) {
            var baseCommand = "az storage directory show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage directory metadata show".
        /// Returns all user-defined metadata for the specified directory.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectoryMetadata")]
        public dynamic StorageDirectoryMetadataShow(StorageDirectoryMetadataShowSettings settings) {
            var baseCommand = "az storage directory metadata show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage directory metadata update".
        /// Sets one or more user-defined name-value pairs for the specified directory.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageDirectoryMetadata")]
        public dynamic StorageDirectoryMetadataUpdate(StorageDirectoryMetadataUpdateSettings settings) {
            var baseCommand = "az storage directory metadata update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage entity delete".
        /// Deletes an existing entity in a table.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageEntity")]
        public dynamic StorageEntityDelete(StorageEntityDeleteSettings settings) {
            var baseCommand = "az storage entity delete";
            AppendIfNonNull(ref baseCommand, "--partition-key", settings.PartitionKey);
            AppendIfNonNull(ref baseCommand, "--row-key", settings.RowKey);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage entity insert".
        /// Insert an entity into a table.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageEntity")]
        public dynamic StorageEntityInsert(StorageEntityInsertSettings settings) {
            var baseCommand = "az storage entity insert";
            AppendIfNonNull(ref baseCommand, "--entity", settings.Entity);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--if-exists", settings.IfExists);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage entity merge".
        /// Updates an existing entity by merging the entity's properties.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageEntity")]
        public dynamic StorageEntityMerge(StorageEntityMergeSettings settings) {
            var baseCommand = "az storage entity merge";
            AppendIfNonNull(ref baseCommand, "--entity", settings.Entity);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage entity query".
        /// List entities which satisfy a query.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageEntity")]
        public dynamic StorageEntityQuery(StorageEntityQuerySettings settings) {
            var baseCommand = "az storage entity query";
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--accept", settings.Accept);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage entity replace".
        /// Updates an existing entity in a table.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageEntity")]
        public dynamic StorageEntityReplace(StorageEntityReplaceSettings settings) {
            var baseCommand = "az storage entity replace";
            AppendIfNonNull(ref baseCommand, "--entity", settings.Entity);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--if-match", settings.IfMatch);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage entity show".
        /// Get an entity from the specified table.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageEntity")]
        public dynamic StorageEntityShow(StorageEntityShowSettings settings) {
            var baseCommand = "az storage entity show";
            AppendIfNonNull(ref baseCommand, "--partition-key", settings.PartitionKey);
            AppendIfNonNull(ref baseCommand, "--row-key", settings.RowKey);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--accept", settings.Accept);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file delete".
        /// Marks the specified file for deletion.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileDelete(StorageFileDeleteSettings settings) {
            var baseCommand = "az storage file delete";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file delete-batch".
        /// Delete files from an Azure Storage File Share.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileDeleteBatch(StorageFileDeleteBatchSettings settings) {
            var baseCommand = "az storage file delete-batch";
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file download".
        /// Downloads a file to a file path, with automatic chunking and progress notifications.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileDownload(StorageFileDownloadSettings settings) {
            var baseCommand = "az storage file download";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--dest", settings.Dest);
            AppendIfNonNull(ref baseCommand, "--end-range", settings.EndRange);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--open-mode", settings.OpenMode);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--start-range", settings.StartRange);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file download-batch".
        /// Download files from an Azure Storage File Share to a local directory in a batch operation.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileDownloadBatch(StorageFileDownloadBatchSettings settings) {
            var baseCommand = "az storage file download-batch";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file exists".
        /// Check for the existence of a file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileExists(StorageFileExistsSettings settings) {
            var baseCommand = "az storage file exists";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file generate-sas".
        /// Generates a shared access signature for the file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileGenerateSas(StorageFileGenerateSasSettings settings) {
            var baseCommand = "az storage file generate-sas";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--cache-control", settings.CacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file list".
        /// List files and directories in a share.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileList(StorageFileListSettings settings) {
            var baseCommand = "az storage file list";
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--exclude-dir", settings.ExcludeDir);
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file resize".
        /// Resizes a file to the specified size.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileResize(StorageFileResizeSettings settings) {
            var baseCommand = "az storage file resize";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file show".
        /// Returns all user-defined metadata, standard HTTP properties, and system properties for the file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileShow(StorageFileShowSettings settings) {
            var baseCommand = "az storage file show";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file update".
        /// Sets system properties on the file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileUpdate(StorageFileUpdateSettings settings) {
            var baseCommand = "az storage file update";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--clear-content-settings", settings.ClearContentSettings);
            AppendIfNonNull(ref baseCommand, "--content-cache-control", settings.ContentCacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-md5", settings.ContentMd5);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file upload".
        /// Upload a file to a share that uses the SMB 3.0 protocol.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileUpload(StorageFileUploadSettings settings) {
            var baseCommand = "az storage file upload";
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--content-cache-control", settings.ContentCacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-md5", settings.ContentMd5);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file upload-batch".
        /// Upload files from a local directory to an Azure Storage File Share in a batch operation.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileUploadBatch(StorageFileUploadBatchSettings settings) {
            var baseCommand = "az storage file upload-batch";
            AppendIfNonNull(ref baseCommand, "--destination", settings.Destination);
            AppendIfNonNull(ref baseCommand, "--source", settings.Source);
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--no-progress", settings.NoProgress);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--validate-content", settings.ValidateContent);
            AppendIfNonNull(ref baseCommand, "--content-cache-control", settings.ContentCacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-md5", settings.ContentMd5);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--max-connections", settings.MaxConnections);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file url".
        /// Create the url to access a file.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFile")]
        public dynamic StorageFileUrl(StorageFileUrlSettings settings) {
            var baseCommand = "az storage file url";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file copy cancel".
        /// Aborts a pending copy_file operation, and leaves a destination file  with zero length and full metadata.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFileCopy")]
        public dynamic StorageFileCopyCancel(StorageFileCopyCancelSettings settings) {
            var baseCommand = "az storage file copy cancel";
            AppendIfNonNull(ref baseCommand, "--copy-id", settings.CopyId);
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--destination-share", settings.DestinationShare);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file copy start".
        /// Copies a file asynchronously.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFileCopy")]
        public dynamic StorageFileCopyStart(StorageFileCopyStartSettings settings) {
            var baseCommand = "az storage file copy start";
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--destination-share", settings.DestinationShare);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--file-snapshot", settings.FileSnapshot);
            AppendIfNonNull(ref baseCommand, "--source-account-key", settings.SourceAccountKey);
            AppendIfNonNull(ref baseCommand, "--source-account-name", settings.SourceAccountName);
            AppendIfNonNull(ref baseCommand, "--source-blob", settings.SourceBlob);
            AppendIfNonNull(ref baseCommand, "--source-container", settings.SourceContainer);
            AppendIfNonNull(ref baseCommand, "--source-path", settings.SourcePath);
            AppendIfNonNull(ref baseCommand, "--source-sas", settings.SourceSas);
            AppendIfNonNull(ref baseCommand, "--source-share", settings.SourceShare);
            AppendIfNonNull(ref baseCommand, "--source-snapshot", settings.SourceSnapshot);
            AppendIfNonNull(ref baseCommand, "--source-uri", settings.SourceUri);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file copy start-batch".
        /// Copy multiple files or blobs to a file share.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFileCopy")]
        public dynamic StorageFileCopyStartBatch(StorageFileCopyStartBatchSettings settings) {
            var baseCommand = "az storage file copy start-batch";
            AppendIfNonNull(ref baseCommand, "--destination-path", settings.DestinationPath);
            AppendIfNonNull(ref baseCommand, "--destination-share", settings.DestinationShare);
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--pattern", settings.Pattern);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--source-account-key", settings.SourceAccountKey);
            AppendIfNonNull(ref baseCommand, "--source-account-name", settings.SourceAccountName);
            AppendIfNonNull(ref baseCommand, "--source-container", settings.SourceContainer);
            AppendIfNonNull(ref baseCommand, "--source-sas", settings.SourceSas);
            AppendIfNonNull(ref baseCommand, "--source-share", settings.SourceShare);
            AppendIfNonNull(ref baseCommand, "--source-uri", settings.SourceUri);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file metadata show".
        /// Returns all user-defined metadata for the specified file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFileMetadata")]
        public dynamic StorageFileMetadataShow(StorageFileMetadataShowSettings settings) {
            var baseCommand = "az storage file metadata show";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage file metadata update".
        /// Sets user-defined metadata for the specified file as one or more name-value pairs.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageFileMetadata")]
        public dynamic StorageFileMetadataUpdate(StorageFileMetadataUpdateSettings settings) {
            var baseCommand = "az storage file metadata update";
            AppendIfNonNull(ref baseCommand, "--path", settings.Path);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage logging show".
        /// Show logging settings for a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageLogging")]
        public dynamic StorageLoggingShow(StorageLoggingShowSettings settings) {
            var baseCommand = "az storage logging show";
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage logging update".
        /// Update logging settings for a storage account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageLogging")]
        public dynamic StorageLoggingUpdate(StorageLoggingUpdateSettings settings) {
            var baseCommand = "az storage logging update";
            AppendIfNonNull(ref baseCommand, "--log", settings.Log);
            AppendIfNonNull(ref baseCommand, "--retention", settings.Retention);
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage message clear".
        /// Deletes all messages from the specified queue.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMessage")]
        public dynamic StorageMessageClear(StorageMessageClearSettings settings) {
            var baseCommand = "az storage message clear";
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage message delete".
        /// Deletes the specified message.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMessage")]
        public dynamic StorageMessageDelete(StorageMessageDeleteSettings settings) {
            var baseCommand = "az storage message delete";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--pop-receipt", settings.PopReceipt);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage message get".
        /// Retrieves one or more messages from the front of the queue.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMessage")]
        public dynamic StorageMessageGet(StorageMessageGetSettings settings) {
            var baseCommand = "az storage message get";
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--num-messages", settings.NumMessages);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--visibility-timeout", settings.VisibilityTimeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage message peek".
        /// Retrieves one or more messages from the front of the queue, but does not alter the visibility of the message.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMessage")]
        public dynamic StorageMessagePeek(StorageMessagePeekSettings settings) {
            var baseCommand = "az storage message peek";
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--num-messages", settings.NumMessages);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage message put".
        /// Adds a new message to the back of the message queue.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMessage")]
        public dynamic StorageMessagePut(StorageMessagePutSettings settings) {
            var baseCommand = "az storage message put";
            AppendIfNonNull(ref baseCommand, "--content", settings.Content);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--time-to-live", settings.TimeToLive);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--visibility-timeout", settings.VisibilityTimeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage message update".
        /// Updates the visibility timeout of a message.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMessage")]
        public dynamic StorageMessageUpdate(StorageMessageUpdateSettings settings) {
            var baseCommand = "az storage message update";
            AppendIfNonNull(ref baseCommand, "--id", settings.Id);
            AppendIfNonNull(ref baseCommand, "--pop-receipt", settings.PopReceipt);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--visibility-timeout", settings.VisibilityTimeout);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--content", settings.Content);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage metrics show".
        /// Show metrics settings for a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMetrics")]
        public dynamic StorageMetricsShow(StorageMetricsShowSettings settings) {
            var baseCommand = "az storage metrics show";
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage metrics update".
        /// Update metrics settings for a storage account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageMetrics")]
        public dynamic StorageMetricsUpdate(StorageMetricsUpdateSettings settings) {
            var baseCommand = "az storage metrics update";
            AppendIfNonNull(ref baseCommand, "--retention", settings.Retention);
            AppendIfNonNull(ref baseCommand, "--services", settings.Services);
            AppendIfNonNull(ref baseCommand, "--api", settings.Api);
            AppendIfNonNull(ref baseCommand, "--hour", settings.Hour);
            AppendIfNonNull(ref baseCommand, "--minute", settings.Minute);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue create".
        /// Creates a queue under the given account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueue")]
        public dynamic StorageQueueCreate(StorageQueueCreateSettings settings) {
            var baseCommand = "az storage queue create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--fail-on-exist", settings.FailOnExist);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue delete".
        /// Deletes the specified queue and any messages it contains.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueue")]
        public dynamic StorageQueueDelete(StorageQueueDeleteSettings settings) {
            var baseCommand = "az storage queue delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--fail-not-exist", settings.FailNotExist);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue exists".
        /// Returns a boolean indicating whether the queue exists.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueue")]
        public dynamic StorageQueueExists(StorageQueueExistsSettings settings) {
            var baseCommand = "az storage queue exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue generate-sas".
        /// Generates a shared access signature for the queue.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueue")]
        public dynamic StorageQueueGenerateSas(StorageQueueGenerateSasSettings settings) {
            var baseCommand = "az storage queue generate-sas";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue list".
        /// List queues in a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueue")]
        public dynamic StorageQueueList(StorageQueueListSettings settings) {
            var baseCommand = "az storage queue list";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--include-metadata", settings.IncludeMetadata);
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue stats".
        /// Retrieves statistics related to replication for the Queue service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueue")]
        public dynamic StorageQueueStats(StorageQueueStatsSettings settings) {
            var baseCommand = "az storage queue stats";
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue metadata show".
        /// Retrieves user-defined metadata and queue properties on the specified queue.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueueMetadata")]
        public dynamic StorageQueueMetadataShow(StorageQueueMetadataShowSettings settings) {
            var baseCommand = "az storage queue metadata show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue metadata update".
        /// Sets user-defined metadata on the specified queue.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueueMetadata")]
        public dynamic StorageQueueMetadataUpdate(StorageQueueMetadataUpdateSettings settings) {
            var baseCommand = "az storage queue metadata update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue policy create".
        /// Create a stored access policy on the containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueuePolicy")]
        public dynamic StorageQueuePolicyCreate(StorageQueuePolicyCreateSettings settings) {
            var baseCommand = "az storage queue policy create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue policy delete".
        /// Delete a stored access policy on a containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueuePolicy")]
        public dynamic StorageQueuePolicyDelete(StorageQueuePolicyDeleteSettings settings) {
            var baseCommand = "az storage queue policy delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue policy list".
        /// List stored access policies on a containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueuePolicy")]
        public dynamic StorageQueuePolicyList(StorageQueuePolicyListSettings settings) {
            var baseCommand = "az storage queue policy list";
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue policy show".
        /// Show a stored access policy on a containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueuePolicy")]
        public dynamic StorageQueuePolicyShow(StorageQueuePolicyShowSettings settings) {
            var baseCommand = "az storage queue policy show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage queue policy update".
        /// Set a stored access policy on a containing object.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageQueuePolicy")]
        public dynamic StorageQueuePolicyUpdate(StorageQueuePolicyUpdateSettings settings) {
            var baseCommand = "az storage queue policy update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--queue-name", settings.QueueName);
            AppendIfNonNull(ref baseCommand, "--auth-mode", settings.AuthMode);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share create".
        /// Creates a new share under the specified account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public dynamic StorageShareCreate(StorageShareCreateSettings settings) {
            var baseCommand = "az storage share create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--fail-on-exist", settings.FailOnExist);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--quota", settings.Quota);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share delete".
        /// Marks the specified share for deletion.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public dynamic StorageShareDelete(StorageShareDeleteSettings settings) {
            var baseCommand = "az storage share delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--delete-snapshots", settings.DeleteSnapshots);
            AppendIfNonNull(ref baseCommand, "--fail-not-exist", settings.FailNotExist);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share exists".
        /// Check for the existence of a file share.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public dynamic StorageShareExists(StorageShareExistsSettings settings) {
            var baseCommand = "az storage share exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share generate-sas".
        /// Generates a shared access signature for the share.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public dynamic StorageShareGenerateSas(StorageShareGenerateSasSettings settings) {
            var baseCommand = "az storage share generate-sas";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--cache-control", settings.CacheControl);
            AppendIfNonNull(ref baseCommand, "--content-disposition", settings.ContentDisposition);
            AppendIfNonNull(ref baseCommand, "--content-encoding", settings.ContentEncoding);
            AppendIfNonNull(ref baseCommand, "--content-language", settings.ContentLanguage);
            AppendIfNonNull(ref baseCommand, "--content-type", settings.ContentType);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share list".
        /// List the file shares in a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public dynamic StorageShareList(StorageShareListSettings settings) {
            var baseCommand = "az storage share list";
            AppendIfNonNull(ref baseCommand, "--include-metadata", settings.IncludeMetadata);
            AppendIfNonNull(ref baseCommand, "--include-snapshots", settings.IncludeSnapshots);
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--prefix", settings.Prefix);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share show".
        /// Returns all user-defined metadata and system properties for the specified share.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public dynamic StorageShareShow(StorageShareShowSettings settings) {
            var baseCommand = "az storage share show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share snapshot".
        /// Creates a snapshot of an existing share under the specified account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public dynamic StorageShareSnapshot(StorageShareSnapshotSettings settings) {
            var baseCommand = "az storage share snapshot";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--quota", settings.Quota);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share stats".
        /// Gets the approximate size of the data stored on the share, rounded up to the nearest gigabyte.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public dynamic StorageShareStats(StorageShareStatsSettings settings) {
            var baseCommand = "az storage share stats";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share update".
        /// Sets service-defined properties for the specified share.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public dynamic StorageShareUpdate(StorageShareUpdateSettings settings) {
            var baseCommand = "az storage share update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--quota", settings.Quota);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share url".
        /// Create a URI to access a file share.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShare")]
        public dynamic StorageShareUrl(StorageShareUrlSettings settings) {
            var baseCommand = "az storage share url";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--protocol", settings.Protocol);
            AppendIfNonNull(ref baseCommand, "--unc", settings.Unc);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share metadata show".
        /// Returns all user-defined metadata for the specified share.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShareMetadata")]
        public dynamic StorageShareMetadataShow(StorageShareMetadataShowSettings settings) {
            var baseCommand = "az storage share metadata show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--snapshot", settings.Snapshot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share metadata update".
        /// Sets one or more user-defined name-value pairs for the specified share.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageShareMetadata")]
        public dynamic StorageShareMetadataUpdate(StorageShareMetadataUpdateSettings settings) {
            var baseCommand = "az storage share metadata update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--metadata", settings.Metadata);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share policy create".
        /// Create a stored access policy on the containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageSharePolicy")]
        public dynamic StorageSharePolicyCreate(StorageSharePolicyCreateSettings settings) {
            var baseCommand = "az storage share policy create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share policy delete".
        /// Delete a stored access policy on a containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageSharePolicy")]
        public dynamic StorageSharePolicyDelete(StorageSharePolicyDeleteSettings settings) {
            var baseCommand = "az storage share policy delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share policy list".
        /// List stored access policies on a containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageSharePolicy")]
        public dynamic StorageSharePolicyList(StorageSharePolicyListSettings settings) {
            var baseCommand = "az storage share policy list";
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share policy show".
        /// Show a stored access policy on a containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageSharePolicy")]
        public dynamic StorageSharePolicyShow(StorageSharePolicyShowSettings settings) {
            var baseCommand = "az storage share policy show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage share policy update".
        /// Set a stored access policy on a containing object.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageSharePolicy")]
        public dynamic StorageSharePolicyUpdate(StorageSharePolicyUpdateSettings settings) {
            var baseCommand = "az storage share policy update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage table create".
        /// Creates a new table in the storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTable")]
        public dynamic StorageTableCreate(StorageTableCreateSettings settings) {
            var baseCommand = "az storage table create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--fail-on-exist", settings.FailOnExist);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage table delete".
        /// Deletes the specified table and any data it contains.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTable")]
        public dynamic StorageTableDelete(StorageTableDeleteSettings settings) {
            var baseCommand = "az storage table delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--fail-not-exist", settings.FailNotExist);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage table exists".
        /// Returns a boolean indicating whether the table exists.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTable")]
        public dynamic StorageTableExists(StorageTableExistsSettings settings) {
            var baseCommand = "az storage table exists";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage table generate-sas".
        /// Generates a shared access signature for the table.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTable")]
        public dynamic StorageTableGenerateSas(StorageTableGenerateSasSettings settings) {
            var baseCommand = "az storage table generate-sas";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--end-pk", settings.EndPk);
            AppendIfNonNull(ref baseCommand, "--end-rk", settings.EndRk);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--ip", settings.Ip);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--policy-name", settings.PolicyName);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--start-pk", settings.StartPk);
            AppendIfNonNull(ref baseCommand, "--start-rk", settings.StartRk);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage table list".
        /// List tables in a storage account.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTable")]
        public dynamic StorageTableList(StorageTableListSettings settings) {
            var baseCommand = "az storage table list";
            AppendIfNonNull(ref baseCommand, "--marker", settings.Marker);
            AppendIfNonNull(ref baseCommand, "--num-results", settings.NumResults);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage table stats".
        /// Retrieves statistics related to replication for the Table service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTable")]
        public dynamic StorageTableStats(StorageTableStatsSettings settings) {
            var baseCommand = "az storage table stats";
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage table policy create".
        /// Create a stored access policy on the containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTablePolicy")]
        public dynamic StorageTablePolicyCreate(StorageTablePolicyCreateSettings settings) {
            var baseCommand = "az storage table policy create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage table policy delete".
        /// Delete a stored access policy on a containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTablePolicy")]
        public dynamic StorageTablePolicyDelete(StorageTablePolicyDeleteSettings settings) {
            var baseCommand = "az storage table policy delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage table policy list".
        /// List stored access policies on a containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTablePolicy")]
        public dynamic StorageTablePolicyList(StorageTablePolicyListSettings settings) {
            var baseCommand = "az storage table policy list";
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage table policy show".
        /// Show a stored access policy on a containing object.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTablePolicy")]
        public dynamic StorageTablePolicyShow(StorageTablePolicyShowSettings settings) {
            var baseCommand = "az storage table policy show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az storage table policy update".
        /// Set a stored access policy on a containing object.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzStorageTablePolicy")]
        public dynamic StorageTablePolicyUpdate(StorageTablePolicyUpdateSettings settings) {
            var baseCommand = "az storage table policy update";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--table-name", settings.TableName);
            AppendIfNonNull(ref baseCommand, "--expiry", settings.Expiry);
            AppendIfNonNull(ref baseCommand, "--permissions", settings.Permissions);
            AppendIfNonNull(ref baseCommand, "--start", settings.Start);
            AppendIfNonNull(ref baseCommand, "--account-key", settings.AccountKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--connection-string", settings.ConnectionString);
            AppendIfNonNull(ref baseCommand, "--sas-token", settings.SasToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az tag add-value".
        /// Creates a tag value.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzTag")]
        public dynamic TagAddValue(TagAddValueSettings settings) {
            var baseCommand = "az tag add-value";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az tag create".
        /// Creates a tag in the subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzTag")]
        public dynamic TagCreate(TagCreateSettings settings) {
            var baseCommand = "az tag create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az tag delete".
        /// Deletes a tag from the subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzTag")]
        public dynamic TagDelete(TagDeleteSettings settings) {
            var baseCommand = "az tag delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az tag list".
        /// Gets the names and values of all resource tags that are defined in a subscription.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzTag")]
        public dynamic TagList(TagListSettings settings) {
            var baseCommand = "az tag list";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az tag remove-value".
        /// Deletes a tag value.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzTag")]
        public dynamic TagRemoveValue(TagRemoveValueSettings settings) {
            var baseCommand = "az tag remove-value";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--value", settings.Value);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm capture".
        /// Capture information for a stopped VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmCapture(VmCaptureSettings settings) {
            var baseCommand = "az vm capture";
            AppendIfNonNull(ref baseCommand, "--vhd-name-prefix", settings.VhdNamePrefix);
            AppendIfNonNull(ref baseCommand, "--overwrite", settings.Overwrite);
            AppendIfNonNull(ref baseCommand, "--storage-container", settings.StorageContainer);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm convert".
        /// Convert a VM with unmanaged disks to use managed disks.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmConvert(VmConvertSettings settings) {
            var baseCommand = "az vm convert";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm create".
        /// Create an Azure Virtual Machine.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmCreate(VmCreateSettings settings) {
            var baseCommand = "az vm create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--availability-set", settings.AvailabilitySet);
            AppendIfNonNull(ref baseCommand, "--boot-diagnostics-storage", settings.BootDiagnosticsStorage);
            AppendIfNonNull(ref baseCommand, "--computer-name", settings.ComputerName);
            AppendIfNonNull(ref baseCommand, "--custom-data", settings.CustomData);
            AppendIfNonNull(ref baseCommand, "--enable-agent", settings.EnableAgent);
            AppendIfNonNull(ref baseCommand, "--eviction-policy", settings.EvictionPolicy);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--max-price", settings.MaxPrice);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ppg", settings.Ppg);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--secrets", settings.Secrets);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--validate", settings.Validate);
            AppendIfNonNull(ref baseCommand, "--vmss", settings.Vmss);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-username", settings.AdminUsername);
            AppendIfNonNull(ref baseCommand, "--authentication-type", settings.AuthenticationType);
            AppendIfNonNull(ref baseCommand, "--generate-ssh-keys", settings.GenerateSshKeys);
            AppendIfNonNull(ref baseCommand, "--ssh-dest-key-path", settings.SshDestKeyPath);
            AppendIfNonNull(ref baseCommand, "--ssh-key-values", settings.SshKeyValues);
            AppendIfNonNull(ref baseCommand, "--host", settings.Host);
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--plan-name", settings.PlanName);
            AppendIfNonNull(ref baseCommand, "--plan-product", settings.PlanProduct);
            AppendIfNonNull(ref baseCommand, "--plan-promotion-code", settings.PlanPromotionCode);
            AppendIfNonNull(ref baseCommand, "--plan-publisher", settings.PlanPublisher);
            AppendIfNonNull(ref baseCommand, "--workspace", settings.Workspace);
            AppendIfNonNull(ref baseCommand, "--accelerated-networking", settings.AcceleratedNetworking);
            AppendIfNonNull(ref baseCommand, "--asgs", settings.Asgs);
            AppendIfNonNull(ref baseCommand, "--nics", settings.Nics);
            AppendIfNonNull(ref baseCommand, "--nsg", settings.Nsg);
            AppendIfNonNull(ref baseCommand, "--nsg-rule", settings.NsgRule);
            AppendIfNonNull(ref baseCommand, "--private-ip-address", settings.PrivateIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address-allocation", settings.PublicIpAddressAllocation);
            AppendIfNonNull(ref baseCommand, "--public-ip-address-dns-name", settings.PublicIpAddressDnsName);
            AppendIfNonNull(ref baseCommand, "--public-ip-sku", settings.PublicIpSku);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--subnet-address-prefix", settings.SubnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-address-prefix", settings.VnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--attach-data-disks", settings.AttachDataDisks);
            AppendIfNonNull(ref baseCommand, "--attach-os-disk", settings.AttachOsDisk);
            AppendIfNonNull(ref baseCommand, "--data-disk-caching", settings.DataDiskCaching);
            AppendIfNonNull(ref baseCommand, "--data-disk-sizes-gb", settings.DataDiskSizesGb);
            AppendIfNonNull(ref baseCommand, "--ephemeral-os-disk", settings.EphemeralOsDisk);
            AppendIfNonNull(ref baseCommand, "--os-disk-caching", settings.OsDiskCaching);
            AppendIfNonNull(ref baseCommand, "--os-disk-name", settings.OsDiskName);
            AppendIfNonNull(ref baseCommand, "--os-disk-size-gb", settings.OsDiskSizeGb);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--storage-account", settings.StorageAccount);
            AppendIfNonNull(ref baseCommand, "--storage-container-name", settings.StorageContainerName);
            AppendIfNonNull(ref baseCommand, "--storage-sku", settings.StorageSku);
            AppendIfNonNull(ref baseCommand, "--ultra-ssd-enabled", settings.UltraSsdEnabled);
            AppendIfNonNull(ref baseCommand, "--use-unmanaged-disk", settings.UseUnmanagedDisk);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm deallocate".
        /// Deallocate a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmDeallocate(VmDeallocateSettings settings) {
            var baseCommand = "az vm deallocate";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm delete".
        /// Delete a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmDelete(VmDeleteSettings settings) {
            var baseCommand = "az vm delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm generalize".
        /// Mark a VM as generalized, allowing it to be imaged for multiple deployments.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmGeneralize(VmGeneralizeSettings settings) {
            var baseCommand = "az vm generalize";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm get-instance-view".
        /// Get instance information about a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmGetInstanceView(VmGetInstanceViewSettings settings) {
            var baseCommand = "az vm get-instance-view";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm list".
        /// List details of Virtual Machines.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmList(VmListSettings settings) {
            var baseCommand = "az vm list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--show-details", settings.ShowDetails);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm list-ip-addresses".
        /// List IP addresses associated with a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmListIpAddresses(VmListIpAddressesSettings settings) {
            var baseCommand = "az vm list-ip-addresses";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm list-sizes".
        /// List available sizes for VMs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmListSizes(VmListSizesSettings settings) {
            var baseCommand = "az vm list-sizes";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm list-skus".
        /// Get details for compute-related resource SKUs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmListSkus(VmListSkusSettings settings) {
            var baseCommand = "az vm list-skus";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--resource-type", settings.ResourceType);
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm list-usage".
        /// List available usage resources for VMs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmListUsage(VmListUsageSettings settings) {
            var baseCommand = "az vm list-usage";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm list-vm-resize-options".
        /// List available resizing options for VMs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmListVmResizeOptions(VmListVmResizeOptionsSettings settings) {
            var baseCommand = "az vm list-vm-resize-options";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm open-port".
        /// Opens a VM to inbound traffic on specified ports.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmOpenPort(VmOpenPortSettings settings) {
            var baseCommand = "az vm open-port";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--apply-to-subnet", settings.ApplyToSubnet);
            AppendIfNonNull(ref baseCommand, "--nsg-name", settings.NsgName);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm perform-maintenance".
        /// The operation to perform maintenance on a virtual machine.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmPerformMaintenance(VmPerformMaintenanceSettings settings) {
            var baseCommand = "az vm perform-maintenance";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm redeploy".
        /// Redeploy an existing VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmRedeploy(VmRedeploySettings settings) {
            var baseCommand = "az vm redeploy";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm resize".
        /// Update a VM's size.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmResize(VmResizeSettings settings) {
            var baseCommand = "az vm resize";
            AppendIfNonNull(ref baseCommand, "--size", settings.Size);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm restart".
        /// Restart VMs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmRestart(VmRestartSettings settings) {
            var baseCommand = "az vm restart";
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm show".
        /// Get the details of a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmShow(VmShowSettings settings) {
            var baseCommand = "az vm show";
            AppendIfNonNull(ref baseCommand, "--show-details", settings.ShowDetails);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm start".
        /// Start a stopped VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmStart(VmStartSettings settings) {
            var baseCommand = "az vm start";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm stop".
        /// Power off (stop) a running VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmStop(VmStopSettings settings) {
            var baseCommand = "az vm stop";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--skip-shutdown", settings.SkipShutdown);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm update".
        /// Update the properties of a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmUpdate(VmUpdateSettings settings) {
            var baseCommand = "az vm update";
            AppendIfNonNull(ref baseCommand, "--disk-caching", settings.DiskCaching);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--os-disk", settings.OsDisk);
            AppendIfNonNull(ref baseCommand, "--ultra-ssd-enabled", settings.UltraSsdEnabled);
            AppendIfNonNull(ref baseCommand, "--write-accelerator", settings.WriteAccelerator);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm wait".
        /// Place the CLI in a waiting state until a condition of the VM is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVm")]
        public dynamic VmWait(VmWaitSettings settings) {
            var baseCommand = "az vm wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm availability-set convert".
        /// Convert an Azure Availability Set to contain VMs with managed disks.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public dynamic VmAvailabilitySetConvert(VmAvailabilitySetConvertSettings settings) {
            var baseCommand = "az vm availability-set convert";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm availability-set create".
        /// Create an Azure Availability Set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public dynamic VmAvailabilitySetCreate(VmAvailabilitySetCreateSettings settings) {
            var baseCommand = "az vm availability-set create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--platform-fault-domain-count", settings.PlatformFaultDomainCount);
            AppendIfNonNull(ref baseCommand, "--platform-update-domain-count", settings.PlatformUpdateDomainCount);
            AppendIfNonNull(ref baseCommand, "--ppg", settings.Ppg);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--unmanaged", settings.Unmanaged);
            AppendIfNonNull(ref baseCommand, "--validate", settings.Validate);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm availability-set delete".
        /// Delete an availability set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public dynamic VmAvailabilitySetDelete(VmAvailabilitySetDeleteSettings settings) {
            var baseCommand = "az vm availability-set delete";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm availability-set list".
        /// List availability sets.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public dynamic VmAvailabilitySetList(VmAvailabilitySetListSettings settings) {
            var baseCommand = "az vm availability-set list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm availability-set list-sizes".
        /// List VM sizes for an availability set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public dynamic VmAvailabilitySetListSizes(VmAvailabilitySetListSizesSettings settings) {
            var baseCommand = "az vm availability-set list-sizes";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm availability-set show".
        /// Get information for an availability set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public dynamic VmAvailabilitySetShow(VmAvailabilitySetShowSettings settings) {
            var baseCommand = "az vm availability-set show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm availability-set update".
        /// Update an Azure Availability Set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmAvailabilitySet")]
        public dynamic VmAvailabilitySetUpdate(VmAvailabilitySetUpdateSettings settings) {
            var baseCommand = "az vm availability-set update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm boot-diagnostics disable".
        /// Disable the boot diagnostics on a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmBootDiagnostics")]
        public dynamic VmBootDiagnosticsDisable(VmBootDiagnosticsDisableSettings settings) {
            var baseCommand = "az vm boot-diagnostics disable";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm boot-diagnostics enable".
        /// Enable the boot diagnostics on a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmBootDiagnostics")]
        public dynamic VmBootDiagnosticsEnable(VmBootDiagnosticsEnableSettings settings) {
            var baseCommand = "az vm boot-diagnostics enable";
            AppendIfNonNull(ref baseCommand, "--storage", settings.Storage);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm boot-diagnostics get-boot-log".
        /// Get the boot diagnostics log from a VM.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmBootDiagnostics")]
        public dynamic VmBootDiagnosticsGetBootLog(VmBootDiagnosticsGetBootLogSettings settings) {
            var baseCommand = "az vm boot-diagnostics get-boot-log";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm diagnostics get-default-config".
        /// Get the default configuration settings for a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmDiagnostics")]
        public dynamic VmDiagnosticsGetDefaultConfig(VmDiagnosticsGetDefaultConfigSettings settings) {
            var baseCommand = "az vm diagnostics get-default-config";
            AppendIfNonNull(ref baseCommand, "--is-windows-os", settings.IsWindowsOs);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm diagnostics set".
        /// Configure the Azure VM diagnostics extension.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmDiagnostics")]
        public dynamic VmDiagnosticsSet(VmDiagnosticsSetSettings settings) {
            var baseCommand = "az vm diagnostics set";
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--no-auto-upgrade", settings.NoAutoUpgrade);
            AppendIfNonNull(ref baseCommand, "--protected-settings", settings.ProtectedSettings);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm disk attach".
        /// Attach a managed persistent disk to a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmDisk")]
        public dynamic VmDiskAttach(VmDiskAttachSettings settings) {
            var baseCommand = "az vm disk attach";
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--caching", settings.Caching);
            AppendIfNonNull(ref baseCommand, "--enable-write-accelerator", settings.EnableWriteAccelerator);
            AppendIfNonNull(ref baseCommand, "--lun", settings.Lun);
            AppendIfNonNull(ref baseCommand, "--new", settings.New);
            AppendIfNonNull(ref baseCommand, "--size-gb", settings.SizeGb);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm disk detach".
        /// Detach a managed disk from a VM.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmDisk")]
        public dynamic VmDiskDetach(VmDiskDetachSettings settings) {
            var baseCommand = "az vm disk detach";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm encryption disable".
        /// Disable disk encryption on the OS disk and/or data disks. Decrypt mounted disks.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmEncryption")]
        public dynamic VmEncryptionDisable(VmEncryptionDisableSettings settings) {
            var baseCommand = "az vm encryption disable";
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--volume-type", settings.VolumeType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm encryption enable".
        /// Enable disk encryption on the OS disk and/or data disks. Encrypt mounted disks.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmEncryption")]
        public dynamic VmEncryptionEnable(VmEncryptionEnableSettings settings) {
            var baseCommand = "az vm encryption enable";
            AppendIfNonNull(ref baseCommand, "--disk-encryption-keyvault", settings.DiskEncryptionKeyvault);
            AppendIfNonNull(ref baseCommand, "--encrypt-format-all", settings.EncryptFormatAll);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--key-encryption-algorithm", settings.KeyEncryptionAlgorithm);
            AppendIfNonNull(ref baseCommand, "--key-encryption-key", settings.KeyEncryptionKey);
            AppendIfNonNull(ref baseCommand, "--key-encryption-keyvault", settings.KeyEncryptionKeyvault);
            AppendIfNonNull(ref baseCommand, "--volume-type", settings.VolumeType);
            AppendIfNonNull(ref baseCommand, "--aad-client-cert-thumbprint", settings.AadClientCertThumbprint);
            AppendIfNonNull(ref baseCommand, "--aad-client-id", settings.AadClientId);
            AppendIfNonNull(ref baseCommand, "--aad-client-secret", settings.AadClientSecret);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm encryption show".
        /// Show encryption status.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmEncryption")]
        public dynamic VmEncryptionShow(VmEncryptionShowSettings settings) {
            var baseCommand = "az vm encryption show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm extension delete".
        /// Remove an extension attached to a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtension")]
        public dynamic VmExtensionDelete(VmExtensionDeleteSettings settings) {
            var baseCommand = "az vm extension delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm extension list".
        /// List the extensions attached to a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtension")]
        public dynamic VmExtensionList(VmExtensionListSettings settings) {
            var baseCommand = "az vm extension list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm extension set".
        /// Set extensions for a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtension")]
        public dynamic VmExtensionSet(VmExtensionSetSettings settings) {
            var baseCommand = "az vm extension set";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--extension-instance-name", settings.ExtensionInstanceName);
            AppendIfNonNull(ref baseCommand, "--force-update", settings.ForceUpdate);
            AppendIfNonNull(ref baseCommand, "--no-auto-upgrade", settings.NoAutoUpgrade);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--protected-settings", settings.ProtectedSettings);
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm extension show".
        /// Display information about extensions attached to a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtension")]
        public dynamic VmExtensionShow(VmExtensionShowSettings settings) {
            var baseCommand = "az vm extension show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm extension wait".
        /// Place the CLI in a waiting state until a condition of a virtual machine extension is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtension")]
        public dynamic VmExtensionWait(VmExtensionWaitSettings settings) {
            var baseCommand = "az vm extension wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm extension image list".
        /// List the information on available extensions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtensionImage")]
        public dynamic VmExtensionImageList(VmExtensionImageListSettings settings) {
            var baseCommand = "az vm extension image list";
            AppendIfNonNull(ref baseCommand, "--latest", settings.Latest);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm extension image list-names".
        /// List the names of available extensions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtensionImage")]
        public dynamic VmExtensionImageListNames(VmExtensionImageListNamesSettings settings) {
            var baseCommand = "az vm extension image list-names";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm extension image list-versions".
        /// List the versions for available extensions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtensionImage")]
        public dynamic VmExtensionImageListVersions(VmExtensionImageListVersionsSettings settings) {
            var baseCommand = "az vm extension image list-versions";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm extension image show".
        /// Display information for an extension.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmExtensionImage")]
        public dynamic VmExtensionImageShow(VmExtensionImageShowSettings settings) {
            var baseCommand = "az vm extension image show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm host create".
        /// Create a dedicated host.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHost")]
        public dynamic VmHostCreate(VmHostCreateSettings settings) {
            var baseCommand = "az vm host create";
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--auto-replace", settings.AutoReplace);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--platform-fault-domain", settings.PlatformFaultDomain);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm host delete".
        /// Delete a dedicated host.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHost")]
        public dynamic VmHostDelete(VmHostDeleteSettings settings) {
            var baseCommand = "az vm host delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm host get-instance-view".
        /// Get instance information about a dedicated host.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHost")]
        public dynamic VmHostGetInstanceView(VmHostGetInstanceViewSettings settings) {
            var baseCommand = "az vm host get-instance-view";
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm host list".
        /// List dedicated hosts.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHost")]
        public dynamic VmHostList(VmHostListSettings settings) {
            var baseCommand = "az vm host list";
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm host show".
        /// Get the details of a dedicated host.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHost")]
        public dynamic VmHostShow(VmHostShowSettings settings) {
            var baseCommand = "az vm host show";
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm host update".
        /// Update a dedicated host.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHost")]
        public dynamic VmHostUpdate(VmHostUpdateSettings settings) {
            var baseCommand = "az vm host update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--host-group", settings.HostGroup);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm host group create".
        /// Create a dedicated host group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHostGroup")]
        public dynamic VmHostGroupCreate(VmHostGroupCreateSettings settings) {
            var baseCommand = "az vm host group create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--platform-fault-domain-count", settings.PlatformFaultDomainCount);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--zone", settings.Zone);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm host group delete".
        /// Delete a dedicated host group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHostGroup")]
        public dynamic VmHostGroupDelete(VmHostGroupDeleteSettings settings) {
            var baseCommand = "az vm host group delete";
            AppendIfNonNull(ref baseCommand, "--yes", settings.Yes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm host group list".
        /// List dedicated host groups.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHostGroup")]
        public dynamic VmHostGroupList(VmHostGroupListSettings settings) {
            var baseCommand = "az vm host group list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm host group show".
        /// Get the details of a dedicated host group.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHostGroup")]
        public dynamic VmHostGroupShow(VmHostGroupShowSettings settings) {
            var baseCommand = "az vm host group show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm host group update".
        /// Update a dedicated host group.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmHostGroup")]
        public dynamic VmHostGroupUpdate(VmHostGroupUpdateSettings settings) {
            var baseCommand = "az vm host group update";
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm identity assign".
        /// Enable managed service identity on a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmIdentity")]
        public dynamic VmIdentityAssign(VmIdentityAssignSettings settings) {
            var baseCommand = "az vm identity assign";
            AppendIfNonNull(ref baseCommand, "--identities", settings.Identities);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm identity remove".
        /// Remove managed service identities from a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmIdentity")]
        public dynamic VmIdentityRemove(VmIdentityRemoveSettings settings) {
            var baseCommand = "az vm identity remove";
            AppendIfNonNull(ref baseCommand, "--identities", settings.Identities);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm identity show".
        /// Display VM's managed identity info.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmIdentity")]
        public dynamic VmIdentityShow(VmIdentityShowSettings settings) {
            var baseCommand = "az vm identity show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm image accept-terms".
        /// Accept Azure Marketplace term so that the image can be used to create VMs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImage")]
        public dynamic VmImageAcceptTerms(VmImageAcceptTermsSettings settings) {
            var baseCommand = "az vm image accept-terms";
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--urn", settings.Urn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm image list".
        /// List the VM/VMSS images available in the Azure Marketplace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImage")]
        public dynamic VmImageList(VmImageListSettings settings) {
            var baseCommand = "az vm image list";
            AppendIfNonNull(ref baseCommand, "--all", settings.All);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm image list-offers".
        /// List the VM image offers available in the Azure Marketplace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImage")]
        public dynamic VmImageListOffers(VmImageListOffersSettings settings) {
            var baseCommand = "az vm image list-offers";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm image list-publishers".
        /// List the VM image publishers available in the Azure Marketplace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImage")]
        public dynamic VmImageListPublishers(VmImageListPublishersSettings settings) {
            var baseCommand = "az vm image list-publishers";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm image list-skus".
        /// List the VM image SKUs available in the Azure Marketplace.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImage")]
        public dynamic VmImageListSkus(VmImageListSkusSettings settings) {
            var baseCommand = "az vm image list-skus";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm image show".
        /// Get the details for a VM image available in the Azure Marketplace.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImage")]
        public dynamic VmImageShow(VmImageShowSettings settings) {
            var baseCommand = "az vm image show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--urn", settings.Urn);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm image terms accept".
        /// Accept Azure Marketplace image terms so that the image can be used to create VMs.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImageTerms")]
        public dynamic VmImageTermsAccept(VmImageTermsAcceptSettings settings) {
            var baseCommand = "az vm image terms accept";
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--urn", settings.Urn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm image terms cancel".
        /// Cancel Azure Marketplace image terms.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImageTerms")]
        public dynamic VmImageTermsCancel(VmImageTermsCancelSettings settings) {
            var baseCommand = "az vm image terms cancel";
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--urn", settings.Urn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm image terms show".
        /// Get the details of Azure Marketplace image terms.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmImageTerms")]
        public dynamic VmImageTermsShow(VmImageTermsShowSettings settings) {
            var baseCommand = "az vm image terms show";
            AppendIfNonNull(ref baseCommand, "--offer", settings.Offer);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--urn", settings.Urn);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm monitor log show".
        /// Executes a query against the Log Analytics workspace linked with a vm.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmMonitorLog")]
        public dynamic VmMonitorLogShow(VmMonitorLogShowSettings settings) {
            var baseCommand = "az vm monitor log show";
            AppendIfNonNull(ref baseCommand, "--analytics-query", settings.AnalyticsQuery);
            AppendIfNonNull(ref baseCommand, "--timespan", settings.Timespan);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm nic add".
        /// Add existing NICs to a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmNic")]
        public dynamic VmNicAdd(VmNicAddSettings settings) {
            var baseCommand = "az vm nic add";
            AppendIfNonNull(ref baseCommand, "--nics", settings.Nics);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--primary-nic", settings.PrimaryNic);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm nic list".
        /// List the NICs available on a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmNic")]
        public dynamic VmNicList(VmNicListSettings settings) {
            var baseCommand = "az vm nic list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm nic remove".
        /// Remove NICs from a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmNic")]
        public dynamic VmNicRemove(VmNicRemoveSettings settings) {
            var baseCommand = "az vm nic remove";
            AppendIfNonNull(ref baseCommand, "--nics", settings.Nics);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--primary-nic", settings.PrimaryNic);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm nic set".
        /// Configure settings of a NIC attached to a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmNic")]
        public dynamic VmNicSet(VmNicSetSettings settings) {
            var baseCommand = "az vm nic set";
            AppendIfNonNull(ref baseCommand, "--nics", settings.Nics);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--primary-nic", settings.PrimaryNic);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm nic show".
        /// Display information for a NIC attached to a VM.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmNic")]
        public dynamic VmNicShow(VmNicShowSettings settings) {
            var baseCommand = "az vm nic show";
            AppendIfNonNull(ref baseCommand, "--nic", settings.Nic);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm run-command invoke".
        /// Execute a specific run command on a vm.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmRunCommand")]
        public dynamic VmRunCommandInvoke(VmRunCommandInvokeSettings settings) {
            var baseCommand = "az vm run-command invoke";
            AppendIfNonNull(ref baseCommand, "--command-id", settings.CommandId);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--scripts", settings.Scripts);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm run-command list".
        /// Lists all available run commands for a subscription in a location.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmRunCommand")]
        public dynamic VmRunCommandList(VmRunCommandListSettings settings) {
            var baseCommand = "az vm run-command list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm run-command show".
        /// Gets specific run command for a subscription in a location.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmRunCommand")]
        public dynamic VmRunCommandShow(VmRunCommandShowSettings settings) {
            var baseCommand = "az vm run-command show";
            AppendIfNonNull(ref baseCommand, "--command-id", settings.CommandId);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm secret add".
        /// Add a secret to a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmSecret")]
        public dynamic VmSecretAdd(VmSecretAddSettings settings) {
            var baseCommand = "az vm secret add";
            AppendIfNonNull(ref baseCommand, "--certificate", settings.Certificate);
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--certificate-store", settings.CertificateStore);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm secret format".
        /// Transform secrets into a form that can be used by VMs and VMSSes.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmSecret")]
        public dynamic VmSecretFormat(VmSecretFormatSettings settings) {
            var baseCommand = "az vm secret format";
            AppendIfNonNull(ref baseCommand, "--secrets", settings.Secrets);
            AppendIfNonNull(ref baseCommand, "--certificate-store", settings.CertificateStore);
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm secret list".
        /// List secrets on a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmSecret")]
        public dynamic VmSecretList(VmSecretListSettings settings) {
            var baseCommand = "az vm secret list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm secret remove".
        /// Remove a secret from a VM.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmSecret")]
        public dynamic VmSecretRemove(VmSecretRemoveSettings settings) {
            var baseCommand = "az vm secret remove";
            AppendIfNonNull(ref baseCommand, "--keyvault", settings.Keyvault);
            AppendIfNonNull(ref baseCommand, "--certificate", settings.Certificate);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm unmanaged-disk attach".
        /// Attach an unmanaged persistent disk to a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmUnmanagedDisk")]
        public dynamic VmUnmanagedDiskAttach(VmUnmanagedDiskAttachSettings settings) {
            var baseCommand = "az vm unmanaged-disk attach";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--caching", settings.Caching);
            AppendIfNonNull(ref baseCommand, "--lun", settings.Lun);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--new", settings.New);
            AppendIfNonNull(ref baseCommand, "--size-gb", settings.SizeGb);
            AppendIfNonNull(ref baseCommand, "--vhd-uri", settings.VhdUri);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm unmanaged-disk detach".
        /// Detach an unmanaged disk from a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmUnmanagedDisk")]
        public dynamic VmUnmanagedDiskDetach(VmUnmanagedDiskDetachSettings settings) {
            var baseCommand = "az vm unmanaged-disk detach";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vm-name", settings.VmName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm unmanaged-disk list".
        /// List unmanaged disks of a VM.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmUnmanagedDisk")]
        public dynamic VmUnmanagedDiskList(VmUnmanagedDiskListSettings settings) {
            var baseCommand = "az vm unmanaged-disk list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm user delete".
        /// Delete a user account from a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmUser")]
        public dynamic VmUserDelete(VmUserDeleteSettings settings) {
            var baseCommand = "az vm user delete";
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm user reset-ssh".
        /// Reset the SSH configuration on a VM.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmUser")]
        public dynamic VmUserResetSsh(VmUserResetSshSettings settings) {
            var baseCommand = "az vm user reset-ssh";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vm user update".
        /// Update a user account.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmUser")]
        public dynamic VmUserUpdate(VmUserUpdateSettings settings) {
            var baseCommand = "az vm user update";
            AppendIfNonNull(ref baseCommand, "--username", settings.Username);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--ssh-key-value", settings.SshKeyValue);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss create".
        /// Create an Azure Virtual Machine Scale Set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssCreate(VmssCreateSettings settings) {
            var baseCommand = "az vmss create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--computer-name-prefix", settings.ComputerNamePrefix);
            AppendIfNonNull(ref baseCommand, "--custom-data", settings.CustomData);
            AppendIfNonNull(ref baseCommand, "--disable-overprovision", settings.DisableOverprovision);
            AppendIfNonNull(ref baseCommand, "--eviction-policy", settings.EvictionPolicy);
            AppendIfNonNull(ref baseCommand, "--health-probe", settings.HealthProbe);
            AppendIfNonNull(ref baseCommand, "--image", settings.Image);
            AppendIfNonNull(ref baseCommand, "--instance-count", settings.InstanceCount);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--max-price", settings.MaxPrice);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--orchestration-mode", settings.OrchestrationMode);
            AppendIfNonNull(ref baseCommand, "--platform-fault-domain-count", settings.PlatformFaultDomainCount);
            AppendIfNonNull(ref baseCommand, "--ppg", settings.Ppg);
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--secrets", settings.Secrets);
            AppendIfNonNull(ref baseCommand, "--single-placement-group", settings.SinglePlacementGroup);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--terminate-notification-time", settings.TerminateNotificationTime);
            AppendIfNonNull(ref baseCommand, "--upgrade-policy-mode", settings.UpgradePolicyMode);
            AppendIfNonNull(ref baseCommand, "--validate", settings.Validate);
            AppendIfNonNull(ref baseCommand, "--vm-sku", settings.VmSku);
            AppendIfNonNull(ref baseCommand, "--zones", settings.Zones);
            AppendIfNonNull(ref baseCommand, "--admin-password", settings.AdminPassword);
            AppendIfNonNull(ref baseCommand, "--admin-username", settings.AdminUsername);
            AppendIfNonNull(ref baseCommand, "--authentication-type", settings.AuthenticationType);
            AppendIfNonNull(ref baseCommand, "--generate-ssh-keys", settings.GenerateSshKeys);
            AppendIfNonNull(ref baseCommand, "--ssh-dest-key-path", settings.SshDestKeyPath);
            AppendIfNonNull(ref baseCommand, "--ssh-key-values", settings.SshKeyValues);
            AppendIfNonNull(ref baseCommand, "--assign-identity", settings.AssignIdentity);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--plan-name", settings.PlanName);
            AppendIfNonNull(ref baseCommand, "--plan-product", settings.PlanProduct);
            AppendIfNonNull(ref baseCommand, "--plan-promotion-code", settings.PlanPromotionCode);
            AppendIfNonNull(ref baseCommand, "--plan-publisher", settings.PlanPublisher);
            AppendIfNonNull(ref baseCommand, "--accelerated-networking", settings.AcceleratedNetworking);
            AppendIfNonNull(ref baseCommand, "--asgs", settings.Asgs);
            AppendIfNonNull(ref baseCommand, "--dns-servers", settings.DnsServers);
            AppendIfNonNull(ref baseCommand, "--nsg", settings.Nsg);
            AppendIfNonNull(ref baseCommand, "--public-ip-address", settings.PublicIpAddress);
            AppendIfNonNull(ref baseCommand, "--public-ip-address-allocation", settings.PublicIpAddressAllocation);
            AppendIfNonNull(ref baseCommand, "--public-ip-address-dns-name", settings.PublicIpAddressDnsName);
            AppendIfNonNull(ref baseCommand, "--public-ip-per-vm", settings.PublicIpPerVm);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--subnet-address-prefix", settings.SubnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vm-domain-name", settings.VmDomainName);
            AppendIfNonNull(ref baseCommand, "--vnet-address-prefix", settings.VnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--app-gateway", settings.AppGateway);
            AppendIfNonNull(ref baseCommand, "--app-gateway-capacity", settings.AppGatewayCapacity);
            AppendIfNonNull(ref baseCommand, "--app-gateway-sku", settings.AppGatewaySku);
            AppendIfNonNull(ref baseCommand, "--app-gateway-subnet-address-prefix", settings.AppGatewaySubnetAddressPrefix);
            AppendIfNonNull(ref baseCommand, "--backend-pool-name", settings.BackendPoolName);
            AppendIfNonNull(ref baseCommand, "--backend-port", settings.BackendPort);
            AppendIfNonNull(ref baseCommand, "--lb", settings.Lb);
            AppendIfNonNull(ref baseCommand, "--lb-nat-pool-name", settings.LbNatPoolName);
            AppendIfNonNull(ref baseCommand, "--lb-sku", settings.LbSku);
            AppendIfNonNull(ref baseCommand, "--data-disk-caching", settings.DataDiskCaching);
            AppendIfNonNull(ref baseCommand, "--data-disk-sizes-gb", settings.DataDiskSizesGb);
            AppendIfNonNull(ref baseCommand, "--ephemeral-os-disk", settings.EphemeralOsDisk);
            AppendIfNonNull(ref baseCommand, "--os-disk-caching", settings.OsDiskCaching);
            AppendIfNonNull(ref baseCommand, "--os-disk-name", settings.OsDiskName);
            AppendIfNonNull(ref baseCommand, "--os-type", settings.OsType);
            AppendIfNonNull(ref baseCommand, "--storage-container-name", settings.StorageContainerName);
            AppendIfNonNull(ref baseCommand, "--storage-sku", settings.StorageSku);
            AppendIfNonNull(ref baseCommand, "--ultra-ssd-enabled", settings.UltraSsdEnabled);
            AppendIfNonNull(ref baseCommand, "--use-unmanaged-disk", settings.UseUnmanagedDisk);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss deallocate".
        /// Deallocate VMs within a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssDeallocate(VmssDeallocateSettings settings) {
            var baseCommand = "az vmss deallocate";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss delete".
        /// Deletes a VM scale set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssDelete(VmssDeleteSettings settings) {
            var baseCommand = "az vmss delete";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss delete-instances".
        /// Delete VMs within a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssDeleteInstances(VmssDeleteInstancesSettings settings) {
            var baseCommand = "az vmss delete-instances";
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss get-instance-view".
        /// View an instance of a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssGetInstanceView(VmssGetInstanceViewSettings settings) {
            var baseCommand = "az vmss get-instance-view";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss get-os-upgrade-history".
        /// Gets list of OS upgrades on a VM scale set instance.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssGetOsUpgradeHistory(VmssGetOsUpgradeHistorySettings settings) {
            var baseCommand = "az vmss get-os-upgrade-history";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss list".
        /// List VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssList(VmssListSettings settings) {
            var baseCommand = "az vmss list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss list-instance-connection-info".
        /// Get the IP address and port number used to connect to individual VM instances within a set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssListInstanceConnectionInfo(VmssListInstanceConnectionInfoSettings settings) {
            var baseCommand = "az vmss list-instance-connection-info";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss list-instance-public-ips".
        /// List public IP addresses of VM instances within a set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssListInstancePublicIps(VmssListInstancePublicIpsSettings settings) {
            var baseCommand = "az vmss list-instance-public-ips";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss list-instances".
        /// Gets a list of all virtual machines in a VM scale sets.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssListInstances(VmssListInstancesSettings settings) {
            var baseCommand = "az vmss list-instances";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--select", settings.Select);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss list-skus".
        /// Gets a list of SKUs available for your VM scale set, including the minimum and maximum VM instances allowed for each SKU.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssListSkus(VmssListSkusSettings settings) {
            var baseCommand = "az vmss list-skus";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss perform-maintenance".
        /// Perform maintenance on one or more virtual machines in a VM scale set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssPerformMaintenance(VmssPerformMaintenanceSettings settings) {
            var baseCommand = "az vmss perform-maintenance";
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss reimage".
        /// Reimage VMs within a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssReimage(VmssReimageSettings settings) {
            var baseCommand = "az vmss reimage";
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss restart".
        /// Restart VMs within a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssRestart(VmssRestartSettings settings) {
            var baseCommand = "az vmss restart";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss scale".
        /// Change the number of VMs within a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssScale(VmssScaleSettings settings) {
            var baseCommand = "az vmss scale";
            AppendIfNonNull(ref baseCommand, "--new-capacity", settings.NewCapacity);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss show".
        /// Get details on VMs within a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssShow(VmssShowSettings settings) {
            var baseCommand = "az vmss show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss start".
        /// Start VMs within a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssStart(VmssStartSettings settings) {
            var baseCommand = "az vmss start";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss stop".
        /// Power off (stop) VMs within a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssStop(VmssStopSettings settings) {
            var baseCommand = "az vmss stop";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--skip-shutdown", settings.SkipShutdown);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss update".
        /// Update a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssUpdate(VmssUpdateSettings settings) {
            var baseCommand = "az vmss update";
            AppendIfNonNull(ref baseCommand, "--enable-terminate-notification", settings.EnableTerminateNotification);
            AppendIfNonNull(ref baseCommand, "--license-type", settings.LicenseType);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--terminate-notification-time", settings.TerminateNotificationTime);
            AppendIfNonNull(ref baseCommand, "--ultra-ssd-enabled", settings.UltraSsdEnabled);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--protect-from-scale-in", settings.ProtectFromScaleIn);
            AppendIfNonNull(ref baseCommand, "--protect-from-scale-set-actions", settings.ProtectFromScaleSetActions);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss update-instances".
        /// Upgrade VMs within a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssUpdateInstances(VmssUpdateInstancesSettings settings) {
            var baseCommand = "az vmss update-instances";
            AppendIfNonNull(ref baseCommand, "--instance-ids", settings.InstanceIds);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss wait".
        /// Place the CLI in a waiting state until a condition of a scale set is met.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmss")]
        public dynamic VmssWait(VmssWaitSettings settings) {
            var baseCommand = "az vmss wait";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--created", settings.Created);
            AppendIfNonNull(ref baseCommand, "--custom", settings.Custom);
            AppendIfNonNull(ref baseCommand, "--deleted", settings.Deleted);
            AppendIfNonNull(ref baseCommand, "--exists", settings.Exists);
            AppendIfNonNull(ref baseCommand, "--interval", settings.Interval);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--updated", settings.Updated);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss diagnostics get-default-config".
        /// Show the default config file which defines data to be collected.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssDiagnostics")]
        public dynamic VmssDiagnosticsGetDefaultConfig(VmssDiagnosticsGetDefaultConfigSettings settings) {
            var baseCommand = "az vmss diagnostics get-default-config";
            AppendIfNonNull(ref baseCommand, "--is-windows-os", settings.IsWindowsOs);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss diagnostics set".
        /// Enable diagnostics on a VMSS.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssDiagnostics")]
        public dynamic VmssDiagnosticsSet(VmssDiagnosticsSetSettings settings) {
            var baseCommand = "az vmss diagnostics set";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--no-auto-upgrade", settings.NoAutoUpgrade);
            AppendIfNonNull(ref baseCommand, "--protected-settings", settings.ProtectedSettings);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss disk attach".
        /// Attach managed data disks to a scale set or its instances.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssDisk")]
        public dynamic VmssDiskAttach(VmssDiskAttachSettings settings) {
            var baseCommand = "az vmss disk attach";
            AppendIfNonNull(ref baseCommand, "--caching", settings.Caching);
            AppendIfNonNull(ref baseCommand, "--disk", settings.Disk);
            AppendIfNonNull(ref baseCommand, "--lun", settings.Lun);
            AppendIfNonNull(ref baseCommand, "--size-gb", settings.SizeGb);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss disk detach".
        /// Detach managed data disks from a scale set or its instances.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssDisk")]
        public dynamic VmssDiskDetach(VmssDiskDetachSettings settings) {
            var baseCommand = "az vmss disk detach";
            AppendIfNonNull(ref baseCommand, "--lun", settings.Lun);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss encryption disable".
        /// Disable the encryption on a VMSS with managed disks.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssEncryption")]
        public dynamic VmssEncryptionDisable(VmssEncryptionDisableSettings settings) {
            var baseCommand = "az vmss encryption disable";
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--volume-type", settings.VolumeType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss encryption enable".
        /// Encrypt a VMSS with managed disks.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssEncryption")]
        public dynamic VmssEncryptionEnable(VmssEncryptionEnableSettings settings) {
            var baseCommand = "az vmss encryption enable";
            AppendIfNonNull(ref baseCommand, "--disk-encryption-keyvault", settings.DiskEncryptionKeyvault);
            AppendIfNonNull(ref baseCommand, "--force", settings.Force);
            AppendIfNonNull(ref baseCommand, "--key-encryption-algorithm", settings.KeyEncryptionAlgorithm);
            AppendIfNonNull(ref baseCommand, "--key-encryption-key", settings.KeyEncryptionKey);
            AppendIfNonNull(ref baseCommand, "--key-encryption-keyvault", settings.KeyEncryptionKeyvault);
            AppendIfNonNull(ref baseCommand, "--volume-type", settings.VolumeType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss encryption show".
        /// Show encryption status.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssEncryption")]
        public dynamic VmssEncryptionShow(VmssEncryptionShowSettings settings) {
            var baseCommand = "az vmss encryption show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss extension delete".
        /// Delete an extension from a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtension")]
        public dynamic VmssExtensionDelete(VmssExtensionDeleteSettings settings) {
            var baseCommand = "az vmss extension delete";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss extension list".
        /// List extensions associated with a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtension")]
        public dynamic VmssExtensionList(VmssExtensionListSettings settings) {
            var baseCommand = "az vmss extension list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss extension set".
        /// Add an extension to a VMSS or update an existing extension.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtension")]
        public dynamic VmssExtensionSet(VmssExtensionSetSettings settings) {
            var baseCommand = "az vmss extension set";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--extension-instance-name", settings.ExtensionInstanceName);
            AppendIfNonNull(ref baseCommand, "--force-update", settings.ForceUpdate);
            AppendIfNonNull(ref baseCommand, "--no-auto-upgrade", settings.NoAutoUpgrade);
            AppendIfNonNull(ref baseCommand, "--no-wait", settings.NoWait);
            AppendIfNonNull(ref baseCommand, "--protected-settings", settings.ProtectedSettings);
            AppendIfNonNull(ref baseCommand, "--provision-after-extensions", settings.ProvisionAfterExtensions);
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss extension show".
        /// Show details on a VMSS extension.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtension")]
        public dynamic VmssExtensionShow(VmssExtensionShowSettings settings) {
            var baseCommand = "az vmss extension show";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss extension image list".
        /// List the information on available extensions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtensionImage")]
        public dynamic VmssExtensionImageList(VmssExtensionImageListSettings settings) {
            var baseCommand = "az vmss extension image list";
            AppendIfNonNull(ref baseCommand, "--latest", settings.Latest);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss extension image list-names".
        /// Gets a list of virtual machine extension image types.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtensionImage")]
        public dynamic VmssExtensionImageListNames(VmssExtensionImageListNamesSettings settings) {
            var baseCommand = "az vmss extension image list-names";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss extension image list-versions".
        /// Gets a list of virtual machine extension image versions.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtensionImage")]
        public dynamic VmssExtensionImageListVersions(VmssExtensionImageListVersionsSettings settings) {
            var baseCommand = "az vmss extension image list-versions";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--filter", settings.Filter);
            AppendIfNonNull(ref baseCommand, "--orderby", settings.Orderby);
            AppendIfNonNull(ref baseCommand, "--top", settings.Top);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss extension image show".
        /// Gets a virtual machine extension image.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssExtensionImage")]
        public dynamic VmssExtensionImageShow(VmssExtensionImageShowSettings settings) {
            var baseCommand = "az vmss extension image show";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--publisher", settings.Publisher);
            AppendIfNonNull(ref baseCommand, "--version", settings.Version);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss identity assign".
        /// Enable managed service identity on a VMSS.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssIdentity")]
        public dynamic VmssIdentityAssign(VmssIdentityAssignSettings settings) {
            var baseCommand = "az vmss identity assign";
            AppendIfNonNull(ref baseCommand, "--identities", settings.Identities);
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss identity remove".
        /// Remove user assigned identities from a VM scaleset.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssIdentity")]
        public dynamic VmssIdentityRemove(VmssIdentityRemoveSettings settings) {
            var baseCommand = "az vmss identity remove";
            AppendIfNonNull(ref baseCommand, "--identities", settings.Identities);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss identity show".
        /// Display VM scaleset's managed identity info.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssIdentity")]
        public dynamic VmssIdentityShow(VmssIdentityShowSettings settings) {
            var baseCommand = "az vmss identity show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss nic list".
        /// Gets all network interfaces in a virtual machine scale set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssNic")]
        public dynamic VmssNicList(VmssNicListSettings settings) {
            var baseCommand = "az vmss nic list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss nic list-vm-nics".
        /// Gets information about all network interfaces in a virtual machine in a virtual machine scale set.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssNic")]
        public dynamic VmssNicListVmNics(VmssNicListVmNicsSettings settings) {
            var baseCommand = "az vmss nic list-vm-nics";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss nic show".
        /// Get the specified network interface in a virtual machine scale set.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssNic")]
        public dynamic VmssNicShow(VmssNicShowSettings settings) {
            var baseCommand = "az vmss nic show";
            AppendIfNonNull(ref baseCommand, "--expand", settings.Expand);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--vmss-name", settings.VmssName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss rolling-upgrade cancel".
        /// Cancels the current virtual machine scale set rolling upgrade.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssRollingUpgrade")]
        public dynamic VmssRollingUpgradeCancel(VmssRollingUpgradeCancelSettings settings) {
            var baseCommand = "az vmss rolling-upgrade cancel";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss rolling-upgrade get-latest".
        /// Gets the status of the latest virtual machine scale set rolling upgrade.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssRollingUpgrade")]
        public dynamic VmssRollingUpgradeGetLatest(VmssRollingUpgradeGetLatestSettings settings) {
            var baseCommand = "az vmss rolling-upgrade get-latest";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss rolling-upgrade start".
        /// Starts a rolling upgrade to move all virtual machine scale set instances to the latest available Platform Image OS version.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssRollingUpgrade")]
        public dynamic VmssRollingUpgradeStart(VmssRollingUpgradeStartSettings settings) {
            var baseCommand = "az vmss rolling-upgrade start";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss run-command invoke".
        /// Execute a specific run command on a Virtual Machine Scale Set instance.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssRunCommand")]
        public dynamic VmssRunCommandInvoke(VmssRunCommandInvokeSettings settings) {
            var baseCommand = "az vmss run-command invoke";
            AppendIfNonNull(ref baseCommand, "--command-id", settings.CommandId);
            AppendIfNonNull(ref baseCommand, "--parameters", settings.Parameters);
            AppendIfNonNull(ref baseCommand, "--scripts", settings.Scripts);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--instance-id", settings.InstanceId);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss run-command list".
        /// Lists all available run commands for a subscription in a location.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssRunCommand")]
        public dynamic VmssRunCommandList(VmssRunCommandListSettings settings) {
            var baseCommand = "az vmss run-command list";
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az vmss run-command show".
        /// Gets specific run command for a subscription in a location.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzVmssRunCommand")]
        public dynamic VmssRunCommandShow(VmssRunCommandShowSettings settings) {
            var baseCommand = "az vmss run-command show";
            AppendIfNonNull(ref baseCommand, "--command-id", settings.CommandId);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp browse".
        /// Open a web app in a browser.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappBrowse(WebappBrowseSettings settings) {
            var baseCommand = "az webapp browse";
            AppendIfNonNull(ref baseCommand, "--logs", settings.Logs);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp create".
        /// Create a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappCreate(WebappCreateSettings settings) {
            var baseCommand = "az webapp create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--deployment-container-image-name", settings.DeploymentContainerImageName);
            AppendIfNonNull(ref baseCommand, "--deployment-local-git", settings.DeploymentLocalGit);
            AppendIfNonNull(ref baseCommand, "--deployment-source-branch", settings.DeploymentSourceBranch);
            AppendIfNonNull(ref baseCommand, "--deployment-source-url", settings.DeploymentSourceUrl);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-password", settings.DockerRegistryServerPassword);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-user", settings.DockerRegistryServerUser);
            AppendIfNonNull(ref baseCommand, "--multicontainer-config-file", settings.MulticontainerConfigFile);
            AppendIfNonNull(ref baseCommand, "--multicontainer-config-type", settings.MulticontainerConfigType);
            AppendIfNonNull(ref baseCommand, "--runtime", settings.Runtime);
            AppendIfNonNull(ref baseCommand, "--startup-file", settings.StartupFile);
            AppendIfNonNull(ref baseCommand, "--tags", settings.Tags);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp create-remote-connection".
        /// Creates a remote connection using a tcp tunnel to your web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappCreateRemoteConnection(WebappCreateRemoteConnectionSettings settings) {
            var baseCommand = "az webapp create-remote-connection";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp delete".
        /// Delete a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappDelete(WebappDeleteSettings settings) {
            var baseCommand = "az webapp delete";
            AppendIfNonNull(ref baseCommand, "--keep-dns-registration", settings.KeepDnsRegistration);
            AppendIfNonNull(ref baseCommand, "--keep-empty-plan", settings.KeepEmptyPlan);
            AppendIfNonNull(ref baseCommand, "--keep-metrics", settings.KeepMetrics);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp list".
        /// List web apps.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappList(WebappListSettings settings) {
            var baseCommand = "az webapp list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp list-runtimes".
        /// List available built-in stacks which can be used for web apps.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappListRuntimes(WebappListRuntimesSettings settings) {
            var baseCommand = "az webapp list-runtimes";
            AppendIfNonNull(ref baseCommand, "--linux", settings.Linux);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp restart".
        /// Restart a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappRestart(WebappRestartSettings settings) {
            var baseCommand = "az webapp restart";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp show".
        /// Get the details of a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappShow(WebappShowSettings settings) {
            var baseCommand = "az webapp show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp ssh".
        /// SSH command establishes a ssh session to the web container and developer would get a shell terminal remotely.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappSsh(WebappSshSettings settings) {
            var baseCommand = "az webapp ssh";
            AppendIfNonNull(ref baseCommand, "--port", settings.Port);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp start".
        /// Start a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappStart(WebappStartSettings settings) {
            var baseCommand = "az webapp start";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp stop".
        /// Stop a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappStop(WebappStopSettings settings) {
            var baseCommand = "az webapp stop";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp up".
        /// Create a webapp and deploy code from a local workspace to the app. The command is required to run from the folder where the code is present. Current support includes Node, Python, .NET Core and ASP.NET. Node, Python apps are created as Linux apps. .Net Core, ASP.NET apps are created as Windows apps.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappUp(WebappUpSettings settings) {
            var baseCommand = "az webapp up";
            AppendIfNonNull(ref baseCommand, "--dryrun", settings.Dryrun);
            AppendIfNonNull(ref baseCommand, "--launch-browser", settings.LaunchBrowser);
            AppendIfNonNull(ref baseCommand, "--location", settings.Location);
            AppendIfNonNull(ref baseCommand, "--logs", settings.Logs);
            AppendIfNonNull(ref baseCommand, "--plan", settings.Plan);
            AppendIfNonNull(ref baseCommand, "--sku", settings.Sku);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp update".
        /// Update a web app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebapp")]
        public dynamic WebappUpdate(WebappUpdateSettings settings) {
            var baseCommand = "az webapp update";
            AppendIfNonNull(ref baseCommand, "--client-affinity-enabled", settings.ClientAffinityEnabled);
            AppendIfNonNull(ref baseCommand, "--force-dns-registration", settings.ForceDnsRegistration);
            AppendIfNonNull(ref baseCommand, "--https-only", settings.HttpsOnly);
            AppendIfNonNull(ref baseCommand, "--skip-custom-domain-verification", settings.SkipCustomDomainVerification);
            AppendIfNonNull(ref baseCommand, "--skip-dns-registration", settings.SkipDnsRegistration);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ttl-in-seconds", settings.TtlInSeconds);
            AppendIfNonNull(ref baseCommand, "--add", settings.Add);
            AppendIfNonNull(ref baseCommand, "--force-string", settings.ForceString);
            AppendIfNonNull(ref baseCommand, "--remove", settings.Remove);
            AppendIfNonNull(ref baseCommand, "--set", settings.Set);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp auth show".
        /// Show the authentification settings for the webapp.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappAuth")]
        public dynamic WebappAuthShow(WebappAuthShowSettings settings) {
            var baseCommand = "az webapp auth show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp auth update".
        /// Update the authentication settings for the webapp.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappAuth")]
        public dynamic WebappAuthUpdate(WebappAuthUpdateSettings settings) {
            var baseCommand = "az webapp auth update";
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--allowed-external-redirect-urls", settings.AllowedExternalRedirectUrls);
            AppendIfNonNull(ref baseCommand, "--enabled", settings.Enabled);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--token-refresh-extension-hours", settings.TokenRefreshExtensionHours);
            AppendIfNonNull(ref baseCommand, "--token-store", settings.TokenStore);
            AppendIfNonNull(ref baseCommand, "--aad-allowed-token-audiences", settings.AadAllowedTokenAudiences);
            AppendIfNonNull(ref baseCommand, "--aad-client-id", settings.AadClientId);
            AppendIfNonNull(ref baseCommand, "--aad-client-secret", settings.AadClientSecret);
            AppendIfNonNull(ref baseCommand, "--aad-token-issuer-url", settings.AadTokenIssuerUrl);
            AppendIfNonNull(ref baseCommand, "--facebook-app-id", settings.FacebookAppId);
            AppendIfNonNull(ref baseCommand, "--facebook-app-secret", settings.FacebookAppSecret);
            AppendIfNonNull(ref baseCommand, "--facebook-oauth-scopes", settings.FacebookOauthScopes);
            AppendIfNonNull(ref baseCommand, "--google-client-id", settings.GoogleClientId);
            AppendIfNonNull(ref baseCommand, "--google-client-secret", settings.GoogleClientSecret);
            AppendIfNonNull(ref baseCommand, "--google-oauth-scopes", settings.GoogleOauthScopes);
            AppendIfNonNull(ref baseCommand, "--microsoft-account-client-id", settings.MicrosoftAccountClientId);
            AppendIfNonNull(ref baseCommand, "--microsoft-account-client-secret", settings.MicrosoftAccountClientSecret);
            AppendIfNonNull(ref baseCommand, "--microsoft-account-oauth-scopes", settings.MicrosoftAccountOauthScopes);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--twitter-consumer-key", settings.TwitterConsumerKey);
            AppendIfNonNull(ref baseCommand, "--twitter-consumer-secret", settings.TwitterConsumerSecret);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config set".
        /// Set a web app's configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfig")]
        public dynamic WebappConfigSet(WebappConfigSetSettings settings) {
            var baseCommand = "az webapp config set";
            AppendIfNonNull(ref baseCommand, "--always-on", settings.AlwaysOn);
            AppendIfNonNull(ref baseCommand, "--auto-heal-enabled", settings.AutoHealEnabled);
            AppendIfNonNull(ref baseCommand, "--ftps-state", settings.FtpsState);
            AppendIfNonNull(ref baseCommand, "--generic-configurations", settings.GenericConfigurations);
            AppendIfNonNull(ref baseCommand, "--http20-enabled", settings.Http20Enabled);
            AppendIfNonNull(ref baseCommand, "--java-container", settings.JavaContainer);
            AppendIfNonNull(ref baseCommand, "--java-container-version", settings.JavaContainerVersion);
            AppendIfNonNull(ref baseCommand, "--java-version", settings.JavaVersion);
            AppendIfNonNull(ref baseCommand, "--linux-fx-version", settings.LinuxFxVersion);
            AppendIfNonNull(ref baseCommand, "--min-tls-version", settings.MinTlsVersion);
            AppendIfNonNull(ref baseCommand, "--net-framework-version", settings.NetFrameworkVersion);
            AppendIfNonNull(ref baseCommand, "--number-of-workers", settings.NumberOfWorkers);
            AppendIfNonNull(ref baseCommand, "--php-version", settings.PhpVersion);
            AppendIfNonNull(ref baseCommand, "--python-version", settings.PythonVersion);
            AppendIfNonNull(ref baseCommand, "--remote-debugging-enabled", settings.RemoteDebuggingEnabled);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--startup-file", settings.StartupFile);
            AppendIfNonNull(ref baseCommand, "--use-32bit-worker-process", settings.Use32BitWorkerProcess);
            AppendIfNonNull(ref baseCommand, "--web-sockets-enabled", settings.WebSocketsEnabled);
            AppendIfNonNull(ref baseCommand, "--windows-fx-version", settings.WindowsFxVersion);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config show".
        /// Get the details of a web app's configuration.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfig")]
        public dynamic WebappConfigShow(WebappConfigShowSettings settings) {
            var baseCommand = "az webapp config show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config access-restriction add".
        /// Adds an Access Restriction to the webapp, or updates if the Action of the Ip-Address or Subnet already exists.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAccessRestriction")]
        public dynamic WebappConfigAccessRestrictionAdd(WebappConfigAccessRestrictionAddSettings settings) {
            var baseCommand = "az webapp config access-restriction add";
            AppendIfNonNull(ref baseCommand, "--priority", settings.Priority);
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--description", settings.Description);
            AppendIfNonNull(ref baseCommand, "--ignore-missing-endpoint", settings.IgnoreMissingEndpoint);
            AppendIfNonNull(ref baseCommand, "--ip-address", settings.IpAddress);
            AppendIfNonNull(ref baseCommand, "--scm-site", settings.ScmSite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet-name", settings.VnetName);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config access-restriction remove".
        /// Removes an Access Restriction from the webapp.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAccessRestriction")]
        public dynamic WebappConfigAccessRestrictionRemove(WebappConfigAccessRestrictionRemoveSettings settings) {
            var baseCommand = "az webapp config access-restriction remove";
            AppendIfNonNull(ref baseCommand, "--rule-name", settings.RuleName);
            AppendIfNonNull(ref baseCommand, "--scm-site", settings.ScmSite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config access-restriction set".
        /// Sets if SCM site is using the same restrictions as the main site.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAccessRestriction")]
        public dynamic WebappConfigAccessRestrictionSet(WebappConfigAccessRestrictionSetSettings settings) {
            var baseCommand = "az webapp config access-restriction set";
            AppendIfNonNull(ref baseCommand, "--use-same-restrictions-for-scm-site", settings.UseSameRestrictionsForScmSite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config access-restriction show".
        /// Show Access Restriction settings for webapp.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAccessRestriction")]
        public dynamic WebappConfigAccessRestrictionShow(WebappConfigAccessRestrictionShowSettings settings) {
            var baseCommand = "az webapp config access-restriction show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config appsettings delete".
        /// Delete web app settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAppsettings")]
        public dynamic WebappConfigAppsettingsDelete(WebappConfigAppsettingsDeleteSettings settings) {
            var baseCommand = "az webapp config appsettings delete";
            AppendIfNonNull(ref baseCommand, "--setting-names", settings.SettingNames);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config appsettings list".
        /// Get the details of a web app's settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAppsettings")]
        public dynamic WebappConfigAppsettingsList(WebappConfigAppsettingsListSettings settings) {
            var baseCommand = "az webapp config appsettings list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config appsettings set".
        /// Set a web app's settings.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigAppsettings")]
        public dynamic WebappConfigAppsettingsSet(WebappConfigAppsettingsSetSettings settings) {
            var baseCommand = "az webapp config appsettings set";
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--slot-settings", settings.SlotSettings);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config backup create".
        /// Create a backup of a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigBackup")]
        public dynamic WebappConfigBackupCreate(WebappConfigBackupCreateSettings settings) {
            var baseCommand = "az webapp config backup create";
            AppendIfNonNull(ref baseCommand, "--container-url", settings.ContainerUrl);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--backup-name", settings.BackupName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--db-connection-string", settings.DbConnectionString);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--db-type", settings.DbType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config backup list".
        /// List backups of a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigBackup")]
        public dynamic WebappConfigBackupList(WebappConfigBackupListSettings settings) {
            var baseCommand = "az webapp config backup list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config backup restore".
        /// Restore a web app from a backup.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigBackup")]
        public dynamic WebappConfigBackupRestore(WebappConfigBackupRestoreSettings settings) {
            var baseCommand = "az webapp config backup restore";
            AppendIfNonNull(ref baseCommand, "--backup-name", settings.BackupName);
            AppendIfNonNull(ref baseCommand, "--container-url", settings.ContainerUrl);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--ignore-hostname-conflict", settings.IgnoreHostnameConflict);
            AppendIfNonNull(ref baseCommand, "--overwrite", settings.Overwrite);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--target-name", settings.TargetName);
            AppendIfNonNull(ref baseCommand, "--db-connection-string", settings.DbConnectionString);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--db-type", settings.DbType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config backup show".
        /// Show the backup schedule for a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigBackup")]
        public dynamic WebappConfigBackupShow(WebappConfigBackupShowSettings settings) {
            var baseCommand = "az webapp config backup show";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config backup update".
        /// Configure a new backup schedule for a web app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigBackup")]
        public dynamic WebappConfigBackupUpdate(WebappConfigBackupUpdateSettings settings) {
            var baseCommand = "az webapp config backup update";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--backup-name", settings.BackupName);
            AppendIfNonNull(ref baseCommand, "--container-url", settings.ContainerUrl);
            AppendIfNonNull(ref baseCommand, "--frequency", settings.Frequency);
            AppendIfNonNull(ref baseCommand, "--retain-one", settings.RetainOne);
            AppendIfNonNull(ref baseCommand, "--retention", settings.Retention);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--db-connection-string", settings.DbConnectionString);
            AppendIfNonNull(ref baseCommand, "--db-name", settings.DbName);
            AppendIfNonNull(ref baseCommand, "--db-type", settings.DbType);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config connection-string delete".
        /// Delete a web app's connection strings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigConnectionString")]
        public dynamic WebappConfigConnectionStringDelete(WebappConfigConnectionStringDeleteSettings settings) {
            var baseCommand = "az webapp config connection-string delete";
            AppendIfNonNull(ref baseCommand, "--setting-names", settings.SettingNames);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config connection-string list".
        /// Get a web app's connection strings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigConnectionString")]
        public dynamic WebappConfigConnectionStringList(WebappConfigConnectionStringListSettings settings) {
            var baseCommand = "az webapp config connection-string list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config connection-string set".
        /// Update a web app's connection strings.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigConnectionString")]
        public dynamic WebappConfigConnectionStringSet(WebappConfigConnectionStringSetSettings settings) {
            var baseCommand = "az webapp config connection-string set";
            AppendIfNonNull(ref baseCommand, "--connection-string-type", settings.ConnectionStringType);
            AppendIfNonNull(ref baseCommand, "--settings", settings.Settings);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--slot-settings", settings.SlotSettings);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config container delete".
        /// Delete a web app container's settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigContainer")]
        public dynamic WebappConfigContainerDelete(WebappConfigContainerDeleteSettings settings) {
            var baseCommand = "az webapp config container delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config container set".
        /// Set a web app container's settings.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigContainer")]
        public dynamic WebappConfigContainerSet(WebappConfigContainerSetSettings settings) {
            var baseCommand = "az webapp config container set";
            AppendIfNonNull(ref baseCommand, "--docker-custom-image-name", settings.DockerCustomImageName);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-password", settings.DockerRegistryServerPassword);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-url", settings.DockerRegistryServerUrl);
            AppendIfNonNull(ref baseCommand, "--docker-registry-server-user", settings.DockerRegistryServerUser);
            AppendIfNonNull(ref baseCommand, "--enable-app-service-storage", settings.EnableAppServiceStorage);
            AppendIfNonNull(ref baseCommand, "--multicontainer-config-file", settings.MulticontainerConfigFile);
            AppendIfNonNull(ref baseCommand, "--multicontainer-config-type", settings.MulticontainerConfigType);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config container show".
        /// Get details of a web app container's settings.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigContainer")]
        public dynamic WebappConfigContainerShow(WebappConfigContainerShowSettings settings) {
            var baseCommand = "az webapp config container show";
            AppendIfNonNull(ref baseCommand, "--show-multicontainer-config", settings.ShowMulticontainerConfig);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config hostname add".
        /// Bind a hostname to a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigHostname")]
        public dynamic WebappConfigHostnameAdd(WebappConfigHostnameAddSettings settings) {
            var baseCommand = "az webapp config hostname add";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--hostname", settings.Hostname);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config hostname delete".
        /// Unbind a hostname from a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigHostname")]
        public dynamic WebappConfigHostnameDelete(WebappConfigHostnameDeleteSettings settings) {
            var baseCommand = "az webapp config hostname delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--hostname", settings.Hostname);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config hostname get-external-ip".
        /// Get the external-facing IP address for a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigHostname")]
        public dynamic WebappConfigHostnameGetExternalIp(WebappConfigHostnameGetExternalIpSettings settings) {
            var baseCommand = "az webapp config hostname get-external-ip";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config hostname list".
        /// List all hostname bindings for a web app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigHostname")]
        public dynamic WebappConfigHostnameList(WebappConfigHostnameListSettings settings) {
            var baseCommand = "az webapp config hostname list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--webapp-name", settings.WebappName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config snapshot list".
        /// List the restorable snapshots for a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSnapshot")]
        public dynamic WebappConfigSnapshotList(WebappConfigSnapshotListSettings settings) {
            var baseCommand = "az webapp config snapshot list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config snapshot restore".
        /// Restore a web app snapshot.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSnapshot")]
        public dynamic WebappConfigSnapshotRestore(WebappConfigSnapshotRestoreSettings settings) {
            var baseCommand = "az webapp config snapshot restore";
            AppendIfNonNull(ref baseCommand, "--time", settings.Time);
            AppendIfNonNull(ref baseCommand, "--restore-content-only", settings.RestoreContentOnly);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--source-name", settings.SourceName);
            AppendIfNonNull(ref baseCommand, "--source-resource-group", settings.SourceResourceGroup);
            AppendIfNonNull(ref baseCommand, "--source-slot", settings.SourceSlot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config ssl bind".
        /// Bind an SSL certificate to a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSsl")]
        public dynamic WebappConfigSslBind(WebappConfigSslBindSettings settings) {
            var baseCommand = "az webapp config ssl bind";
            AppendIfNonNull(ref baseCommand, "--certificate-thumbprint", settings.CertificateThumbprint);
            AppendIfNonNull(ref baseCommand, "--ssl-type", settings.SslType);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config ssl delete".
        /// Delete an SSL certificate from a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSsl")]
        public dynamic WebappConfigSslDelete(WebappConfigSslDeleteSettings settings) {
            var baseCommand = "az webapp config ssl delete";
            AppendIfNonNull(ref baseCommand, "--certificate-thumbprint", settings.CertificateThumbprint);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config ssl list".
        /// List SSL certificates for a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSsl")]
        public dynamic WebappConfigSslList(WebappConfigSslListSettings settings) {
            var baseCommand = "az webapp config ssl list";
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config ssl unbind".
        /// Unbind an SSL certificate from a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSsl")]
        public dynamic WebappConfigSslUnbind(WebappConfigSslUnbindSettings settings) {
            var baseCommand = "az webapp config ssl unbind";
            AppendIfNonNull(ref baseCommand, "--certificate-thumbprint", settings.CertificateThumbprint);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config ssl upload".
        /// Upload an SSL certificate to a web app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigSsl")]
        public dynamic WebappConfigSslUpload(WebappConfigSslUploadSettings settings) {
            var baseCommand = "az webapp config ssl upload";
            AppendIfNonNull(ref baseCommand, "--certificate-file", settings.CertificateFile);
            AppendIfNonNull(ref baseCommand, "--certificate-password", settings.CertificatePassword);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config storage-account add".
        /// Add an Azure storage account configuration to a web app. (Linux Web Apps and Windows Containers Web Apps Only).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigStorageAccount")]
        public dynamic WebappConfigStorageAccountAdd(WebappConfigStorageAccountAddSettings settings) {
            var baseCommand = "az webapp config storage-account add";
            AppendIfNonNull(ref baseCommand, "--access-key", settings.AccessKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--custom-id", settings.CustomId);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--storage-type", settings.StorageType);
            AppendIfNonNull(ref baseCommand, "--mount-path", settings.MountPath);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--slot-setting", settings.SlotSetting);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config storage-account delete".
        /// Delete a web app's Azure storage account configuration. (Linux Web Apps and Windows Containers Web Apps Only).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigStorageAccount")]
        public dynamic WebappConfigStorageAccountDelete(WebappConfigStorageAccountDeleteSettings settings) {
            var baseCommand = "az webapp config storage-account delete";
            AppendIfNonNull(ref baseCommand, "--custom-id", settings.CustomId);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config storage-account list".
        /// Get a web app's Azure storage account configurations. (Linux Web Apps and Windows Containers Web Apps Only).
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigStorageAccount")]
        public dynamic WebappConfigStorageAccountList(WebappConfigStorageAccountListSettings settings) {
            var baseCommand = "az webapp config storage-account list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp config storage-account update".
        /// Update an existing Azure storage account configuration on a web app. (Linux Web Apps and Windows Containers Web Apps Only).  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappConfigStorageAccount")]
        public dynamic WebappConfigStorageAccountUpdate(WebappConfigStorageAccountUpdateSettings settings) {
            var baseCommand = "az webapp config storage-account update";
            AppendIfNonNull(ref baseCommand, "--custom-id", settings.CustomId);
            AppendIfNonNull(ref baseCommand, "--access-key", settings.AccessKey);
            AppendIfNonNull(ref baseCommand, "--account-name", settings.AccountName);
            AppendIfNonNull(ref baseCommand, "--mount-path", settings.MountPath);
            AppendIfNonNull(ref baseCommand, "--share-name", settings.ShareName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--slot-setting", settings.SlotSetting);
            AppendIfNonNull(ref baseCommand, "--storage-type", settings.StorageType);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp cors add".
        /// Add allowed origins.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappCors")]
        public dynamic WebappCorsAdd(WebappCorsAddSettings settings) {
            var baseCommand = "az webapp cors add";
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp cors remove".
        /// Remove allowed origins.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappCors")]
        public dynamic WebappCorsRemove(WebappCorsRemoveSettings settings) {
            var baseCommand = "az webapp cors remove";
            AppendIfNonNull(ref baseCommand, "--allowed-origins", settings.AllowedOrigins);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp cors show".
        /// Show allowed origins.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappCors")]
        public dynamic WebappCorsShow(WebappCorsShowSettings settings) {
            var baseCommand = "az webapp cors show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deleted list".
        /// List web apps that have been deleted.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeleted")]
        public dynamic WebappDeletedList(WebappDeletedListSettings settings) {
            var baseCommand = "az webapp deleted list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deleted restore".
        /// Restore a deleted web app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeleted")]
        public dynamic WebappDeletedRestore(WebappDeletedRestoreSettings settings) {
            var baseCommand = "az webapp deleted restore";
            AppendIfNonNull(ref baseCommand, "--deleted-id", settings.DeletedId);
            AppendIfNonNull(ref baseCommand, "--restore-content-only", settings.RestoreContentOnly);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment list-publishing-credentials".
        /// Get the details for available web app publishing credentials.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeployment")]
        public dynamic WebappDeploymentListPublishingCredentials(WebappDeploymentListPublishingCredentialsSettings settings) {
            var baseCommand = "az webapp deployment list-publishing-credentials";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment list-publishing-profiles".
        /// Get the details for available web app deployment profiles.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeployment")]
        public dynamic WebappDeploymentListPublishingProfiles(WebappDeploymentListPublishingProfilesSettings settings) {
            var baseCommand = "az webapp deployment list-publishing-profiles";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment container config".
        /// Configure continuous deployment via containers.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentContainer")]
        public dynamic WebappDeploymentContainerConfig(WebappDeploymentContainerConfigSettings settings) {
            var baseCommand = "az webapp deployment container config";
            AppendIfNonNull(ref baseCommand, "--enable-cd", settings.EnableCd);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment container show-cd-url".
        /// Get the URL which can be used to configure webhooks for continuous deployment.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentContainer")]
        public dynamic WebappDeploymentContainerShowCdUrl(WebappDeploymentContainerShowCdUrlSettings settings) {
            var baseCommand = "az webapp deployment container show-cd-url";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment slot auto-swap".
        /// Configure deployment slot auto swap.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSlot")]
        public dynamic WebappDeploymentSlotAutoSwap(WebappDeploymentSlotAutoSwapSettings settings) {
            var baseCommand = "az webapp deployment slot auto-swap";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--auto-swap-slot", settings.AutoSwapSlot);
            AppendIfNonNull(ref baseCommand, "--disable", settings.Disable);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment slot create".
        /// Create a deployment slot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSlot")]
        public dynamic WebappDeploymentSlotCreate(WebappDeploymentSlotCreateSettings settings) {
            var baseCommand = "az webapp deployment slot create";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--configuration-source", settings.ConfigurationSource);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment slot delete".
        /// Delete a deployment slot.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSlot")]
        public dynamic WebappDeploymentSlotDelete(WebappDeploymentSlotDeleteSettings settings) {
            var baseCommand = "az webapp deployment slot delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment slot list".
        /// List all deployment slots.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSlot")]
        public dynamic WebappDeploymentSlotList(WebappDeploymentSlotListSettings settings) {
            var baseCommand = "az webapp deployment slot list";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment slot swap".
        /// Change deployment slots for a web app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSlot")]
        public dynamic WebappDeploymentSlotSwap(WebappDeploymentSlotSwapSettings settings) {
            var baseCommand = "az webapp deployment slot swap";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--action", settings.Action);
            AppendIfNonNull(ref baseCommand, "--target-slot", settings.TargetSlot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment source config".
        /// Manage deployment from git or Mercurial repositories.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public dynamic WebappDeploymentSourceConfig(WebappDeploymentSourceConfigSettings settings) {
            var baseCommand = "az webapp deployment source config";
            AppendIfNonNull(ref baseCommand, "--repo-url", settings.RepoUrl);
            AppendIfNonNull(ref baseCommand, "--branch", settings.Branch);
            AppendIfNonNull(ref baseCommand, "--git-token", settings.GitToken);
            AppendIfNonNull(ref baseCommand, "--manual-integration", settings.ManualIntegration);
            AppendIfNonNull(ref baseCommand, "--repository-type", settings.RepositoryType);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--app-working-dir", settings.AppWorkingDir);
            AppendIfNonNull(ref baseCommand, "--cd-account-create", settings.CdAccountCreate);
            AppendIfNonNull(ref baseCommand, "--cd-app-type", settings.CdAppType);
            AppendIfNonNull(ref baseCommand, "--cd-project-url", settings.CdProjectUrl);
            AppendIfNonNull(ref baseCommand, "--nodejs-task-runner", settings.NodejsTaskRunner);
            AppendIfNonNull(ref baseCommand, "--private-repo-password", settings.PrivateRepoPassword);
            AppendIfNonNull(ref baseCommand, "--private-repo-username", settings.PrivateRepoUsername);
            AppendIfNonNull(ref baseCommand, "--python-framework", settings.PythonFramework);
            AppendIfNonNull(ref baseCommand, "--python-version", settings.PythonVersion);
            AppendIfNonNull(ref baseCommand, "--slot-swap", settings.SlotSwap);
            AppendIfNonNull(ref baseCommand, "--test", settings.Test);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment source config-local-git".
        /// Get a URL for a git repository endpoint to clone and push to for web app deployment.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public dynamic WebappDeploymentSourceConfigLocalGit(WebappDeploymentSourceConfigLocalGitSettings settings) {
            var baseCommand = "az webapp deployment source config-local-git";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment source config-zip".
        /// Perform deployment using the kudu zip push deployment for a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public dynamic WebappDeploymentSourceConfigZip(WebappDeploymentSourceConfigZipSettings settings) {
            var baseCommand = "az webapp deployment source config-zip";
            AppendIfNonNull(ref baseCommand, "--src", settings.Src);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--timeout", settings.Timeout);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment source delete".
        /// Delete a source control deployment configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public dynamic WebappDeploymentSourceDelete(WebappDeploymentSourceDeleteSettings settings) {
            var baseCommand = "az webapp deployment source delete";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment source show".
        /// Get the details of a source control deployment configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public dynamic WebappDeploymentSourceShow(WebappDeploymentSourceShowSettings settings) {
            var baseCommand = "az webapp deployment source show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment source sync".
        /// Synchronize from the repository. Only needed under manual integration mode.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public dynamic WebappDeploymentSourceSync(WebappDeploymentSourceSyncSettings settings) {
            var baseCommand = "az webapp deployment source sync";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment source update-token".
        /// Update source control token cached in Azure app service.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentSource")]
        public dynamic WebappDeploymentSourceUpdateToken(WebappDeploymentSourceUpdateTokenSettings settings) {
            var baseCommand = "az webapp deployment source update-token";
            AppendIfNonNull(ref baseCommand, "--git-token", settings.GitToken);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment user set".
        /// Update deployment credentials.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentUser")]
        public dynamic WebappDeploymentUserSet(WebappDeploymentUserSetSettings settings) {
            var baseCommand = "az webapp deployment user set";
            AppendIfNonNull(ref baseCommand, "--user-name", settings.UserName);
            AppendIfNonNull(ref baseCommand, "--password", settings.Password);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp deployment user show".
        /// Gets publishing user.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappDeploymentUser")]
        public dynamic WebappDeploymentUserShow(WebappDeploymentUserShowSettings settings) {
            var baseCommand = "az webapp deployment user show";
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp hybrid-connection add".
        /// Add a hybrid-connection to a webapp.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappHybridConnection")]
        public dynamic WebappHybridConnectionAdd(WebappHybridConnectionAddSettings settings) {
            var baseCommand = "az webapp hybrid-connection add";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection", settings.HybridConnection);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp hybrid-connection list".
        /// List the hybrid-connections on a webapp.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappHybridConnection")]
        public dynamic WebappHybridConnectionList(WebappHybridConnectionListSettings settings) {
            var baseCommand = "az webapp hybrid-connection list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp hybrid-connection remove".
        /// Remove a hybrid-connection from a webapp.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappHybridConnection")]
        public dynamic WebappHybridConnectionRemove(WebappHybridConnectionRemoveSettings settings) {
            var baseCommand = "az webapp hybrid-connection remove";
            AppendIfNonNull(ref baseCommand, "--hybrid-connection", settings.HybridConnection);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--namespace", settings.Namespace);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp identity assign".
        /// Assign or disable managed service identity to the web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappIdentity")]
        public dynamic WebappIdentityAssign(WebappIdentityAssignSettings settings) {
            var baseCommand = "az webapp identity assign";
            AppendIfNonNull(ref baseCommand, "--role", settings.Role);
            AppendIfNonNull(ref baseCommand, "--scope", settings.Scope);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp identity remove".
        /// Disable web app's managed service identity.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappIdentity")]
        public dynamic WebappIdentityRemove(WebappIdentityRemoveSettings settings) {
            var baseCommand = "az webapp identity remove";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp identity show".
        /// Display web app's managed service identity.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappIdentity")]
        public dynamic WebappIdentityShow(WebappIdentityShowSettings settings) {
            var baseCommand = "az webapp identity show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp log config".
        /// Configure logging for a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappLog")]
        public dynamic WebappLogConfig(WebappLogConfigSettings settings) {
            var baseCommand = "az webapp log config";
            AppendIfNonNull(ref baseCommand, "--application-logging", settings.ApplicationLogging);
            AppendIfNonNull(ref baseCommand, "--detailed-error-messages", settings.DetailedErrorMessages);
            AppendIfNonNull(ref baseCommand, "--docker-container-logging", settings.DockerContainerLogging);
            AppendIfNonNull(ref baseCommand, "--failed-request-tracing", settings.FailedRequestTracing);
            AppendIfNonNull(ref baseCommand, "--level", settings.Level);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--web-server-logging", settings.WebServerLogging);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp log download".
        /// Download a web app's log history as a zip file.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappLog")]
        public dynamic WebappLogDownload(WebappLogDownloadSettings settings) {
            var baseCommand = "az webapp log download";
            AppendIfNonNull(ref baseCommand, "--log-file", settings.LogFile);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp log show".
        /// Get the details of a web app's logging configuration.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappLog")]
        public dynamic WebappLogShow(WebappLogShowSettings settings) {
            var baseCommand = "az webapp log show";
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp log tail".
        /// Start live log tracing for a web app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappLog")]
        public dynamic WebappLogTail(WebappLogTailSettings settings) {
            var baseCommand = "az webapp log tail";
            AppendIfNonNull(ref baseCommand, "--provider", settings.Provider);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp traffic-routing clear".
        /// Clear the routing rules and send all traffic to production.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappTrafficRouting")]
        public dynamic WebappTrafficRoutingClear(WebappTrafficRoutingClearSettings settings) {
            var baseCommand = "az webapp traffic-routing clear";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp traffic-routing set".
        /// Configure routing traffic to deployment slots.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappTrafficRouting")]
        public dynamic WebappTrafficRoutingSet(WebappTrafficRoutingSetSettings settings) {
            var baseCommand = "az webapp traffic-routing set";
            AppendIfNonNull(ref baseCommand, "--distribution", settings.Distribution);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp traffic-routing show".
        /// Display the current distribution of traffic across slots.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappTrafficRouting")]
        public dynamic WebappTrafficRoutingShow(WebappTrafficRoutingShowSettings settings) {
            var baseCommand = "az webapp traffic-routing show";
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp vnet-integration add".
        /// Add a regional virtual network integration to a webapp.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappVnetIntegration")]
        public dynamic WebappVnetIntegrationAdd(WebappVnetIntegrationAddSettings settings) {
            var baseCommand = "az webapp vnet-integration add";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subnet", settings.Subnet);
            AppendIfNonNull(ref baseCommand, "--vnet", settings.Vnet);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp vnet-integration list".
        /// List the virtual network integrations on a webapp.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappVnetIntegration")]
        public dynamic WebappVnetIntegrationList(WebappVnetIntegrationListSettings settings) {
            var baseCommand = "az webapp vnet-integration list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp vnet-integration remove".
        /// Remove a regional virtual network integration from webapp.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappVnetIntegration")]
        public dynamic WebappVnetIntegrationRemove(WebappVnetIntegrationRemoveSettings settings) {
            var baseCommand = "az webapp vnet-integration remove";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp webjob continuous list".
        /// List all continuous webjobs on a selected web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobContinuous")]
        public dynamic WebappWebjobContinuousList(WebappWebjobContinuousListSettings settings) {
            var baseCommand = "az webapp webjob continuous list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp webjob continuous remove".
        /// Delete a specific continuous webjob.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobContinuous")]
        public dynamic WebappWebjobContinuousRemove(WebappWebjobContinuousRemoveSettings settings) {
            var baseCommand = "az webapp webjob continuous remove";
            AppendIfNonNull(ref baseCommand, "--webjob-name", settings.WebjobName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp webjob continuous start".
        /// Start a specific continuous webjob on a selected web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobContinuous")]
        public dynamic WebappWebjobContinuousStart(WebappWebjobContinuousStartSettings settings) {
            var baseCommand = "az webapp webjob continuous start";
            AppendIfNonNull(ref baseCommand, "--webjob-name", settings.WebjobName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp webjob continuous stop".
        /// Stop a specific continuous webjob.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobContinuous")]
        public dynamic WebappWebjobContinuousStop(WebappWebjobContinuousStopSettings settings) {
            var baseCommand = "az webapp webjob continuous stop";
            AppendIfNonNull(ref baseCommand, "--webjob-name", settings.WebjobName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp webjob triggered list".
        /// List all triggered webjobs hosted on a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobTriggered")]
        public dynamic WebappWebjobTriggeredList(WebappWebjobTriggeredListSettings settings) {
            var baseCommand = "az webapp webjob triggered list";
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp webjob triggered log".
        /// Get history of a specific triggered webjob hosted on a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobTriggered")]
        public dynamic WebappWebjobTriggeredLog(WebappWebjobTriggeredLogSettings settings) {
            var baseCommand = "az webapp webjob triggered log";
            AppendIfNonNull(ref baseCommand, "--webjob-name", settings.WebjobName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp webjob triggered remove".
        /// Delete a specific triggered webjob hosted on a web app.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobTriggered")]
        public dynamic WebappWebjobTriggeredRemove(WebappWebjobTriggeredRemoveSettings settings) {
            var baseCommand = "az webapp webjob triggered remove";
            AppendIfNonNull(ref baseCommand, "--webjob-name", settings.WebjobName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

        /// <summary>
        /// "az webapp webjob triggered run".
        /// Run a specific triggered webjob hosted on a web app.  
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="settings">The settings.</param>
        [CakeMethodAlias]
        [CakeAliasCategory("AzWebappWebjobTriggered")]
        public dynamic WebappWebjobTriggeredRun(WebappWebjobTriggeredRunSettings settings) {
            var baseCommand = "az webapp webjob triggered run";
            AppendIfNonNull(ref baseCommand, "--webjob-name", settings.WebjobName);
            AppendIfNonNull(ref baseCommand, "--slot", settings.Slot);
            AppendIfNonNull(ref baseCommand, "--ids", settings.Ids);
            AppendIfNonNull(ref baseCommand, "--name", settings.Name);
            AppendIfNonNull(ref baseCommand, "--resource-group", settings.ResourceGroup);
            AppendIfNonNull(ref baseCommand, "--subscription", settings.Subscription);
            AppendIfNonNull(ref baseCommand, "--debug", settings.Debug);
            AppendIfNonNull(ref baseCommand, "--help", settings.Help);
            AppendIfNonNull(ref baseCommand, "--output", settings.Output);
            AppendIfNonNull(ref baseCommand, "--query", settings.Query);
            AppendIfNonNull(ref baseCommand, "--verbose", settings.Verbose);
            return Execute(baseCommand, settings);
        }

    }
}

